
F746disco-audio-processing-RTOS-TP-SIA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c280  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016200  0801c450  0801c450  0002c450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032650  08032650  000500c8  2**0
                  CONTENTS
  4 .ARM          00000008  08032650  08032650  00042650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032658  08032658  000500c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08032658  08032658  00042658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803265c  0803265c  0004265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08032660  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004af5c  200000c8  08032728  000500c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2004b024  08032728  0005b024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004fb21  00000000  00000000  000500f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a5db  00000000  00000000  0009fc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003718  00000000  00000000  000aa1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000032f0  00000000  00000000  000ad910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039fff  00000000  00000000  000b0c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004a58b  00000000  00000000  000eabff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129710  00000000  00000000  0013518a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  0025e89a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ef60  00000000  00000000  0025e95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003a35  00000000  00000000  0026d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801c438 	.word	0x0801c438

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	0801c438 	.word	0x0801c438

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8

	//uiDisplayBasic();

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000eae:	4a36      	ldr	r2, [pc, #216]	; (8000f88 <audioLoop+0xe0>)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4836      	ldr	r0, [pc, #216]	; (8000f8c <audioLoop+0xe4>)
 8000eb4:	f01a f8a0 	bl	801aff8 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000eb8:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <audioLoop+0xe8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]

	arm_rfft_fast_init_f32(&FFTStruct, FFTLength);
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	4834      	ldr	r0, [pc, #208]	; (8000f94 <audioLoop+0xec>)
 8000ec4:	f018 ff5e 	bl	8019d84 <arm_rfft_fast_init_f32>

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <audioLoop+0xf0>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed6:	4931      	ldr	r1, [pc, #196]	; (8000f9c <audioLoop+0xf4>)
 8000ed8:	4831      	ldr	r0, [pc, #196]	; (8000fa0 <audioLoop+0xf8>)
 8000eda:	f004 ff35 	bl	8005d48 <start_Audio_Processing>

	/* main audio loop */
	while (1) {

		accumulateInputLevels();
 8000ede:	f000 f86f 	bl	8000fc0 <accumulateInputLevels>
		count++;
 8000ee2:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <audioLoop+0xfc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a2e      	ldr	r2, [pc, #184]	; (8000fa4 <audioLoop+0xfc>)
 8000eea:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <audioLoop+0xfc>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b13      	cmp	r3, #19
 8000ef2:	dd2a      	ble.n	8000f4a <audioLoop+0xa2>
			count = 0;
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <audioLoop+0xfc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
			inputLevelLavr = inputLevelL * 0.05;
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <audioLoop+0x100>)
 8000efc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f00:	a31f      	add	r3, pc, #124	; (adr r3, 8000f80 <audioLoop+0xd8>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f7ff fbef 	bl	80006e8 <__aeabi_dmul>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4927      	ldr	r1, [pc, #156]	; (8000fac <audioLoop+0x104>)
 8000f10:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelRavr = inputLevelR * 0.05;
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <audioLoop+0x108>)
 8000f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f1a:	a319      	add	r3, pc, #100	; (adr r3, 8000f80 <audioLoop+0xd8>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	f7ff fbe2 	bl	80006e8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4922      	ldr	r1, [pc, #136]	; (8000fb4 <audioLoop+0x10c>)
 8000f2a:	e9c1 2300 	strd	r2, r3, [r1]
			//osSignalSet(uiTaskHandle, 0x0002);
			//uiDisplayInputLevel(inputLevelL, inputLevelR);
			inputLevelL = 0.;
 8000f2e:	491e      	ldr	r1, [pc, #120]	; (8000fa8 <audioLoop+0x100>)
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 8000f3c:	491c      	ldr	r1, [pc, #112]	; (8000fb0 <audioLoop+0x108>)
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	e9c1 2300 	strd	r2, r3, [r1]
		}

		osSignalWait (0x0002, osWaitForever);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f015 ff72 	bl	8016e3c <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 1st half block */
		processAudio(buf_output, buf_input);
 8000f58:	4910      	ldr	r1, [pc, #64]	; (8000f9c <audioLoop+0xf4>)
 8000f5a:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <audioLoop+0xf8>)
 8000f5c:	f000 f910 	bl	8001180 <processAudio>

		osSignalWait (0x0001, osWaitForever);
 8000f60:	463b      	mov	r3, r7
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	2101      	movs	r1, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f015 ff67 	bl	8016e3c <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <audioLoop+0x110>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <audioLoop+0x114>)
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f901 	bl	8001180 <processAudio>
		accumulateInputLevels();
 8000f7e:	e7ae      	b.n	8000ede <audioLoop+0x36>
 8000f80:	9999999a 	.word	0x9999999a
 8000f84:	3fa99999 	.word	0x3fa99999
 8000f88:	0004e200 	.word	0x0004e200
 8000f8c:	c0096000 	.word	0xc0096000
 8000f90:	20009f60 	.word	0x20009f60
 8000f94:	20008d38 	.word	0x20008d38
 8000f98:	2000a190 	.word	0x2000a190
 8000f9c:	20008538 	.word	0x20008538
 8000fa0:	20009150 	.word	0x20009150
 8000fa4:	200000e4 	.word	0x200000e4
 8000fa8:	200000f0 	.word	0x200000f0
 8000fac:	20009f50 	.word	0x20009f50
 8000fb0:	200000f8 	.word	0x200000f8
 8000fb4:	20009f58 	.word	0x20009f58
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	e016      	b.n	8000ffe <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 8000fd0:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <accumulateInputLevels+0x10c>)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd8:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 8000fda:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	dd05      	ble.n	8000fee <accumulateInputLevels+0x2e>
			lvl += v;
 8000fe2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	4413      	add	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e004      	b.n	8000ff8 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 8000fee:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001004:	d3e4      	bcc.n	8000fd0 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f7ff faf4 	bl	80005f4 <__aeabi_ui2d>
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <accumulateInputLevels+0x110>)
 8001012:	f7ff fc93 	bl	800093c <__aeabi_ddiv>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <accumulateInputLevels+0x114>)
 8001024:	f7ff fc8a 	bl	800093c <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <accumulateInputLevels+0x118>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff f9a1 	bl	800037c <__adddf3>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4926      	ldr	r1, [pc, #152]	; (80010d8 <accumulateInputLevels+0x118>)
 8001040:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001048:	2301      	movs	r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	e016      	b.n	800107c <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 800104e:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <accumulateInputLevels+0x10c>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001056:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 8001058:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800105c:	2b00      	cmp	r3, #0
 800105e:	dd05      	ble.n	800106c <accumulateInputLevels+0xac>
			lvl += v;
 8001060:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e004      	b.n	8001076 <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 800106c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3302      	adds	r3, #2
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001082:	d3e4      	bcc.n	800104e <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff fab5 	bl	80005f4 <__aeabi_ui2d>
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <accumulateInputLevels+0x110>)
 8001090:	f7ff fc54 	bl	800093c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <accumulateInputLevels+0x114>)
 80010a2:	f7ff fc4b 	bl	800093c <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <accumulateInputLevels+0x11c>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff f962 	bl	800037c <__adddf3>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <accumulateInputLevels+0x11c>)
 80010be:	e9c1 2300 	strd	r2, r3, [r1]

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20008538 	.word	0x20008538
 80010d0:	40900000 	.word	0x40900000
 80010d4:	40e00000 	.word	0x40e00000
 80010d8:	200000f0 	.word	0x200000f0
 80010dc:	200000f8 	.word	0x200000f8

080010e0 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_FULL;
	osSignalSet(defaultTaskHandle, 0x0001);
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <HAL_SAI_RxCpltCallback+0x1c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f015 fe64 	bl	8016dbc <osSignalSet>
	return;
 80010f4:	bf00      	nop
}
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20009fe8 	.word	0x20009fe8

08001100 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_HALF;
	osSignalSet(defaultTaskHandle, 0x0002);
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_SAI_RxHalfCpltCallback+0x1c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f015 fe54 	bl	8016dbc <osSignalSet>
	return;
 8001114:	bf00      	nop
}
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20009fe8 	.word	0x20009fe8

08001120 <readFromAudioScratch>:
// --------------------------- Audio scratch buffer ---------------------------

/**
 * Read a sample from the audio scratch buffer in SDRAM at position "pos"
 */
static float readFromAudioScratch(int pos) {
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <readFromAudioScratch+0x2c>)
 800112a:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
	return *(__IO float*) pSdramAddress;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	ee07 3a90 	vmov	s15, r3

}
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	c0096000 	.word	0xc0096000

08001150 <writeToAudioScratch>:

/**
 * Write the given value to the audio scratch buffer in SDRAM at position "pos"
 */
static void writeToAudioScratch(float val, int pos) {
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	ed87 0a01 	vstr	s0, [r7, #4]
 800115a:	6038      	str	r0, [r7, #0]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <writeToAudioScratch+0x2c>)
 800115e:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
	*(__IO float*) pSdramAddress = val;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	601a      	str	r2, [r3, #0]

}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	c0096000 	.word	0xc0096000

08001180 <processAudio>:
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */

static void processAudio(int16_t *out, int16_t *in) {
 8001180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001184:	b096      	sub	sp, #88	; 0x58
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 800118c:	f003 fff6 	bl	800517c <LED_On>

	/* 16KHz -> 1000ms*16 = 1s*/
	int delay = (int) 16 * delayMs;
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <processAudio+0xa4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48

	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001198:	2300      	movs	r3, #0
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
 800119c:	f000 bc99 	b.w	8001ad2 <processAudio+0x952>

		//modulo AUDIO_SCRATCH_SIZE
		if(posScratch>AUDIO_SCRATCH_SIZE-1){
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <processAudio+0xa8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <processAudio+0xac>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	dd02      	ble.n	80011b0 <processAudio+0x30>
			posScratch=0;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <processAudio+0xa8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
		}

		if(fillScratch<delay){
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <processAudio+0xb0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dd40      	ble.n	800123c <processAudio+0xbc>
			writeToAudioScratch((float)in[n],posScratch);
 80011ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <processAudio+0xa8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f7ff ffba 	bl	8001150 <writeToAudioScratch>
			posScratch+=1;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <processAudio+0xa8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <processAudio+0xa8>)
 80011e4:	6013      	str	r3, [r2, #0]
			out[n] = (in[n]*volume)/100;//out[n] = (in[n]*volume*depth)/100;
 80011e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <processAudio+0xb4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	fb03 f302 	mul.w	r3, r3, r2
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <processAudio+0xb8>)
 80011fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001202:	1152      	asrs	r2, r2, #5
 8001204:	17db      	asrs	r3, r3, #31
 8001206:	1ad1      	subs	r1, r2, r3
 8001208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	b20a      	sxth	r2, r1
 8001212:	801a      	strh	r2, [r3, #0]
			fillScratch+=1;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <processAudio+0xb0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <processAudio+0xb0>)
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	f000 bc55 	b.w	8001acc <processAudio+0x94c>
 8001222:	bf00      	nop
 8001224:	20000364 	.word	0x20000364
 8001228:	200000e8 	.word	0x200000e8
 800122c:	000270ff 	.word	0x000270ff
 8001230:	200000ec 	.word	0x200000ec
 8001234:	2000000c 	.word	0x2000000c
 8001238:	51eb851f 	.word	0x51eb851f
		}else{
			int j = posScratch-delay;
 800123c:	4be2      	ldr	r3, [pc, #904]	; (80015c8 <processAudio+0x448>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	653b      	str	r3, [r7, #80]	; 0x50

			if(j<0){
 8001246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001248:	2b00      	cmp	r3, #0
 800124a:	da03      	bge.n	8001254 <processAudio+0xd4>
				j=j+AUDIO_SCRATCH_SIZE;
 800124c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800124e:	4bdf      	ldr	r3, [pc, #892]	; (80015cc <processAudio+0x44c>)
 8001250:	4413      	add	r3, r2
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
			}
			/* old:  */
			int16_t old = (int16_t) readFromAudioScratch(j);
 8001254:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001256:	f7ff ff63 	bl	8001120 <readFromAudioScratch>
 800125a:	eef0 7a40 	vmov.f32	s15, s0
 800125e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001262:	ee17 3a90 	vmov	r3, s15
 8001266:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			//float new = (float)in[n]+(float)old/100*((float)delayFeed);
			float new = (float)in[n]+(float)old/100*((float)delayFeed)*100;//effect robotic avec flanger
 800126a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128a:	ed9f 6ad3 	vldr	s12, [pc, #844]	; 80015d8 <processAudio+0x458>
 800128e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001292:	4bcf      	ldr	r3, [pc, #828]	; (80015d0 <processAudio+0x450>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a2:	eddf 6acd 	vldr	s13, [pc, #820]	; 80015d8 <processAudio+0x458>
 80012a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40


			float newchorus1 = (float)in[n]+(float)old/100*((float)delayFeed);
 80012b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d2:	ed9f 6ac1 	vldr	s12, [pc, #772]	; 80015d8 <processAudio+0x458>
 80012d6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80012da:	4bbd      	ldr	r3, [pc, #756]	; (80015d0 <processAudio+0x450>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			float newchorus2 = (float)in[n]+(float)old/100*((float)delayFeed+0.1);
 80012f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001306:	ee17 0a90 	vmov	r0, s15
 800130a:	f7ff f995 	bl	8000638 <__aeabi_f2d>
 800130e:	4604      	mov	r4, r0
 8001310:	460d      	mov	r5, r1
 8001312:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131e:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80015d8 <processAudio+0x458>
 8001322:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001326:	ee16 0a90 	vmov	r0, s13
 800132a:	f7ff f985 	bl	8000638 <__aeabi_f2d>
 800132e:	4680      	mov	r8, r0
 8001330:	4689      	mov	r9, r1
 8001332:	4ba7      	ldr	r3, [pc, #668]	; (80015d0 <processAudio+0x450>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	ee17 0a90 	vmov	r0, s15
 8001342:	f7ff f979 	bl	8000638 <__aeabi_f2d>
 8001346:	a398      	add	r3, pc, #608	; (adr r3, 80015a8 <processAudio+0x428>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff f816 	bl	800037c <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4640      	mov	r0, r8
 8001356:	4649      	mov	r1, r9
 8001358:	f7ff f9c6 	bl	80006e8 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4620      	mov	r0, r4
 8001362:	4629      	mov	r1, r5
 8001364:	f7ff f80a 	bl	800037c <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fbcc 	bl	8000b0c <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
			float newchorus3 = (float)in[n]+(float)old/100*((float)delayFeed+0.2);
 8001378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	4413      	add	r3, r2
 8001380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138c:	ee17 0a90 	vmov	r0, s15
 8001390:	f7ff f952 	bl	8000638 <__aeabi_f2d>
 8001394:	4604      	mov	r4, r0
 8001396:	460d      	mov	r5, r1
 8001398:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80015d8 <processAudio+0x458>
 80013a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013ac:	ee16 0a90 	vmov	r0, s13
 80013b0:	f7ff f942 	bl	8000638 <__aeabi_f2d>
 80013b4:	4680      	mov	r8, r0
 80013b6:	4689      	mov	r9, r1
 80013b8:	4b85      	ldr	r3, [pc, #532]	; (80015d0 <processAudio+0x450>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c4:	ee17 0a90 	vmov	r0, s15
 80013c8:	f7ff f936 	bl	8000638 <__aeabi_f2d>
 80013cc:	a378      	add	r3, pc, #480	; (adr r3, 80015b0 <processAudio+0x430>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7fe ffd3 	bl	800037c <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4640      	mov	r0, r8
 80013dc:	4649      	mov	r1, r9
 80013de:	f7ff f983 	bl	80006e8 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7fe ffc7 	bl	800037c <__adddf3>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fb89 	bl	8000b0c <__aeabi_d2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
			float newchorus4 = (float)in[n]+(float)old/100*((float)delayFeed+0.3);
 80013fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4413      	add	r3, r2
 8001406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001412:	ee17 0a90 	vmov	r0, s15
 8001416:	f7ff f90f 	bl	8000638 <__aeabi_f2d>
 800141a:	4604      	mov	r4, r0
 800141c:	460d      	mov	r5, r1
 800141e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80015d8 <processAudio+0x458>
 800142e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001432:	ee16 0a90 	vmov	r0, s13
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_f2d>
 800143a:	4680      	mov	r8, r0
 800143c:	4689      	mov	r9, r1
 800143e:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <processAudio+0x450>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144a:	ee17 0a90 	vmov	r0, s15
 800144e:	f7ff f8f3 	bl	8000638 <__aeabi_f2d>
 8001452:	a359      	add	r3, pc, #356	; (adr r3, 80015b8 <processAudio+0x438>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7fe ff90 	bl	800037c <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4640      	mov	r0, r8
 8001462:	4649      	mov	r1, r9
 8001464:	f7ff f940 	bl	80006e8 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4620      	mov	r0, r4
 800146e:	4629      	mov	r1, r5
 8001470:	f7fe ff84 	bl	800037c <__adddf3>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff fb46 	bl	8000b0c <__aeabi_d2f>
 8001480:	4603      	mov	r3, r0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
			float newchorus5 = (float)in[n]+(float)old/100*((float)delayFeed+0.4);
 8001484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001498:	ee17 0a90 	vmov	r0, s15
 800149c:	f7ff f8cc 	bl	8000638 <__aeabi_f2d>
 80014a0:	4604      	mov	r4, r0
 80014a2:	460d      	mov	r5, r1
 80014a4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80015d8 <processAudio+0x458>
 80014b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014b8:	ee16 0a90 	vmov	r0, s13
 80014bc:	f7ff f8bc 	bl	8000638 <__aeabi_f2d>
 80014c0:	4680      	mov	r8, r0
 80014c2:	4689      	mov	r9, r1
 80014c4:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <processAudio+0x450>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d0:	ee17 0a90 	vmov	r0, s15
 80014d4:	f7ff f8b0 	bl	8000638 <__aeabi_f2d>
 80014d8:	a339      	add	r3, pc, #228	; (adr r3, 80015c0 <processAudio+0x440>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7fe ff4d 	bl	800037c <__adddf3>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4640      	mov	r0, r8
 80014e8:	4649      	mov	r1, r9
 80014ea:	f7ff f8fd 	bl	80006e8 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4620      	mov	r0, r4
 80014f4:	4629      	mov	r1, r5
 80014f6:	f7fe ff41 	bl	800037c <__adddf3>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb03 	bl	8000b0c <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
			float newchorus6 = (float)in[n]+(float)old/100*((float)delayFeed+0.5);
 800150a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151e:	ee17 0a90 	vmov	r0, s15
 8001522:	f7ff f889 	bl	8000638 <__aeabi_f2d>
 8001526:	4604      	mov	r4, r0
 8001528:	460d      	mov	r5, r1
 800152a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001536:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80015d8 <processAudio+0x458>
 800153a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800153e:	ee16 0a90 	vmov	r0, s13
 8001542:	f7ff f879 	bl	8000638 <__aeabi_f2d>
 8001546:	4680      	mov	r8, r0
 8001548:	4689      	mov	r9, r1
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <processAudio+0x450>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7ff f86d 	bl	8000638 <__aeabi_f2d>
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <processAudio+0x454>)
 8001564:	f7fe ff0a 	bl	800037c <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4640      	mov	r0, r8
 800156e:	4649      	mov	r1, r9
 8001570:	f7ff f8ba 	bl	80006e8 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7fe fefe 	bl	800037c <__adddf3>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fac0 	bl	8000b0c <__aeabi_d2f>
 800158c:	4603      	mov	r3, r0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
			float newchorus7 = (float)in[n]+(float)old/100*((float)delayFeed+0.6);
 8001590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	4413      	add	r3, r2
 8001598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	e01c      	b.n	80015dc <processAudio+0x45c>
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	9999999a 	.word	0x9999999a
 80015ac:	3fb99999 	.word	0x3fb99999
 80015b0:	9999999a 	.word	0x9999999a
 80015b4:	3fc99999 	.word	0x3fc99999
 80015b8:	33333333 	.word	0x33333333
 80015bc:	3fd33333 	.word	0x3fd33333
 80015c0:	9999999a 	.word	0x9999999a
 80015c4:	3fd99999 	.word	0x3fd99999
 80015c8:	200000e8 	.word	0x200000e8
 80015cc:	00027100 	.word	0x00027100
 80015d0:	20000368 	.word	0x20000368
 80015d4:	3fe00000 	.word	0x3fe00000
 80015d8:	42c80000 	.word	0x42c80000
 80015dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e0:	ee17 0a90 	vmov	r0, s15
 80015e4:	f7ff f828 	bl	8000638 <__aeabi_f2d>
 80015e8:	4604      	mov	r4, r0
 80015ea:	460d      	mov	r5, r1
 80015ec:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80015d8 <processAudio+0x458>
 80015fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001600:	ee16 0a90 	vmov	r0, s13
 8001604:	f7ff f818 	bl	8000638 <__aeabi_f2d>
 8001608:	4680      	mov	r8, r0
 800160a:	4689      	mov	r9, r1
 800160c:	4be6      	ldr	r3, [pc, #920]	; (80019a8 <processAudio+0x828>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001618:	ee17 0a90 	vmov	r0, s15
 800161c:	f7ff f80c 	bl	8000638 <__aeabi_f2d>
 8001620:	a3d7      	add	r3, pc, #860	; (adr r3, 8001980 <processAudio+0x800>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe fea9 	bl	800037c <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4640      	mov	r0, r8
 8001630:	4649      	mov	r1, r9
 8001632:	f7ff f859 	bl	80006e8 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4620      	mov	r0, r4
 800163c:	4629      	mov	r1, r5
 800163e:	f7fe fe9d 	bl	800037c <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa5f 	bl	8000b0c <__aeabi_d2f>
 800164e:	4603      	mov	r3, r0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
			float newchorus8 = (float)in[n]+(float)old/100*((float)delayFeed+0.7);
 8001652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4413      	add	r3, r2
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	ee17 0a90 	vmov	r0, s15
 800166a:	f7fe ffe5 	bl	8000638 <__aeabi_f2d>
 800166e:	4604      	mov	r4, r0
 8001670:	460d      	mov	r5, r1
 8001672:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	ed9f 7acd 	vldr	s14, [pc, #820]	; 80019b4 <processAudio+0x834>
 8001682:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001686:	ee16 0a90 	vmov	r0, s13
 800168a:	f7fe ffd5 	bl	8000638 <__aeabi_f2d>
 800168e:	4680      	mov	r8, r0
 8001690:	4689      	mov	r9, r1
 8001692:	4bc5      	ldr	r3, [pc, #788]	; (80019a8 <processAudio+0x828>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	ee17 0a90 	vmov	r0, s15
 80016a2:	f7fe ffc9 	bl	8000638 <__aeabi_f2d>
 80016a6:	a3b8      	add	r3, pc, #736	; (adr r3, 8001988 <processAudio+0x808>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe fe66 	bl	800037c <__adddf3>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4640      	mov	r0, r8
 80016b6:	4649      	mov	r1, r9
 80016b8:	f7ff f816 	bl	80006e8 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7fe fe5a 	bl	800037c <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa1c 	bl	8000b0c <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	623b      	str	r3, [r7, #32]
			float newchorus9 = (float)in[n]+(float)old/100*((float)delayFeed+0.8);
 80016d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ec:	ee17 0a90 	vmov	r0, s15
 80016f0:	f7fe ffa2 	bl	8000638 <__aeabi_f2d>
 80016f4:	4604      	mov	r4, r0
 80016f6:	460d      	mov	r5, r1
 80016f8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001704:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80019b4 <processAudio+0x834>
 8001708:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800170c:	ee16 0a90 	vmov	r0, s13
 8001710:	f7fe ff92 	bl	8000638 <__aeabi_f2d>
 8001714:	4680      	mov	r8, r0
 8001716:	4689      	mov	r9, r1
 8001718:	4ba3      	ldr	r3, [pc, #652]	; (80019a8 <processAudio+0x828>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001724:	ee17 0a90 	vmov	r0, s15
 8001728:	f7fe ff86 	bl	8000638 <__aeabi_f2d>
 800172c:	a398      	add	r3, pc, #608	; (adr r3, 8001990 <processAudio+0x810>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe fe23 	bl	800037c <__adddf3>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4640      	mov	r0, r8
 800173c:	4649      	mov	r1, r9
 800173e:	f7fe ffd3 	bl	80006e8 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7fe fe17 	bl	800037c <__adddf3>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff f9d9 	bl	8000b0c <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	61fb      	str	r3, [r7, #28]
			float newchorus10 = (float)in[n]+(float)old/100*((float)delayFeed+0.90);
 800175e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	4413      	add	r3, r2
 8001766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe ff5f 	bl	8000638 <__aeabi_f2d>
 800177a:	4604      	mov	r4, r0
 800177c:	460d      	mov	r5, r1
 800177e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80019b4 <processAudio+0x834>
 800178e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001792:	ee16 0a90 	vmov	r0, s13
 8001796:	f7fe ff4f 	bl	8000638 <__aeabi_f2d>
 800179a:	4680      	mov	r8, r0
 800179c:	4689      	mov	r9, r1
 800179e:	4b82      	ldr	r3, [pc, #520]	; (80019a8 <processAudio+0x828>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017aa:	ee17 0a90 	vmov	r0, s15
 80017ae:	f7fe ff43 	bl	8000638 <__aeabi_f2d>
 80017b2:	a379      	add	r3, pc, #484	; (adr r3, 8001998 <processAudio+0x818>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe fde0 	bl	800037c <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4640      	mov	r0, r8
 80017c2:	4649      	mov	r1, r9
 80017c4:	f7fe ff90 	bl	80006e8 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4620      	mov	r0, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	f7fe fdd4 	bl	800037c <__adddf3>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f7ff f996 	bl	8000b0c <__aeabi_d2f>
 80017e0:	4603      	mov	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
			float newchorus11= (float)in[n]+(float)old/100*((float)delayFeed+1.0);
 80017e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f8:	ee17 0a90 	vmov	r0, s15
 80017fc:	f7fe ff1c 	bl	8000638 <__aeabi_f2d>
 8001800:	4604      	mov	r4, r0
 8001802:	460d      	mov	r5, r1
 8001804:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001810:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80019b4 <processAudio+0x834>
 8001814:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001818:	ee16 0a90 	vmov	r0, s13
 800181c:	f7fe ff0c 	bl	8000638 <__aeabi_f2d>
 8001820:	4680      	mov	r8, r0
 8001822:	4689      	mov	r9, r1
 8001824:	4b60      	ldr	r3, [pc, #384]	; (80019a8 <processAudio+0x828>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001830:	ee17 0a90 	vmov	r0, s15
 8001834:	f7fe ff00 	bl	8000638 <__aeabi_f2d>
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <processAudio+0x82c>)
 800183e:	f7fe fd9d 	bl	800037c <__adddf3>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4640      	mov	r0, r8
 8001848:	4649      	mov	r1, r9
 800184a:	f7fe ff4d 	bl	80006e8 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4620      	mov	r0, r4
 8001854:	4629      	mov	r1, r5
 8001856:	f7fe fd91 	bl	800037c <__adddf3>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f953 	bl	8000b0c <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	617b      	str	r3, [r7, #20]
			float newchorus12= (float)in[n]+(float)old/100*((float)delayFeed+1.1);
 800186a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	ee17 0a90 	vmov	r0, s15
 8001882:	f7fe fed9 	bl	8000638 <__aeabi_f2d>
 8001886:	4604      	mov	r4, r0
 8001888:	460d      	mov	r5, r1
 800188a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80019b4 <processAudio+0x834>
 800189a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800189e:	ee16 0a90 	vmov	r0, s13
 80018a2:	f7fe fec9 	bl	8000638 <__aeabi_f2d>
 80018a6:	4680      	mov	r8, r0
 80018a8:	4689      	mov	r9, r1
 80018aa:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <processAudio+0x828>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b6:	ee17 0a90 	vmov	r0, s15
 80018ba:	f7fe febd 	bl	8000638 <__aeabi_f2d>
 80018be:	a338      	add	r3, pc, #224	; (adr r3, 80019a0 <processAudio+0x820>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fd5a 	bl	800037c <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4640      	mov	r0, r8
 80018ce:	4649      	mov	r1, r9
 80018d0:	f7fe ff0a 	bl	80006e8 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fd4e 	bl	800037c <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f910 	bl	8000b0c <__aeabi_d2f>
 80018ec:	4603      	mov	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]
			float newchorus13 = (float)in[n]+(float)old/100*((float)delayFeed+1.2);
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fe96 	bl	8000638 <__aeabi_f2d>
 800190c:	4604      	mov	r4, r0
 800190e:	460d      	mov	r5, r1
 8001910:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80019b4 <processAudio+0x834>
 8001920:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001924:	ee16 0a90 	vmov	r0, s13
 8001928:	f7fe fe86 	bl	8000638 <__aeabi_f2d>
 800192c:	4680      	mov	r8, r0
 800192e:	4689      	mov	r9, r1
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <processAudio+0x828>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193c:	ee17 0a90 	vmov	r0, s15
 8001940:	f7fe fe7a 	bl	8000638 <__aeabi_f2d>
 8001944:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <processAudio+0x830>)
 800194a:	f7fe fd17 	bl	800037c <__adddf3>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4640      	mov	r0, r8
 8001954:	4649      	mov	r1, r9
 8001956:	f7fe fec7 	bl	80006e8 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fd0b 	bl	800037c <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f8cd 	bl	8000b0c <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	60fb      	str	r3, [r7, #12]
			float newchorus14 = (float)in[n]+(float)old/100*((float)delayFeed+1.3);
 8001976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001978:	e01e      	b.n	80019b8 <processAudio+0x838>
 800197a:	bf00      	nop
 800197c:	f3af 8000 	nop.w
 8001980:	33333333 	.word	0x33333333
 8001984:	3fe33333 	.word	0x3fe33333
 8001988:	66666666 	.word	0x66666666
 800198c:	3fe66666 	.word	0x3fe66666
 8001990:	9999999a 	.word	0x9999999a
 8001994:	3fe99999 	.word	0x3fe99999
 8001998:	cccccccd 	.word	0xcccccccd
 800199c:	3feccccc 	.word	0x3feccccc
 80019a0:	9999999a 	.word	0x9999999a
 80019a4:	3ff19999 	.word	0x3ff19999
 80019a8:	20000368 	.word	0x20000368
 80019ac:	3ff00000 	.word	0x3ff00000
 80019b0:	3ff33333 	.word	0x3ff33333
 80019b4:	42c80000 	.word	0x42c80000
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ca:	ee17 0a90 	vmov	r0, s15
 80019ce:	f7fe fe33 	bl	8000638 <__aeabi_f2d>
 80019d2:	4604      	mov	r4, r0
 80019d4:	460d      	mov	r5, r1
 80019d6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e2:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 80019b4 <processAudio+0x834>
 80019e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019ea:	ee16 0a90 	vmov	r0, s13
 80019ee:	f7fe fe23 	bl	8000638 <__aeabi_f2d>
 80019f2:	4680      	mov	r8, r0
 80019f4:	4689      	mov	r9, r1
 80019f6:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <processAudio+0x9d0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a02:	ee17 0a90 	vmov	r0, s15
 8001a06:	f7fe fe17 	bl	8000638 <__aeabi_f2d>
 8001a0a:	a34f      	add	r3, pc, #316	; (adr r3, 8001b48 <processAudio+0x9c8>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fcb4 	bl	800037c <__adddf3>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4640      	mov	r0, r8
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	f7fe fe64 	bl	80006e8 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4620      	mov	r0, r4
 8001a26:	4629      	mov	r1, r5
 8001a28:	f7fe fca8 	bl	800037c <__adddf3>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7ff f86a 	bl	8000b0c <__aeabi_d2f>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60bb      	str	r3, [r7, #8]

			//		///////delay
			out[n]= (float)volume*((new*depth)+((float)in[n]*(1.0f-depth)))/100.0f;
 8001a3c:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <processAudio+0x9d4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <processAudio+0x9d8>)
 8001a4a:	edd3 6a00 	vldr	s13, [r3]
 8001a4e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <processAudio+0x9d8>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8001a74:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001a78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a84:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001b5c <processAudio+0x9dc>
 8001a88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a98:	ee17 2a90 	vmov	r2, s15
 8001a9c:	b212      	sxth	r2, r2
 8001a9e:	801a      	strh	r2, [r3, #0]
			//out[n]= (float)volume*((new*depth)+((float)in[n]*(1.0f-depth)))/100.0f ; //out[n]= (volume*depth)/100;
			//float new = in[n]+(float)old/100*(delayFeed); //échantillons actuels + les anciens * le mélange (feedback)
			//writeToAudioScratch((float)new,posScratch);
			//posScratch+=1;
			//out[n]= (volume*depth)/100;
			writeToAudioScratch((float)out[n],posScratch);
 8001aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <processAudio+0x9e0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	eeb0 0a67 	vmov.f32	s0, s15
 8001abe:	f7ff fb47 	bl	8001150 <writeToAudioScratch>
			posScratch+=1;
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <processAudio+0x9e0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <processAudio+0x9e0>)
 8001aca:	6013      	str	r3, [r2, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ace:	3301      	adds	r3, #1
 8001ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad8:	f4ff ab62 	bcc.w	80011a0 <processAudio+0x20>
		}
	}
	/* array copy */
	for(int i=0;i<FFTLength;i++){
 8001adc:	2300      	movs	r3, #0
 8001ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae0:	e016      	b.n	8001b10 <processAudio+0x990>
		FFTInput[i]=(float32_t) out[i*2]/32738;
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001b64 <processAudio+0x9e4>
 8001afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afe:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <processAudio+0x9e8>)
 8001b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<FFTLength;i++){
 8001b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	dde5      	ble.n	8001ae2 <processAudio+0x962>
	}
		/* fft -> dB fft */
	arm_rfft_fast_f32(&FFTStruct,FFTInput,FFTOutput,0);
 8001b16:	2300      	movs	r3, #0
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <processAudio+0x9ec>)
 8001b1a:	4913      	ldr	r1, [pc, #76]	; (8001b68 <processAudio+0x9e8>)
 8001b1c:	4814      	ldr	r0, [pc, #80]	; (8001b70 <processAudio+0x9f0>)
 8001b1e:	f018 f9e5 	bl	8019eec <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(FFTOutput,FFTOutputMag,FFTLength/2);
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	4913      	ldr	r1, [pc, #76]	; (8001b74 <processAudio+0x9f4>)
 8001b26:	4811      	ldr	r0, [pc, #68]	; (8001b6c <processAudio+0x9ec>)
 8001b28:	f018 fe44 	bl	801a7b4 <arm_cmplx_mag_f32>

	osSignalSet(uiTaskHandle, 0x0001);
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <processAudio+0x9f8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f015 f942 	bl	8016dbc <osSignalSet>

	LED_Off();
 8001b38:	f003 fb2c 	bl	8005194 <LED_Off>
}
 8001b3c:	bf00      	nop
 8001b3e:	3758      	adds	r7, #88	; 0x58
 8001b40:	46bd      	mov	sp, r7
 8001b42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b46:	bf00      	nop
 8001b48:	cccccccd 	.word	0xcccccccd
 8001b4c:	3ff4cccc 	.word	0x3ff4cccc
 8001b50:	20000368 	.word	0x20000368
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	20000010 	.word	0x20000010
 8001b5c:	42c80000 	.word	0x42c80000
 8001b60:	200000e8 	.word	0x200000e8
 8001b64:	46ffc400 	.word	0x46ffc400
 8001b68:	20008d50 	.word	0x20008d50
 8001b6c:	20009b50 	.word	0x20009b50
 8001b70:	20008d38 	.word	0x20008d38
 8001b74:	20009950 	.word	0x20009950
 8001b78:	2000a3b4 	.word	0x2000a3b4

08001b7c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <vApplicationGetIdleTaskMemory+0x2c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <vApplicationGetIdleTaskMemory+0x30>)
 8001bc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000100 	.word	0x20000100
 8001be0:	20000158 	.word	0x20000158

08001be4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001be8:	f3bf 8f4f 	dsb	sy
}
 8001bec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bee:	f3bf 8f6f 	isb	sy
}
 8001bf2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <SCB_EnableICache+0x48>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bfc:	f3bf 8f4f 	dsb	sy
}
 8001c00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c02:	f3bf 8f6f 	isb	sy
}
 8001c06:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <SCB_EnableICache+0x48>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <SCB_EnableICache+0x48>)
 8001c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c12:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c14:	f3bf 8f4f 	dsb	sy
}
 8001c18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c1a:	f3bf 8f6f 	isb	sy
}
 8001c1e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001c34:	f3bf 8f4f 	dsb	sy
}
 8001c38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c3a:	f3bf 8f6f 	isb	sy
}
 8001c3e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <SCB_InvalidateICache+0x30>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c48:	f3bf 8f4f 	dsb	sy
}
 8001c4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c4e:	f3bf 8f6f 	isb	sy
}
 8001c52:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <SCB_EnableDCache+0x84>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c72:	f3bf 8f4f 	dsb	sy
}
 8001c76:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <SCB_EnableDCache+0x84>)
 8001c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c7e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	0b5b      	lsrs	r3, r3, #13
 8001c84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c88:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c92:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001c9c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ca2:	4911      	ldr	r1, [pc, #68]	; (8001ce8 <SCB_EnableDCache+0x84>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	60ba      	str	r2, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ef      	bne.n	8001c94 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	60fa      	str	r2, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e5      	bne.n	8001c8a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cbe:	f3bf 8f4f 	dsb	sy
}
 8001cc2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <SCB_EnableDCache+0x84>)
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <SCB_EnableDCache+0x84>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd0:	f3bf 8f4f 	dsb	sy
}
 8001cd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cd6:	f3bf 8f6f 	isb	sy
}
 8001cda:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <SCB_InvalidateDCache+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfa:	f3bf 8f4f 	dsb	sy
}
 8001cfe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <SCB_InvalidateDCache+0x74>)
 8001d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d06:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0b5b      	lsrs	r3, r3, #13
 8001d0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d10:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d1a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001d24:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d2a:	490d      	ldr	r1, [pc, #52]	; (8001d60 <SCB_InvalidateDCache+0x74>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	60ba      	str	r2, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ef      	bne.n	8001d1c <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1e5a      	subs	r2, r3, #1
 8001d40:	60fa      	str	r2, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e5      	bne.n	8001d12 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d46:	f3bf 8f4f 	dsb	sy
}
 8001d4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d4c:	f3bf 8f6f 	isb	sy
}
 8001d50:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001d64:	b5b0      	push	{r4, r5, r7, lr}
 8001d66:	b08e      	sub	sp, #56	; 0x38
 8001d68:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8001d6a:	f7ff ffbf 	bl	8001cec <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001d6e:	f7ff ff5f 	bl	8001c30 <SCB_InvalidateICache>
	//SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d72:	f005 fd66 	bl	8007842 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d76:	f000 f873 	bl	8001e60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d7a:	f001 f8d1 	bl	8002f20 <MX_GPIO_Init>
	MX_DMA_Init();
 8001d7e:	f001 f80d 	bl	8002d9c <MX_DMA_Init>
	MX_ADC3_Init();
 8001d82:	f000 f92d 	bl	8001fe0 <MX_ADC3_Init>
	MX_CRC_Init();
 8001d86:	f000 f97d 	bl	8002084 <MX_CRC_Init>
	MX_DCMI_Init();
 8001d8a:	f000 f99d 	bl	80020c8 <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001d8e:	f000 f9cf 	bl	8002130 <MX_DMA2D_Init>
	MX_FMC_Init();
 8001d92:	f001 f871 	bl	8002e78 <MX_FMC_Init>
	MX_I2C1_Init();
 8001d96:	f000 f9fd 	bl	8002194 <MX_I2C1_Init>
	MX_I2C3_Init();
 8001d9a:	f000 fa3b 	bl	8002214 <MX_I2C3_Init>
	MX_LTDC_Init();
 8001d9e:	f000 fa79 	bl	8002294 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 8001da2:	f000 fafb 	bl	800239c <MX_QUADSPI_Init>
	MX_RTC_Init();
 8001da6:	f000 fb3b 	bl	8002420 <MX_RTC_Init>
	MX_SAI2_Init();
 8001daa:	f000 fbdf 	bl	800256c <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 8001dae:	f000 fc99 	bl	80026e4 <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 8001db2:	f000 fcb7 	bl	8002724 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 8001db6:	f000 fce5 	bl	8002784 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001dba:	f000 fd8f 	bl	80028dc <MX_TIM2_Init>
	MX_TIM3_Init();
 8001dbe:	f000 fe03 	bl	80029c8 <MX_TIM3_Init>
	MX_TIM5_Init();
 8001dc2:	f000 fe79 	bl	8002ab8 <MX_TIM5_Init>
	MX_TIM8_Init();
 8001dc6:	f000 feef 	bl	8002ba8 <MX_TIM8_Init>
	MX_TIM12_Init();
 8001dca:	f000 ff41 	bl	8002c50 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 8001dce:	f000 ff85 	bl	8002cdc <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8001dd2:	f000 ffb3 	bl	8002d3c <MX_USART6_UART_Init>
	MX_FATFS_Init();
 8001dd6:	f012 fb3f 	bl	8014458 <MX_FATFS_Init>
	MX_LIBJPEG_Init();
 8001dda:	f012 fd8d 	bl	80148f8 <MX_LIBJPEG_Init>
	/* USER CODE BEGIN 2 */

	MPU_Init();
 8001dde:	f004 fc1b 	bl	8006618 <MPU_Init>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8001de2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001de6:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001dea:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8001dec:	f004 f8a0 	bl	8005f30 <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001df0:	4816      	ldr	r0, [pc, #88]	; (8001e4c <main+0xe8>)
 8001df2:	f019 fa4f 	bl	801b294 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 8001df6:	f7ff fef5 	bl	8001be4 <SCB_EnableICache>
	SCB_EnableDCache();
 8001dfa:	f7ff ff33 	bl	8001c64 <SCB_EnableDCache>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <main+0xec>)
 8001e00:	f107 041c 	add.w	r4, r7, #28
 8001e04:	461d      	mov	r5, r3
 8001e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f014 ff6f 	bl	8016cfc <osThreadCreate>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <main+0xf0>)
 8001e22:	6013      	str	r3, [r2, #0]

	/* definition and creation of uiTask */
	osThreadDef(uiTask, startUITask, osPriorityLow, 0, 2048); // 128 = stack size too small -> 1024 !
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <main+0xf4>)
 8001e26:	463c      	mov	r4, r7
 8001e28:	461d      	mov	r5, r3
 8001e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 8001e36:	463b      	mov	r3, r7
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f014 ff5e 	bl	8016cfc <osThreadCreate>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <main+0xf8>)
 8001e44:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001e46:	f014 ff36 	bl	8016cb6 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001e4a:	e7fe      	b.n	8001e4a <main+0xe6>
 8001e4c:	0801c464 	.word	0x0801c464
 8001e50:	0801c47c 	.word	0x0801c47c
 8001e54:	20009fe8 	.word	0x20009fe8
 8001e58:	0801c498 	.word	0x0801c498
 8001e5c:	2000a3b4 	.word	0x2000a3b4

08001e60 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b0b4      	sub	sp, #208	; 0xd0
 8001e64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e6a:	2230      	movs	r2, #48	; 0x30
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f019 f8c2 	bl	801aff8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	2284      	movs	r2, #132	; 0x84
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f019 f8b3 	bl	801aff8 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001e92:	f00a fc31 	bl	800c6f8 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <SystemClock_Config+0x174>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a4e      	ldr	r2, [pc, #312]	; (8001fd4 <SystemClock_Config+0x174>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <SystemClock_Config+0x174>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eae:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <SystemClock_Config+0x178>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a49      	ldr	r2, [pc, #292]	; (8001fd8 <SystemClock_Config+0x178>)
 8001eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <SystemClock_Config+0x178>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ec6:	2309      	movs	r3, #9
 8001ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001ee8:	2319      	movs	r3, #25
 8001eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001eee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001efc:	2309      	movs	r3, #9
 8001efe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f00b fc1a 	bl	800d740 <HAL_RCC_OscConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 8001f12:	f001 fa7b 	bl	800340c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f16:	f00a fbff 	bl	800c718 <HAL_PWREx_EnableOverDrive>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001f20:	f001 fa74 	bl	800340c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f24:	230f      	movs	r3, #15
 8001f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001f46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f4a:	2106      	movs	r1, #6
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f00b fe9b 	bl	800dc88 <HAL_RCC_ClockConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001f58:	f001 fa58 	bl	800340c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <SystemClock_Config+0x17c>)
 8001f5e:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001f60:	2364      	movs	r3, #100	; 0x64
 8001f62:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001f70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f74:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001f76:	2305      	movs	r3, #5
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8e:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f94:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001f96:	2300      	movs	r3, #0
 8001f98:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001faa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001fae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f00c f86b 	bl	800e098 <HAL_RCCEx_PeriphCLKConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <SystemClock_Config+0x16c>
	{
		Error_Handler();
 8001fc8:	f001 fa20 	bl	800340c <Error_Handler>
	}
}
 8001fcc:	bf00      	nop
 8001fce:	37d0      	adds	r7, #208	; 0xd0
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	01b14868 	.word	0x01b14868

08001fe0 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <MX_ADC3_Init+0x98>)
 8001ff4:	4a21      	ldr	r2, [pc, #132]	; (800207c <MX_ADC3_Init+0x9c>)
 8001ff6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <MX_ADC3_Init+0x98>)
 8001ffa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ffe:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <MX_ADC3_Init+0x98>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <MX_ADC3_Init+0x98>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <MX_ADC3_Init+0x98>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <MX_ADC3_Init+0x98>)
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <MX_ADC3_Init+0x98>)
 800201c:	2200      	movs	r2, #0
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <MX_ADC3_Init+0x98>)
 8002022:	4a17      	ldr	r2, [pc, #92]	; (8002080 <MX_ADC3_Init+0xa0>)
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_ADC3_Init+0x98>)
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <MX_ADC3_Init+0x98>)
 800202e:	2201      	movs	r2, #1
 8002030:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_ADC3_Init+0x98>)
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_ADC3_Init+0x98>)
 800203c:	2201      	movs	r2, #1
 800203e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <MX_ADC3_Init+0x98>)
 8002042:	f005 fc4f 	bl	80078e4 <HAL_ADC_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 800204c:	f001 f9de 	bl	800340c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8002050:	2304      	movs	r3, #4
 8002052:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002054:	2301      	movs	r3, #1
 8002056:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_ADC3_Init+0x98>)
 8002062:	f005 fc83 	bl	800796c <HAL_ADC_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 800206c:	f001 f9ce 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000a4ac 	.word	0x2000a4ac
 800207c:	40012200 	.word	0x40012200
 8002080:	0f000001 	.word	0x0f000001

08002084 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <MX_CRC_Init+0x3c>)
 800208a:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <MX_CRC_Init+0x40>)
 800208c:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_CRC_Init+0x3c>)
 8002090:	2200      	movs	r2, #0
 8002092:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <MX_CRC_Init+0x3c>)
 8002096:	2200      	movs	r2, #0
 8002098:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_CRC_Init+0x3c>)
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <MX_CRC_Init+0x3c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_CRC_Init+0x3c>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80020ac:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MX_CRC_Init+0x3c>)
 80020ae:	f006 f831 	bl	8008114 <HAL_CRC_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_CRC_Init+0x38>
	{
		Error_Handler();
 80020b8:	f001 f9a8 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000a260 	.word	0x2000a260
 80020c4:	40023000 	.word	0x40023000

080020c8 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MX_DCMI_Init+0x60>)
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <MX_DCMI_Init+0x64>)
 80020d0:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_DCMI_Init+0x60>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_DCMI_Init+0x60>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_DCMI_Init+0x60>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_DCMI_Init+0x60>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_DCMI_Init+0x60>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <MX_DCMI_Init+0x60>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_DCMI_Init+0x60>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <MX_DCMI_Init+0x60>)
 80020fe:	2200      	movs	r2, #0
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_DCMI_Init+0x60>)
 8002104:	2200      	movs	r2, #0
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <MX_DCMI_Init+0x60>)
 800210a:	2200      	movs	r2, #0
 800210c:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_DCMI_Init+0x60>)
 8002110:	2200      	movs	r2, #0
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <MX_DCMI_Init+0x60>)
 8002116:	f006 f8e7 	bl	80082e8 <HAL_DCMI_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 8002120:	f001 f974 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2000a4f4 	.word	0x2000a4f4
 800212c:	50050000 	.word	0x50050000

08002130 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <MX_DMA2D_Init+0x5c>)
 8002136:	4a16      	ldr	r2, [pc, #88]	; (8002190 <MX_DMA2D_Init+0x60>)
 8002138:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_DMA2D_Init+0x5c>)
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <MX_DMA2D_Init+0x5c>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_DMA2D_Init+0x5c>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_DMA2D_Init+0x5c>)
 800214e:	2200      	movs	r2, #0
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_DMA2D_Init+0x5c>)
 8002154:	2200      	movs	r2, #0
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_DMA2D_Init+0x5c>)
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_DMA2D_Init+0x5c>)
 8002160:	2200      	movs	r2, #0
 8002162:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002164:	4809      	ldr	r0, [pc, #36]	; (800218c <MX_DMA2D_Init+0x5c>)
 8002166:	f006 fe1f 	bl	8008da8 <HAL_DMA2D_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8002170:	f001 f94c 	bl	800340c <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002174:	2101      	movs	r1, #1
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_DMA2D_Init+0x5c>)
 8002178:	f007 f884 	bl	8009284 <HAL_DMA2D_ConfigLayer>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8002182:	f001 f943 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000a718 	.word	0x2000a718
 8002190:	4002b000 	.word	0x4002b000

08002194 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <MX_I2C1_Init+0x74>)
 800219a:	4a1c      	ldr	r2, [pc, #112]	; (800220c <MX_I2C1_Init+0x78>)
 800219c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_I2C1_Init+0x74>)
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <MX_I2C1_Init+0x7c>)
 80021a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <MX_I2C1_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_I2C1_Init+0x74>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <MX_I2C1_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MX_I2C1_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MX_I2C1_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_I2C1_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_I2C1_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021ce:	480e      	ldr	r0, [pc, #56]	; (8002208 <MX_I2C1_Init+0x74>)
 80021d0:	f009 fa12 	bl	800b5f8 <HAL_I2C_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80021da:	f001 f917 	bl	800340c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021de:	2100      	movs	r1, #0
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <MX_I2C1_Init+0x74>)
 80021e2:	f009 ff13 	bl	800c00c <HAL_I2CEx_ConfigAnalogFilter>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80021ec:	f001 f90e 	bl	800340c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021f0:	2100      	movs	r1, #0
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_I2C1_Init+0x74>)
 80021f4:	f009 ff55 	bl	800c0a2 <HAL_I2CEx_ConfigDigitalFilter>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80021fe:	f001 f905 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000a214 	.word	0x2000a214
 800220c:	40005400 	.word	0x40005400
 8002210:	00c0eaff 	.word	0x00c0eaff

08002214 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MX_I2C3_Init+0x74>)
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <MX_I2C3_Init+0x78>)
 800221c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_I2C3_Init+0x74>)
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <MX_I2C3_Init+0x7c>)
 8002222:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_I2C3_Init+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_I2C3_Init+0x74>)
 800222c:	2201      	movs	r2, #1
 800222e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_I2C3_Init+0x74>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_I2C3_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_I2C3_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_I2C3_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_I2C3_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800224e:	480e      	ldr	r0, [pc, #56]	; (8002288 <MX_I2C3_Init+0x74>)
 8002250:	f009 f9d2 	bl	800b5f8 <HAL_I2C_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 800225a:	f001 f8d7 	bl	800340c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800225e:	2100      	movs	r1, #0
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <MX_I2C3_Init+0x74>)
 8002262:	f009 fed3 	bl	800c00c <HAL_I2CEx_ConfigAnalogFilter>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 800226c:	f001 f8ce 	bl	800340c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002270:	2100      	movs	r1, #0
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_I2C3_Init+0x74>)
 8002274:	f009 ff15 	bl	800c0a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 800227e:	f001 f8c5 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20009fec 	.word	0x20009fec
 800228c:	40005c00 	.word	0x40005c00
 8002290:	00c0eaff 	.word	0x00c0eaff

08002294 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08e      	sub	sp, #56	; 0x38
 8002298:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2234      	movs	r2, #52	; 0x34
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f018 fea9 	bl	801aff8 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <MX_LTDC_Init+0x100>)
 80022a8:	4a3b      	ldr	r2, [pc, #236]	; (8002398 <MX_LTDC_Init+0x104>)
 80022aa:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022ac:	4b39      	ldr	r3, [pc, #228]	; (8002394 <MX_LTDC_Init+0x100>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80022b2:	4b38      	ldr	r3, [pc, #224]	; (8002394 <MX_LTDC_Init+0x100>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80022b8:	4b36      	ldr	r3, [pc, #216]	; (8002394 <MX_LTDC_Init+0x100>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <MX_LTDC_Init+0x100>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 80022c4:	4b33      	ldr	r3, [pc, #204]	; (8002394 <MX_LTDC_Init+0x100>)
 80022c6:	2228      	movs	r2, #40	; 0x28
 80022c8:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <MX_LTDC_Init+0x100>)
 80022cc:	2209      	movs	r2, #9
 80022ce:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <MX_LTDC_Init+0x100>)
 80022d2:	2235      	movs	r2, #53	; 0x35
 80022d4:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 80022d6:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <MX_LTDC_Init+0x100>)
 80022d8:	220b      	movs	r2, #11
 80022da:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <MX_LTDC_Init+0x100>)
 80022de:	f240 2215 	movw	r2, #533	; 0x215
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <MX_LTDC_Init+0x100>)
 80022e6:	f240 121b 	movw	r2, #283	; 0x11b
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 80022ec:	4b29      	ldr	r3, [pc, #164]	; (8002394 <MX_LTDC_Init+0x100>)
 80022ee:	f240 2235 	movw	r2, #565	; 0x235
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <MX_LTDC_Init+0x100>)
 80022f6:	f240 121d 	movw	r2, #285	; 0x11d
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <MX_LTDC_Init+0x100>)
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <MX_LTDC_Init+0x100>)
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <MX_LTDC_Init+0x100>)
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002314:	481f      	ldr	r0, [pc, #124]	; (8002394 <MX_LTDC_Init+0x100>)
 8002316:	f009 ff11 	bl	800c13c <HAL_LTDC_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8002320:	f001 f874 	bl	800340c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8002328:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800232c:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8002332:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002336:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002338:	2302      	movs	r3, #2
 800233a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800233c:	23ff      	movs	r3, #255	; 0xff
 800233e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002344:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002348:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800234a:	2307      	movs	r3, #7
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 800234e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8002354:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 800235a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	4619      	mov	r1, r3
 8002378:	4806      	ldr	r0, [pc, #24]	; (8002394 <MX_LTDC_Init+0x100>)
 800237a:	f009 ffaf 	bl	800c2dc <HAL_LTDC_ConfigLayer>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8002384:	f001 f842 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8002388:	f003 f820 	bl	80053cc <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	3738      	adds	r7, #56	; 0x38
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000a404 	.word	0x2000a404
 8002398:	40016800 	.word	0x40016800

0800239c <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <MX_QUADSPI_Init+0x80>)
 80023a4:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023ae:	2204      	movs	r2, #4
 80023b0:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023b4:	2210      	movs	r2, #16
 80023b6:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023ba:	2218      	movs	r2, #24
 80023bc:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023c0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80023c4:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80023d8:	480f      	ldr	r0, [pc, #60]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023da:	f00a f9ed 	bl	800c7b8 <HAL_QSPI_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 80023e4:	f001 f812 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 80023e8:	480b      	ldr	r0, [pc, #44]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023ea:	f003 fb75 	bl	8005ad8 <DISCO_QSPI_ResetMemory>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_QUADSPI_Init+0x5c>
 80023f4:	f001 f80a 	bl	800340c <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 80023f8:	4807      	ldr	r0, [pc, #28]	; (8002418 <MX_QUADSPI_Init+0x7c>)
 80023fa:	f003 fbaf 	bl	8005b5c <DISCO_QSPI_DummyCyclesCfg>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_QUADSPI_Init+0x6c>
 8002404:	f001 f802 	bl	800340c <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8002408:	f003 fb34 	bl	8005a74 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 800240c:	205c      	movs	r0, #92	; 0x5c
 800240e:	f005 fdf7 	bl	8008000 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000a824 	.word	0x2000a824
 800241c:	a0001000 	.word	0xa0001000

08002420 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b092      	sub	sp, #72	; 0x48
 8002424:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8002426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]
 8002436:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 800243c:	463b      	mov	r3, r7
 800243e:	222c      	movs	r2, #44	; 0x2c
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f018 fdd8 	bl	801aff8 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <MX_RTC_Init+0x144>)
 800244a:	4a47      	ldr	r2, [pc, #284]	; (8002568 <MX_RTC_Init+0x148>)
 800244c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800244e:	4b45      	ldr	r3, [pc, #276]	; (8002564 <MX_RTC_Init+0x144>)
 8002450:	2200      	movs	r2, #0
 8002452:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8002454:	4b43      	ldr	r3, [pc, #268]	; (8002564 <MX_RTC_Init+0x144>)
 8002456:	227f      	movs	r2, #127	; 0x7f
 8002458:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800245a:	4b42      	ldr	r3, [pc, #264]	; (8002564 <MX_RTC_Init+0x144>)
 800245c:	22ff      	movs	r2, #255	; 0xff
 800245e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002460:	4b40      	ldr	r3, [pc, #256]	; (8002564 <MX_RTC_Init+0x144>)
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <MX_RTC_Init+0x144>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800246c:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <MX_RTC_Init+0x144>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002472:	483c      	ldr	r0, [pc, #240]	; (8002564 <MX_RTC_Init+0x144>)
 8002474:	f00c fb44 	bl	800eb00 <HAL_RTC_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_RTC_Init+0x62>
	{
		Error_Handler();
 800247e:	f000 ffc5 	bl	800340c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002494:	2300      	movs	r3, #0
 8002496:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800249c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024a0:	2201      	movs	r2, #1
 80024a2:	4619      	mov	r1, r3
 80024a4:	482f      	ldr	r0, [pc, #188]	; (8002564 <MX_RTC_Init+0x144>)
 80024a6:	f00c fbbd 	bl	800ec24 <HAL_RTC_SetTime>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_RTC_Init+0x94>
	{
		Error_Handler();
 80024b0:	f000 ffac 	bl	800340c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80024cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d0:	2201      	movs	r2, #1
 80024d2:	4619      	mov	r1, r3
 80024d4:	4823      	ldr	r0, [pc, #140]	; (8002564 <MX_RTC_Init+0x144>)
 80024d6:	f00c fc63 	bl	800eda0 <HAL_RTC_SetDate>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 80024e0:	f000 ff94 	bl	800340c <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002504:	2300      	movs	r3, #0
 8002506:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8002508:	2301      	movs	r3, #1
 800250a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 800250e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	2201      	movs	r2, #1
 8002518:	4619      	mov	r1, r3
 800251a:	4812      	ldr	r0, [pc, #72]	; (8002564 <MX_RTC_Init+0x144>)
 800251c:	f00c fce8 	bl	800eef0 <HAL_RTC_SetAlarm>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 8002526:	f000 ff71 	bl	800340c <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 800252a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002530:	463b      	mov	r3, r7
 8002532:	2201      	movs	r2, #1
 8002534:	4619      	mov	r1, r3
 8002536:	480b      	ldr	r0, [pc, #44]	; (8002564 <MX_RTC_Init+0x144>)
 8002538:	f00c fcda 	bl	800eef0 <HAL_RTC_SetAlarm>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_RTC_Init+0x126>
	{
		Error_Handler();
 8002542:	f000 ff63 	bl	800340c <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002546:	2202      	movs	r2, #2
 8002548:	2100      	movs	r1, #0
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <MX_RTC_Init+0x144>)
 800254c:	f00c fe5a 	bl	800f204 <HAL_RTCEx_SetTimeStamp>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 8002556:	f000 ff59 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	3748      	adds	r7, #72	; 0x48
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	2000a5c8 	.word	0x2000a5c8
 8002568:	40002800 	.word	0x40002800

0800256c <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8002570:	4b58      	ldr	r3, [pc, #352]	; (80026d4 <MX_SAI2_Init+0x168>)
 8002572:	4a59      	ldr	r2, [pc, #356]	; (80026d8 <MX_SAI2_Init+0x16c>)
 8002574:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002576:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <MX_SAI2_Init+0x168>)
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800257c:	4b55      	ldr	r3, [pc, #340]	; (80026d4 <MX_SAI2_Init+0x168>)
 800257e:	2200      	movs	r2, #0
 8002580:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8002582:	4b54      	ldr	r3, [pc, #336]	; (80026d4 <MX_SAI2_Init+0x168>)
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002588:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <MX_SAI2_Init+0x168>)
 800258a:	2200      	movs	r2, #0
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800258e:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <MX_SAI2_Init+0x168>)
 8002590:	2201      	movs	r2, #1
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002594:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <MX_SAI2_Init+0x168>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800259a:	4b4e      	ldr	r3, [pc, #312]	; (80026d4 <MX_SAI2_Init+0x168>)
 800259c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a0:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80025a2:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80025a8:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 80025ae:	4b49      	ldr	r3, [pc, #292]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025b0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80025b4:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80025bc:	4b45      	ldr	r3, [pc, #276]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80025c2:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025d0:	2240      	movs	r2, #64	; 0x40
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 80025d4:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025d6:	2220      	movs	r2, #32
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80025da:	4b3e      	ldr	r3, [pc, #248]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025e0:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80025e2:	4b3c      	ldr	r3, [pc, #240]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80025e8:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025ee:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80025f0:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <MX_SAI2_Init+0x168>)
 80025fe:	2204      	movs	r2, #4
 8002600:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8002602:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <MX_SAI2_Init+0x168>)
 8002604:	2205      	movs	r2, #5
 8002606:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002608:	4832      	ldr	r0, [pc, #200]	; (80026d4 <MX_SAI2_Init+0x168>)
 800260a:	f00c fe51 	bl	800f2b0 <HAL_SAI_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8002614:	f000 fefa 	bl	800340c <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8002618:	4b30      	ldr	r3, [pc, #192]	; (80026dc <MX_SAI2_Init+0x170>)
 800261a:	4a31      	ldr	r2, [pc, #196]	; (80026e0 <MX_SAI2_Init+0x174>)
 800261c:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800261e:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <MX_SAI2_Init+0x170>)
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <MX_SAI2_Init+0x170>)
 8002626:	2203      	movs	r2, #3
 8002628:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 800262a:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <MX_SAI2_Init+0x170>)
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <MX_SAI2_Init+0x170>)
 8002632:	2200      	movs	r2, #0
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <MX_SAI2_Init+0x170>)
 8002638:	2201      	movs	r2, #1
 800263a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <MX_SAI2_Init+0x170>)
 800263e:	2201      	movs	r2, #1
 8002640:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <MX_SAI2_Init+0x170>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002648:	4b24      	ldr	r3, [pc, #144]	; (80026dc <MX_SAI2_Init+0x170>)
 800264a:	2201      	movs	r2, #1
 800264c:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <MX_SAI2_Init+0x170>)
 8002650:	2200      	movs	r2, #0
 8002652:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002654:	4b21      	ldr	r3, [pc, #132]	; (80026dc <MX_SAI2_Init+0x170>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <MX_SAI2_Init+0x170>)
 800265c:	2200      	movs	r2, #0
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <MX_SAI2_Init+0x170>)
 8002662:	2200      	movs	r2, #0
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <MX_SAI2_Init+0x170>)
 8002668:	2240      	movs	r2, #64	; 0x40
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <MX_SAI2_Init+0x170>)
 800266e:	2220      	movs	r2, #32
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <MX_SAI2_Init+0x170>)
 8002674:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002678:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <MX_SAI2_Init+0x170>)
 800267c:	2200      	movs	r2, #0
 800267e:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002680:	4b16      	ldr	r3, [pc, #88]	; (80026dc <MX_SAI2_Init+0x170>)
 8002682:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002686:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_SAI2_Init+0x170>)
 800268a:	2200      	movs	r2, #0
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <MX_SAI2_Init+0x170>)
 8002690:	2200      	movs	r2, #0
 8002692:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_SAI2_Init+0x170>)
 8002696:	2204      	movs	r2, #4
 8002698:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A; //A for MIC/ 5 for LINE
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <MX_SAI2_Init+0x170>)
 800269c:	220a      	movs	r2, #10
 800269e:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80026a0:	480e      	ldr	r0, [pc, #56]	; (80026dc <MX_SAI2_Init+0x170>)
 80026a2:	f00c fe05 	bl	800f2b0 <HAL_SAI_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 80026ac:	f000 feae 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <MX_SAI2_Init+0x168>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <MX_SAI2_Init+0x168>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026be:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <MX_SAI2_Init+0x170>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <MX_SAI2_Init+0x170>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026ce:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000a190 	.word	0x2000a190
 80026d8:	40015c04 	.word	0x40015c04
 80026dc:	20009f64 	.word	0x20009f64
 80026e0:	40015c24 	.word	0x40015c24

080026e4 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <MX_SDMMC1_SD_Init+0x38>)
 80026ea:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <MX_SDMMC1_SD_Init+0x3c>)
 80026ec:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <MX_SDMMC1_SD_Init+0x38>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_SDMMC1_SD_Init+0x38>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <MX_SDMMC1_SD_Init+0x38>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <MX_SDMMC1_SD_Init+0x38>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <MX_SDMMC1_SD_Init+0x38>)
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <MX_SDMMC1_SD_Init+0x38>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	2000a2e4 	.word	0x2000a2e4
 8002720:	40012c00 	.word	0x40012c00

08002724 <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8002728:	4b15      	ldr	r3, [pc, #84]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 800272a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800272e:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 8002768:	2200      	movs	r2, #0
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <MX_SPDIFRX_Init+0x5c>)
 800276e:	f00e fa95 	bl	8010c9c <HAL_SPDIFRX_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8002778:	f000 fe48 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	2000a144 	.word	0x2000a144

08002784 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b09a      	sub	sp, #104	; 0x68
 8002788:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80027a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
 80027b4:	615a      	str	r2, [r3, #20]
 80027b6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	222c      	movs	r2, #44	; 0x2c
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f018 fc1a 	bl	801aff8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <MX_TIM1_Init+0x150>)
 80027c6:	4a44      	ldr	r2, [pc, #272]	; (80028d8 <MX_TIM1_Init+0x154>)
 80027c8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80027ca:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <MX_TIM1_Init+0x150>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <MX_TIM1_Init+0x150>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80027d6:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <MX_TIM1_Init+0x150>)
 80027d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027dc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <MX_TIM1_Init+0x150>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <MX_TIM1_Init+0x150>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ea:	4b3a      	ldr	r3, [pc, #232]	; (80028d4 <MX_TIM1_Init+0x150>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027f0:	4838      	ldr	r0, [pc, #224]	; (80028d4 <MX_TIM1_Init+0x150>)
 80027f2:	f00e faaf 	bl	8010d54 <HAL_TIM_Base_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80027fc:	f000 fe06 	bl	800340c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002804:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800280a:	4619      	mov	r1, r3
 800280c:	4831      	ldr	r0, [pc, #196]	; (80028d4 <MX_TIM1_Init+0x150>)
 800280e:	f00e fdf7 	bl	8011400 <HAL_TIM_ConfigClockSource>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8002818:	f000 fdf8 	bl	800340c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800281c:	482d      	ldr	r0, [pc, #180]	; (80028d4 <MX_TIM1_Init+0x150>)
 800281e:	f00e fb69 	bl	8010ef4 <HAL_TIM_PWM_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8002828:	f000 fdf0 	bl	800340c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002838:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800283c:	4619      	mov	r1, r3
 800283e:	4825      	ldr	r0, [pc, #148]	; (80028d4 <MX_TIM1_Init+0x150>)
 8002840:	f00f fa64 	bl	8011d0c <HAL_TIMEx_MasterConfigSynchronization>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 800284a:	f000 fddf 	bl	800340c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800284e:	2360      	movs	r3, #96	; 0x60
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002856:	2300      	movs	r3, #0
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800285a:	2300      	movs	r3, #0
 800285c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800286a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800286e:	2200      	movs	r2, #0
 8002870:	4619      	mov	r1, r3
 8002872:	4818      	ldr	r0, [pc, #96]	; (80028d4 <MX_TIM1_Init+0x150>)
 8002874:	f00e fcb4 	bl	80111e0 <HAL_TIM_PWM_ConfigChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 800287e:	f000 fdc5 	bl	800340c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	4807      	ldr	r0, [pc, #28]	; (80028d4 <MX_TIM1_Init+0x150>)
 80028b8:	f00f fab6 	bl	8011e28 <HAL_TIMEx_ConfigBreakDeadTime>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 80028c2:	f000 fda3 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80028c6:	4803      	ldr	r0, [pc, #12]	; (80028d4 <MX_TIM1_Init+0x150>)
 80028c8:	f001 fac2 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 80028cc:	bf00      	nop
 80028ce:	3768      	adds	r7, #104	; 0x68
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	2000a5e8 	.word	0x2000a5e8
 80028d8:	40010000 	.word	0x40010000

080028dc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08e      	sub	sp, #56	; 0x38
 80028e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80028fc:	463b      	mov	r3, r7
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	611a      	str	r2, [r3, #16]
 800290a:	615a      	str	r2, [r3, #20]
 800290c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <MX_TIM2_Init+0xe8>)
 8002910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002914:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <MX_TIM2_Init+0xe8>)
 8002918:	2200      	movs	r2, #0
 800291a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291c:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <MX_TIM2_Init+0xe8>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <MX_TIM2_Init+0xe8>)
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <MX_TIM2_Init+0xe8>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <MX_TIM2_Init+0xe8>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002936:	4823      	ldr	r0, [pc, #140]	; (80029c4 <MX_TIM2_Init+0xe8>)
 8002938:	f00e fa0c 	bl	8010d54 <HAL_TIM_Base_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8002942:	f000 fd63 	bl	800340c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800294c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002950:	4619      	mov	r1, r3
 8002952:	481c      	ldr	r0, [pc, #112]	; (80029c4 <MX_TIM2_Init+0xe8>)
 8002954:	f00e fd54 	bl	8011400 <HAL_TIM_ConfigClockSource>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 800295e:	f000 fd55 	bl	800340c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002962:	4818      	ldr	r0, [pc, #96]	; (80029c4 <MX_TIM2_Init+0xe8>)
 8002964:	f00e fac6 	bl	8010ef4 <HAL_TIM_PWM_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 800296e:	f000 fd4d 	bl	800340c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4619      	mov	r1, r3
 8002980:	4810      	ldr	r0, [pc, #64]	; (80029c4 <MX_TIM2_Init+0xe8>)
 8002982:	f00f f9c3 	bl	8011d0c <HAL_TIMEx_MasterConfigSynchronization>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 800298c:	f000 fd3e 	bl	800340c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002990:	2360      	movs	r3, #96	; 0x60
 8002992:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029a0:	463b      	mov	r3, r7
 80029a2:	2200      	movs	r2, #0
 80029a4:	4619      	mov	r1, r3
 80029a6:	4807      	ldr	r0, [pc, #28]	; (80029c4 <MX_TIM2_Init+0xe8>)
 80029a8:	f00e fc1a 	bl	80111e0 <HAL_TIM_PWM_ConfigChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 80029b2:	f000 fd2b 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80029b6:	4803      	ldr	r0, [pc, #12]	; (80029c4 <MX_TIM2_Init+0xe8>)
 80029b8:	f001 fa4a 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 80029bc:	bf00      	nop
 80029be:	3738      	adds	r7, #56	; 0x38
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000a758 	.word	0x2000a758

080029c8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08e      	sub	sp, #56	; 0x38
 80029cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80029e8:	463b      	mov	r3, r7
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	615a      	str	r2, [r3, #20]
 80029f8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 80029fc:	4a2d      	ldr	r2, [pc, #180]	; (8002ab4 <MX_TIM3_Init+0xec>)
 80029fe:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002a0c:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a12:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a14:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1a:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a20:	4823      	ldr	r0, [pc, #140]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a22:	f00e f997 	bl	8010d54 <HAL_TIM_Base_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8002a2c:	f000 fcee 	bl	800340c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	481c      	ldr	r0, [pc, #112]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a3e:	f00e fcdf 	bl	8011400 <HAL_TIM_ConfigClockSource>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8002a48:	f000 fce0 	bl	800340c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a4c:	4818      	ldr	r0, [pc, #96]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a4e:	f00e fa51 	bl	8010ef4 <HAL_TIM_PWM_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8002a58:	f000 fcd8 	bl	800340c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4811      	ldr	r0, [pc, #68]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a6c:	f00f f94e 	bl	8011d0c <HAL_TIMEx_MasterConfigSynchronization>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8002a76:	f000 fcc9 	bl	800340c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a7a:	2360      	movs	r3, #96	; 0x60
 8002a7c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4807      	ldr	r0, [pc, #28]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002a92:	f00e fba5 	bl	80111e0 <HAL_TIM_PWM_ConfigChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8002a9c:	f000 fcb6 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002aa0:	4803      	ldr	r0, [pc, #12]	; (8002ab0 <MX_TIM3_Init+0xe8>)
 8002aa2:	f001 f9d5 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 8002aa6:	bf00      	nop
 8002aa8:	3738      	adds	r7, #56	; 0x38
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	2000a3b8 	.word	0x2000a3b8
 8002ab4:	40000400 	.word	0x40000400

08002ab8 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08e      	sub	sp, #56	; 0x38
 8002abc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002ad8:	463b      	mov	r3, r7
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	611a      	str	r2, [r3, #16]
 8002ae6:	615a      	str	r2, [r3, #20]
 8002ae8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002aea:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002aec:	4a2d      	ldr	r2, [pc, #180]	; (8002ba4 <MX_TIM5_Init+0xec>)
 8002aee:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002afe:	f04f 32ff 	mov.w	r2, #4294967295
 8002b02:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0a:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b10:	4823      	ldr	r0, [pc, #140]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002b12:	f00e f91f 	bl	8010d54 <HAL_TIM_Base_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 8002b1c:	f000 fc76 	bl	800340c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	481c      	ldr	r0, [pc, #112]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002b2e:	f00e fc67 	bl	8011400 <HAL_TIM_ConfigClockSource>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 8002b38:	f000 fc68 	bl	800340c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b3c:	4818      	ldr	r0, [pc, #96]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002b3e:	f00e f9d9 	bl	8010ef4 <HAL_TIM_PWM_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 8002b48:	f000 fc60 	bl	800340c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4811      	ldr	r0, [pc, #68]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002b5c:	f00f f8d6 	bl	8011d0c <HAL_TIMEx_MasterConfigSynchronization>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 8002b66:	f000 fc51 	bl	800340c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b6a:	2360      	movs	r3, #96	; 0x60
 8002b6c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	220c      	movs	r2, #12
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002b82:	f00e fb2d 	bl	80111e0 <HAL_TIM_PWM_ConfigChannel>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8002b8c:	f000 fc3e 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8002b90:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <MX_TIM5_Init+0xe8>)
 8002b92:	f001 f95d 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 8002b96:	bf00      	nop
 8002b98:	3738      	adds	r7, #56	; 0x38
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000a368 	.word	0x2000a368
 8002ba4:	40000c00 	.word	0x40000c00

08002ba8 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <MX_TIM8_Init+0xa4>)
 8002bca:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8002bcc:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bde:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8002be6:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002bf2:	4815      	ldr	r0, [pc, #84]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002bf4:	f00e f8ae 	bl	8010d54 <HAL_TIM_Base_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 8002bfe:	f000 fc05 	bl	800340c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c06:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c08:	f107 0310 	add.w	r3, r7, #16
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	480e      	ldr	r0, [pc, #56]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002c10:	f00e fbf6 	bl	8011400 <HAL_TIM_ConfigClockSource>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 8002c1a:	f000 fbf7 	bl	800340c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4806      	ldr	r0, [pc, #24]	; (8002c48 <MX_TIM8_Init+0xa0>)
 8002c30:	f00f f86c 	bl	8011d0c <HAL_TIMEx_MasterConfigSynchronization>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8002c3a:	f000 fbe7 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8002c3e:	bf00      	nop
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000a098 	.word	0x2000a098
 8002c4c:	40010400 	.word	0x40010400

08002c50 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
 8002c64:	615a      	str	r2, [r3, #20]
 8002c66:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <MX_TIM12_Init+0x84>)
 8002c6a:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <MX_TIM12_Init+0x88>)
 8002c6c:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <MX_TIM12_Init+0x84>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <MX_TIM12_Init+0x84>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <MX_TIM12_Init+0x84>)
 8002c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c80:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c82:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <MX_TIM12_Init+0x84>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <MX_TIM12_Init+0x84>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002c8e:	4811      	ldr	r0, [pc, #68]	; (8002cd4 <MX_TIM12_Init+0x84>)
 8002c90:	f00e f930 	bl	8010ef4 <HAL_TIM_PWM_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 8002c9a:	f000 fbb7 	bl	800340c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c9e:	2360      	movs	r3, #96	; 0x60
 8002ca0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4807      	ldr	r0, [pc, #28]	; (8002cd4 <MX_TIM12_Init+0x84>)
 8002cb6:	f00e fa93 	bl	80111e0 <HAL_TIM_PWM_ConfigChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8002cc0:	f000 fba4 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8002cc4:	4803      	ldr	r0, [pc, #12]	; (8002cd4 <MX_TIM12_Init+0x84>)
 8002cc6:	f001 f8c3 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 8002cca:	bf00      	nop
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	2000a7a4 	.word	0x2000a7a4
 8002cd8:	40001800 	.word	0x40001800

08002cdc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002ce2:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <MX_USART1_UART_Init+0x5c>)
 8002ce4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002d02:	220c      	movs	r2, #12
 8002d04:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <MX_USART1_UART_Init+0x58>)
 8002d20:	f00f f91e 	bl	8011f60 <HAL_UART_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8002d2a:	f000 fb6f 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	2000a544 	.word	0x2000a544
 8002d38:	40011000 	.word	0x40011000

08002d3c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d42:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <MX_USART6_UART_Init+0x5c>)
 8002d44:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d4c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d62:	220c      	movs	r2, #12
 8002d64:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d7e:	4805      	ldr	r0, [pc, #20]	; (8002d94 <MX_USART6_UART_Init+0x58>)
 8002d80:	f00f f8ee 	bl	8011f60 <HAL_UART_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8002d8a:	f000 fb3f 	bl	800340c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000a694 	.word	0x2000a694
 8002d98:	40011400 	.word	0x40011400

08002d9c <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002da2:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <MX_DMA_Init+0xd0>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <MX_DMA_Init+0xd0>)
 8002da8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <MX_DMA_Init+0xd0>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002dba:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002dbc:	4a2d      	ldr	r2, [pc, #180]	; (8002e74 <MX_DMA_Init+0xd8>)
 8002dbe:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd2:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002dd4:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dda:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002dde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002de2:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002de4:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dea:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002dec:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002df2:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002df8:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002e02:	2203      	movs	r2, #3
 8002e04:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002e12:	4817      	ldr	r0, [pc, #92]	; (8002e70 <MX_DMA_Init+0xd4>)
 8002e14:	f005 fbb2 	bl	800857c <HAL_DMA_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 8002e1e:	f000 faf5 	bl	800340c <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2105      	movs	r1, #5
 8002e26:	2038      	movs	r0, #56	; 0x38
 8002e28:	f005 f8c0 	bl	8007fac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e2c:	2038      	movs	r0, #56	; 0x38
 8002e2e:	f005 f8d9 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2105      	movs	r1, #5
 8002e36:	2039      	movs	r0, #57	; 0x39
 8002e38:	f005 f8b8 	bl	8007fac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e3c:	2039      	movs	r0, #57	; 0x39
 8002e3e:	f005 f8d1 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2105      	movs	r1, #5
 8002e46:	203c      	movs	r0, #60	; 0x3c
 8002e48:	f005 f8b0 	bl	8007fac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002e4c:	203c      	movs	r0, #60	; 0x3c
 8002e4e:	f005 f8c9 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2105      	movs	r1, #5
 8002e56:	2046      	movs	r0, #70	; 0x46
 8002e58:	f005 f8a8 	bl	8007fac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002e5c:	2046      	movs	r0, #70	; 0x46
 8002e5e:	f005 f8c1 	bl	8007fe4 <HAL_NVIC_EnableIRQ>

}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	2000a038 	.word	0x2000a038
 8002e74:	40026410 	.word	0x40026410

08002e78 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
 8002e8c:	615a      	str	r2, [r3, #20]
 8002e8e:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002e92:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <MX_FMC_Init+0xa4>)
 8002e94:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002eaa:	2210      	movs	r2, #16
 8002eac:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002eb0:	2240      	movs	r2, #64	; 0x40
 8002eb2:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002eb4:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eba:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002ebc:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec8:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002eca:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002ecc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8002edc:	2307      	movs	r3, #7
 8002ede:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8002ee4:	2307      	movs	r3, #7
 8002ee6:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4807      	ldr	r0, [pc, #28]	; (8002f18 <MX_FMC_Init+0xa0>)
 8002efa:	f00d fe50 	bl	8010b9e <HAL_SDRAM_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 8002f04:	f000 fa82 	bl	800340c <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002f08:	f240 6003 	movw	r0, #1539	; 0x603
 8002f0c:	f002 ffb0 	bl	8005e70 <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 8002f10:	bf00      	nop
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	2000a7f0 	.word	0x2000a7f0
 8002f1c:	a0000140 	.word	0xa0000140

08002f20 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b090      	sub	sp, #64	; 0x40
 8002f24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002f36:	4baf      	ldr	r3, [pc, #700]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4aae      	ldr	r2, [pc, #696]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f3c:	f043 0310 	orr.w	r3, r3, #16
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4bac      	ldr	r3, [pc, #688]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002f4e:	4ba9      	ldr	r3, [pc, #676]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4aa8      	ldr	r2, [pc, #672]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4ba6      	ldr	r3, [pc, #664]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f66:	4ba3      	ldr	r3, [pc, #652]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4aa2      	ldr	r2, [pc, #648]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4ba0      	ldr	r3, [pc, #640]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	623b      	str	r3, [r7, #32]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7e:	4b9d      	ldr	r3, [pc, #628]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a9c      	ldr	r2, [pc, #624]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b9a      	ldr	r3, [pc, #616]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002f96:	4b97      	ldr	r3, [pc, #604]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a96      	ldr	r2, [pc, #600]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b94      	ldr	r3, [pc, #592]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	4b91      	ldr	r3, [pc, #580]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a90      	ldr	r2, [pc, #576]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b8e      	ldr	r3, [pc, #568]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8002fc6:	4b8b      	ldr	r3, [pc, #556]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a8a      	ldr	r2, [pc, #552]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002fde:	4b85      	ldr	r3, [pc, #532]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a84      	ldr	r2, [pc, #528]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b82      	ldr	r3, [pc, #520]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8002ff6:	4b7f      	ldr	r3, [pc, #508]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a7e      	ldr	r2, [pc, #504]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b7c      	ldr	r3, [pc, #496]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800300e:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a78      	ldr	r2, [pc, #480]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8003014:	f043 0320 	orr.w	r3, r3, #32
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003026:	4b73      	ldr	r3, [pc, #460]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a72      	ldr	r2, [pc, #456]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 800302c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b70      	ldr	r3, [pc, #448]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800303e:	2201      	movs	r2, #1
 8003040:	2120      	movs	r1, #32
 8003042:	486d      	ldr	r0, [pc, #436]	; (80031f8 <MX_GPIO_Init+0x2d8>)
 8003044:	f006 fd1c 	bl	8009a80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8003048:	2200      	movs	r2, #0
 800304a:	210e      	movs	r1, #14
 800304c:	486b      	ldr	r0, [pc, #428]	; (80031fc <MX_GPIO_Init+0x2dc>)
 800304e:	f006 fd17 	bl	8009a80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003052:	2201      	movs	r2, #1
 8003054:	2108      	movs	r1, #8
 8003056:	486a      	ldr	r0, [pc, #424]	; (8003200 <MX_GPIO_Init+0x2e0>)
 8003058:	f006 fd12 	bl	8009a80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800305c:	2201      	movs	r2, #1
 800305e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003062:	4866      	ldr	r0, [pc, #408]	; (80031fc <MX_GPIO_Init+0x2dc>)
 8003064:	f006 fd0c 	bl	8009a80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003068:	2200      	movs	r2, #0
 800306a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800306e:	4865      	ldr	r0, [pc, #404]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8003070:	f006 fd06 	bl	8009a80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003074:	2200      	movs	r2, #0
 8003076:	21c8      	movs	r1, #200	; 0xc8
 8003078:	4863      	ldr	r0, [pc, #396]	; (8003208 <MX_GPIO_Init+0x2e8>)
 800307a:	f006 fd01 	bl	8009a80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800307e:	2308      	movs	r3, #8
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003082:	2300      	movs	r3, #0
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800308a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800308e:	4619      	mov	r1, r3
 8003090:	485e      	ldr	r0, [pc, #376]	; (800320c <MX_GPIO_Init+0x2ec>)
 8003092:	f006 fa25 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003096:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030a8:	230b      	movs	r3, #11
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b0:	4619      	mov	r1, r3
 80030b2:	4855      	ldr	r0, [pc, #340]	; (8003208 <MX_GPIO_Init+0x2e8>)
 80030b4:	f006 fa14 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80030b8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c6:	2303      	movs	r3, #3
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030ca:	230a      	movs	r3, #10
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030d2:	4619      	mov	r1, r3
 80030d4:	484e      	ldr	r0, [pc, #312]	; (8003210 <MX_GPIO_Init+0x2f0>)
 80030d6:	f006 fa03 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80030da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e0:	2300      	movs	r3, #0
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80030e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ec:	4619      	mov	r1, r3
 80030ee:	4849      	ldr	r0, [pc, #292]	; (8003214 <MX_GPIO_Init+0x2f4>)
 80030f0:	f006 f9f6 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 80030f4:	2340      	movs	r3, #64	; 0x40
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80030f8:	4b47      	ldr	r3, [pc, #284]	; (8003218 <MX_GPIO_Init+0x2f8>)
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003104:	4619      	mov	r1, r3
 8003106:	483c      	ldr	r0, [pc, #240]	; (80031f8 <MX_GPIO_Init+0x2d8>)
 8003108:	f006 f9ea 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800310c:	2320      	movs	r3, #32
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003110:	2301      	movs	r3, #1
 8003112:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003120:	4619      	mov	r1, r3
 8003122:	4835      	ldr	r0, [pc, #212]	; (80031f8 <MX_GPIO_Init+0x2d8>)
 8003124:	f006 f9dc 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8003128:	f241 030e 	movw	r3, #4110	; 0x100e
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800312e:	2301      	movs	r3, #1
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800313a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800313e:	4619      	mov	r1, r3
 8003140:	482e      	ldr	r0, [pc, #184]	; (80031fc <MX_GPIO_Init+0x2dc>)
 8003142:	f006 f9cd 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314c:	2300      	movs	r3, #0
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003158:	4619      	mov	r1, r3
 800315a:	4830      	ldr	r0, [pc, #192]	; (800321c <MX_GPIO_Init+0x2fc>)
 800315c:	f006 f9c0 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003160:	2308      	movs	r3, #8
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003164:	2301      	movs	r3, #1
 8003166:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316c:	2300      	movs	r3, #0
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003174:	4619      	mov	r1, r3
 8003176:	4822      	ldr	r0, [pc, #136]	; (8003200 <MX_GPIO_Init+0x2e0>)
 8003178:	f006 f9b2 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800317c:	2310      	movs	r3, #16
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003180:	2300      	movs	r3, #0
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800318c:	4619      	mov	r1, r3
 800318e:	481a      	ldr	r0, [pc, #104]	; (80031f8 <MX_GPIO_Init+0x2d8>)
 8003190:	f006 f9a6 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003194:	f248 0304 	movw	r3, #32772	; 0x8004
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800319a:	2300      	movs	r3, #0
 800319c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a6:	4619      	mov	r1, r3
 80031a8:	4816      	ldr	r0, [pc, #88]	; (8003204 <MX_GPIO_Init+0x2e4>)
 80031aa:	f006 f999 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80031ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b4:	2301      	movs	r3, #1
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031bc:	2300      	movs	r3, #0
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80031c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c4:	4619      	mov	r1, r3
 80031c6:	480f      	ldr	r0, [pc, #60]	; (8003204 <MX_GPIO_Init+0x2e4>)
 80031c8:	f006 f98a 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 80031cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d2:	2300      	movs	r3, #0
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 80031da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031de:	4619      	mov	r1, r3
 80031e0:	4806      	ldr	r0, [pc, #24]	; (80031fc <MX_GPIO_Init+0x2dc>)
 80031e2:	f006 f97d 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 80031e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <MX_GPIO_Init+0x300>)
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e017      	b.n	8003224 <MX_GPIO_Init+0x304>
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40022000 	.word	0x40022000
 8003200:	40022800 	.word	0x40022800
 8003204:	40021c00 	.word	0x40021c00
 8003208:	40021800 	.word	0x40021800
 800320c:	40021000 	.word	0x40021000
 8003210:	40020400 	.word	0x40020400
 8003214:	40022400 	.word	0x40022400
 8003218:	10120000 	.word	0x10120000
 800321c:	40020800 	.word	0x40020800
 8003220:	10110000 	.word	0x10110000
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800322a:	4619      	mov	r1, r3
 800322c:	4844      	ldr	r0, [pc, #272]	; (8003340 <MX_GPIO_Init+0x420>)
 800322e:	f006 f957 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003232:	2310      	movs	r3, #16
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323e:	2303      	movs	r3, #3
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003242:	230a      	movs	r3, #10
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800324a:	4619      	mov	r1, r3
 800324c:	483d      	ldr	r0, [pc, #244]	; (8003344 <MX_GPIO_Init+0x424>)
 800324e:	f006 f947 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8003252:	23c8      	movs	r3, #200	; 0xc8
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003256:	2301      	movs	r3, #1
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	2300      	movs	r3, #0
 8003260:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003266:	4619      	mov	r1, r3
 8003268:	4837      	ldr	r0, [pc, #220]	; (8003348 <MX_GPIO_Init+0x428>)
 800326a:	f006 f939 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800326e:	2305      	movs	r3, #5
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327a:	2303      	movs	r3, #3
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800327e:	230a      	movs	r3, #10
 8003280:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003286:	4619      	mov	r1, r3
 8003288:	4830      	ldr	r0, [pc, #192]	; (800334c <MX_GPIO_Init+0x42c>)
 800328a:	f006 f929 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800328e:	2332      	movs	r3, #50	; 0x32
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329a:	2303      	movs	r3, #3
 800329c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800329e:	230b      	movs	r3, #11
 80032a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032a6:	4619      	mov	r1, r3
 80032a8:	4828      	ldr	r0, [pc, #160]	; (800334c <MX_GPIO_Init+0x42c>)
 80032aa:	f006 f919 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80032ae:	2304      	movs	r3, #4
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b2:	2300      	movs	r3, #0
 80032b4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80032ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032be:	4619      	mov	r1, r3
 80032c0:	4821      	ldr	r0, [pc, #132]	; (8003348 <MX_GPIO_Init+0x428>)
 80032c2:	f006 f90d 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032c6:	2386      	movs	r3, #134	; 0x86
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d2:	2303      	movs	r3, #3
 80032d4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032d6:	230b      	movs	r3, #11
 80032d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032de:	4619      	mov	r1, r3
 80032e0:	481b      	ldr	r0, [pc, #108]	; (8003350 <MX_GPIO_Init+0x430>)
 80032e2:	f006 f8fd 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80032e6:	2328      	movs	r3, #40	; 0x28
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f2:	2303      	movs	r3, #3
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80032f6:	230a      	movs	r3, #10
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032fe:	4619      	mov	r1, r3
 8003300:	4813      	ldr	r0, [pc, #76]	; (8003350 <MX_GPIO_Init+0x430>)
 8003302:	f006 f8ed 	bl	80094e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003306:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003318:	2305      	movs	r3, #5
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003320:	4619      	mov	r1, r3
 8003322:	480c      	ldr	r0, [pc, #48]	; (8003354 <MX_GPIO_Init+0x434>)
 8003324:	f006 f8dc 	bl	80094e0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003328:	2200      	movs	r2, #0
 800332a:	2105      	movs	r1, #5
 800332c:	2028      	movs	r0, #40	; 0x28
 800332e:	f004 fe3d 	bl	8007fac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003332:	2028      	movs	r0, #40	; 0x28
 8003334:	f004 fe56 	bl	8007fe4 <HAL_NVIC_EnableIRQ>

}
 8003338:	bf00      	nop
 800333a:	3740      	adds	r7, #64	; 0x40
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40022000 	.word	0x40022000
 8003344:	40021c00 	.word	0x40021c00
 8003348:	40021800 	.word	0x40021800
 800334c:	40020800 	.word	0x40020800
 8003350:	40020000 	.word	0x40020000
 8003354:	40020400 	.word	0x40020400

08003358 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	printf(msg);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f017 fefb 	bl	801b15c <iprintf>
	printf("\n");
 8003366:	200a      	movs	r0, #10
 8003368:	f017 ff10 	bl	801b18c <putchar>
	Error_Handler();
 800336c:	f000 f84e 	bl	800340c <Error_Handler>
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8003380:	f016 fa0a 	bl	8019798 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 8003384:	4803      	ldr	r0, [pc, #12]	; (8003394 <StartDefaultTask+0x1c>)
 8003386:	f017 ff85 	bl	801b294 <puts>
	audioLoop();
 800338a:	f7fd fd8d 	bl	8000ea8 <audioLoop>
	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
	for(;;)
 8003392:	e7fe      	b.n	8003392 <StartDefaultTask+0x1a>
 8003394:	0801c4b4 	.word	0x0801c4b4

08003398 <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN startUITask */

	osDelay(200);
 80033a0:	20c8      	movs	r0, #200	; 0xc8
 80033a2:	f013 fcf7 	bl	8016d94 <osDelay>
	printf("StartLedTask\n");
 80033a6:	480f      	ldr	r0, [pc, #60]	; (80033e4 <startUITask+0x4c>)
 80033a8:	f017 ff74 	bl	801b294 <puts>
	uiDisplayBasic();
 80033ac:	f001 f9d6 	bl	800475c <uiDisplayBasic>
	/* Infinite loop */
	for(;;)
	{
		osSignalWait (0x0001, osWaitForever);
 80033b0:	463b      	mov	r3, r7
 80033b2:	f04f 32ff 	mov.w	r2, #4294967295
 80033b6:	2101      	movs	r1, #1
 80033b8:	4618      	mov	r0, r3
 80033ba:	f013 fd3f 	bl	8016e3c <osSignalWait>
		uiSliderFeed();
		uiSliderVolume();
		uiSliderFlanger();*/

		//partie Imane
		uiSliderDelay();
 80033be:	f001 fe01 	bl	8004fc4 <uiSliderDelay>
		uiSliderFeedback();
 80033c2:	f001 fe6d 	bl	80050a0 <uiSliderFeedback>
		uiSliderChorus();
 80033c6:	f001 fb69 	bl	8004a9c <uiSliderChorus>
		uiSliderPhaser();
 80033ca:	f001 fbd5 	bl	8004b78 <uiSliderPhaser>
		uiSliderRange();
 80033ce:	f001 fcaf 	bl	8004d30 <uiSliderRange>
		uiSliderReverb();
 80033d2:	f001 fc3f 	bl	8004c54 <uiSliderReverb>
		uiSliderRate();
 80033d6:	f001 fd19 	bl	8004e0c <uiSliderRate>
		uiSliderDepth();
 80033da:	f001 fd85 	bl	8004ee8 <uiSliderDepth>
		uiSliderFlanger();
 80033de:	f001 faef 	bl	80049c0 <uiSliderFlanger>
	{
 80033e2:	e7e5      	b.n	80033b0 <startUITask+0x18>
 80033e4:	0801c4c8 	.word	0x0801c4c8

080033e8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80033fa:	f004 fa2f 	bl	800785c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40001000 	.word	0x40001000

0800340c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8003410:	f001 fecc 	bl	80051ac <LED_Toggle>
		HAL_Delay(100);
 8003414:	2064      	movs	r0, #100	; 0x64
 8003416:	f004 fa41 	bl	800789c <HAL_Delay>
		LED_Toggle();
 800341a:	e7f9      	b.n	8003410 <Error_Handler+0x4>

0800341c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_MspInit+0x4c>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a10      	ldr	r2, [pc, #64]	; (8003468 <HAL_MspInit+0x4c>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <HAL_MspInit+0x4c>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_MspInit+0x4c>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <HAL_MspInit+0x4c>)
 8003440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003444:	6453      	str	r3, [r2, #68]	; 0x44
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_MspInit+0x4c>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	210f      	movs	r1, #15
 8003456:	f06f 0001 	mvn.w	r0, #1
 800345a:	f004 fda7 	bl	8007fac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800

0800346c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_ADC_MspInit+0xa4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d13c      	bne.n	8003508 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800348e:	4b21      	ldr	r3, [pc, #132]	; (8003514 <HAL_ADC_MspInit+0xa8>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a20      	ldr	r2, [pc, #128]	; (8003514 <HAL_ADC_MspInit+0xa8>)
 8003494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_ADC_MspInit+0xa8>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_ADC_MspInit+0xa8>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a1a      	ldr	r2, [pc, #104]	; (8003514 <HAL_ADC_MspInit+0xa8>)
 80034ac:	f043 0320 	orr.w	r3, r3, #32
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <HAL_ADC_MspInit+0xa8>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_ADC_MspInit+0xa8>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4a14      	ldr	r2, [pc, #80]	; (8003514 <HAL_ADC_MspInit+0xa8>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <HAL_ADC_MspInit+0xa8>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80034d6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80034da:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034dc:	2303      	movs	r3, #3
 80034de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	480b      	ldr	r0, [pc, #44]	; (8003518 <HAL_ADC_MspInit+0xac>)
 80034ec:	f005 fff8 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80034f0:	2301      	movs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034f4:	2303      	movs	r3, #3
 80034f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	4619      	mov	r1, r3
 8003502:	4806      	ldr	r0, [pc, #24]	; (800351c <HAL_ADC_MspInit+0xb0>)
 8003504:	f005 ffec 	bl	80094e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003508:	bf00      	nop
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40012200 	.word	0x40012200
 8003514:	40023800 	.word	0x40023800
 8003518:	40021400 	.word	0x40021400
 800351c:	40020000 	.word	0x40020000

08003520 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <HAL_CRC_MspInit+0x38>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10b      	bne.n	800354a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_CRC_MspInit+0x3c>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_CRC_MspInit+0x3c>)
 8003538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_CRC_MspInit+0x3c>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023000 	.word	0x40023000
 800355c:	40023800 	.word	0x40023800

08003560 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08e      	sub	sp, #56	; 0x38
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a6c      	ldr	r2, [pc, #432]	; (8003730 <HAL_DCMI_MspInit+0x1d0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	f040 80d2 	bne.w	8003728 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003584:	4b6b      	ldr	r3, [pc, #428]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	4a6a      	ldr	r2, [pc, #424]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6353      	str	r3, [r2, #52]	; 0x34
 8003590:	4b68      	ldr	r3, [pc, #416]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800359c:	4b65      	ldr	r3, [pc, #404]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	4a64      	ldr	r2, [pc, #400]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035a2:	f043 0310 	orr.w	r3, r3, #16
 80035a6:	6313      	str	r3, [r2, #48]	; 0x30
 80035a8:	4b62      	ldr	r3, [pc, #392]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035b4:	4b5f      	ldr	r3, [pc, #380]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	4a5e      	ldr	r2, [pc, #376]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035ba:	f043 0308 	orr.w	r3, r3, #8
 80035be:	6313      	str	r3, [r2, #48]	; 0x30
 80035c0:	4b5c      	ldr	r3, [pc, #368]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80035cc:	4b59      	ldr	r3, [pc, #356]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	4a58      	ldr	r2, [pc, #352]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d6:	6313      	str	r3, [r2, #48]	; 0x30
 80035d8:	4b56      	ldr	r3, [pc, #344]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80035e4:	4b53      	ldr	r3, [pc, #332]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	4a52      	ldr	r2, [pc, #328]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ee:	6313      	str	r3, [r2, #48]	; 0x30
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fc:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	4a4c      	ldr	r2, [pc, #304]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6313      	str	r3, [r2, #48]	; 0x30
 8003608:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_DCMI_MspInit+0x1d4>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003614:	2360      	movs	r3, #96	; 0x60
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003620:	2300      	movs	r3, #0
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003624:	230d      	movs	r3, #13
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362c:	4619      	mov	r1, r3
 800362e:	4842      	ldr	r0, [pc, #264]	; (8003738 <HAL_DCMI_MspInit+0x1d8>)
 8003630:	f005 ff56 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003634:	2308      	movs	r3, #8
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	2302      	movs	r3, #2
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003640:	2300      	movs	r3, #0
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003644:	230d      	movs	r3, #13
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364c:	4619      	mov	r1, r3
 800364e:	483b      	ldr	r0, [pc, #236]	; (800373c <HAL_DCMI_MspInit+0x1dc>)
 8003650:	f005 ff46 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003666:	230d      	movs	r3, #13
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800366a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366e:	4619      	mov	r1, r3
 8003670:	4833      	ldr	r0, [pc, #204]	; (8003740 <HAL_DCMI_MspInit+0x1e0>)
 8003672:	f005 ff35 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003676:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003684:	2300      	movs	r3, #0
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003688:	230d      	movs	r3, #13
 800368a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800368c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003690:	4619      	mov	r1, r3
 8003692:	482c      	ldr	r0, [pc, #176]	; (8003744 <HAL_DCMI_MspInit+0x1e4>)
 8003694:	f005 ff24 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003698:	2350      	movs	r3, #80	; 0x50
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80036a8:	230d      	movs	r3, #13
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b0:	4619      	mov	r1, r3
 80036b2:	4825      	ldr	r0, [pc, #148]	; (8003748 <HAL_DCMI_MspInit+0x1e8>)
 80036b4:	f005 ff14 	bl	80094e0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80036b8:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036ba:	4a25      	ldr	r2, [pc, #148]	; (8003750 <HAL_DCMI_MspInit+0x1f0>)
 80036bc:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80036be:	4b23      	ldr	r3, [pc, #140]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80036cc:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80036d2:	4b1e      	ldr	r3, [pc, #120]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036e8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80036f0:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80036fc:	4813      	ldr	r0, [pc, #76]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 80036fe:	f004 ff3d 	bl	800857c <HAL_DMA_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8003708:	f7ff fe80 	bl	800340c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a0f      	ldr	r2, [pc, #60]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 8003710:	649a      	str	r2, [r3, #72]	; 0x48
 8003712:	4a0e      	ldr	r2, [pc, #56]	; (800374c <HAL_DCMI_MspInit+0x1ec>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8003718:	2200      	movs	r2, #0
 800371a:	2105      	movs	r1, #5
 800371c:	204e      	movs	r0, #78	; 0x4e
 800371e:	f004 fc45 	bl	8007fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003722:	204e      	movs	r0, #78	; 0x4e
 8003724:	f004 fc5e 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003728:	bf00      	nop
 800372a:	3738      	adds	r7, #56	; 0x38
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	50050000 	.word	0x50050000
 8003734:	40023800 	.word	0x40023800
 8003738:	40021000 	.word	0x40021000
 800373c:	40020c00 	.word	0x40020c00
 8003740:	40021800 	.word	0x40021800
 8003744:	40021c00 	.word	0x40021c00
 8003748:	40020000 	.word	0x40020000
 800374c:	2000a284 	.word	0x2000a284
 8003750:	40026428 	.word	0x40026428

08003754 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <HAL_DMA2D_MspInit+0x44>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d113      	bne.n	800378e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_DMA2D_MspInit+0x48>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a0c      	ldr	r2, [pc, #48]	; (800379c <HAL_DMA2D_MspInit+0x48>)
 800376c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_DMA2D_MspInit+0x48>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2105      	movs	r1, #5
 8003782:	205a      	movs	r0, #90	; 0x5a
 8003784:	f004 fc12 	bl	8007fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003788:	205a      	movs	r0, #90	; 0x5a
 800378a:	f004 fc2b 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	4002b000 	.word	0x4002b000
 800379c:	40023800 	.word	0x40023800

080037a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	; 0x30
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 031c 	add.w	r3, r7, #28
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a2f      	ldr	r2, [pc, #188]	; (800387c <HAL_I2C_MspInit+0xdc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d129      	bne.n	8003816 <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c2:	4b2f      	ldr	r3, [pc, #188]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a2e      	ldr	r2, [pc, #184]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b2c      	ldr	r3, [pc, #176]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80037da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037e0:	2312      	movs	r3, #18
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037e4:	2301      	movs	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037ec:	2304      	movs	r3, #4
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f0:	f107 031c 	add.w	r3, r7, #28
 80037f4:	4619      	mov	r1, r3
 80037f6:	4823      	ldr	r0, [pc, #140]	; (8003884 <HAL_I2C_MspInit+0xe4>)
 80037f8:	f005 fe72 	bl	80094e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037fc:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 8003802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003806:	6413      	str	r3, [r2, #64]	; 0x40
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003814:	e02d      	b.n	8003872 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <HAL_I2C_MspInit+0xe8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d128      	bne.n	8003872 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003820:	4b17      	ldr	r3, [pc, #92]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 8003826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382a:	6313      	str	r3, [r2, #48]	; 0x30
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003838:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800383c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800383e:	2312      	movs	r3, #18
 8003840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003842:	2301      	movs	r3, #1
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003846:	2303      	movs	r3, #3
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800384a:	2304      	movs	r3, #4
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800384e:	f107 031c 	add.w	r3, r7, #28
 8003852:	4619      	mov	r1, r3
 8003854:	480d      	ldr	r0, [pc, #52]	; (800388c <HAL_I2C_MspInit+0xec>)
 8003856:	f005 fe43 	bl	80094e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 8003860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_I2C_MspInit+0xe0>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
}
 8003872:	bf00      	nop
 8003874:	3730      	adds	r7, #48	; 0x30
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40005400 	.word	0x40005400
 8003880:	40023800 	.word	0x40023800
 8003884:	40020400 	.word	0x40020400
 8003888:	40005c00 	.word	0x40005c00
 800388c:	40021c00 	.word	0x40021c00

08003890 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <HAL_I2C_MspDeInit+0x64>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d110      	bne.n	80038c4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_I2C_MspDeInit+0x68>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <HAL_I2C_MspDeInit+0x68>)
 80038a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80038ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038b2:	4812      	ldr	r0, [pc, #72]	; (80038fc <HAL_I2C_MspDeInit+0x6c>)
 80038b4:	f005 ffc0 	bl	8009838 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80038b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038bc:	480f      	ldr	r0, [pc, #60]	; (80038fc <HAL_I2C_MspDeInit+0x6c>)
 80038be:	f005 ffbb 	bl	8009838 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80038c2:	e013      	b.n	80038ec <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <HAL_I2C_MspDeInit+0x70>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d10e      	bne.n	80038ec <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_I2C_MspDeInit+0x68>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_I2C_MspDeInit+0x68>)
 80038d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	4809      	ldr	r0, [pc, #36]	; (8003904 <HAL_I2C_MspDeInit+0x74>)
 80038de:	f005 ffab 	bl	8009838 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80038e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038e6:	4807      	ldr	r0, [pc, #28]	; (8003904 <HAL_I2C_MspDeInit+0x74>)
 80038e8:	f005 ffa6 	bl	8009838 <HAL_GPIO_DeInit>
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40005400 	.word	0x40005400
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40020400 	.word	0x40020400
 8003900:	40005c00 	.word	0x40005c00
 8003904:	40021c00 	.word	0x40021c00

08003908 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08e      	sub	sp, #56	; 0x38
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a51      	ldr	r2, [pc, #324]	; (8003a6c <HAL_LTDC_MspInit+0x164>)
 8003926:	4293      	cmp	r3, r2
 8003928:	f040 809b 	bne.w	8003a62 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800392c:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	4a4f      	ldr	r2, [pc, #316]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 8003932:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003936:	6453      	str	r3, [r2, #68]	; 0x44
 8003938:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003940:	623b      	str	r3, [r7, #32]
 8003942:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003944:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	4a49      	ldr	r2, [pc, #292]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 800394a:	f043 0310 	orr.w	r3, r3, #16
 800394e:	6313      	str	r3, [r2, #48]	; 0x30
 8003950:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800395c:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	4a43      	ldr	r2, [pc, #268]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 8003962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003966:	6313      	str	r3, [r2, #48]	; 0x30
 8003968:	4b41      	ldr	r3, [pc, #260]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003974:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	4a3d      	ldr	r2, [pc, #244]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 800397a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800397e:	6313      	str	r3, [r2, #48]	; 0x30
 8003980:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800398c:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	4a37      	ldr	r2, [pc, #220]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 8003992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003996:	6313      	str	r3, [r2, #48]	; 0x30
 8003998:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80039a4:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 80039aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ae:	6313      	str	r3, [r2, #48]	; 0x30
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <HAL_LTDC_MspInit+0x168>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80039bc:	2310      	movs	r3, #16
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c0:	2302      	movs	r3, #2
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c8:	2300      	movs	r3, #0
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039cc:	230e      	movs	r3, #14
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80039d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d4:	4619      	mov	r1, r3
 80039d6:	4827      	ldr	r0, [pc, #156]	; (8003a74 <HAL_LTDC_MspInit+0x16c>)
 80039d8:	f005 fd82 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80039dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e2:	2302      	movs	r3, #2
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ea:	2300      	movs	r3, #0
 80039ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039ee:	230e      	movs	r3, #14
 80039f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80039f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f6:	4619      	mov	r1, r3
 80039f8:	481f      	ldr	r0, [pc, #124]	; (8003a78 <HAL_LTDC_MspInit+0x170>)
 80039fa:	f005 fd71 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80039fe:	23f7      	movs	r3, #247	; 0xf7
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a02:	2302      	movs	r3, #2
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a0e:	230e      	movs	r3, #14
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a16:	4619      	mov	r1, r3
 8003a18:	4818      	ldr	r0, [pc, #96]	; (8003a7c <HAL_LTDC_MspInit+0x174>)
 8003a1a:	f005 fd61 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a30:	2309      	movs	r3, #9
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4811      	ldr	r0, [pc, #68]	; (8003a80 <HAL_LTDC_MspInit+0x178>)
 8003a3c:	f005 fd50 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003a40:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a52:	230e      	movs	r3, #14
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4809      	ldr	r0, [pc, #36]	; (8003a84 <HAL_LTDC_MspInit+0x17c>)
 8003a5e:	f005 fd3f 	bl	80094e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003a62:	bf00      	nop
 8003a64:	3738      	adds	r7, #56	; 0x38
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40016800 	.word	0x40016800
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40022400 	.word	0x40022400
 8003a7c:	40022800 	.word	0x40022800
 8003a80:	40021800 	.word	0x40021800
 8003a84:	40022000 	.word	0x40022000

08003a88 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	; 0x30
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3f      	ldr	r2, [pc, #252]	; (8003ba4 <HAL_QSPI_MspInit+0x11c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d178      	bne.n	8003b9c <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	4a3e      	ldr	r2, [pc, #248]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	6393      	str	r3, [r2, #56]	; 0x38
 8003ab6:	4b3c      	ldr	r3, [pc, #240]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a38      	ldr	r2, [pc, #224]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003ac8:	f043 0310 	orr.w	r3, r3, #16
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a32      	ldr	r2, [pc, #200]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b30      	ldr	r3, [pc, #192]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003af2:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a2c      	ldr	r2, [pc, #176]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003af8:	f043 0308 	orr.w	r3, r3, #8
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <HAL_QSPI_MspInit+0x120>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b1a:	2309      	movs	r3, #9
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	4619      	mov	r1, r3
 8003b24:	4821      	ldr	r0, [pc, #132]	; (8003bac <HAL_QSPI_MspInit+0x124>)
 8003b26:	f005 fcdb 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003b3a:	230a      	movs	r3, #10
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003b3e:	f107 031c 	add.w	r3, r7, #28
 8003b42:	4619      	mov	r1, r3
 8003b44:	481a      	ldr	r0, [pc, #104]	; (8003bb0 <HAL_QSPI_MspInit+0x128>)
 8003b46:	f005 fccb 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b56:	2303      	movs	r3, #3
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b5a:	2309      	movs	r3, #9
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4619      	mov	r1, r3
 8003b64:	4812      	ldr	r0, [pc, #72]	; (8003bb0 <HAL_QSPI_MspInit+0x128>)
 8003b66:	f005 fcbb 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003b6a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b70:	2302      	movs	r3, #2
 8003b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b7c:	2309      	movs	r3, #9
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b80:	f107 031c 	add.w	r3, r7, #28
 8003b84:	4619      	mov	r1, r3
 8003b86:	480b      	ldr	r0, [pc, #44]	; (8003bb4 <HAL_QSPI_MspInit+0x12c>)
 8003b88:	f005 fcaa 	bl	80094e0 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2105      	movs	r1, #5
 8003b90:	205c      	movs	r0, #92	; 0x5c
 8003b92:	f004 fa0b 	bl	8007fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003b96:	205c      	movs	r0, #92	; 0x5c
 8003b98:	f004 fa24 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003b9c:	bf00      	nop
 8003b9e:	3730      	adds	r7, #48	; 0x30
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	a0001000 	.word	0xa0001000
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40020400 	.word	0x40020400
 8003bb4:	40020c00 	.word	0x40020c00

08003bb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <HAL_RTC_MspInit+0x2c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d105      	bne.n	8003bd6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <HAL_RTC_MspInit+0x30>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4a06      	ldr	r2, [pc, #24]	; (8003be8 <HAL_RTC_MspInit+0x30>)
 8003bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40002800 	.word	0x40002800
 8003be8:	40023800 	.word	0x40023800

08003bec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <HAL_SD_MspInit+0xb4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d144      	bne.n	8003c98 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c0e:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <HAL_SD_MspInit+0xb8>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	4a24      	ldr	r2, [pc, #144]	; (8003ca4 <HAL_SD_MspInit+0xb8>)
 8003c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c18:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1a:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <HAL_SD_MspInit+0xb8>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c26:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <HAL_SD_MspInit+0xb8>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_SD_MspInit+0xb8>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <HAL_SD_MspInit+0xb8>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c3e:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_SD_MspInit+0xb8>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <HAL_SD_MspInit+0xb8>)
 8003c44:	f043 0308 	orr.w	r3, r3, #8
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <HAL_SD_MspInit+0xb8>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003c56:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c64:	2303      	movs	r3, #3
 8003c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c68:	230c      	movs	r3, #12
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	480d      	ldr	r0, [pc, #52]	; (8003ca8 <HAL_SD_MspInit+0xbc>)
 8003c74:	f005 fc34 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003c78:	2304      	movs	r3, #4
 8003c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c84:	2303      	movs	r3, #3
 8003c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c88:	230c      	movs	r3, #12
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4619      	mov	r1, r3
 8003c92:	4806      	ldr	r0, [pc, #24]	; (8003cac <HAL_SD_MspInit+0xc0>)
 8003c94:	f005 fc24 	bl	80094e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003c98:	bf00      	nop
 8003c9a:	3728      	adds	r7, #40	; 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00

08003cb0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	; 0x28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003cd0:	d127      	bne.n	8003d22 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_SPDIFRX_MspInit+0x7c>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_SPDIFRX_MspInit+0x7c>)
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_SPDIFRX_MspInit+0x7c>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_SPDIFRX_MspInit+0x7c>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <HAL_SPDIFRX_MspInit+0x7c>)
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_SPDIFRX_MspInit+0x7c>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d06:	2302      	movs	r3, #2
 8003d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003d12:	2308      	movs	r3, #8
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003d16:	f107 0314 	add.w	r3, r7, #20
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4804      	ldr	r0, [pc, #16]	; (8003d30 <HAL_SPDIFRX_MspInit+0x80>)
 8003d1e:	f005 fbdf 	bl	80094e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003d22:	bf00      	nop
 8003d24:	3728      	adds	r7, #40	; 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40020c00 	.word	0x40020c00

08003d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2e      	ldr	r2, [pc, #184]	; (8003dfc <HAL_TIM_Base_MspInit+0xc8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10c      	bne.n	8003d60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d46:	4b2e      	ldr	r3, [pc, #184]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	4a2d      	ldr	r2, [pc, #180]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6453      	str	r3, [r2, #68]	; 0x44
 8003d52:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003d5e:	e046      	b.n	8003dee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d68:	d10c      	bne.n	8003d84 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d6a:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6413      	str	r3, [r2, #64]	; 0x40
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	69bb      	ldr	r3, [r7, #24]
}
 8003d82:	e034      	b.n	8003dee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <HAL_TIM_Base_MspInit+0xd0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10c      	bne.n	8003da8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d8e:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003d94:	f043 0302 	orr.w	r3, r3, #2
 8003d98:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9a:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697b      	ldr	r3, [r7, #20]
}
 8003da6:	e022      	b.n	8003dee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <HAL_TIM_Base_MspInit+0xd4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10c      	bne.n	8003dcc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003db8:	f043 0308 	orr.w	r3, r3, #8
 8003dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
}
 8003dca:	e010      	b.n	8003dee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <HAL_TIM_Base_MspInit+0xd8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d10b      	bne.n	8003dee <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	6453      	str	r3, [r2, #68]	; 0x44
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_TIM_Base_MspInit+0xcc>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	3724      	adds	r7, #36	; 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40010400 	.word	0x40010400

08003e10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <HAL_TIM_PWM_MspInit+0x38>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10b      	bne.n	8003e3a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <HAL_TIM_PWM_MspInit+0x3c>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <HAL_TIM_PWM_MspInit+0x3c>)
 8003e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_TIM_PWM_MspInit+0x3c>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40001800 	.word	0x40001800
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08c      	sub	sp, #48	; 0x30
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a56      	ldr	r2, [pc, #344]	; (8003fc8 <HAL_TIM_MspPostInit+0x178>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d11d      	bne.n	8003eae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e72:	4b56      	ldr	r3, [pc, #344]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4a55      	ldr	r2, [pc, #340]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7e:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e90:	2302      	movs	r3, #2
 8003e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003ea0:	f107 031c 	add.w	r3, r7, #28
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	484a      	ldr	r0, [pc, #296]	; (8003fd0 <HAL_TIM_MspPostInit+0x180>)
 8003ea8:	f005 fb1a 	bl	80094e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003eac:	e087      	b.n	8003fbe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d11d      	bne.n	8003ef4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb8:	4b44      	ldr	r3, [pc, #272]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4a43      	ldr	r2, [pc, #268]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec4:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003ee6:	f107 031c 	add.w	r3, r7, #28
 8003eea:	4619      	mov	r1, r3
 8003eec:	4838      	ldr	r0, [pc, #224]	; (8003fd0 <HAL_TIM_MspPostInit+0x180>)
 8003eee:	f005 faf7 	bl	80094e0 <HAL_GPIO_Init>
}
 8003ef2:	e064      	b.n	8003fbe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a36      	ldr	r2, [pc, #216]	; (8003fd4 <HAL_TIM_MspPostInit+0x184>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d11c      	bne.n	8003f38 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efe:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a32      	ldr	r2, [pc, #200]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003f04:	f043 0302 	orr.w	r3, r3, #2
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0a:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003f16:	2310      	movs	r3, #16
 8003f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f22:	2300      	movs	r3, #0
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f26:	2302      	movs	r3, #2
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003f2a:	f107 031c 	add.w	r3, r7, #28
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4829      	ldr	r0, [pc, #164]	; (8003fd8 <HAL_TIM_MspPostInit+0x188>)
 8003f32:	f005 fad5 	bl	80094e0 <HAL_GPIO_Init>
}
 8003f36:	e042      	b.n	8003fbe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <HAL_TIM_MspPostInit+0x18c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d11c      	bne.n	8003f7c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4e:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f66:	2300      	movs	r3, #0
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003f6e:	f107 031c 	add.w	r3, r7, #28
 8003f72:	4619      	mov	r1, r3
 8003f74:	481a      	ldr	r0, [pc, #104]	; (8003fe0 <HAL_TIM_MspPostInit+0x190>)
 8003f76:	f005 fab3 	bl	80094e0 <HAL_GPIO_Init>
}
 8003f7a:	e020      	b.n	8003fbe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_TIM_MspPostInit+0x194>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d11b      	bne.n	8003fbe <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f90:	6313      	str	r3, [r2, #48]	; 0x30
 8003f92:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <HAL_TIM_MspPostInit+0x17c>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003f9e:	2340      	movs	r3, #64	; 0x40
 8003fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003fae:	2309      	movs	r3, #9
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003fb2:	f107 031c 	add.w	r3, r7, #28
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	480b      	ldr	r0, [pc, #44]	; (8003fe8 <HAL_TIM_MspPostInit+0x198>)
 8003fba:	f005 fa91 	bl	80094e0 <HAL_GPIO_Init>
}
 8003fbe:	bf00      	nop
 8003fc0:	3730      	adds	r7, #48	; 0x30
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40000c00 	.word	0x40000c00
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40001800 	.word	0x40001800
 8003fe8:	40021c00 	.word	0x40021c00

08003fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08c      	sub	sp, #48	; 0x30
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff4:	f107 031c 	add.w	r3, r7, #28
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a3c      	ldr	r2, [pc, #240]	; (80040fc <HAL_UART_MspInit+0x110>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d145      	bne.n	800409a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800400e:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <HAL_UART_MspInit+0x114>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	4a3b      	ldr	r2, [pc, #236]	; (8004100 <HAL_UART_MspInit+0x114>)
 8004014:	f043 0310 	orr.w	r3, r3, #16
 8004018:	6453      	str	r3, [r2, #68]	; 0x44
 800401a:	4b39      	ldr	r3, [pc, #228]	; (8004100 <HAL_UART_MspInit+0x114>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004026:	4b36      	ldr	r3, [pc, #216]	; (8004100 <HAL_UART_MspInit+0x114>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a35      	ldr	r2, [pc, #212]	; (8004100 <HAL_UART_MspInit+0x114>)
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b33      	ldr	r3, [pc, #204]	; (8004100 <HAL_UART_MspInit+0x114>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	4b30      	ldr	r3, [pc, #192]	; (8004100 <HAL_UART_MspInit+0x114>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a2f      	ldr	r2, [pc, #188]	; (8004100 <HAL_UART_MspInit+0x114>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b2d      	ldr	r3, [pc, #180]	; (8004100 <HAL_UART_MspInit+0x114>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405a:	2302      	movs	r3, #2
 800405c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405e:	2300      	movs	r3, #0
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004062:	2300      	movs	r3, #0
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004066:	2307      	movs	r3, #7
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800406a:	f107 031c 	add.w	r3, r7, #28
 800406e:	4619      	mov	r1, r3
 8004070:	4824      	ldr	r0, [pc, #144]	; (8004104 <HAL_UART_MspInit+0x118>)
 8004072:	f005 fa35 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800407a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407c:	2302      	movs	r3, #2
 800407e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004080:	2300      	movs	r3, #0
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004084:	2300      	movs	r3, #0
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004088:	2307      	movs	r3, #7
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800408c:	f107 031c 	add.w	r3, r7, #28
 8004090:	4619      	mov	r1, r3
 8004092:	481d      	ldr	r0, [pc, #116]	; (8004108 <HAL_UART_MspInit+0x11c>)
 8004094:	f005 fa24 	bl	80094e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004098:	e02c      	b.n	80040f4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1b      	ldr	r2, [pc, #108]	; (800410c <HAL_UART_MspInit+0x120>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d127      	bne.n	80040f4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040a4:	4b16      	ldr	r3, [pc, #88]	; (8004100 <HAL_UART_MspInit+0x114>)
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	4a15      	ldr	r2, [pc, #84]	; (8004100 <HAL_UART_MspInit+0x114>)
 80040aa:	f043 0320 	orr.w	r3, r3, #32
 80040ae:	6453      	str	r3, [r2, #68]	; 0x44
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <HAL_UART_MspInit+0x114>)
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_UART_MspInit+0x114>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <HAL_UART_MspInit+0x114>)
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	6313      	str	r3, [r2, #48]	; 0x30
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <HAL_UART_MspInit+0x114>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80040d4:	23c0      	movs	r3, #192	; 0xc0
 80040d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d8:	2302      	movs	r3, #2
 80040da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e0:	2303      	movs	r3, #3
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040e4:	2308      	movs	r3, #8
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e8:	f107 031c 	add.w	r3, r7, #28
 80040ec:	4619      	mov	r1, r3
 80040ee:	4808      	ldr	r0, [pc, #32]	; (8004110 <HAL_UART_MspInit+0x124>)
 80040f0:	f005 f9f6 	bl	80094e0 <HAL_GPIO_Init>
}
 80040f4:	bf00      	nop
 80040f6:	3730      	adds	r7, #48	; 0x30
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40011000 	.word	0x40011000
 8004100:	40023800 	.word	0x40023800
 8004104:	40020400 	.word	0x40020400
 8004108:	40020000 	.word	0x40020000
 800410c:	40011400 	.word	0x40011400
 8004110:	40020800 	.word	0x40020800

08004114 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004128:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_FMC_MspInit+0x10c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d173      	bne.n	8004218 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8004130:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_FMC_MspInit+0x10c>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_FMC_MspInit+0x110>)
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	4a3a      	ldr	r2, [pc, #232]	; (8004224 <HAL_FMC_MspInit+0x110>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6393      	str	r3, [r2, #56]	; 0x38
 8004142:	4b38      	ldr	r3, [pc, #224]	; (8004224 <HAL_FMC_MspInit+0x110>)
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800414e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004152:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004154:	2302      	movs	r3, #2
 8004156:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415c:	2303      	movs	r3, #3
 800415e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004160:	230c      	movs	r3, #12
 8004162:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	4619      	mov	r1, r3
 8004168:	482f      	ldr	r0, [pc, #188]	; (8004228 <HAL_FMC_MspInit+0x114>)
 800416a:	f005 f9b9 	bl	80094e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800416e:	f248 1333 	movw	r3, #33075	; 0x8133
 8004172:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004174:	2302      	movs	r3, #2
 8004176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800417c:	2303      	movs	r3, #3
 800417e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004180:	230c      	movs	r3, #12
 8004182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4828      	ldr	r0, [pc, #160]	; (800422c <HAL_FMC_MspInit+0x118>)
 800418a:	f005 f9a9 	bl	80094e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800418e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004192:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004194:	2302      	movs	r3, #2
 8004196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800419c:	2303      	movs	r3, #3
 800419e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041a0:	230c      	movs	r3, #12
 80041a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4821      	ldr	r0, [pc, #132]	; (8004230 <HAL_FMC_MspInit+0x11c>)
 80041aa:	f005 f999 	bl	80094e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80041ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80041b2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b4:	2302      	movs	r3, #2
 80041b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041bc:	2303      	movs	r3, #3
 80041be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041c0:	230c      	movs	r3, #12
 80041c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041c4:	1d3b      	adds	r3, r7, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	481a      	ldr	r0, [pc, #104]	; (8004234 <HAL_FMC_MspInit+0x120>)
 80041ca:	f005 f989 	bl	80094e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80041ce:	2328      	movs	r3, #40	; 0x28
 80041d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d2:	2302      	movs	r3, #2
 80041d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041da:	2303      	movs	r3, #3
 80041dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041de:	230c      	movs	r3, #12
 80041e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4814      	ldr	r0, [pc, #80]	; (8004238 <HAL_FMC_MspInit+0x124>)
 80041e8:	f005 f97a 	bl	80094e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80041ec:	2308      	movs	r3, #8
 80041ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f8:	2303      	movs	r3, #3
 80041fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041fc:	230c      	movs	r3, #12
 80041fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	4619      	mov	r1, r3
 8004204:	480d      	ldr	r0, [pc, #52]	; (800423c <HAL_FMC_MspInit+0x128>)
 8004206:	f005 f96b 	bl	80094e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <HAL_FMC_MspInit+0x12c>)
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <HAL_FMC_MspInit+0x130>)
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_FMC_MspInit+0x130>)
 8004212:	4a0b      	ldr	r2, [pc, #44]	; (8004240 <HAL_FMC_MspInit+0x12c>)
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
 8004216:	e000      	b.n	800421a <HAL_FMC_MspInit+0x106>
    return;
 8004218:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000358 	.word	0x20000358
 8004224:	40023800 	.word	0x40023800
 8004228:	40021000 	.word	0x40021000
 800422c:	40021800 	.word	0x40021800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021400 	.word	0x40021400
 8004238:	40021c00 	.word	0x40021c00
 800423c:	40020800 	.word	0x40020800
 8004240:	2000a7f0 	.word	0x2000a7f0
 8004244:	2000a038 	.word	0x2000a038

08004248 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004250:	f7ff ff60 	bl	8004114 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6f      	ldr	r2, [pc, #444]	; (8004428 <HAL_SAI_MspInit+0x1cc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d175      	bne.n	800435a <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800426e:	4b6f      	ldr	r3, [pc, #444]	; (800442c <HAL_SAI_MspInit+0x1d0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004276:	4b6e      	ldr	r3, [pc, #440]	; (8004430 <HAL_SAI_MspInit+0x1d4>)
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	4a6d      	ldr	r2, [pc, #436]	; (8004430 <HAL_SAI_MspInit+0x1d4>)
 800427c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004280:	6453      	str	r3, [r2, #68]	; 0x44
 8004282:	4b6b      	ldr	r3, [pc, #428]	; (8004430 <HAL_SAI_MspInit+0x1d4>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800428e:	4b67      	ldr	r3, [pc, #412]	; (800442c <HAL_SAI_MspInit+0x1d0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	4a65      	ldr	r2, [pc, #404]	; (800442c <HAL_SAI_MspInit+0x1d0>)
 8004296:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8004298:	2310      	movs	r3, #16
 800429a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429c:	2302      	movs	r3, #2
 800429e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a4:	2303      	movs	r3, #3
 80042a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80042a8:	230a      	movs	r3, #10
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	4619      	mov	r1, r3
 80042b2:	4860      	ldr	r0, [pc, #384]	; (8004434 <HAL_SAI_MspInit+0x1d8>)
 80042b4:	f005 f914 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80042b8:	23e0      	movs	r3, #224	; 0xe0
 80042ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042bc:	2302      	movs	r3, #2
 80042be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042c4:	2302      	movs	r3, #2
 80042c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80042c8:	230a      	movs	r3, #10
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	4619      	mov	r1, r3
 80042d2:	4858      	ldr	r0, [pc, #352]	; (8004434 <HAL_SAI_MspInit+0x1d8>)
 80042d4:	f005 f904 	bl	80094e0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80042d8:	4b57      	ldr	r3, [pc, #348]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 80042da:	4a58      	ldr	r2, [pc, #352]	; (800443c <HAL_SAI_MspInit+0x1e0>)
 80042dc:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80042de:	4b56      	ldr	r3, [pc, #344]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 80042e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80042e4:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042e6:	4b54      	ldr	r3, [pc, #336]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 80042e8:	2240      	movs	r2, #64	; 0x40
 80042ea:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80042ec:	4b52      	ldr	r3, [pc, #328]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80042f2:	4b51      	ldr	r3, [pc, #324]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 80042f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042f8:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042fa:	4b4f      	ldr	r3, [pc, #316]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 80042fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004300:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004302:	4b4d      	ldr	r3, [pc, #308]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 8004304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004308:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800430a:	4b4b      	ldr	r3, [pc, #300]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 800430c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004310:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8004312:	4b49      	ldr	r3, [pc, #292]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 8004314:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004318:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 800431c:	2204      	movs	r2, #4
 800431e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004320:	4b45      	ldr	r3, [pc, #276]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 8004322:	2203      	movs	r2, #3
 8004324:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8004326:	4b44      	ldr	r3, [pc, #272]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 8004328:	2200      	movs	r2, #0
 800432a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800432c:	4b42      	ldr	r3, [pc, #264]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8004332:	4841      	ldr	r0, [pc, #260]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 8004334:	f004 f922 	bl	800857c <HAL_DMA_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 800433e:	f7ff f865 	bl	800340c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 8004346:	671a      	str	r2, [r3, #112]	; 0x70
 8004348:	4a3b      	ldr	r2, [pc, #236]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a39      	ldr	r2, [pc, #228]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 8004352:	66da      	str	r2, [r3, #108]	; 0x6c
 8004354:	4a38      	ldr	r2, [pc, #224]	; (8004438 <HAL_SAI_MspInit+0x1dc>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a38      	ldr	r2, [pc, #224]	; (8004440 <HAL_SAI_MspInit+0x1e4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d15c      	bne.n	800441e <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004364:	4b31      	ldr	r3, [pc, #196]	; (800442c <HAL_SAI_MspInit+0x1d0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800436c:	4b30      	ldr	r3, [pc, #192]	; (8004430 <HAL_SAI_MspInit+0x1d4>)
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	4a2f      	ldr	r2, [pc, #188]	; (8004430 <HAL_SAI_MspInit+0x1d4>)
 8004372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004376:	6453      	str	r3, [r2, #68]	; 0x44
 8004378:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <HAL_SAI_MspInit+0x1d4>)
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8004384:	4b29      	ldr	r3, [pc, #164]	; (800442c <HAL_SAI_MspInit+0x1d0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	4a28      	ldr	r2, [pc, #160]	; (800442c <HAL_SAI_MspInit+0x1d0>)
 800438c:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800438e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004394:	2302      	movs	r3, #2
 8004396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800439c:	2302      	movs	r3, #2
 800439e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80043a0:	230a      	movs	r3, #10
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80043a4:	f107 0314 	add.w	r3, r7, #20
 80043a8:	4619      	mov	r1, r3
 80043aa:	4826      	ldr	r0, [pc, #152]	; (8004444 <HAL_SAI_MspInit+0x1e8>)
 80043ac:	f005 f898 	bl	80094e0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043b2:	4a26      	ldr	r2, [pc, #152]	; (800444c <HAL_SAI_MspInit+0x1f0>)
 80043b4:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043be:	2200      	movs	r2, #0
 80043c0:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80043c2:	4b21      	ldr	r3, [pc, #132]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80043c8:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ce:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043d6:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043de:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043e6:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80043e8:	4b17      	ldr	r3, [pc, #92]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043ee:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80043f6:	4814      	ldr	r0, [pc, #80]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 80043f8:	f004 f8c0 	bl	800857c <HAL_DMA_Init>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8004402:	f7ff f803 	bl	800340c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a0f      	ldr	r2, [pc, #60]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 800440a:	671a      	str	r2, [r3, #112]	; 0x70
 800440c:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 8004416:	66da      	str	r2, [r3, #108]	; 0x6c
 8004418:	4a0b      	ldr	r2, [pc, #44]	; (8004448 <HAL_SAI_MspInit+0x1ec>)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800441e:	bf00      	nop
 8004420:	3728      	adds	r7, #40	; 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40015c04 	.word	0x40015c04
 800442c:	2000035c 	.word	0x2000035c
 8004430:	40023800 	.word	0x40023800
 8004434:	40022000 	.word	0x40022000
 8004438:	2000a634 	.word	0x2000a634
 800443c:	40026470 	.word	0x40026470
 8004440:	40015c24 	.word	0x40015c24
 8004444:	40021800 	.word	0x40021800
 8004448:	2000a0e4 	.word	0x2000a0e4
 800444c:	400264b8 	.word	0x400264b8

08004450 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08c      	sub	sp, #48	; 0x30
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004460:	2200      	movs	r2, #0
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	2036      	movs	r0, #54	; 0x36
 8004466:	f003 fda1 	bl	8007fac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800446a:	2036      	movs	r0, #54	; 0x36
 800446c:	f003 fdba 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004470:	4b1f      	ldr	r3, [pc, #124]	; (80044f0 <HAL_InitTick+0xa0>)
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <HAL_InitTick+0xa0>)
 8004476:	f043 0310 	orr.w	r3, r3, #16
 800447a:	6413      	str	r3, [r2, #64]	; 0x40
 800447c:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <HAL_InitTick+0xa0>)
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004488:	f107 0210 	add.w	r2, r7, #16
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f009 fdce 	bl	800e034 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004498:	f009 fda4 	bl	800dfe4 <HAL_RCC_GetPCLK1Freq>
 800449c:	4603      	mov	r3, r0
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <HAL_InitTick+0xa4>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	0c9b      	lsrs	r3, r3, #18
 80044ac:	3b01      	subs	r3, #1
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80044b0:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <HAL_InitTick+0xa8>)
 80044b2:	4a12      	ldr	r2, [pc, #72]	; (80044fc <HAL_InitTick+0xac>)
 80044b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <HAL_InitTick+0xa8>)
 80044b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80044be:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <HAL_InitTick+0xa8>)
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_InitTick+0xa8>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_InitTick+0xa8>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80044d0:	4809      	ldr	r0, [pc, #36]	; (80044f8 <HAL_InitTick+0xa8>)
 80044d2:	f00c fc3f 	bl	8010d54 <HAL_TIM_Base_Init>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80044dc:	4806      	ldr	r0, [pc, #24]	; (80044f8 <HAL_InitTick+0xa8>)
 80044de:	f00c fc91 	bl	8010e04 <HAL_TIM_Base_Start_IT>
 80044e2:	4603      	mov	r3, r0
 80044e4:	e000      	b.n	80044e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3730      	adds	r7, #48	; 0x30
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	431bde83 	.word	0x431bde83
 80044f8:	2000a870 	.word	0x2000a870
 80044fc:	40001000 	.word	0x40001000

08004500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004504:	e7fe      	b.n	8004504 <NMI_Handler+0x4>

08004506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800450a:	e7fe      	b.n	800450a <HardFault_Handler+0x4>

0800450c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004510:	e7fe      	b.n	8004510 <MemManage_Handler+0x4>

08004512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004512:	b480      	push	{r7}
 8004514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004516:	e7fe      	b.n	8004516 <BusFault_Handler+0x4>

08004518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800451c:	e7fe      	b.n	800451c <UsageFault_Handler+0x4>

0800451e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004530:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004534:	f005 fad8 	bl	8009ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}

0800453c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <TIM6_DAC_IRQHandler+0x10>)
 8004542:	f00c fd2e 	bl	8010fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2000a870 	.word	0x2000a870

08004550 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8004554:	4802      	ldr	r0, [pc, #8]	; (8004560 <DMA2_Stream0_IRQHandler+0x10>)
 8004556:	f004 f9b1 	bl	80088bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	2000a038 	.word	0x2000a038

08004564 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004568:	4802      	ldr	r0, [pc, #8]	; (8004574 <DMA2_Stream1_IRQHandler+0x10>)
 800456a:	f004 f9a7 	bl	80088bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	2000a284 	.word	0x2000a284

08004578 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800457c:	4802      	ldr	r0, [pc, #8]	; (8004588 <DMA2_Stream4_IRQHandler+0x10>)
 800457e:	f004 f99d 	bl	80088bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000a634 	.word	0x2000a634

0800458c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <OTG_FS_IRQHandler+0x10>)
 8004592:	f005 fd37 	bl	800a004 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2004ad10 	.word	0x2004ad10

080045a0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <DMA2_Stream7_IRQHandler+0x10>)
 80045a6:	f004 f989 	bl	80088bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000a0e4 	.word	0x2000a0e4

080045b4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <DCMI_IRQHandler+0x10>)
 80045ba:	f003 ff0f 	bl	80083dc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	2000a4f4 	.word	0x2000a4f4

080045c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <DMA2D_IRQHandler+0x10>)
 80045ce:	f004 fd49 	bl	8009064 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	2000a718 	.word	0x2000a718

080045dc <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80045e0:	4802      	ldr	r0, [pc, #8]	; (80045ec <QUADSPI_IRQHandler+0x10>)
 80045e2:	f008 f965 	bl	800c8b0 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2000a824 	.word	0x2000a824

080045f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e00a      	b.n	8004618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004602:	f3af 8000 	nop.w
 8004606:	4601      	mov	r1, r0
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	60ba      	str	r2, [r7, #8]
 800460e:	b2ca      	uxtb	r2, r1
 8004610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	3301      	adds	r3, #1
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	dbf0      	blt.n	8004602 <_read+0x12>
	}

return len;
 8004620:	687b      	ldr	r3, [r7, #4]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e009      	b.n	8004650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	60ba      	str	r2, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fdbb 	bl	80051c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	3301      	adds	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	429a      	cmp	r2, r3
 8004656:	dbf1      	blt.n	800463c <_write+0x12>
	}
	return len;
 8004658:	687b      	ldr	r3, [r7, #4]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <_close>:

int _close(int file)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
	return -1;
 800466a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800468a:	605a      	str	r2, [r3, #4]
	return 0;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <_isatty>:

int _isatty(int file)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
	return 1;
 80046a2:	2301      	movs	r3, #1
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
	return 0;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <_sbrk+0x5c>)
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <_sbrk+0x60>)
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <_sbrk+0x64>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046e8:	4b11      	ldr	r3, [pc, #68]	; (8004730 <_sbrk+0x64>)
 80046ea:	4a12      	ldr	r2, [pc, #72]	; (8004734 <_sbrk+0x68>)
 80046ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <_sbrk+0x64>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d207      	bcs.n	800470c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046fc:	f016 fc34 	bl	801af68 <__errno>
 8004700:	4603      	mov	r3, r0
 8004702:	220c      	movs	r2, #12
 8004704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	e009      	b.n	8004720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800470c:	4b08      	ldr	r3, [pc, #32]	; (8004730 <_sbrk+0x64>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <_sbrk+0x64>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	4a05      	ldr	r2, [pc, #20]	; (8004730 <_sbrk+0x64>)
 800471c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800471e:	68fb      	ldr	r3, [r7, #12]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20050000 	.word	0x20050000
 800472c:	00000400 	.word	0x00000400
 8004730:	20000360 	.word	0x20000360
 8004734:	2004b028 	.word	0x2004b028

08004738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <SystemInit+0x20>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004742:	4a05      	ldr	r2, [pc, #20]	; (8004758 <SystemInit+0x20>)
 8004744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <uiDisplayBasic>:
int time = 0;		//(1/fréquence) ?

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8004762:	f04f 30ff 	mov.w	r0, #4294967295
 8004766:	f000 fef5 	bl	8005554 <LCD_Clear>

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800476a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800476e:	f000 fe77 	bl	8005460 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004772:	f04f 30ff 	mov.w	r0, #4294967295
 8004776:	f000 fea3 	bl	80054c0 <LCD_SetBackColor>
	LCD_SetFont(&Font16);
 800477a:	4874      	ldr	r0, [pc, #464]	; (800494c <uiDisplayBasic+0x1f0>)
 800477c:	f000 feb8 	bl	80054f0 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "CHOISISSEZ VOS PARAMETRES:", CENTER_MODE, true);         //MODIFICATION POUR LE TITRE
 8004780:	2301      	movs	r3, #1
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2301      	movs	r3, #1
 8004786:	4a72      	ldr	r2, [pc, #456]	; (8004950 <uiDisplayBasic+0x1f4>)
 8004788:	2100      	movs	r1, #0
 800478a:	2000      	movs	r0, #0
 800478c:	f000 ff2a 	bl	80055e4 <LCD_DrawString>


/// DEBUT PREMIERE LIGNE DE SLIDERS DE L'INTERFACE
	/* flanger range */
	LCD_DrawRect(40,35,50,80);
 8004790:	2350      	movs	r3, #80	; 0x50
 8004792:	2232      	movs	r2, #50	; 0x32
 8004794:	2123      	movs	r1, #35	; 0x23
 8004796:	2028      	movs	r0, #40	; 0x28
 8004798:	f000 ffba 	bl	8005710 <LCD_DrawRect>
	/* chorus range */
	LCD_DrawRect(120,35,50,80);
 800479c:	2350      	movs	r3, #80	; 0x50
 800479e:	2232      	movs	r2, #50	; 0x32
 80047a0:	2123      	movs	r1, #35	; 0x23
 80047a2:	2078      	movs	r0, #120	; 0x78
 80047a4:	f000 ffb4 	bl	8005710 <LCD_DrawRect>
	/* phaser range */
	LCD_DrawRect(200,35,50,80);
 80047a8:	2350      	movs	r3, #80	; 0x50
 80047aa:	2232      	movs	r2, #50	; 0x32
 80047ac:	2123      	movs	r1, #35	; 0x23
 80047ae:	20c8      	movs	r0, #200	; 0xc8
 80047b0:	f000 ffae 	bl	8005710 <LCD_DrawRect>
	/* reverb range */
	LCD_DrawRect(280,35,50,80);
 80047b4:	2350      	movs	r3, #80	; 0x50
 80047b6:	2232      	movs	r2, #50	; 0x32
 80047b8:	2123      	movs	r1, #35	; 0x23
 80047ba:	f44f 708c 	mov.w	r0, #280	; 0x118
 80047be:	f000 ffa7 	bl	8005710 <LCD_DrawRect>
	/* volume range */
	LCD_DrawRect(360,35,50,80);
 80047c2:	2350      	movs	r3, #80	; 0x50
 80047c4:	2232      	movs	r2, #50	; 0x32
 80047c6:	2123      	movs	r1, #35	; 0x23
 80047c8:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80047cc:	f000 ffa0 	bl	8005710 <LCD_DrawRect>
/// FIN PREMIERE LIGNE DE SLIDERS DE L'INTERFACE

/// DEBUT DEUXIEME LIGNE DE SLIDERS DE L'INTERFACE
	/* rate (frequence) range */
	LCD_DrawRect(40,150,50,80);
 80047d0:	2350      	movs	r3, #80	; 0x50
 80047d2:	2232      	movs	r2, #50	; 0x32
 80047d4:	2196      	movs	r1, #150	; 0x96
 80047d6:	2028      	movs	r0, #40	; 0x28
 80047d8:	f000 ff9a 	bl	8005710 <LCD_DrawRect>
	/* depth (profondeur) range */
	LCD_DrawRect(120,150,50,80);
 80047dc:	2350      	movs	r3, #80	; 0x50
 80047de:	2232      	movs	r2, #50	; 0x32
 80047e0:	2196      	movs	r1, #150	; 0x96
 80047e2:	2078      	movs	r0, #120	; 0x78
 80047e4:	f000 ff94 	bl	8005710 <LCD_DrawRect>
	/* delay (retard) range */
	LCD_DrawRect(200,150,50,80);
 80047e8:	2350      	movs	r3, #80	; 0x50
 80047ea:	2232      	movs	r2, #50	; 0x32
 80047ec:	2196      	movs	r1, #150	; 0x96
 80047ee:	20c8      	movs	r0, #200	; 0xc8
 80047f0:	f000 ff8e 	bl	8005710 <LCD_DrawRect>
	/* feedback range */
	LCD_DrawRect(280,150,50,80);
 80047f4:	2350      	movs	r3, #80	; 0x50
 80047f6:	2232      	movs	r2, #50	; 0x32
 80047f8:	2196      	movs	r1, #150	; 0x96
 80047fa:	f44f 708c 	mov.w	r0, #280	; 0x118
 80047fe:	f000 ff87 	bl	8005710 <LCD_DrawRect>
	/* "en plus" range */
	LCD_DrawRect(360,150,50,80);
 8004802:	2350      	movs	r3, #80	; 0x50
 8004804:	2232      	movs	r2, #50	; 0x32
 8004806:	2196      	movs	r1, #150	; 0x96
 8004808:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800480c:	f000 ff80 	bl	8005710 <LCD_DrawRect>
/// FIN DEUXIEME LIGNE DE SLIDERS DE L'INTERFACE


	/* Init Vol, Delay, Feed */
	LCD_SetFont(&Font12); 			//pour la police
 8004810:	4850      	ldr	r0, [pc, #320]	; (8004954 <uiDisplayBasic+0x1f8>)
 8004812:	f000 fe6d 	bl	80054f0 <LCD_SetFont>

/// DEBUT PREMIERE LIGNE DE SLIDERS DE L'INTERFACE
	LCD_DrawString(40,20,(uint8_t *) "Flanger", LEFT_MODE, true);
 8004816:	2301      	movs	r3, #1
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	2303      	movs	r3, #3
 800481c:	4a4e      	ldr	r2, [pc, #312]	; (8004958 <uiDisplayBasic+0x1fc>)
 800481e:	2114      	movs	r1, #20
 8004820:	2028      	movs	r0, #40	; 0x28
 8004822:	f000 fedf 	bl	80055e4 <LCD_DrawString>
	LCD_DrawString(120,20,(uint8_t *) "Chorus", LEFT_MODE, true);
 8004826:	2301      	movs	r3, #1
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2303      	movs	r3, #3
 800482c:	4a4b      	ldr	r2, [pc, #300]	; (800495c <uiDisplayBasic+0x200>)
 800482e:	2114      	movs	r1, #20
 8004830:	2078      	movs	r0, #120	; 0x78
 8004832:	f000 fed7 	bl	80055e4 <LCD_DrawString>
	LCD_DrawString(200,20,(uint8_t *) "Phaser", LEFT_MODE, true);
 8004836:	2301      	movs	r3, #1
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	2303      	movs	r3, #3
 800483c:	4a48      	ldr	r2, [pc, #288]	; (8004960 <uiDisplayBasic+0x204>)
 800483e:	2114      	movs	r1, #20
 8004840:	20c8      	movs	r0, #200	; 0xc8
 8004842:	f000 fecf 	bl	80055e4 <LCD_DrawString>
	LCD_DrawString(280,20,(uint8_t *) "Reverb", LEFT_MODE, true);
 8004846:	2301      	movs	r3, #1
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2303      	movs	r3, #3
 800484c:	4a45      	ldr	r2, [pc, #276]	; (8004964 <uiDisplayBasic+0x208>)
 800484e:	2114      	movs	r1, #20
 8004850:	f44f 708c 	mov.w	r0, #280	; 0x118
 8004854:	f000 fec6 	bl	80055e4 <LCD_DrawString>
	LCD_DrawString(360,20,(uint8_t *) "Volume", LEFT_MODE, true);
 8004858:	2301      	movs	r3, #1
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	2303      	movs	r3, #3
 800485e:	4a42      	ldr	r2, [pc, #264]	; (8004968 <uiDisplayBasic+0x20c>)
 8004860:	2114      	movs	r1, #20
 8004862:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8004866:	f000 febd 	bl	80055e4 <LCD_DrawString>
/// FIN PREMIERE LIGNE DE SLIDERS DE L'INTERFACE

/// DEBUT DEUXIEME LIGNE DE SLIDERS DE L'INTERFACE
	LCD_DrawString(40,135,(uint8_t *) "Rate", LEFT_MODE, true);
 800486a:	2301      	movs	r3, #1
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	2303      	movs	r3, #3
 8004870:	4a3e      	ldr	r2, [pc, #248]	; (800496c <uiDisplayBasic+0x210>)
 8004872:	2187      	movs	r1, #135	; 0x87
 8004874:	2028      	movs	r0, #40	; 0x28
 8004876:	f000 feb5 	bl	80055e4 <LCD_DrawString>
	LCD_DrawString(120,135,(uint8_t *) "Depth", LEFT_MODE, true);
 800487a:	2301      	movs	r3, #1
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	2303      	movs	r3, #3
 8004880:	4a3b      	ldr	r2, [pc, #236]	; (8004970 <uiDisplayBasic+0x214>)
 8004882:	2187      	movs	r1, #135	; 0x87
 8004884:	2078      	movs	r0, #120	; 0x78
 8004886:	f000 fead 	bl	80055e4 <LCD_DrawString>
	LCD_DrawString(200,135,(uint8_t *) "Delay", LEFT_MODE, true);
 800488a:	2301      	movs	r3, #1
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	2303      	movs	r3, #3
 8004890:	4a38      	ldr	r2, [pc, #224]	; (8004974 <uiDisplayBasic+0x218>)
 8004892:	2187      	movs	r1, #135	; 0x87
 8004894:	20c8      	movs	r0, #200	; 0xc8
 8004896:	f000 fea5 	bl	80055e4 <LCD_DrawString>
	LCD_DrawString(280,135,(uint8_t *) "Feedback", LEFT_MODE, true);
 800489a:	2301      	movs	r3, #1
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2303      	movs	r3, #3
 80048a0:	4a35      	ldr	r2, [pc, #212]	; (8004978 <uiDisplayBasic+0x21c>)
 80048a2:	2187      	movs	r1, #135	; 0x87
 80048a4:	f44f 708c 	mov.w	r0, #280	; 0x118
 80048a8:	f000 fe9c 	bl	80055e4 <LCD_DrawString>
	LCD_DrawString(360,135,(uint8_t *) "?????", LEFT_MODE, true);
 80048ac:	2301      	movs	r3, #1
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2303      	movs	r3, #3
 80048b2:	4a32      	ldr	r2, [pc, #200]	; (800497c <uiDisplayBasic+0x220>)
 80048b4:	2187      	movs	r1, #135	; 0x87
 80048b6:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80048ba:	f000 fe93 	bl	80055e4 <LCD_DrawString>
/// FIN DEUXIEME LIGNE DE SLIDERS DE L'INTERFACE

	LCD_SetFillColor(LCD_COLOR_RED);
 80048be:	4830      	ldr	r0, [pc, #192]	; (8004980 <uiDisplayBasic+0x224>)
 80048c0:	f000 fde6 	bl	8005490 <LCD_SetFillColor>

/// DEBUT PREMIERE LIGNE DE SLIDERS DE L'INTERFACE
	LCD_FillRect(41,40+35,49,80-40); //FLANGER
 80048c4:	2328      	movs	r3, #40	; 0x28
 80048c6:	2231      	movs	r2, #49	; 0x31
 80048c8:	214b      	movs	r1, #75	; 0x4b
 80048ca:	2029      	movs	r0, #41	; 0x29
 80048cc:	f000 ff92 	bl	80057f4 <LCD_FillRect>
	LCD_FillRect(121,40+35,49,80-40); //CHORUS
 80048d0:	2328      	movs	r3, #40	; 0x28
 80048d2:	2231      	movs	r2, #49	; 0x31
 80048d4:	214b      	movs	r1, #75	; 0x4b
 80048d6:	2079      	movs	r0, #121	; 0x79
 80048d8:	f000 ff8c 	bl	80057f4 <LCD_FillRect>
	LCD_FillRect(201,40+35,49,80-40); //PHASER
 80048dc:	2328      	movs	r3, #40	; 0x28
 80048de:	2231      	movs	r2, #49	; 0x31
 80048e0:	214b      	movs	r1, #75	; 0x4b
 80048e2:	20c9      	movs	r0, #201	; 0xc9
 80048e4:	f000 ff86 	bl	80057f4 <LCD_FillRect>
	LCD_FillRect(281,40+35,49,80-40); //REVERB
 80048e8:	2328      	movs	r3, #40	; 0x28
 80048ea:	2231      	movs	r2, #49	; 0x31
 80048ec:	214b      	movs	r1, #75	; 0x4b
 80048ee:	f240 1019 	movw	r0, #281	; 0x119
 80048f2:	f000 ff7f 	bl	80057f4 <LCD_FillRect>
	LCD_FillRect(361,40+35,49,80-40); //VOLUME
 80048f6:	2328      	movs	r3, #40	; 0x28
 80048f8:	2231      	movs	r2, #49	; 0x31
 80048fa:	214b      	movs	r1, #75	; 0x4b
 80048fc:	f240 1069 	movw	r0, #361	; 0x169
 8004900:	f000 ff78 	bl	80057f4 <LCD_FillRect>
/// FIN PREMIERE LIGNE DE SLIDERS DE L'INTERFACE

/// DEBUT DEUXIEME LIGNE DE SLIDERS DE L'INTERFACE
	LCD_FillRect(41,40+150,49,80-40); //RATE FREQUENCE
 8004904:	2328      	movs	r3, #40	; 0x28
 8004906:	2231      	movs	r2, #49	; 0x31
 8004908:	21be      	movs	r1, #190	; 0xbe
 800490a:	2029      	movs	r0, #41	; 0x29
 800490c:	f000 ff72 	bl	80057f4 <LCD_FillRect>
	LCD_FillRect(121,40+150,49,80-40); //DEPTH PROFONDEUR
 8004910:	2328      	movs	r3, #40	; 0x28
 8004912:	2231      	movs	r2, #49	; 0x31
 8004914:	21be      	movs	r1, #190	; 0xbe
 8004916:	2079      	movs	r0, #121	; 0x79
 8004918:	f000 ff6c 	bl	80057f4 <LCD_FillRect>
	LCD_FillRect(201,40+150,49,80-40); //DELAY RETARD
 800491c:	2328      	movs	r3, #40	; 0x28
 800491e:	2231      	movs	r2, #49	; 0x31
 8004920:	21be      	movs	r1, #190	; 0xbe
 8004922:	20c9      	movs	r0, #201	; 0xc9
 8004924:	f000 ff66 	bl	80057f4 <LCD_FillRect>
	LCD_FillRect(281,40+150,49,80-40); //FEEDBACK
 8004928:	2328      	movs	r3, #40	; 0x28
 800492a:	2231      	movs	r2, #49	; 0x31
 800492c:	21be      	movs	r1, #190	; 0xbe
 800492e:	f240 1019 	movw	r0, #281	; 0x119
 8004932:	f000 ff5f 	bl	80057f4 <LCD_FillRect>
	LCD_FillRect(361,40+150,49,80-40); //???
 8004936:	2328      	movs	r3, #40	; 0x28
 8004938:	2231      	movs	r2, #49	; 0x31
 800493a:	21be      	movs	r1, #190	; 0xbe
 800493c:	f240 1069 	movw	r0, #361	; 0x169
 8004940:	f000 ff58 	bl	80057f4 <LCD_FillRect>
/// FIN DEUXIEME LIGNE DE SLIDERS DE L'INTERFACE

}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000024 	.word	0x20000024
 8004950:	0801c4d8 	.word	0x0801c4d8
 8004954:	2000001c 	.word	0x2000001c
 8004958:	0801c4f4 	.word	0x0801c4f4
 800495c:	0801c4fc 	.word	0x0801c4fc
 8004960:	0801c504 	.word	0x0801c504
 8004964:	0801c50c 	.word	0x0801c50c
 8004968:	0801c514 	.word	0x0801c514
 800496c:	0801c51c 	.word	0x0801c51c
 8004970:	0801c524 	.word	0x0801c524
 8004974:	0801c52c 	.word	0x0801c52c
 8004978:	0801c534 	.word	0x0801c534
 800497c:	0801c540 	.word	0x0801c540
 8004980:	ffff0000 	.word	0xffff0000

08004984 <printDelay>:
	uint16_t Y = 135;
	LCD_DrawString(X,Y,(uint8_t *)depth_char, LEFT_MODE, true);
}

                                                                         /// DELAY
static void printDelay(uint32_t x){
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8
 800498a:	6078      	str	r0, [r7, #4]
	char delay_char[10];
	sprintf(delay_char, "%lu %%",x);
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	490a      	ldr	r1, [pc, #40]	; (80049bc <printDelay+0x38>)
 8004994:	4618      	mov	r0, r3
 8004996:	f016 fc95 	bl	801b2c4 <siprintf>
	uint16_t X = 200;
 800499a:	23c8      	movs	r3, #200	; 0xc8
 800499c:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 135;
 800499e:	2387      	movs	r3, #135	; 0x87
 80049a0:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)delay_char, LEFT_MODE, true);
 80049a2:	f107 0208 	add.w	r2, r7, #8
 80049a6:	8ab9      	ldrh	r1, [r7, #20]
 80049a8:	8af8      	ldrh	r0, [r7, #22]
 80049aa:	2301      	movs	r3, #1
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2303      	movs	r3, #3
 80049b0:	f000 fe18 	bl	80055e4 <LCD_DrawString>
}
 80049b4:	bf00      	nop
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	0801c548 	.word	0x0801c548

080049c0 <uiSliderFlanger>:

///**********************************************************************///
///                          VALEUR DE FLANGER                           ///
///**********************************************************************///

void uiSliderFlanger(){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b090      	sub	sp, #64	; 0x40
 80049c4:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 80049c6:	463b      	mov	r3, r7
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fabb 	bl	8005f44 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 80049ce:	783b      	ldrb	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d05a      	beq.n	8004a8a <uiSliderFlanger+0xca>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 80049d8:	89bb      	ldrh	r3, [r7, #12]
 80049da:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 40;
 80049dc:	2328      	movs	r3, #40	; 0x28
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 35;
 80049e0:	2323      	movs	r3, #35	; 0x23
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 50;
 80049e4:	2332      	movs	r3, #50	; 0x32
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 80;
 80049e8:	2350      	movs	r3, #80	; 0x50
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 80049ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f0:	429a      	cmp	r2, r3
 80049f2:	da4a      	bge.n	8004a8a <uiSliderFlanger+0xca>
 80049f4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80049f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	440b      	add	r3, r1
 80049fc:	429a      	cmp	r2, r3
 80049fe:	da44      	bge.n	8004a8a <uiSliderFlanger+0xca>
 8004a00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a04:	429a      	cmp	r2, r3
 8004a06:	da40      	bge.n	8004a8a <uiSliderFlanger+0xca>
 8004a08:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004a0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	440b      	add	r3, r1
 8004a10:	429a      	cmp	r2, r3
 8004a12:	da3a      	bge.n	8004a8a <uiSliderFlanger+0xca>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 8004a14:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	1ad2      	subs	r2, r2, r3
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <uiSliderFlanger+0xd4>)
 8004a22:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8004a24:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <uiSliderFlanger+0xd4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff ffab 	bl	8004984 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 8004a2e:	481a      	ldr	r0, [pc, #104]	; (8004a98 <uiSliderFlanger+0xd8>)
 8004a30:	f000 fd2e 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	b298      	uxth	r0, r3
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	b299      	uxth	r1, r3
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f000 fecd 	bl	80057f4 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 8004a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5e:	f000 fd17 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	b299      	uxth	r1, r3
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8004a86:	f000 feb5 	bl	80057f4 <LCD_FillRect>
				}
	}
}
 8004a8a:	bf00      	nop
 8004a8c:	3740      	adds	r7, #64	; 0x40
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000364 	.word	0x20000364
 8004a98:	ffff0000 	.word	0xffff0000

08004a9c <uiSliderChorus>:

///**********************************************************************///
///                          VALEUR DE CHORUS                            ///
///**********************************************************************///

void uiSliderChorus(){
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b090      	sub	sp, #64	; 0x40
 8004aa0:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 fa4d 	bl	8005f44 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004aaa:	783b      	ldrb	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d05a      	beq.n	8004b66 <uiSliderChorus+0xca>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004ab0:	887b      	ldrh	r3, [r7, #2]
 8004ab2:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004ab4:	89bb      	ldrh	r3, [r7, #12]
 8004ab6:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 120;
 8004ab8:	2378      	movs	r3, #120	; 0x78
 8004aba:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 35;
 8004abc:	2323      	movs	r3, #35	; 0x23
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 50;
 8004ac0:	2332      	movs	r3, #50	; 0x32
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 80;
 8004ac4:	2350      	movs	r3, #80	; 0x50
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004acc:	429a      	cmp	r2, r3
 8004ace:	da4a      	bge.n	8004b66 <uiSliderChorus+0xca>
 8004ad0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004ad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	440b      	add	r3, r1
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	da44      	bge.n	8004b66 <uiSliderChorus+0xca>
 8004adc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	da40      	bge.n	8004b66 <uiSliderChorus+0xca>
 8004ae4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004ae6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	440b      	add	r3, r1
 8004aec:	429a      	cmp	r2, r3
 8004aee:	da3a      	bge.n	8004b66 <uiSliderChorus+0xca>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 8004af0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	1ad2      	subs	r2, r2, r3
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <uiSliderChorus+0xd4>)
 8004afe:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8004b00:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <uiSliderChorus+0xd4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff3d 	bl	8004984 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 8004b0a:	481a      	ldr	r0, [pc, #104]	; (8004b74 <uiSliderChorus+0xd8>)
 8004b0c:	f000 fcc0 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3301      	adds	r3, #1
 8004b16:	b298      	uxth	r0, r3
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	b299      	uxth	r1, r3
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f000 fe5f 	bl	80057f4 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 8004b36:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3a:	f000 fca9 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	b299      	uxth	r1, r3
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8004b62:	f000 fe47 	bl	80057f4 <LCD_FillRect>
				}
	}
}
 8004b66:	bf00      	nop
 8004b68:	3740      	adds	r7, #64	; 0x40
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000364 	.word	0x20000364
 8004b74:	ffff0000 	.word	0xffff0000

08004b78 <uiSliderPhaser>:

///**********************************************************************///
///                          VALEUR DE PHASER                            ///
///**********************************************************************///

void uiSliderPhaser(){
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b090      	sub	sp, #64	; 0x40
 8004b7c:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004b7e:	463b      	mov	r3, r7
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 f9df 	bl	8005f44 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004b86:	783b      	ldrb	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d05a      	beq.n	8004c42 <uiSliderPhaser+0xca>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004b90:	89bb      	ldrh	r3, [r7, #12]
 8004b92:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 200;
 8004b94:	23c8      	movs	r3, #200	; 0xc8
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 35;
 8004b98:	2323      	movs	r3, #35	; 0x23
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 50;
 8004b9c:	2332      	movs	r3, #50	; 0x32
 8004b9e:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 80;
 8004ba0:	2350      	movs	r3, #80	; 0x50
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004ba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	da4a      	bge.n	8004c42 <uiSliderPhaser+0xca>
 8004bac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004bae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	440b      	add	r3, r1
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	da44      	bge.n	8004c42 <uiSliderPhaser+0xca>
 8004bb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	da40      	bge.n	8004c42 <uiSliderPhaser+0xca>
 8004bc0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004bc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	440b      	add	r3, r1
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	da3a      	bge.n	8004c42 <uiSliderPhaser+0xca>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 8004bcc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	1ad2      	subs	r2, r2, r3
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <uiSliderPhaser+0xd4>)
 8004bda:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <uiSliderPhaser+0xd4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fecf 	bl	8004984 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 8004be6:	481a      	ldr	r0, [pc, #104]	; (8004c50 <uiSliderPhaser+0xd8>)
 8004be8:	f000 fc52 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	b298      	uxth	r0, r3
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	b299      	uxth	r1, r3
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f000 fdf1 	bl	80057f4 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 8004c12:	f04f 30ff 	mov.w	r0, #4294967295
 8004c16:	f000 fc3b 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	b299      	uxth	r1, r3
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8004c3e:	f000 fdd9 	bl	80057f4 <LCD_FillRect>
				}
	}
}
 8004c42:	bf00      	nop
 8004c44:	3740      	adds	r7, #64	; 0x40
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000364 	.word	0x20000364
 8004c50:	ffff0000 	.word	0xffff0000

08004c54 <uiSliderReverb>:

///**********************************************************************///
///                          VALEUR DE REVERB                            ///
///**********************************************************************///

void uiSliderReverb(){
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b090      	sub	sp, #64	; 0x40
 8004c58:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004c5a:	463b      	mov	r3, r7
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 f971 	bl	8005f44 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004c62:	783b      	ldrb	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d05b      	beq.n	8004d20 <uiSliderReverb+0xcc>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004c6c:	89bb      	ldrh	r3, [r7, #12]
 8004c6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 280;
 8004c70:	f44f 738c 	mov.w	r3, #280	; 0x118
 8004c74:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 35;
 8004c76:	2323      	movs	r3, #35	; 0x23
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 50;
 8004c7a:	2332      	movs	r3, #50	; 0x32
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 80;
 8004c7e:	2350      	movs	r3, #80	; 0x50
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004c82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c86:	429a      	cmp	r2, r3
 8004c88:	da4a      	bge.n	8004d20 <uiSliderReverb+0xcc>
 8004c8a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	440b      	add	r3, r1
 8004c92:	429a      	cmp	r2, r3
 8004c94:	da44      	bge.n	8004d20 <uiSliderReverb+0xcc>
 8004c96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	da40      	bge.n	8004d20 <uiSliderReverb+0xcc>
 8004c9e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004ca0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	440b      	add	r3, r1
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	da3a      	bge.n	8004d20 <uiSliderReverb+0xcc>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 8004caa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <uiSliderReverb+0xd4>)
 8004cb8:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <uiSliderReverb+0xd4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fe60 	bl	8004984 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 8004cc4:	4819      	ldr	r0, [pc, #100]	; (8004d2c <uiSliderReverb+0xd8>)
 8004cc6:	f000 fbe3 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	b298      	uxth	r0, r3
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	b299      	uxth	r1, r3
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f000 fd82 	bl	80057f4 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	f000 fbcc 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	b299      	uxth	r1, r3
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8004d1c:	f000 fd6a 	bl	80057f4 <LCD_FillRect>
				}
	}
}
 8004d20:	bf00      	nop
 8004d22:	3740      	adds	r7, #64	; 0x40
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000364 	.word	0x20000364
 8004d2c:	ffff0000 	.word	0xffff0000

08004d30 <uiSliderRange>:

///**********************************************************************///
///                          VALEUR DE RANGE                             ///
///**********************************************************************///

void uiSliderRange(){
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b090      	sub	sp, #64	; 0x40
 8004d34:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004d36:	463b      	mov	r3, r7
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 f903 	bl	8005f44 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004d3e:	783b      	ldrb	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d05b      	beq.n	8004dfc <uiSliderRange+0xcc>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004d44:	887b      	ldrh	r3, [r7, #2]
 8004d46:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004d48:	89bb      	ldrh	r3, [r7, #12]
 8004d4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 360;
 8004d4c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 35;
 8004d52:	2323      	movs	r3, #35	; 0x23
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 50;
 8004d56:	2332      	movs	r3, #50	; 0x32
 8004d58:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 80;
 8004d5a:	2350      	movs	r3, #80	; 0x50
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004d5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d62:	429a      	cmp	r2, r3
 8004d64:	da4a      	bge.n	8004dfc <uiSliderRange+0xcc>
 8004d66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	440b      	add	r3, r1
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	da44      	bge.n	8004dfc <uiSliderRange+0xcc>
 8004d72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d76:	429a      	cmp	r2, r3
 8004d78:	da40      	bge.n	8004dfc <uiSliderRange+0xcc>
 8004d7a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004d7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	440b      	add	r3, r1
 8004d82:	429a      	cmp	r2, r3
 8004d84:	da3a      	bge.n	8004dfc <uiSliderRange+0xcc>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 8004d86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <uiSliderRange+0xd4>)
 8004d94:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8004d96:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <uiSliderRange+0xd4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff fdf2 	bl	8004984 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 8004da0:	4819      	ldr	r0, [pc, #100]	; (8004e08 <uiSliderRange+0xd8>)
 8004da2:	f000 fb75 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3301      	adds	r3, #1
 8004dac:	b298      	uxth	r0, r3
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3301      	adds	r3, #1
 8004db4:	b299      	uxth	r1, r3
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f000 fd14 	bl	80057f4 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	f000 fb5e 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	b299      	uxth	r1, r3
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4413      	add	r3, r2
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8004df8:	f000 fcfc 	bl	80057f4 <LCD_FillRect>
				}
	}
}
 8004dfc:	bf00      	nop
 8004dfe:	3740      	adds	r7, #64	; 0x40
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000364 	.word	0x20000364
 8004e08:	ffff0000 	.word	0xffff0000

08004e0c <uiSliderRate>:

///**********************************************************************///
///                          VALEUR DE RATE                              ///
///**********************************************************************///

void uiSliderRate(){
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b090      	sub	sp, #64	; 0x40
 8004e10:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004e12:	463b      	mov	r3, r7
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 f895 	bl	8005f44 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004e1a:	783b      	ldrb	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05a      	beq.n	8004ed6 <uiSliderRate+0xca>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004e20:	887b      	ldrh	r3, [r7, #2]
 8004e22:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004e24:	89bb      	ldrh	r3, [r7, #12]
 8004e26:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 40;
 8004e28:	2328      	movs	r3, #40	; 0x28
 8004e2a:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 150;
 8004e2c:	2396      	movs	r3, #150	; 0x96
 8004e2e:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 50;
 8004e30:	2332      	movs	r3, #50	; 0x32
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 80;
 8004e34:	2350      	movs	r3, #80	; 0x50
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004e38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	da4a      	bge.n	8004ed6 <uiSliderRate+0xca>
 8004e40:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	440b      	add	r3, r1
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	da44      	bge.n	8004ed6 <uiSliderRate+0xca>
 8004e4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e50:	429a      	cmp	r2, r3
 8004e52:	da40      	bge.n	8004ed6 <uiSliderRate+0xca>
 8004e54:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004e56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	440b      	add	r3, r1
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	da3a      	bge.n	8004ed6 <uiSliderRate+0xca>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 8004e60:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	1ad2      	subs	r2, r2, r3
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ee0 <uiSliderRate+0xd4>)
 8004e6e:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8004e70:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <uiSliderRate+0xd4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fd85 	bl	8004984 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 8004e7a:	481a      	ldr	r0, [pc, #104]	; (8004ee4 <uiSliderRate+0xd8>)
 8004e7c:	f000 fb08 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	b298      	uxth	r0, r3
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	b299      	uxth	r1, r3
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f000 fca7 	bl	80057f4 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	f000 faf1 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b299      	uxth	r1, r3
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8004ed2:	f000 fc8f 	bl	80057f4 <LCD_FillRect>
				}
	}
}
 8004ed6:	bf00      	nop
 8004ed8:	3740      	adds	r7, #64	; 0x40
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000364 	.word	0x20000364
 8004ee4:	ffff0000 	.word	0xffff0000

08004ee8 <uiSliderDepth>:

///**********************************************************************///
///                          VALEUR DE DEPTH                             ///
///**********************************************************************///

void uiSliderDepth(){
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b090      	sub	sp, #64	; 0x40
 8004eec:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004eee:	463b      	mov	r3, r7
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 f827 	bl	8005f44 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004ef6:	783b      	ldrb	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d05a      	beq.n	8004fb2 <uiSliderDepth+0xca>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004efc:	887b      	ldrh	r3, [r7, #2]
 8004efe:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004f00:	89bb      	ldrh	r3, [r7, #12]
 8004f02:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 120;
 8004f04:	2378      	movs	r3, #120	; 0x78
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 150;
 8004f08:	2396      	movs	r3, #150	; 0x96
 8004f0a:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 50;
 8004f0c:	2332      	movs	r3, #50	; 0x32
 8004f0e:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 80;
 8004f10:	2350      	movs	r3, #80	; 0x50
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004f14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	da4a      	bge.n	8004fb2 <uiSliderDepth+0xca>
 8004f1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	440b      	add	r3, r1
 8004f24:	429a      	cmp	r2, r3
 8004f26:	da44      	bge.n	8004fb2 <uiSliderDepth+0xca>
 8004f28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	da40      	bge.n	8004fb2 <uiSliderDepth+0xca>
 8004f30:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004f32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	440b      	add	r3, r1
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	da3a      	bge.n	8004fb2 <uiSliderDepth+0xca>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 8004f3c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	1ad2      	subs	r2, r2, r3
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <uiSliderDepth+0xd4>)
 8004f4a:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <uiSliderDepth+0xd4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fd17 	bl	8004984 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 8004f56:	481a      	ldr	r0, [pc, #104]	; (8004fc0 <uiSliderDepth+0xd8>)
 8004f58:	f000 fa9a 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3301      	adds	r3, #1
 8004f62:	b298      	uxth	r0, r3
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3301      	adds	r3, #1
 8004f6a:	b299      	uxth	r1, r3
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f000 fc39 	bl	80057f4 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	f000 fa83 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	b299      	uxth	r1, r3
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8004fae:	f000 fc21 	bl	80057f4 <LCD_FillRect>
				}
	}
}
 8004fb2:	bf00      	nop
 8004fb4:	3740      	adds	r7, #64	; 0x40
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000364 	.word	0x20000364
 8004fc0:	ffff0000 	.word	0xffff0000

08004fc4 <uiSliderDelay>:

///**********************************************************************///
///                          VALEUR DE DELAY                             ///
///**********************************************************************///

void uiSliderDelay(){
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b090      	sub	sp, #64	; 0x40
 8004fc8:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004fca:	463b      	mov	r3, r7
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 ffb9 	bl	8005f44 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 8004fd2:	783b      	ldrb	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d05a      	beq.n	800508e <uiSliderDelay+0xca>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004fd8:	887b      	ldrh	r3, [r7, #2]
 8004fda:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 8004fdc:	89bb      	ldrh	r3, [r7, #12]
 8004fde:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 200;
 8004fe0:	23c8      	movs	r3, #200	; 0xc8
 8004fe2:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 150;
 8004fe4:	2396      	movs	r3, #150	; 0x96
 8004fe6:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 50;
 8004fe8:	2332      	movs	r3, #50	; 0x32
 8004fea:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 80;
 8004fec:	2350      	movs	r3, #80	; 0x50
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 8004ff0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	da4a      	bge.n	800508e <uiSliderDelay+0xca>
 8004ff8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004ffa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	440b      	add	r3, r1
 8005000:	429a      	cmp	r2, r3
 8005002:	da44      	bge.n	800508e <uiSliderDelay+0xca>
 8005004:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005008:	429a      	cmp	r2, r3
 800500a:	da40      	bge.n	800508e <uiSliderDelay+0xca>
 800500c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800500e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	440b      	add	r3, r1
 8005014:	429a      	cmp	r2, r3
 8005016:	da3a      	bge.n	800508e <uiSliderDelay+0xca>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 8005018:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	1ad2      	subs	r2, r2, r3
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <uiSliderDelay+0xd4>)
 8005026:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8005028:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <uiSliderDelay+0xd4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff fca9 	bl	8004984 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 8005032:	481a      	ldr	r0, [pc, #104]	; (800509c <uiSliderDelay+0xd8>)
 8005034:	f000 fa2c 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	b29b      	uxth	r3, r3
 800503c:	3301      	adds	r3, #1
 800503e:	b298      	uxth	r0, r3
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	b29b      	uxth	r3, r3
 8005044:	3301      	adds	r3, #1
 8005046:	b299      	uxth	r1, r3
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	b29b      	uxth	r3, r3
 800504c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	b29a      	uxth	r2, r3
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29b      	uxth	r3, r3
 800505a:	f000 fbcb 	bl	80057f4 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 800505e:	f04f 30ff 	mov.w	r0, #4294967295
 8005062:	f000 fa15 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8005066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005068:	b29b      	uxth	r3, r3
 800506a:	3301      	adds	r3, #1
 800506c:	b299      	uxth	r1, r3
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	b29a      	uxth	r2, r3
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	b29b      	uxth	r3, r3
 8005076:	4413      	add	r3, r2
 8005078:	b29a      	uxth	r2, r3
 800507a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	b29a      	uxth	r2, r3
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29b      	uxth	r3, r3
 8005088:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 800508a:	f000 fbb3 	bl	80057f4 <LCD_FillRect>
				}
	}
}
 800508e:	bf00      	nop
 8005090:	3740      	adds	r7, #64	; 0x40
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000364 	.word	0x20000364
 800509c:	ffff0000 	.word	0xffff0000

080050a0 <uiSliderFeedback>:

///**********************************************************************///
///                          VALEUR DE FEEDBACK                          ///
///**********************************************************************///

void uiSliderFeedback(){
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b090      	sub	sp, #64	; 0x40
 80050a4:	af00      	add	r7, sp, #0
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 80050a6:	463b      	mov	r3, r7
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 ff4b 	bl	8005f44 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 80050ae:	783b      	ldrb	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d05b      	beq.n	800516c <uiSliderFeedback+0xcc>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 80050b4:	887b      	ldrh	r3, [r7, #2]
 80050b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
				uint16_t yt = TS_State.touchY[0];
 80050b8:	89bb      	ldrh	r3, [r7, #12]
 80050ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
				/* Init position and size of elements */
				int x = 280;
 80050bc:	f44f 738c 	mov.w	r3, #280	; 0x118
 80050c0:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 150;
 80050c2:	2396      	movs	r3, #150	; 0x96
 80050c4:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 50;
 80050c6:	2332      	movs	r3, #50	; 0x32
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 80;
 80050ca:	2350      	movs	r3, #80	; 0x50
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* If touch is in the delay bar */
				if(xt>x && xt<x+w && yt>y && yt<y+h){
 80050ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80050d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050d2:	429a      	cmp	r2, r3
 80050d4:	da4a      	bge.n	800516c <uiSliderFeedback+0xcc>
 80050d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80050d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	440b      	add	r3, r1
 80050de:	429a      	cmp	r2, r3
 80050e0:	da44      	bge.n	800516c <uiSliderFeedback+0xcc>
 80050e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e6:	429a      	cmp	r2, r3
 80050e8:	da40      	bge.n	800516c <uiSliderFeedback+0xcc>
 80050ea:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80050ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	440b      	add	r3, r1
 80050f2:	429a      	cmp	r2, r3
 80050f4:	da3a      	bge.n	800516c <uiSliderFeedback+0xcc>
					/* Position x into delay value in ms */
					delayMs=((xt-x)*10)/2;
 80050f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	1ad2      	subs	r2, r2, r3
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <uiSliderFeedback+0xd4>)
 8005104:	6013      	str	r3, [r2, #0]
					/* Display new delay value */
					printDelay((uint32_t) delayMs);
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <uiSliderFeedback+0xd4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fc3a 	bl	8004984 <printDelay>

					/* RED Bar for level */
 					LCD_SetFillColor(LCD_COLOR_RED);
 8005110:	4819      	ldr	r0, [pc, #100]	; (8005178 <uiSliderFeedback+0xd8>)
 8005112:	f000 f9bd 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(x+1,y+1,xt-x,h-1);
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	b29b      	uxth	r3, r3
 800511a:	3301      	adds	r3, #1
 800511c:	b298      	uxth	r0, r3
 800511e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005120:	b29b      	uxth	r3, r3
 8005122:	3301      	adds	r3, #1
 8005124:	b299      	uxth	r1, r3
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	b29b      	uxth	r3, r3
 800512a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	b29a      	uxth	r2, r3
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29b      	uxth	r3, r3
 8005138:	f000 fb5c 	bl	80057f4 <LCD_FillRect>
					/* WHITE Bar for update */
					LCD_SetFillColor(LCD_COLOR_WHITE);
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	f000 f9a6 	bl	8005490 <LCD_SetFillColor>
					LCD_FillRect(xt,y+1,w+x-xt,h-1);
 8005144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005146:	b29b      	uxth	r3, r3
 8005148:	3301      	adds	r3, #1
 800514a:	b299      	uxth	r1, r3
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	b29a      	uxth	r2, r3
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	b29b      	uxth	r3, r3
 8005154:	4413      	add	r3, r2
 8005156:	b29a      	uxth	r2, r3
 8005158:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	b29a      	uxth	r2, r3
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8005168:	f000 fb44 	bl	80057f4 <LCD_FillRect>
				}
	}
}
 800516c:	bf00      	nop
 800516e:	3740      	adds	r7, #64	; 0x40
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000364 	.word	0x20000364
 8005178:	ffff0000 	.word	0xffff0000

0800517c <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8005180:	2201      	movs	r2, #1
 8005182:	2102      	movs	r1, #2
 8005184:	4802      	ldr	r0, [pc, #8]	; (8005190 <LED_On+0x14>)
 8005186:	f004 fc7b 	bl	8009a80 <HAL_GPIO_WritePin>
}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40022000 	.word	0x40022000

08005194 <LED_Off>:

void LED_Off(){
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 8005198:	2200      	movs	r2, #0
 800519a:	2102      	movs	r1, #2
 800519c:	4802      	ldr	r0, [pc, #8]	; (80051a8 <LED_Off+0x14>)
 800519e:	f004 fc6f 	bl	8009a80 <HAL_GPIO_WritePin>
}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40022000 	.word	0x40022000

080051ac <LED_Toggle>:

void LED_Toggle(){
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80051b0:	2102      	movs	r1, #2
 80051b2:	4802      	ldr	r0, [pc, #8]	; (80051bc <LED_Toggle+0x10>)
 80051b4:	f004 fc7d 	bl	8009ab2 <HAL_GPIO_TogglePin>

}
 80051b8:	bf00      	nop
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40022000 	.word	0x40022000

080051c0 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 80051c8:	1d39      	adds	r1, r7, #4
 80051ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ce:	2201      	movs	r2, #1
 80051d0:	4803      	ldr	r0, [pc, #12]	; (80051e0 <__io_putchar+0x20>)
 80051d2:	f00c ff13 	bl	8011ffc <HAL_UART_Transmit>
	return ch;
 80051d6:	687b      	ldr	r3, [r7, #4]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	2000a544 	.word	0x2000a544

080051e4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	; 0x28
 80051e8:	af04      	add	r7, sp, #16
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	461a      	mov	r2, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	72fb      	strb	r3, [r7, #11]
 80051f6:	460b      	mov	r3, r1
 80051f8:	813b      	strh	r3, [r7, #8]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005202:	7afb      	ldrb	r3, [r7, #11]
 8005204:	b299      	uxth	r1, r3
 8005206:	88f8      	ldrh	r0, [r7, #6]
 8005208:	893a      	ldrh	r2, [r7, #8]
 800520a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4603      	mov	r3, r0
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f006 fbc0 	bl	800b9a0 <HAL_I2C_Mem_Read>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005224:	7dfb      	ldrb	r3, [r7, #23]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800522a:	7afb      	ldrb	r3, [r7, #11]
 800522c:	4619      	mov	r1, r3
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f832 	bl	8005298 <I2Cx_Error>
  }
  return status;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b08a      	sub	sp, #40	; 0x28
 8005242:	af04      	add	r7, sp, #16
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	4608      	mov	r0, r1
 8005248:	4611      	mov	r1, r2
 800524a:	461a      	mov	r2, r3
 800524c:	4603      	mov	r3, r0
 800524e:	72fb      	strb	r3, [r7, #11]
 8005250:	460b      	mov	r3, r1
 8005252:	813b      	strh	r3, [r7, #8]
 8005254:	4613      	mov	r3, r2
 8005256:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800525c:	7afb      	ldrb	r3, [r7, #11]
 800525e:	b299      	uxth	r1, r3
 8005260:	88f8      	ldrh	r0, [r7, #6]
 8005262:	893a      	ldrh	r2, [r7, #8]
 8005264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005268:	9302      	str	r3, [sp, #8]
 800526a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	4603      	mov	r3, r0
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f006 fa7f 	bl	800b778 <HAL_I2C_Mem_Write>
 800527a:	4603      	mov	r3, r0
 800527c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800527e:	7dfb      	ldrb	r3, [r7, #23]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	4619      	mov	r1, r3
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f805 	bl	8005298 <I2Cx_Error>
  }
  return status;
 800528e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f006 fa37 	bl	800b718 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f006 f9a4 	bl	800b5f8 <HAL_I2C_Init>
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af02      	add	r7, sp, #8
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
 80052c2:	460b      	mov	r3, r1
 80052c4:	80bb      	strh	r3, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 80052ca:	887b      	ldrh	r3, [r7, #2]
 80052cc:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80052ce:	89fb      	ldrh	r3, [r7, #14]
 80052d0:	0a1b      	lsrs	r3, r3, #8
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80052d6:	89fb      	ldrh	r3, [r7, #14]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	b29b      	uxth	r3, r3
 80052dc:	b21a      	sxth	r2, r3
 80052de:	887b      	ldrh	r3, [r7, #2]
 80052e0:	b21b      	sxth	r3, r3
 80052e2:	4313      	orrs	r3, r2
 80052e4:	b21b      	sxth	r3, r3
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80052ea:	88ba      	ldrh	r2, [r7, #4]
 80052ec:	79f9      	ldrb	r1, [r7, #7]
 80052ee:	2302      	movs	r3, #2
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	1cbb      	adds	r3, r7, #2
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2302      	movs	r3, #2
 80052f8:	4803      	ldr	r0, [pc, #12]	; (8005308 <AUDIO_I2C_Write+0x50>)
 80052fa:	f7ff ffa0 	bl	800523e <I2Cx_WriteMultiple>
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20009fec 	.word	0x20009fec

0800530c <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	4603      	mov	r3, r0
 8005314:	460a      	mov	r2, r1
 8005316:	71fb      	strb	r3, [r7, #7]
 8005318:	4613      	mov	r3, r2
 800531a:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	81bb      	strh	r3, [r7, #12]
 8005320:	2300      	movs	r3, #0
 8005322:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8005324:	88ba      	ldrh	r2, [r7, #4]
 8005326:	79f9      	ldrb	r1, [r7, #7]
 8005328:	2302      	movs	r3, #2
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	f107 030c 	add.w	r3, r7, #12
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	2302      	movs	r3, #2
 8005334:	480a      	ldr	r0, [pc, #40]	; (8005360 <AUDIO_I2C_Read+0x54>)
 8005336:	f7ff ff55 	bl	80051e4 <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800533a:	89bb      	ldrh	r3, [r7, #12]
 800533c:	0a1b      	lsrs	r3, r3, #8
 800533e:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8005340:	89bb      	ldrh	r3, [r7, #12]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	b29b      	uxth	r3, r3
 8005346:	b21a      	sxth	r2, r3
 8005348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800534c:	4313      	orrs	r3, r2
 800534e:	b21b      	sxth	r3, r3
 8005350:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 8005352:	89fb      	ldrh	r3, [r7, #14]
 8005354:	81bb      	strh	r3, [r7, #12]

  return read_value;
 8005356:	89bb      	ldrh	r3, [r7, #12]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20009fec 	.word	0x20009fec

08005364 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af02      	add	r7, sp, #8
 800536a:	4603      	mov	r3, r0
 800536c:	460a      	mov	r2, r1
 800536e:	71fb      	strb	r3, [r7, #7]
 8005370:	4613      	mov	r3, r2
 8005372:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	b29a      	uxth	r2, r3
 8005378:	2301      	movs	r3, #1
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	1dbb      	adds	r3, r7, #6
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	2301      	movs	r3, #1
 8005382:	2170      	movs	r1, #112	; 0x70
 8005384:	4803      	ldr	r0, [pc, #12]	; (8005394 <TS_I2C_Write+0x30>)
 8005386:	f7ff ff5a 	bl	800523e <I2Cx_WriteMultiple>

}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20009fec 	.word	0x20009fec

08005398 <TS_I2C_Read>:
/**
  * Reads a single control data from the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_I2C_Read(uint8_t Reg){
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af02      	add	r7, sp, #8
 800539e:	4603      	mov	r3, r0
 80053a0:	71fb      	strb	r3, [r7, #7]

  uint8_t read_value = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hi2c3, TS_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	2301      	movs	r3, #1
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	f107 030f 	add.w	r3, r7, #15
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2301      	movs	r3, #1
 80053b6:	2170      	movs	r1, #112	; 0x70
 80053b8:	4803      	ldr	r0, [pc, #12]	; (80053c8 <TS_I2C_Read+0x30>)
 80053ba:	f7ff ff13 	bl	80051e4 <I2Cx_ReadMultiple>

  return read_value;
 80053be:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20009fec 	.word	0x20009fec

080053cc <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 80053d0:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <LCD_Init+0x44>)
 80053d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d002      	beq.n	80053de <LCD_Init+0x12>
 80053d8:	480e      	ldr	r0, [pc, #56]	; (8005414 <LCD_Init+0x48>)
 80053da:	f7fd ffbd 	bl	8003358 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 80053de:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <LCD_Init+0x4c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2200      	movs	r2, #0
 80053e4:	4619      	mov	r1, r3
 80053e6:	480a      	ldr	r0, [pc, #40]	; (8005410 <LCD_Init+0x44>)
 80053e8:	f006 ffb6 	bl	800c358 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 80053ec:	f000 f81a 	bl	8005424 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 80053f0:	480a      	ldr	r0, [pc, #40]	; (800541c <LCD_Init+0x50>)
 80053f2:	f000 f87d 	bl	80054f0 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295
 80053fa:	f000 f861 	bl	80054c0 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 80053fe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005402:	f000 f82d 	bl	8005460 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8005406:	4806      	ldr	r0, [pc, #24]	; (8005420 <LCD_Init+0x54>)
 8005408:	f000 f842 	bl	8005490 <LCD_SetFillColor>


}
 800540c:	bf00      	nop
 800540e:	bd80      	pop	{r7, pc}
 8005410:	2000a404 	.word	0x2000a404
 8005414:	0801c55c 	.word	0x0801c55c
 8005418:	20000014 	.word	0x20000014
 800541c:	2000002c 	.word	0x2000002c
 8005420:	ffff0000 	.word	0xffff0000

08005424 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <LCD_DisplayOn+0x30>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <LCD_DisplayOn+0x30>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005438:	2201      	movs	r2, #1
 800543a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800543e:	4806      	ldr	r0, [pc, #24]	; (8005458 <LCD_DisplayOn+0x34>)
 8005440:	f004 fb1e 	bl	8009a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005444:	2201      	movs	r2, #1
 8005446:	2108      	movs	r1, #8
 8005448:	4804      	ldr	r0, [pc, #16]	; (800545c <LCD_DisplayOn+0x38>)
 800544a:	f004 fb19 	bl	8009a80 <HAL_GPIO_WritePin>
}
 800544e:	bf00      	nop
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	2000a404 	.word	0x2000a404
 8005458:	40022000 	.word	0x40022000
 800545c:	40022800 	.word	0x40022800

08005460 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8005468:	4a07      	ldr	r2, [pc, #28]	; (8005488 <LCD_SetStrokeColor+0x28>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <LCD_SetStrokeColor+0x28>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fad0 	bl	8005a18 <ARGB888ToRGB565>
 8005478:	4603      	mov	r3, r0
 800547a:	461a      	mov	r2, r3
 800547c:	4b03      	ldr	r3, [pc, #12]	; (800548c <LCD_SetStrokeColor+0x2c>)
 800547e:	601a      	str	r2, [r3, #0]
#endif
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	2000036c 	.word	0x2000036c
 800548c:	20000378 	.word	0x20000378

08005490 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8005498:	4a07      	ldr	r2, [pc, #28]	; (80054b8 <LCD_SetFillColor+0x28>)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <LCD_SetFillColor+0x28>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fab8 	bl	8005a18 <ARGB888ToRGB565>
 80054a8:	4603      	mov	r3, r0
 80054aa:	461a      	mov	r2, r3
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <LCD_SetFillColor+0x2c>)
 80054ae:	601a      	str	r2, [r3, #0]
#endif
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000370 	.word	0x20000370
 80054bc:	2000037c 	.word	0x2000037c

080054c0 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 80054c8:	4a07      	ldr	r2, [pc, #28]	; (80054e8 <LCD_SetBackColor+0x28>)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <LCD_SetBackColor+0x28>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 faa0 	bl	8005a18 <ARGB888ToRGB565>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	4b03      	ldr	r3, [pc, #12]	; (80054ec <LCD_SetBackColor+0x2c>)
 80054de:	601a      	str	r2, [r3, #0]
#endif
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000374 	.word	0x20000374
 80054ec:	20000380 	.word	0x20000380

080054f0 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 80054f8:	4a04      	ldr	r2, [pc, #16]	; (800550c <LCD_SetFont+0x1c>)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6013      	str	r3, [r2, #0]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000384 	.word	0x20000384

08005510 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	460a      	mov	r2, r1
 800551a:	80fb      	strh	r3, [r7, #6]
 800551c:	4613      	mov	r3, r2
 800551e:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <LCD_ErasePixel+0x3c>)
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <LCD_ErasePixel+0x40>)
 8005526:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005528:	88ba      	ldrh	r2, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	015b      	lsls	r3, r3, #5
 8005532:	461a      	mov	r2, r3
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	4413      	add	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	440b      	add	r3, r1
 800553c:	b282      	uxth	r2, r0
 800553e:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20000380 	.word	0x20000380
 8005550:	2000a404 	.word	0x2000a404

08005554 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 800555a:	4b08      	ldr	r3, [pc, #32]	; (800557c <LCD_Clear+0x28>)
 800555c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555e:	4618      	mov	r0, r3
 8005560:	4b07      	ldr	r3, [pc, #28]	; (8005580 <LCD_Clear+0x2c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	f44f 7288 	mov.w	r2, #272	; 0x110
 800556c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005570:	f000 fa1a 	bl	80059a8 <LL_FillBuffer>
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	2000a404 	.word	0x2000a404
 8005580:	20000374 	.word	0x20000374

08005584 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8005584:	b590      	push	{r4, r7, lr}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	4611      	mov	r1, r2
 8005590:	461a      	mov	r2, r3
 8005592:	4623      	mov	r3, r4
 8005594:	80fb      	strh	r3, [r7, #6]
 8005596:	4603      	mov	r3, r0
 8005598:	80bb      	strh	r3, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	70fb      	strb	r3, [r7, #3]
 800559e:	4613      	mov	r3, r2
 80055a0:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 80055a2:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <LCD_DrawChar+0x5c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	3b20      	subs	r3, #32
 80055ac:	490c      	ldr	r1, [pc, #48]	; (80055e0 <LCD_DrawChar+0x5c>)
 80055ae:	6809      	ldr	r1, [r1, #0]
 80055b0:	88c9      	ldrh	r1, [r1, #6]
 80055b2:	fb01 f103 	mul.w	r1, r1, r3
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <LCD_DrawChar+0x5c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	889b      	ldrh	r3, [r3, #4]
 80055bc:	3307      	adds	r3, #7
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da00      	bge.n	80055c4 <LCD_DrawChar+0x40>
 80055c2:	3307      	adds	r3, #7
 80055c4:	10db      	asrs	r3, r3, #3
 80055c6:	fb03 f301 	mul.w	r3, r3, r1
 80055ca:	441a      	add	r2, r3
 80055cc:	78bb      	ldrb	r3, [r7, #2]
 80055ce:	88b9      	ldrh	r1, [r7, #4]
 80055d0:	88f8      	ldrh	r0, [r7, #6]
 80055d2:	f000 f941 	bl	8005858 <DrawChar>

}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd90      	pop	{r4, r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000384 	.word	0x20000384

080055e4 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60ba      	str	r2, [r7, #8]
 80055ec:	461a      	mov	r2, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	81fb      	strh	r3, [r7, #14]
 80055f2:	460b      	mov	r3, r1
 80055f4:	81bb      	strh	r3, [r7, #12]
 80055f6:	4613      	mov	r3, r2
 80055f8:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 80055fa:	2301      	movs	r3, #1
 80055fc:	83fb      	strh	r3, [r7, #30]
 80055fe:	2300      	movs	r3, #0
 8005600:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 800560e:	e002      	b.n	8005616 <LCD_DrawString+0x32>
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	3301      	adds	r3, #1
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	617a      	str	r2, [r7, #20]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f6      	bne.n	8005610 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 8005622:	4b3a      	ldr	r3, [pc, #232]	; (800570c <LCD_DrawString+0x128>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	889b      	ldrh	r3, [r3, #4]
 8005628:	461a      	mov	r2, r3
 800562a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800562e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005632:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d014      	beq.n	8005664 <LCD_DrawString+0x80>
 800563a:	2b03      	cmp	r3, #3
 800563c:	dc23      	bgt.n	8005686 <LCD_DrawString+0xa2>
 800563e:	2b01      	cmp	r3, #1
 8005640:	d002      	beq.n	8005648 <LCD_DrawString+0x64>
 8005642:	2b02      	cmp	r3, #2
 8005644:	d011      	beq.n	800566a <LCD_DrawString+0x86>
 8005646:	e01e      	b.n	8005686 <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	4a2f      	ldr	r2, [pc, #188]	; (800570c <LCD_DrawString+0x128>)
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	8892      	ldrh	r2, [r2, #4]
 8005654:	fb02 f303 	mul.w	r3, r2, r3
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	89fb      	ldrh	r3, [r7, #14]
 800565e:	4413      	add	r3, r2
 8005660:	83fb      	strh	r3, [r7, #30]
		break;
 8005662:	e013      	b.n	800568c <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8005664:	89fb      	ldrh	r3, [r7, #14]
 8005666:	83fb      	strh	r3, [r7, #30]
		break;
 8005668:	e010      	b.n	800568c <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	b29a      	uxth	r2, r3
 8005672:	4b26      	ldr	r3, [pc, #152]	; (800570c <LCD_DrawString+0x128>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	889b      	ldrh	r3, [r3, #4]
 8005678:	fb12 f303 	smulbb	r3, r2, r3
 800567c:	b29a      	uxth	r2, r3
 800567e:	89fb      	ldrh	r3, [r7, #14]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	83fb      	strh	r3, [r7, #30]
		break;
 8005684:	e002      	b.n	800568c <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8005686:	89fb      	ldrh	r3, [r7, #14]
 8005688:	83fb      	strh	r3, [r7, #30]
		break;
 800568a:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 800568c:	8bfb      	ldrh	r3, [r7, #30]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <LCD_DrawString+0xb6>
 8005692:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005696:	2b00      	cmp	r3, #0
 8005698:	da16      	bge.n	80056c8 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 800569a:	2301      	movs	r3, #1
 800569c:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800569e:	e013      	b.n	80056c8 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056a8:	89b9      	ldrh	r1, [r7, #12]
 80056aa:	8bf8      	ldrh	r0, [r7, #30]
 80056ac:	f7ff ff6a 	bl	8005584 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 80056b0:	4b16      	ldr	r3, [pc, #88]	; (800570c <LCD_DrawString+0x128>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	889a      	ldrh	r2, [r3, #4]
 80056b6:	8bfb      	ldrh	r3, [r7, #30]
 80056b8:	4413      	add	r3, r2
 80056ba:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	3301      	adds	r3, #1
 80056c0:	60bb      	str	r3, [r7, #8]
		i++;
 80056c2:	8bbb      	ldrh	r3, [r7, #28]
 80056c4:	3301      	adds	r3, #1
 80056c6:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	8bbb      	ldrh	r3, [r7, #28]
 80056d8:	490c      	ldr	r1, [pc, #48]	; (800570c <LCD_DrawString+0x128>)
 80056da:	6809      	ldr	r1, [r1, #0]
 80056dc:	8889      	ldrh	r1, [r1, #4]
 80056de:	fb01 f303 	mul.w	r3, r1, r3
 80056e2:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4908      	ldr	r1, [pc, #32]	; (800570c <LCD_DrawString+0x128>)
 80056ea:	6809      	ldr	r1, [r1, #0]
 80056ec:	8889      	ldrh	r1, [r1, #4]
 80056ee:	428b      	cmp	r3, r1
 80056f0:	bfac      	ite	ge
 80056f2:	2301      	movge	r3, #1
 80056f4:	2300      	movlt	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	4013      	ands	r3, r2
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1cf      	bne.n	80056a0 <LCD_DrawString+0xbc>
	}
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000384 	.word	0x20000384

08005710 <LCD_DrawRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b085      	sub	sp, #20
 8005714:	af02      	add	r7, sp, #8
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	461a      	mov	r2, r3
 800571e:	4623      	mov	r3, r4
 8005720:	80fb      	strh	r3, [r7, #6]
 8005722:	4603      	mov	r3, r0
 8005724:	80bb      	strh	r3, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	807b      	strh	r3, [r7, #2]
 800572a:	4613      	mov	r3, r2
 800572c:	803b      	strh	r3, [r7, #0]

	/* Draw horizontal lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), Width, 1, 0, StrokeColor);
 800572e:	4b2f      	ldr	r3, [pc, #188]	; (80057ec <LCD_DrawRect+0xdc>)
 8005730:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005732:	88ba      	ldrh	r2, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	015b      	lsls	r3, r3, #5
 800573c:	461a      	mov	r2, r3
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	4413      	add	r3, r2
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	440b      	add	r3, r1
 8005746:	4618      	mov	r0, r3
 8005748:	8879      	ldrh	r1, [r7, #2]
 800574a:	4b29      	ldr	r3, [pc, #164]	; (80057f0 <LCD_DrawRect+0xe0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	2300      	movs	r3, #0
 8005752:	2201      	movs	r2, #1
 8005754:	f000 f928 	bl	80059a8 <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, (Ypos+Height)), Width, 1, 0, StrokeColor);
 8005758:	4b24      	ldr	r3, [pc, #144]	; (80057ec <LCD_DrawRect+0xdc>)
 800575a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800575c:	88ba      	ldrh	r2, [r7, #4]
 800575e:	883b      	ldrh	r3, [r7, #0]
 8005760:	441a      	add	r2, r3
 8005762:	4613      	mov	r3, r2
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	015b      	lsls	r3, r3, #5
 800576a:	461a      	mov	r2, r3
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	4413      	add	r3, r2
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	440b      	add	r3, r1
 8005774:	4618      	mov	r0, r3
 8005776:	8879      	ldrh	r1, [r7, #2]
 8005778:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <LCD_DrawRect+0xe0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	2300      	movs	r3, #0
 8005780:	2201      	movs	r2, #1
 8005782:	f000 f911 	bl	80059a8 <LL_FillBuffer>

	/* Draw vertical lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 8005786:	4b19      	ldr	r3, [pc, #100]	; (80057ec <LCD_DrawRect+0xdc>)
 8005788:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800578a:	88ba      	ldrh	r2, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	015b      	lsls	r3, r3, #5
 8005794:	461a      	mov	r2, r3
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	4413      	add	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	440b      	add	r3, r1
 800579e:	4618      	mov	r0, r3
 80057a0:	883a      	ldrh	r2, [r7, #0]
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <LCD_DrawRect+0xe0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	f240 13df 	movw	r3, #479	; 0x1df
 80057ac:	2101      	movs	r1, #1
 80057ae:	f000 f8fb 	bl	80059a8 <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress((Xpos+Width), Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 80057b2:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <LCD_DrawRect+0xdc>)
 80057b4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80057b6:	88ba      	ldrh	r2, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	015b      	lsls	r3, r3, #5
 80057c0:	4618      	mov	r0, r3
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	887b      	ldrh	r3, [r7, #2]
 80057c6:	4413      	add	r3, r2
 80057c8:	4403      	add	r3, r0
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	440b      	add	r3, r1
 80057ce:	4618      	mov	r0, r3
 80057d0:	883a      	ldrh	r2, [r7, #0]
 80057d2:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <LCD_DrawRect+0xe0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	f240 13df 	movw	r3, #479	; 0x1df
 80057dc:	2101      	movs	r1, #1
 80057de:	f000 f8e3 	bl	80059a8 <LL_FillBuffer>

	__CleanDCache();
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd90      	pop	{r4, r7, pc}
 80057ea:	bf00      	nop
 80057ec:	2000a404 	.word	0x2000a404
 80057f0:	2000036c 	.word	0x2000036c

080057f4 <LCD_FillRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80057f4:	b590      	push	{r4, r7, lr}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
 80057fe:	4611      	mov	r1, r2
 8005800:	461a      	mov	r2, r3
 8005802:	4623      	mov	r3, r4
 8005804:	80fb      	strh	r3, [r7, #6]
 8005806:	4603      	mov	r3, r0
 8005808:	80bb      	strh	r3, [r7, #4]
 800580a:	460b      	mov	r3, r1
 800580c:	807b      	strh	r3, [r7, #2]
 800580e:	4613      	mov	r3, r2
 8005810:	803b      	strh	r3, [r7, #0]
	uint32_t  x_address = __GetAddress(Xpos, Ypos);
 8005812:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <LCD_FillRect+0x5c>)
 8005814:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005816:	88ba      	ldrh	r2, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	015b      	lsls	r3, r3, #5
 8005820:	461a      	mov	r2, r3
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	4413      	add	r3, r2
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	440b      	add	r3, r1
 800582a:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	LL_FillBuffer((uint32_t *)x_address, Width, Height, (LCD_SCREEN_WIDTH - Width), FillColor);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	8879      	ldrh	r1, [r7, #2]
 8005830:	883a      	ldrh	r2, [r7, #0]
 8005832:	887b      	ldrh	r3, [r7, #2]
 8005834:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8005838:	461c      	mov	r4, r3
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <LCD_FillRect+0x60>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	4623      	mov	r3, r4
 8005842:	f000 f8b1 	bl	80059a8 <LL_FillBuffer>
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	bd90      	pop	{r4, r7, pc}
 800584e:	bf00      	nop
 8005850:	2000a404 	.word	0x2000a404
 8005854:	20000370 	.word	0x20000370

08005858 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b08b      	sub	sp, #44	; 0x2c
 800585c:	af00      	add	r7, sp, #0
 800585e:	60ba      	str	r2, [r7, #8]
 8005860:	461a      	mov	r2, r3
 8005862:	4603      	mov	r3, r0
 8005864:	81fb      	strh	r3, [r7, #14]
 8005866:	460b      	mov	r3, r1
 8005868:	81bb      	strh	r3, [r7, #12]
 800586a:	4613      	mov	r3, r2
 800586c:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
 8005872:	2300      	movs	r3, #0
 8005874:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 8005876:	4b49      	ldr	r3, [pc, #292]	; (800599c <DrawChar+0x144>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	88db      	ldrh	r3, [r3, #6]
 800587c:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 800587e:	4b47      	ldr	r3, [pc, #284]	; (800599c <DrawChar+0x144>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	889b      	ldrh	r3, [r3, #4]
 8005884:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 8005886:	8b3b      	ldrh	r3, [r7, #24]
 8005888:	3307      	adds	r3, #7
 800588a:	2b00      	cmp	r3, #0
 800588c:	da00      	bge.n	8005890 <DrawChar+0x38>
 800588e:	3307      	adds	r3, #7
 8005890:	10db      	asrs	r3, r3, #3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	b2da      	uxtb	r2, r3
 8005898:	8b3b      	ldrh	r3, [r7, #24]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
 80058a4:	e070      	b.n	8005988 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80058a6:	8b3b      	ldrh	r3, [r7, #24]
 80058a8:	3307      	adds	r3, #7
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	da00      	bge.n	80058b0 <DrawChar+0x58>
 80058ae:	3307      	adds	r3, #7
 80058b0:	10db      	asrs	r3, r3, #3
 80058b2:	461a      	mov	r2, r3
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	fb03 f302 	mul.w	r3, r3, r2
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	4413      	add	r3, r2
 80058be:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 80058c0:	8b3b      	ldrh	r3, [r7, #24]
 80058c2:	3307      	adds	r3, #7
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da00      	bge.n	80058ca <DrawChar+0x72>
 80058c8:	3307      	adds	r3, #7
 80058ca:	10db      	asrs	r3, r3, #3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d002      	beq.n	80058d6 <DrawChar+0x7e>
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d004      	beq.n	80058de <DrawChar+0x86>
 80058d4:	e00c      	b.n	80058f0 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	61fb      	str	r3, [r7, #28]
			break;
 80058dc:	e016      	b.n	800590c <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	3201      	adds	r2, #1
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61fb      	str	r3, [r7, #28]
			break;
 80058ee:	e00d      	b.n	800590c <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	041a      	lsls	r2, r3, #16
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	3301      	adds	r3, #1
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	4313      	orrs	r3, r2
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	3202      	adds	r2, #2
 8005904:	7812      	ldrb	r2, [r2, #0]
 8005906:	4313      	orrs	r3, r2
 8005908:	61fb      	str	r3, [r7, #28]
			break;
 800590a:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 800590c:	2300      	movs	r3, #0
 800590e:	623b      	str	r3, [r7, #32]
 8005910:	e030      	b.n	8005974 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 8005912:	8b3a      	ldrh	r2, [r7, #24]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	1ad2      	subs	r2, r2, r3
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	4413      	add	r3, r2
 800591c:	3b01      	subs	r3, #1
 800591e:	2201      	movs	r2, #1
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	461a      	mov	r2, r3
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4013      	ands	r3, r2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d012      	beq.n	8005954 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 800592e:	4b1c      	ldr	r3, [pc, #112]	; (80059a0 <DrawChar+0x148>)
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <DrawChar+0x14c>)
 8005934:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005936:	89ba      	ldrh	r2, [r7, #12]
 8005938:	4613      	mov	r3, r2
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	015b      	lsls	r3, r3, #5
 8005940:	461c      	mov	r4, r3
 8005942:	89fa      	ldrh	r2, [r7, #14]
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	4413      	add	r3, r2
 8005948:	4423      	add	r3, r4
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	440b      	add	r3, r1
 800594e:	b282      	uxth	r2, r0
 8005950:	801a      	strh	r2, [r3, #0]
 8005952:	e00c      	b.n	800596e <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d109      	bne.n	800596e <DrawChar+0x116>
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	b29a      	uxth	r2, r3
 800595e:	89fb      	ldrh	r3, [r7, #14]
 8005960:	4413      	add	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	89ba      	ldrh	r2, [r7, #12]
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fdd1 	bl	8005510 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	3301      	adds	r3, #1
 8005972:	623b      	str	r3, [r7, #32]
 8005974:	8b3b      	ldrh	r3, [r7, #24]
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	429a      	cmp	r2, r3
 800597a:	d3ca      	bcc.n	8005912 <DrawChar+0xba>
			}
		}
		Ypos++;
 800597c:	89bb      	ldrh	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	3301      	adds	r3, #1
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
 8005988:	8b7b      	ldrh	r3, [r7, #26]
 800598a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598c:	429a      	cmp	r2, r3
 800598e:	d38a      	bcc.n	80058a6 <DrawChar+0x4e>
	}

	__CleanDCache();
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	372c      	adds	r7, #44	; 0x2c
 8005996:	46bd      	mov	sp, r7
 8005998:	bd90      	pop	{r4, r7, pc}
 800599a:	bf00      	nop
 800599c:	20000384 	.word	0x20000384
 80059a0:	20000378 	.word	0x20000378
 80059a4:	2000a404 	.word	0x2000a404

080059a8 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 80059b6:	4b16      	ldr	r3, [pc, #88]	; (8005a10 <LL_FillBuffer+0x68>)
 80059b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80059bc:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 80059be:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <LL_FillBuffer+0x68>)
 80059c0:	2202      	movs	r2, #2
 80059c2:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 80059c4:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <LL_FillBuffer+0x68>)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 80059ca:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <LL_FillBuffer+0x68>)
 80059cc:	4a11      	ldr	r2, [pc, #68]	; (8005a14 <LL_FillBuffer+0x6c>)
 80059ce:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80059d0:	480f      	ldr	r0, [pc, #60]	; (8005a10 <LL_FillBuffer+0x68>)
 80059d2:	f003 f9e9 	bl	8008da8 <HAL_DMA2D_Init>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d115      	bne.n	8005a08 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 80059dc:	2100      	movs	r1, #0
 80059de:	480c      	ldr	r0, [pc, #48]	; (8005a10 <LL_FillBuffer+0x68>)
 80059e0:	f003 fc50 	bl	8009284 <HAL_DMA2D_ConfigLayer>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10e      	bne.n	8005a08 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	69b9      	ldr	r1, [r7, #24]
 80059f4:	4806      	ldr	r0, [pc, #24]	; (8005a10 <LL_FillBuffer+0x68>)
 80059f6:	f003 fa21 	bl	8008e3c <HAL_DMA2D_Start>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8005a00:	210a      	movs	r1, #10
 8005a02:	4803      	ldr	r0, [pc, #12]	; (8005a10 <LL_FillBuffer+0x68>)
 8005a04:	f003 fa45 	bl	8008e92 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	2000a718 	.word	0x2000a718
 8005a14:	4002b000 	.word	0x4002b000

08005a18 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8005a30:	7d7b      	ldrb	r3, [r7, #21]
 8005a32:	08db      	lsrs	r3, r3, #3
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8005a3e:	7dbb      	ldrb	r3, [r7, #22]
 8005a40:	089b      	lsrs	r3, r3, #2
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	015b      	lsls	r3, r3, #5
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8005a4c:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
 8005a50:	08db      	lsrs	r3, r3, #3
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	02db      	lsls	r3, r3, #11
 8005a56:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8005a58:	89fa      	ldrh	r2, [r7, #14]
 8005a5a:	8a3b      	ldrh	r3, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	8a7b      	ldrh	r3, [r7, #18]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b29b      	uxth	r3, r3
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b090      	sub	sp, #64	; 0x40
 8005a78:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a7e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8005a80:	23eb      	movs	r3, #235	; 0xeb
 8005a82:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005a84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8005a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a8e:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005a94:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8005a9a:	230a      	movs	r3, #10
 8005a9c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005ab2:	463a      	mov	r2, r7
 8005ab4:	f107 0308 	add.w	r3, r7, #8
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4806      	ldr	r0, [pc, #24]	; (8005ad4 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8005abc:	f007 fac6 	bl	800d04c <HAL_QSPI_MemoryMapped>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3740      	adds	r7, #64	; 0x40
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	2000a824 	.word	0x2000a824

08005ad8 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b090      	sub	sp, #64	; 0x40
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ae4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8005ae6:	2366      	movs	r3, #102	; 0x66
 8005ae8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005aea:	2300      	movs	r3, #0
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005afe:	2300      	movs	r3, #0
 8005b00:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005b02:	2300      	movs	r3, #0
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b06:	f107 0308 	add.w	r3, r7, #8
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f007 f88d 	bl	800cc30 <HAL_QSPI_Command>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e019      	b.n	8005b54 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8005b20:	2399      	movs	r3, #153	; 0x99
 8005b22:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b24:	f107 0308 	add.w	r3, r7, #8
 8005b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f007 f87e 	bl	800cc30 <HAL_QSPI_Command>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e00a      	b.n	8005b54 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8c7 	bl	8005cd6 <QSPI_AutoPollingMemReady>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3740      	adds	r7, #64	; 0x40
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b094      	sub	sp, #80	; 0x50
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8005b6a:	2385      	movs	r3, #133	; 0x85
 8005b6c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8005b76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8005b80:	2301      	movs	r3, #1
 8005b82:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b90:	f107 0310 	add.w	r3, r7, #16
 8005b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f007 f848 	bl	800cc30 <HAL_QSPI_Command>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e048      	b.n	8005c3c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005baa:	f107 030f 	add.w	r3, r7, #15
 8005bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f007 f930 	bl	800ce1a <HAL_QSPI_Receive>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e03b      	b.n	8005c3c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f83d 	bl	8005c44 <QSPI_WriteEnable>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e033      	b.n	8005c3c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8005bd4:	2381      	movs	r3, #129	; 0x81
 8005bd6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	b25a      	sxtb	r2, r3
 8005be2:	23f0      	movs	r3, #240	; 0xf0
 8005be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be8:	fa93 f3a3 	rbit	r3, r3
 8005bec:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf0:	fab3 f383 	clz	r3, r3
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	230a      	movs	r3, #10
 8005bfa:	408b      	lsls	r3, r1
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	b25b      	sxtb	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c06:	f107 0310 	add.w	r3, r7, #16
 8005c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f007 f80d 	bl	800cc30 <HAL_QSPI_Command>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e00d      	b.n	8005c3c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c20:	f107 030f 	add.w	r3, r7, #15
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f007 f85e 	bl	800ccec <HAL_QSPI_Transmit>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3750      	adds	r7, #80	; 0x50
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b096      	sub	sp, #88	; 0x58
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c50:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8005c52:	2306      	movs	r3, #6
 8005c54:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005c56:	2300      	movs	r3, #0
 8005c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c72:	f107 0320 	add.w	r3, r7, #32
 8005c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f006 ffd7 	bl	800cc30 <HAL_QSPI_Command>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e020      	b.n	8005cce <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8005c90:	2302      	movs	r3, #2
 8005c92:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005ca0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ca4:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8005ca6:	2305      	movs	r3, #5
 8005ca8:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8005caa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cae:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005cb0:	f107 0208 	add.w	r2, r7, #8
 8005cb4:	f107 0120 	add.w	r1, r7, #32
 8005cb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f007 f94e 	bl	800cf5e <HAL_QSPI_AutoPolling>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3758      	adds	r7, #88	; 0x58
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b096      	sub	sp, #88	; 0x58
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8005ce6:	2305      	movs	r3, #5
 8005ce8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8005cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cf6:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005d00:	2300      	movs	r3, #0
 8005d02:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005d04:	2300      	movs	r3, #0
 8005d06:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8005d14:	2301      	movs	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005d18:	2310      	movs	r3, #16
 8005d1a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005d1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d20:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8005d22:	f107 0208 	add.w	r2, r7, #8
 8005d26:	f107 0120 	add.w	r1, r7, #32
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f007 f916 	bl	800cf5e <HAL_QSPI_AutoPolling>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3758      	adds	r7, #88	; 0x58
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8005d56:	887b      	ldrh	r3, [r7, #2]
 8005d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d5c:	d005      	beq.n	8005d6a <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8005d5e:	887b      	ldrh	r3, [r7, #2]
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d64:	d001      	beq.n	8005d6a <start_Audio_Processing+0x22>
		Error_Handler();
 8005d66:	f7fd fb51 	bl	800340c <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8005d6a:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <start_Audio_Processing+0xb4>)
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	4a23      	ldr	r2, [pc, #140]	; (8005dfc <start_Audio_Processing+0xb4>)
 8005d70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d74:	6453      	str	r3, [r2, #68]	; 0x44
 8005d76:	4b21      	ldr	r3, [pc, #132]	; (8005dfc <start_Audio_Processing+0xb4>)
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8005d82:	2034      	movs	r0, #52	; 0x34
 8005d84:	f001 fb7a 	bl	800747c <wm8994_ReadID>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f648 1294 	movw	r2, #35220	; 0x8994
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d001      	beq.n	8005d96 <start_Audio_Processing+0x4e>
 8005d92:	f7fd fb3b 	bl	800340c <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8005d96:	2034      	movs	r0, #52	; 0x34
 8005d98:	f001 fcf2 	bl	8007780 <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8005d9c:	887b      	ldrh	r3, [r7, #2]
 8005d9e:	f043 0302 	orr.w	r3, r3, #2
 8005da2:	b299      	uxth	r1, r3
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	2264      	movs	r2, #100	; 0x64
 8005da8:	2034      	movs	r0, #52	; 0x34
 8005daa:	f000 fcad 	bl	8006708 <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 8005dae:	887b      	ldrh	r3, [r7, #2]
 8005db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db4:	d104      	bne.n	8005dc0 <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 8005db6:	214b      	movs	r1, #75	; 0x4b
 8005db8:	2034      	movs	r0, #52	; 0x34
 8005dba:	f001 fb6f 	bl	800749c <wm8994_SetVolume>
 8005dbe:	e007      	b.n	8005dd0 <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8005dc0:	887b      	ldrh	r3, [r7, #2]
 8005dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc6:	d103      	bne.n	8005dd0 <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 8005dc8:	21c8      	movs	r1, #200	; 0xc8
 8005dca:	2034      	movs	r0, #52	; 0x34
 8005dcc:	f001 fb66 	bl	800749c <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	2034      	movs	r0, #52	; 0x34
 8005dd4:	f001 fc86 	bl	80076e4 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	4807      	ldr	r0, [pc, #28]	; (8005e00 <start_Audio_Processing+0xb8>)
 8005de2:	f009 fc93 	bl	800f70c <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	68f9      	ldr	r1, [r7, #12]
 8005dee:	4805      	ldr	r0, [pc, #20]	; (8005e04 <start_Audio_Processing+0xbc>)
 8005df0:	f009 fbdc 	bl	800f5ac <HAL_SAI_Transmit_DMA>

}
 8005df4:	bf00      	nop
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	20009f64 	.word	0x20009f64
 8005e04:	2000a190 	.word	0x2000a190

08005e08 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <HAL_SAI_ErrorCallback+0x30>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d103      	bne.n	8005e48 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8005e40:	4808      	ldr	r0, [pc, #32]	; (8005e64 <HAL_SAI_ErrorCallback+0x34>)
 8005e42:	f015 fa27 	bl	801b294 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8005e46:	e006      	b.n	8005e56 <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a07      	ldr	r2, [pc, #28]	; (8005e68 <HAL_SAI_ErrorCallback+0x38>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d102      	bne.n	8005e56 <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8005e50:	4806      	ldr	r0, [pc, #24]	; (8005e6c <HAL_SAI_ErrorCallback+0x3c>)
 8005e52:	f015 fa1f 	bl	801b294 <puts>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	2000a190 	.word	0x2000a190
 8005e64:	0801c5ac 	.word	0x0801c5ac
 8005e68:	20009f64 	.word	0x20009f64
 8005e6c:	0801c5bc 	.word	0x0801c5bc

08005e70 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005e7c:	4b2a      	ldr	r3, [pc, #168]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005e82:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005e84:	2210      	movs	r2, #16
 8005e86:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005e88:	4b27      	ldr	r3, [pc, #156]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005e8e:	4b26      	ldr	r3, [pc, #152]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e98:	4923      	ldr	r1, [pc, #140]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005e9a:	4824      	ldr	r0, [pc, #144]	; (8005f2c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005e9c:	f00a feb3 	bl	8010c06 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	f001 fcfb 	bl	800789c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005ea6:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005eac:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005eae:	2210      	movs	r2, #16
 8005eb0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005eb2:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ec2:	4919      	ldr	r1, [pc, #100]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005ec4:	4819      	ldr	r0, [pc, #100]	; (8005f2c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005ec6:	f00a fe9e 	bl	8010c06 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005eca:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005ecc:	2203      	movs	r2, #3
 8005ece:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005ed0:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005ed2:	2210      	movs	r2, #16
 8005ed4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005ed6:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005ed8:	2208      	movs	r2, #8
 8005eda:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005edc:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ee6:	4910      	ldr	r1, [pc, #64]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005ee8:	4810      	ldr	r0, [pc, #64]	; (8005f2c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005eea:	f00a fe8c 	bl	8010c06 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005eee:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005ef2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005efc:	2210      	movs	r2, #16
 8005efe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a07      	ldr	r2, [pc, #28]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005f0a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f10:	4905      	ldr	r1, [pc, #20]	; (8005f28 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005f12:	4806      	ldr	r0, [pc, #24]	; (8005f2c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005f14:	f00a fe77 	bl	8010c06 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4804      	ldr	r0, [pc, #16]	; (8005f2c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005f1c:	f00a fe9e 	bl	8010c5c <HAL_SDRAM_ProgramRefreshRate>
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000388 	.word	0x20000388
 8005f2c:	2000a7f0 	.word	0x2000a7f0

08005f30 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8005f34:	20c8      	movs	r0, #200	; 0xc8
 8005f36:	f001 fcb1 	bl	800789c <HAL_Delay>

	TS_DisableIT();
 8005f3a:	f000 fab7 	bl	80064ac <TS_DisableIT>

}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <TS_GetState>:
 * @brief  Returns status and positions of the touch screen.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_GetState(TS_StateTypeDef *TS_State)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b096      	sub	sp, #88	; 0x58
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
	static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
	uint8_t ts_status = TS_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint16_t brute_x[TS_MAX_NB_TOUCH];
	uint16_t brute_y[TS_MAX_NB_TOUCH];
	uint16_t x_diff;
	uint16_t y_diff;
	uint32_t index;
	uint32_t weight = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61bb      	str	r3, [r7, #24]
	uint32_t area = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
	uint32_t event = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]

	/* Read register FT5336_TD_STAT_REG to check number of touches detection */
	volatile uint8_t nbTouch = TS_I2C_Read(FT5336_TD_STAT_REG) & FT5336_TD_STAT_MASK;
 8005f5e:	2002      	movs	r0, #2
 8005f60:	f7ff fa1a 	bl	8005398 <TS_I2C_Read>
 8005f64:	4603      	mov	r3, r0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	73fb      	strb	r3, [r7, #15]

	if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH){
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b05      	cmp	r3, #5
 8005f76:	d901      	bls.n	8005f7c <TS_GetState+0x38>
		/* If invalid number of touch detected, set it to zero */
		nbTouch = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	73fb      	strb	r3, [r7, #15]
	}

	/* Update current number of active touches */
	currActiveTouchNb = nbTouch;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	4b95      	ldr	r3, [pc, #596]	; (80061d8 <TS_GetState+0x294>)
 8005f82:	701a      	strb	r2, [r3, #0]

	/* Reset current active touch index on which to work on */
	currActiveTouchIdx = 0;
 8005f84:	4b95      	ldr	r3, [pc, #596]	; (80061dc <TS_GetState+0x298>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]

	/* Check and update the number of touches active detected */
	TS_State->touchDetected = nbTouch; // ft5336_TS_DetectTouch();
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	701a      	strb	r2, [r3, #0]

	if(TS_State->touchDetected)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8118 	beq.w	80061cc <TS_GetState+0x288>
	{
		for(index=0; index < TS_State->touchDetected; index++)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005fa0:	e107      	b.n	80061b2 <TS_GetState+0x26e>
		{
			/* Get each touch coordinates */
			TS_GetXY(&(brute_x[index]), &(brute_y[index]));
 8005fa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	18d0      	adds	r0, r2, r3
 8005fac:	f107 021c 	add.w	r2, r7, #28
 8005fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	4413      	add	r3, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f000 f990 	bl	80062dc <TS_GetXY>
				y[index] = 4096 - brute_y[index];
			}

			if(TS_ORIENTATION & TS_SWAP_XY)
			{
				y[index] = brute_x[index];
 8005fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005fd2:	440b      	add	r3, r1
 8005fd4:	f823 2c24 	strh.w	r2, [r3, #-36]
				x[index] = brute_y[index];
 8005fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005fee:	440b      	add	r3, r1
 8005ff0:	f823 2c18 	strh.w	r2, [r3, #-24]
			}

			x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006002:	4619      	mov	r1, r3
 8006004:	4a76      	ldr	r2, [pc, #472]	; (80061e0 <TS_GetState+0x29c>)
 8006006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600c:	4299      	cmp	r1, r3
 800600e:	d90e      	bls.n	800602e <TS_GetState+0xea>
 8006010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006018:	4413      	add	r3, r2
 800601a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800601e:	4970      	ldr	r1, [pc, #448]	; (80061e0 <TS_GetState+0x29c>)
 8006020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006022:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006026:	b29b      	uxth	r3, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	b29b      	uxth	r3, r3
 800602c:	e00d      	b.n	800604a <TS_GetState+0x106>
 800602e:	4a6c      	ldr	r2, [pc, #432]	; (80061e0 <TS_GetState+0x29c>)
 8006030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006036:	b29a      	uxth	r2, r3
 8006038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006040:	440b      	add	r3, r1
 8006042:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	b29b      	uxth	r3, r3
 800604a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800604e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006056:	4413      	add	r3, r2
 8006058:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800605c:	4619      	mov	r1, r3
 800605e:	4a61      	ldr	r2, [pc, #388]	; (80061e4 <TS_GetState+0x2a0>)
 8006060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006066:	4299      	cmp	r1, r3
 8006068:	d90e      	bls.n	8006088 <TS_GetState+0x144>
 800606a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006072:	4413      	add	r3, r2
 8006074:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8006078:	495a      	ldr	r1, [pc, #360]	; (80061e4 <TS_GetState+0x2a0>)
 800607a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800607c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006080:	b29b      	uxth	r3, r3
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	b29b      	uxth	r3, r3
 8006086:	e00d      	b.n	80060a4 <TS_GetState+0x160>
 8006088:	4a56      	ldr	r2, [pc, #344]	; (80061e4 <TS_GetState+0x2a0>)
 800608a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006090:	b29a      	uxth	r2, r3
 8006092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800609a:	440b      	add	r3, r1
 800609c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			if ((x_diff + y_diff) > 5)
 80060a8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80060ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80060b0:	4413      	add	r3, r2
 80060b2:	2b05      	cmp	r3, #5
 80060b4:	dd17      	ble.n	80060e6 <TS_GetState+0x1a2>
			{
				_x[index] = x[index];
 80060b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060be:	4413      	add	r3, r2
 80060c0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80060c4:	4619      	mov	r1, r3
 80060c6:	4a46      	ldr	r2, [pc, #280]	; (80061e0 <TS_GetState+0x29c>)
 80060c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				_y[index] = y[index];
 80060ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060d6:	4413      	add	r3, r2
 80060d8:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80060dc:	4619      	mov	r1, r3
 80060de:	4a41      	ldr	r2, [pc, #260]	; (80061e4 <TS_GetState+0x2a0>)
 80060e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			TS_State->touchX[index] = x[index];
 80060e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060ee:	4413      	add	r3, r2
 80060f0:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	4413      	add	r3, r2
 80060fc:	460a      	mov	r2, r1
 80060fe:	805a      	strh	r2, [r3, #2]
			TS_State->touchY[index] = y[index];
 8006100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006108:	4413      	add	r3, r2
 800610a:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006112:	3304      	adds	r3, #4
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4413      	add	r3, r2
 8006118:	460a      	mov	r2, r1
 800611a:	809a      	strh	r2, [r3, #4]

			/* Get touch info related to the current touch */
			TS_GetTouchInfo(index, &weight, &area, &event);
 800611c:	f107 0310 	add.w	r3, r7, #16
 8006120:	f107 0214 	add.w	r2, r7, #20
 8006124:	f107 0118 	add.w	r1, r7, #24
 8006128:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800612a:	f000 f9cf 	bl	80064cc <TS_GetTouchInfo>

			/* Update TS_State structure */
			TS_State->touchWeight[index] = weight;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	b2d9      	uxtb	r1, r3
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006136:	4413      	add	r3, r2
 8006138:	3316      	adds	r3, #22
 800613a:	460a      	mov	r2, r1
 800613c:	701a      	strb	r2, [r3, #0]
			TS_State->touchArea[index]   = area;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	b2d9      	uxtb	r1, r3
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006146:	4413      	add	r3, r2
 8006148:	3320      	adds	r3, #32
 800614a:	460a      	mov	r2, r1
 800614c:	701a      	strb	r2, [r3, #0]

			/* Remap touch event */
			switch(event)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b03      	cmp	r3, #3
 8006152:	d827      	bhi.n	80061a4 <TS_GetState+0x260>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <TS_GetState+0x218>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	0800616d 	.word	0x0800616d
 8006160:	0800617b 	.word	0x0800617b
 8006164:	08006189 	.word	0x08006189
 8006168:	08006197 	.word	0x08006197
			{
			case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
				TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006170:	4413      	add	r3, r2
 8006172:	331b      	adds	r3, #27
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
				break;
 8006178:	e018      	b.n	80061ac <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
				TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617e:	4413      	add	r3, r2
 8006180:	331b      	adds	r3, #27
 8006182:	2202      	movs	r2, #2
 8006184:	701a      	strb	r2, [r3, #0]
				break;
 8006186:	e011      	b.n	80061ac <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_CONTACT :
				TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618c:	4413      	add	r3, r2
 800618e:	331b      	adds	r3, #27
 8006190:	2203      	movs	r2, #3
 8006192:	701a      	strb	r2, [r3, #0]
				break;
 8006194:	e00a      	b.n	80061ac <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
				TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800619a:	4413      	add	r3, r2
 800619c:	331b      	adds	r3, #27
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
				break;
 80061a2:	e003      	b.n	80061ac <TS_GetState+0x268>
			default :
				ts_status = TS_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80061aa:	bf00      	nop
		for(index=0; index < TS_State->touchDetected; index++)
 80061ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ae:	3301      	adds	r3, #1
 80061b0:	653b      	str	r3, [r7, #80]	; 0x50
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f4ff aef1 	bcc.w	8005fa2 <TS_GetState+0x5e>


		} /* of for(index=0; index < TS_State->touchDetected; index++) */

		/* Get gesture Id */
		ts_status = TS_Get_GestureId(TS_State);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f811 	bl	80061e8 <TS_Get_GestureId>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	} /* end of if(TS_State->touchDetected != 0) */

	return (ts_status);
 80061cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3758      	adds	r7, #88	; 0x58
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000398 	.word	0x20000398
 80061dc:	20000399 	.word	0x20000399
 80061e0:	2000039c 	.word	0x2000039c
 80061e4:	200003b0 	.word	0x200003b0

080061e8 <TS_Get_GestureId>:
 * @brief  Update gesture Id following a touch detected.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	uint32_t gestureId = TS_I2C_Read(FT5336_GEST_ID_REG);
 80061f0:	2001      	movs	r0, #1
 80061f2:	f7ff f8d1 	bl	8005398 <TS_I2C_Read>
 80061f6:	4603      	mov	r3, r0
 80061f8:	60fb      	str	r3, [r7, #12]

	//ft5336_TS_GetGestureID(&gestureId);

	/* Remap gesture Id to a TS_GestureIdTypeDef value */
	switch(gestureId)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b49      	cmp	r3, #73	; 0x49
 80061fe:	d061      	beq.n	80062c4 <TS_Get_GestureId+0xdc>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b49      	cmp	r3, #73	; 0x49
 8006204:	d862      	bhi.n	80062cc <TS_Get_GestureId+0xe4>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b1c      	cmp	r3, #28
 800620a:	d83f      	bhi.n	800628c <TS_Get_GestureId+0xa4>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b1c      	cmp	r3, #28
 8006210:	d85c      	bhi.n	80062cc <TS_Get_GestureId+0xe4>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <TS_Get_GestureId+0x30>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006295 	.word	0x08006295
 800621c:	080062cd 	.word	0x080062cd
 8006220:	080062cd 	.word	0x080062cd
 8006224:	080062cd 	.word	0x080062cd
 8006228:	080062cd 	.word	0x080062cd
 800622c:	080062cd 	.word	0x080062cd
 8006230:	080062cd 	.word	0x080062cd
 8006234:	080062cd 	.word	0x080062cd
 8006238:	080062cd 	.word	0x080062cd
 800623c:	080062cd 	.word	0x080062cd
 8006240:	080062cd 	.word	0x080062cd
 8006244:	080062cd 	.word	0x080062cd
 8006248:	080062cd 	.word	0x080062cd
 800624c:	080062cd 	.word	0x080062cd
 8006250:	080062cd 	.word	0x080062cd
 8006254:	080062cd 	.word	0x080062cd
 8006258:	0800629d 	.word	0x0800629d
 800625c:	080062cd 	.word	0x080062cd
 8006260:	080062cd 	.word	0x080062cd
 8006264:	080062cd 	.word	0x080062cd
 8006268:	080062a5 	.word	0x080062a5
 800626c:	080062cd 	.word	0x080062cd
 8006270:	080062cd 	.word	0x080062cd
 8006274:	080062cd 	.word	0x080062cd
 8006278:	080062ad 	.word	0x080062ad
 800627c:	080062cd 	.word	0x080062cd
 8006280:	080062cd 	.word	0x080062cd
 8006284:	080062cd 	.word	0x080062cd
 8006288:	080062b5 	.word	0x080062b5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d014      	beq.n	80062bc <TS_Get_GestureId+0xd4>
 8006292:	e01b      	b.n	80062cc <TS_Get_GestureId+0xe4>
	{
	case FT5336_GEST_ID_NO_GESTURE :
		TS_State->gestureId = GEST_ID_NO_GESTURE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 800629a:	e019      	b.n	80062d0 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_UP :
		TS_State->gestureId = GEST_ID_MOVE_UP;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80062a2:	e015      	b.n	80062d0 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_RIGHT :
		TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80062aa:	e011      	b.n	80062d0 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_DOWN :
		TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2203      	movs	r2, #3
 80062b0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80062b2:	e00d      	b.n	80062d0 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_LEFT :
		TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2204      	movs	r2, #4
 80062b8:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80062ba:	e009      	b.n	80062d0 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_IN :
		TS_State->gestureId = GEST_ID_ZOOM_IN;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2205      	movs	r2, #5
 80062c0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80062c2:	e005      	b.n	80062d0 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_OUT :
		TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2206      	movs	r2, #6
 80062c8:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80062ca:	e001      	b.n	80062d0 <TS_Get_GestureId+0xe8>
	default :
		return TS_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <TS_Get_GestureId+0xea>
	} /* of switch(gestureId) */

	return TS_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop

080062dc <TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
static void TS_GetXY(uint16_t *X, uint16_t *Y)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  volatile uint8_t ucReadData = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	72fb      	strb	r3, [r7, #11]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]
  uint8_t regAddressXHigh = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73bb      	strb	r3, [r7, #14]
  uint8_t regAddressYLow = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	737b      	strb	r3, [r7, #13]
  uint8_t regAddressYHigh = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	733b      	strb	r3, [r7, #12]

  if(currActiveTouchIdx < currActiveTouchNb)
 80062fa:	4b69      	ldr	r3, [pc, #420]	; (80064a0 <TS_GetXY+0x1c4>)
 80062fc:	781a      	ldrb	r2, [r3, #0]
 80062fe:	4b69      	ldr	r3, [pc, #420]	; (80064a4 <TS_GetXY+0x1c8>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	f080 80c7 	bcs.w	8006496 <TS_GetXY+0x1ba>
  {
    switch(currActiveTouchIdx)
 8006308:	4b65      	ldr	r3, [pc, #404]	; (80064a0 <TS_GetXY+0x1c4>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b09      	cmp	r3, #9
 800630e:	d871      	bhi.n	80063f4 <TS_GetXY+0x118>
 8006310:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <TS_GetXY+0x3c>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	08006341 	.word	0x08006341
 800631c:	08006353 	.word	0x08006353
 8006320:	08006365 	.word	0x08006365
 8006324:	08006377 	.word	0x08006377
 8006328:	08006389 	.word	0x08006389
 800632c:	0800639b 	.word	0x0800639b
 8006330:	080063ad 	.word	0x080063ad
 8006334:	080063bf 	.word	0x080063bf
 8006338:	080063d1 	.word	0x080063d1
 800633c:	080063e3 	.word	0x080063e3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8006340:	2304      	movs	r3, #4
 8006342:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P1_XH_REG;
 8006344:	2303      	movs	r3, #3
 8006346:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P1_YL_REG;
 8006348:	2306      	movs	r3, #6
 800634a:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P1_YH_REG;
 800634c:	2305      	movs	r3, #5
 800634e:	733b      	strb	r3, [r7, #12]
      break;
 8006350:	e051      	b.n	80063f6 <TS_GetXY+0x11a>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8006352:	230a      	movs	r3, #10
 8006354:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P2_XH_REG;
 8006356:	2309      	movs	r3, #9
 8006358:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P2_YL_REG;
 800635a:	230c      	movs	r3, #12
 800635c:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P2_YH_REG;
 800635e:	230b      	movs	r3, #11
 8006360:	733b      	strb	r3, [r7, #12]
      break;
 8006362:	e048      	b.n	80063f6 <TS_GetXY+0x11a>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8006364:	2310      	movs	r3, #16
 8006366:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P3_XH_REG;
 8006368:	230f      	movs	r3, #15
 800636a:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P3_YL_REG;
 800636c:	2312      	movs	r3, #18
 800636e:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P3_YH_REG;
 8006370:	2311      	movs	r3, #17
 8006372:	733b      	strb	r3, [r7, #12]
      break;
 8006374:	e03f      	b.n	80063f6 <TS_GetXY+0x11a>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8006376:	2316      	movs	r3, #22
 8006378:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P4_XH_REG;
 800637a:	2315      	movs	r3, #21
 800637c:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P4_YL_REG;
 800637e:	2318      	movs	r3, #24
 8006380:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P4_YH_REG;
 8006382:	2317      	movs	r3, #23
 8006384:	733b      	strb	r3, [r7, #12]
      break;
 8006386:	e036      	b.n	80063f6 <TS_GetXY+0x11a>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8006388:	231c      	movs	r3, #28
 800638a:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P5_XH_REG;
 800638c:	231b      	movs	r3, #27
 800638e:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P5_YL_REG;
 8006390:	231e      	movs	r3, #30
 8006392:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P5_YH_REG;
 8006394:	231d      	movs	r3, #29
 8006396:	733b      	strb	r3, [r7, #12]
      break;
 8006398:	e02d      	b.n	80063f6 <TS_GetXY+0x11a>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800639a:	2322      	movs	r3, #34	; 0x22
 800639c:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P6_XH_REG;
 800639e:	2321      	movs	r3, #33	; 0x21
 80063a0:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P6_YL_REG;
 80063a2:	2324      	movs	r3, #36	; 0x24
 80063a4:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P6_YH_REG;
 80063a6:	2323      	movs	r3, #35	; 0x23
 80063a8:	733b      	strb	r3, [r7, #12]
      break;
 80063aa:	e024      	b.n	80063f6 <TS_GetXY+0x11a>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80063ac:	2328      	movs	r3, #40	; 0x28
 80063ae:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P7_XH_REG;
 80063b0:	2327      	movs	r3, #39	; 0x27
 80063b2:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P7_YL_REG;
 80063b4:	232a      	movs	r3, #42	; 0x2a
 80063b6:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P7_YH_REG;
 80063b8:	2329      	movs	r3, #41	; 0x29
 80063ba:	733b      	strb	r3, [r7, #12]
      break;
 80063bc:	e01b      	b.n	80063f6 <TS_GetXY+0x11a>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80063be:	232e      	movs	r3, #46	; 0x2e
 80063c0:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P8_XH_REG;
 80063c2:	232d      	movs	r3, #45	; 0x2d
 80063c4:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P8_YL_REG;
 80063c6:	2330      	movs	r3, #48	; 0x30
 80063c8:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P8_YH_REG;
 80063ca:	232f      	movs	r3, #47	; 0x2f
 80063cc:	733b      	strb	r3, [r7, #12]
      break;
 80063ce:	e012      	b.n	80063f6 <TS_GetXY+0x11a>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80063d0:	2334      	movs	r3, #52	; 0x34
 80063d2:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P9_XH_REG;
 80063d4:	2333      	movs	r3, #51	; 0x33
 80063d6:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P9_YL_REG;
 80063d8:	2336      	movs	r3, #54	; 0x36
 80063da:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P9_YH_REG;
 80063dc:	2335      	movs	r3, #53	; 0x35
 80063de:	733b      	strb	r3, [r7, #12]
      break;
 80063e0:	e009      	b.n	80063f6 <TS_GetXY+0x11a>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80063e2:	233a      	movs	r3, #58	; 0x3a
 80063e4:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P10_XH_REG;
 80063e6:	2339      	movs	r3, #57	; 0x39
 80063e8:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P10_YL_REG;
 80063ea:	233c      	movs	r3, #60	; 0x3c
 80063ec:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P10_YH_REG;
 80063ee:	233b      	movs	r3, #59	; 0x3b
 80063f0:	733b      	strb	r3, [r7, #12]
      break;
 80063f2:	e000      	b.n	80063f6 <TS_GetXY+0x11a>

    default :
      break;
 80063f4:	bf00      	nop

    } /* end switch(currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_I2C_Read(regAddressXLow);
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe ffcd 	bl	8005398 <TS_I2C_Read>
 80063fe:	4603      	mov	r3, r0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	b29a      	uxth	r2, r3
 800640a:	4b27      	ldr	r3, [pc, #156]	; (80064a8 <TS_GetXY+0x1cc>)
 800640c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe ffc1 	bl	8005398 <TS_I2C_Read>
 8006416:	4603      	mov	r3, r0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006426:	b21a      	sxth	r2, r3
 8006428:	4b1f      	ldr	r3, [pc, #124]	; (80064a8 <TS_GetXY+0x1cc>)
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b21b      	sxth	r3, r3
 800642e:	4313      	orrs	r3, r2
 8006430:	b21b      	sxth	r3, r3
 8006432:	b29a      	uxth	r2, r3
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <TS_GetXY+0x1cc>)
 8006436:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8006438:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <TS_GetXY+0x1cc>)
 800643a:	881a      	ldrh	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_I2C_Read(regAddressYLow);
 8006440:	7b7b      	ldrb	r3, [r7, #13]
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe ffa8 	bl	8005398 <TS_I2C_Read>
 8006448:	4603      	mov	r3, r0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	b29a      	uxth	r2, r3
 8006454:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <TS_GetXY+0x1cc>)
 8006456:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_I2C_Read(regAddressYHigh);
 8006458:	7b3b      	ldrb	r3, [r7, #12]
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe ff9c 	bl	8005398 <TS_I2C_Read>
 8006460:	4603      	mov	r3, r0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006466:	7afb      	ldrb	r3, [r7, #11]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006470:	b21a      	sxth	r2, r3
 8006472:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <TS_GetXY+0x1cc>)
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b21b      	sxth	r3, r3
 8006478:	4313      	orrs	r3, r2
 800647a:	b21b      	sxth	r3, r3
 800647c:	b29a      	uxth	r2, r3
 800647e:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <TS_GetXY+0x1cc>)
 8006480:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <TS_GetXY+0x1cc>)
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	801a      	strh	r2, [r3, #0]

    currActiveTouchIdx++; /* next call will work on next touch */
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <TS_GetXY+0x1c4>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	3301      	adds	r3, #1
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <TS_GetXY+0x1c4>)
 8006494:	701a      	strb	r2, [r3, #0]

  } /* of if(currActiveTouchIdx < currActiveTouchNb) */
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000399 	.word	0x20000399
 80064a4:	20000398 	.word	0x20000398
 80064a8:	200003c4 	.word	0x200003c4

080064ac <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80064b6:	2300      	movs	r3, #0
 80064b8:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	4619      	mov	r1, r3
 80064be:	20a4      	movs	r0, #164	; 0xa4
 80064c0:	f7fe ff50 	bl	8005364 <TS_I2C_Write>
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <TS_GetTouchInfo>:
  * @param  pEvent  : Pointer to to get the event information of 'touchIdx'.

  * @retval None.
  */
static void TS_GetTouchInfo(uint32_t   touchIdx, uint32_t * pWeight, uint32_t * pArea, uint32_t * pEvent)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  volatile uint8_t ucReadData = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	757b      	strb	r3, [r7, #21]

  if(touchIdx < currActiveTouchNb)
 80064ea:	4b4a      	ldr	r3, [pc, #296]	; (8006614 <TS_GetTouchInfo+0x148>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4293      	cmp	r3, r2
 80064f4:	f080 8089 	bcs.w	800660a <TS_GetTouchInfo+0x13e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b09      	cmp	r3, #9
 80064fc:	d85c      	bhi.n	80065b8 <TS_GetTouchInfo+0xec>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <TS_GetTouchInfo+0x38>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	0800652d 	.word	0x0800652d
 8006508:	0800653b 	.word	0x0800653b
 800650c:	08006549 	.word	0x08006549
 8006510:	08006557 	.word	0x08006557
 8006514:	08006565 	.word	0x08006565
 8006518:	08006573 	.word	0x08006573
 800651c:	08006581 	.word	0x08006581
 8006520:	0800658f 	.word	0x0800658f
 8006524:	0800659d 	.word	0x0800659d
 8006528:	080065ab 	.word	0x080065ab
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 800652c:	2303      	movs	r3, #3
 800652e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8006530:	2307      	movs	r3, #7
 8006532:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8006534:	2308      	movs	r3, #8
 8006536:	757b      	strb	r3, [r7, #21]
      break;
 8006538:	e03f      	b.n	80065ba <TS_GetTouchInfo+0xee>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800653a:	2309      	movs	r3, #9
 800653c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800653e:	230d      	movs	r3, #13
 8006540:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8006542:	230e      	movs	r3, #14
 8006544:	757b      	strb	r3, [r7, #21]
      break;
 8006546:	e038      	b.n	80065ba <TS_GetTouchInfo+0xee>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8006548:	230f      	movs	r3, #15
 800654a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 800654c:	2313      	movs	r3, #19
 800654e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8006550:	2314      	movs	r3, #20
 8006552:	757b      	strb	r3, [r7, #21]
      break;
 8006554:	e031      	b.n	80065ba <TS_GetTouchInfo+0xee>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8006556:	2315      	movs	r3, #21
 8006558:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800655a:	2319      	movs	r3, #25
 800655c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800655e:	231a      	movs	r3, #26
 8006560:	757b      	strb	r3, [r7, #21]
      break;
 8006562:	e02a      	b.n	80065ba <TS_GetTouchInfo+0xee>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8006564:	231b      	movs	r3, #27
 8006566:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8006568:	231f      	movs	r3, #31
 800656a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 800656c:	2320      	movs	r3, #32
 800656e:	757b      	strb	r3, [r7, #21]
      break;
 8006570:	e023      	b.n	80065ba <TS_GetTouchInfo+0xee>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8006572:	2321      	movs	r3, #33	; 0x21
 8006574:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8006576:	2325      	movs	r3, #37	; 0x25
 8006578:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800657a:	2326      	movs	r3, #38	; 0x26
 800657c:	757b      	strb	r3, [r7, #21]
      break;
 800657e:	e01c      	b.n	80065ba <TS_GetTouchInfo+0xee>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8006580:	2327      	movs	r3, #39	; 0x27
 8006582:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8006584:	232b      	movs	r3, #43	; 0x2b
 8006586:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8006588:	232c      	movs	r3, #44	; 0x2c
 800658a:	757b      	strb	r3, [r7, #21]
      break;
 800658c:	e015      	b.n	80065ba <TS_GetTouchInfo+0xee>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800658e:	232d      	movs	r3, #45	; 0x2d
 8006590:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8006592:	2331      	movs	r3, #49	; 0x31
 8006594:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8006596:	2332      	movs	r3, #50	; 0x32
 8006598:	757b      	strb	r3, [r7, #21]
      break;
 800659a:	e00e      	b.n	80065ba <TS_GetTouchInfo+0xee>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 800659c:	2333      	movs	r3, #51	; 0x33
 800659e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80065a0:	2337      	movs	r3, #55	; 0x37
 80065a2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80065a4:	2338      	movs	r3, #56	; 0x38
 80065a6:	757b      	strb	r3, [r7, #21]
      break;
 80065a8:	e007      	b.n	80065ba <TS_GetTouchInfo+0xee>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80065aa:	2339      	movs	r3, #57	; 0x39
 80065ac:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80065ae:	233d      	movs	r3, #61	; 0x3d
 80065b0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80065b2:	233e      	movs	r3, #62	; 0x3e
 80065b4:	757b      	strb	r3, [r7, #21]
      break;
 80065b6:	e000      	b.n	80065ba <TS_GetTouchInfo+0xee>

    default :
      break;
 80065b8:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe feeb 	bl	8005398 <TS_I2C_Read>
 80065c2:	4603      	mov	r3, r0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80065c8:	7d3b      	ldrb	r3, [r7, #20]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	119b      	asrs	r3, r3, #6
 80065ce:	f003 0203 	and.w	r2, r3, #3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_I2C_Read(regAddressPWeight);
 80065d6:	7dbb      	ldrb	r3, [r7, #22]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fedd 	bl	8005398 <TS_I2C_Read>
 80065de:	4603      	mov	r3, r0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80065e4:	7d3b      	ldrb	r3, [r7, #20]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_I2C_Read(regAddressPMisc);
 80065ee:	7d7b      	ldrb	r3, [r7, #21]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe fed1 	bl	8005398 <TS_I2C_Read>
 80065f6:	4603      	mov	r3, r0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80065fc:	7d3b      	ldrb	r3, [r7, #20]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	111b      	asrs	r3, r3, #4
 8006602:	f003 0204 	and.w	r2, r3, #4
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < currActiveTouchNb) */
}
 800660a:	bf00      	nop
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000398 	.word	0x20000398

08006618 <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 800661e:	f001 fcfd 	bl	800801c <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006622:	2301      	movs	r3, #1
 8006624:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8006626:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800662a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800662c:	231b      	movs	r3, #27
 800662e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006630:	2303      	movs	r3, #3
 8006632:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8006638:	2300      	movs	r3, #0
 800663a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800663c:	2300      	movs	r3, #0
 800663e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8006640:	2302      	movs	r3, #2
 8006642:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8006644:	2300      	movs	r3, #0
 8006646:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8006648:	2300      	movs	r3, #0
 800664a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800664c:	2300      	movs	r3, #0
 800664e:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006650:	463b      	mov	r3, r7
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fd1a 	bl	800808c <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006658:	2301      	movs	r3, #1
 800665a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 800665c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8006660:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8006662:	2317      	movs	r3, #23
 8006664:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006666:	2303      	movs	r3, #3
 8006668:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800666a:	2300      	movs	r3, #0
 800666c:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800666e:	2301      	movs	r3, #1
 8006670:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8006672:	2300      	movs	r3, #0
 8006674:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8006676:	2303      	movs	r3, #3
 8006678:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800667a:	2300      	movs	r3, #0
 800667c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800667e:	2300      	movs	r3, #0
 8006680:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006682:	2300      	movs	r3, #0
 8006684:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006686:	463b      	mov	r3, r7
 8006688:	4618      	mov	r0, r3
 800668a:	f001 fcff 	bl	800808c <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800668e:	2301      	movs	r3, #1
 8006690:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 8006692:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8006696:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8006698:	2316      	movs	r3, #22
 800669a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800669c:	2303      	movs	r3, #3
 800669e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80066b4:	2300      	movs	r3, #0
 80066b6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80066b8:	2301      	movs	r3, #1
 80066ba:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80066bc:	463b      	mov	r3, r7
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 fce4 	bl	800808c <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80066c4:	2301      	movs	r3, #1
 80066c6:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 80066c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80066cc:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80066ce:	2312      	movs	r3, #18
 80066d0:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80066d2:	2303      	movs	r3, #3
 80066d4:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80066da:	2300      	movs	r3, #0
 80066dc:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80066de:	2300      	movs	r3, #0
 80066e0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80066e2:	2301      	movs	r3, #1
 80066e4:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80066ea:	2300      	movs	r3, #0
 80066ec:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80066f2:	463b      	mov	r3, r7
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 fcc9 	bl	800808c <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80066fa:	2004      	movs	r0, #4
 80066fc:	f001 fca6 	bl	800804c <HAL_MPU_Enable>

}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	607b      	str	r3, [r7, #4]
 8006710:	4603      	mov	r3, r0
 8006712:	81fb      	strh	r3, [r7, #14]
 8006714:	460b      	mov	r3, r1
 8006716:	81bb      	strh	r3, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8006720:	89bb      	ldrh	r3, [r7, #12]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8006726:	89bb      	ldrh	r3, [r7, #12]
 8006728:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800672c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8006732:	89fb      	ldrh	r3, [r7, #14]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2203      	movs	r2, #3
 8006738:	f44f 7181 	mov.w	r1, #258	; 0x102
 800673c:	4618      	mov	r0, r3
 800673e:	f001 f83f 	bl	80077c0 <CODEC_IO_Write>
 8006742:	4603      	mov	r3, r0
 8006744:	461a      	mov	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800674c:	89fb      	ldrh	r3, [r7, #14]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2200      	movs	r2, #0
 8006752:	f640 0117 	movw	r1, #2071	; 0x817
 8006756:	4618      	mov	r0, r3
 8006758:	f001 f832 	bl	80077c0 <CODEC_IO_Write>
 800675c:	4603      	mov	r3, r0
 800675e:	461a      	mov	r2, r3
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	4413      	add	r3, r2
 8006764:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8006766:	89fb      	ldrh	r3, [r7, #14]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2200      	movs	r2, #0
 800676c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006770:	4618      	mov	r0, r3
 8006772:	f001 f825 	bl	80077c0 <CODEC_IO_Write>
 8006776:	4603      	mov	r3, r0
 8006778:	461a      	mov	r2, r3
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8006780:	89fb      	ldrh	r3, [r7, #14]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	226c      	movs	r2, #108	; 0x6c
 8006786:	2139      	movs	r1, #57	; 0x39
 8006788:	4618      	mov	r0, r3
 800678a:	f001 f819 	bl	80077c0 <CODEC_IO_Write>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8006798:	8afb      	ldrh	r3, [r7, #22]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00c      	beq.n	80067b8 <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800679e:	89fb      	ldrh	r3, [r7, #14]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2213      	movs	r2, #19
 80067a4:	2101      	movs	r1, #1
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 f80a 	bl	80077c0 <CODEC_IO_Write>
 80067ac:	4603      	mov	r3, r0
 80067ae:	461a      	mov	r2, r3
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e00b      	b.n	80067d0 <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80067b8:	89fb      	ldrh	r3, [r7, #14]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2203      	movs	r2, #3
 80067be:	2101      	movs	r1, #1
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fffd 	bl	80077c0 <CODEC_IO_Write>
 80067c6:	4603      	mov	r3, r0
 80067c8:	461a      	mov	r2, r3
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 80067d0:	2032      	movs	r0, #50	; 0x32
 80067d2:	f001 f863 	bl	800789c <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80067d6:	8b3b      	ldrh	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 815f 	beq.w	8006a9c <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 80067de:	4bae      	ldr	r3, [pc, #696]	; (8006a98 <wm8994_Init+0x390>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80067e4:	8b3b      	ldrh	r3, [r7, #24]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	f000 808c 	beq.w	8006904 <wm8994_Init+0x1fc>
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	f300 8111 	bgt.w	8006a14 <wm8994_Init+0x30c>
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d002      	beq.n	80067fc <wm8994_Init+0xf4>
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d042      	beq.n	8006880 <wm8994_Init+0x178>
 80067fa:	e10b      	b.n	8006a14 <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80067fc:	89fb      	ldrh	r3, [r7, #14]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f640 420c 	movw	r2, #3084	; 0xc0c
 8006804:	2105      	movs	r1, #5
 8006806:	4618      	mov	r0, r3
 8006808:	f000 ffda 	bl	80077c0 <CODEC_IO_Write>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	4413      	add	r3, r2
 8006814:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8006816:	89fb      	ldrh	r3, [r7, #14]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2200      	movs	r2, #0
 800681c:	f240 6101 	movw	r1, #1537	; 0x601
 8006820:	4618      	mov	r0, r3
 8006822:	f000 ffcd 	bl	80077c0 <CODEC_IO_Write>
 8006826:	4603      	mov	r3, r0
 8006828:	461a      	mov	r2, r3
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8006830:	89fb      	ldrh	r3, [r7, #14]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2200      	movs	r2, #0
 8006836:	f240 6102 	movw	r1, #1538	; 0x602
 800683a:	4618      	mov	r0, r3
 800683c:	f000 ffc0 	bl	80077c0 <CODEC_IO_Write>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800684a:	89fb      	ldrh	r3, [r7, #14]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2202      	movs	r2, #2
 8006850:	f240 6104 	movw	r1, #1540	; 0x604
 8006854:	4618      	mov	r0, r3
 8006856:	f000 ffb3 	bl	80077c0 <CODEC_IO_Write>
 800685a:	4603      	mov	r3, r0
 800685c:	461a      	mov	r2, r3
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006864:	89fb      	ldrh	r3, [r7, #14]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2202      	movs	r2, #2
 800686a:	f240 6105 	movw	r1, #1541	; 0x605
 800686e:	4618      	mov	r0, r3
 8006870:	f000 ffa6 	bl	80077c0 <CODEC_IO_Write>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	61fb      	str	r3, [r7, #28]
      break;
 800687e:	e110      	b.n	8006aa2 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f240 3203 	movw	r2, #771	; 0x303
 8006888:	2105      	movs	r1, #5
 800688a:	4618      	mov	r0, r3
 800688c:	f000 ff98 	bl	80077c0 <CODEC_IO_Write>
 8006890:	4603      	mov	r3, r0
 8006892:	461a      	mov	r2, r3
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800689a:	89fb      	ldrh	r3, [r7, #14]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2201      	movs	r2, #1
 80068a0:	f240 6101 	movw	r1, #1537	; 0x601
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 ff8b 	bl	80077c0 <CODEC_IO_Write>
 80068aa:	4603      	mov	r3, r0
 80068ac:	461a      	mov	r2, r3
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2201      	movs	r2, #1
 80068ba:	f240 6102 	movw	r1, #1538	; 0x602
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 ff7e 	bl	80077c0 <CODEC_IO_Write>
 80068c4:	4603      	mov	r3, r0
 80068c6:	461a      	mov	r2, r3
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2200      	movs	r2, #0
 80068d4:	f240 6104 	movw	r1, #1540	; 0x604
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 ff71 	bl	80077c0 <CODEC_IO_Write>
 80068de:	4603      	mov	r3, r0
 80068e0:	461a      	mov	r2, r3
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80068e8:	89fb      	ldrh	r3, [r7, #14]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2200      	movs	r2, #0
 80068ee:	f240 6105 	movw	r1, #1541	; 0x605
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 ff64 	bl	80077c0 <CODEC_IO_Write>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	4413      	add	r3, r2
 8006900:	61fb      	str	r3, [r7, #28]
      break;
 8006902:	e0ce      	b.n	8006aa2 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006904:	8afb      	ldrh	r3, [r7, #22]
 8006906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690a:	d141      	bne.n	8006990 <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800690c:	89fb      	ldrh	r3, [r7, #14]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006914:	2105      	movs	r1, #5
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ff52 	bl	80077c0 <CODEC_IO_Write>
 800691c:	4603      	mov	r3, r0
 800691e:	461a      	mov	r2, r3
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8006926:	89fb      	ldrh	r3, [r7, #14]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2203      	movs	r2, #3
 800692c:	f240 6101 	movw	r1, #1537	; 0x601
 8006930:	4618      	mov	r0, r3
 8006932:	f000 ff45 	bl	80077c0 <CODEC_IO_Write>
 8006936:	4603      	mov	r3, r0
 8006938:	461a      	mov	r2, r3
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	4413      	add	r3, r2
 800693e:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8006940:	89fb      	ldrh	r3, [r7, #14]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2203      	movs	r2, #3
 8006946:	f240 6102 	movw	r1, #1538	; 0x602
 800694a:	4618      	mov	r0, r3
 800694c:	f000 ff38 	bl	80077c0 <CODEC_IO_Write>
 8006950:	4603      	mov	r3, r0
 8006952:	461a      	mov	r2, r3
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800695a:	89fb      	ldrh	r3, [r7, #14]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2203      	movs	r2, #3
 8006960:	f240 6104 	movw	r1, #1540	; 0x604
 8006964:	4618      	mov	r0, r3
 8006966:	f000 ff2b 	bl	80077c0 <CODEC_IO_Write>
 800696a:	4603      	mov	r3, r0
 800696c:	461a      	mov	r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8006974:	89fb      	ldrh	r3, [r7, #14]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2203      	movs	r2, #3
 800697a:	f240 6105 	movw	r1, #1541	; 0x605
 800697e:	4618      	mov	r0, r3
 8006980:	f000 ff1e 	bl	80077c0 <CODEC_IO_Write>
 8006984:	4603      	mov	r3, r0
 8006986:	461a      	mov	r2, r3
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 800698e:	e088      	b.n	8006aa2 <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006990:	89fb      	ldrh	r3, [r7, #14]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006998:	2105      	movs	r1, #5
 800699a:	4618      	mov	r0, r3
 800699c:	f000 ff10 	bl	80077c0 <CODEC_IO_Write>
 80069a0:	4603      	mov	r3, r0
 80069a2:	461a      	mov	r2, r3
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80069aa:	89fb      	ldrh	r3, [r7, #14]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2201      	movs	r2, #1
 80069b0:	f240 6101 	movw	r1, #1537	; 0x601
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 ff03 	bl	80077c0 <CODEC_IO_Write>
 80069ba:	4603      	mov	r3, r0
 80069bc:	461a      	mov	r2, r3
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80069c4:	89fb      	ldrh	r3, [r7, #14]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2201      	movs	r2, #1
 80069ca:	f240 6102 	movw	r1, #1538	; 0x602
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fef6 	bl	80077c0 <CODEC_IO_Write>
 80069d4:	4603      	mov	r3, r0
 80069d6:	461a      	mov	r2, r3
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	4413      	add	r3, r2
 80069dc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80069de:	89fb      	ldrh	r3, [r7, #14]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2202      	movs	r2, #2
 80069e4:	f240 6104 	movw	r1, #1540	; 0x604
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fee9 	bl	80077c0 <CODEC_IO_Write>
 80069ee:	4603      	mov	r3, r0
 80069f0:	461a      	mov	r2, r3
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80069f8:	89fb      	ldrh	r3, [r7, #14]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2202      	movs	r2, #2
 80069fe:	f240 6105 	movw	r1, #1541	; 0x605
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fedc 	bl	80077c0 <CODEC_IO_Write>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	4413      	add	r3, r2
 8006a10:	61fb      	str	r3, [r7, #28]
      break;
 8006a12:	e046      	b.n	8006aa2 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006a14:	89fb      	ldrh	r3, [r7, #14]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	f240 3203 	movw	r2, #771	; 0x303
 8006a1c:	2105      	movs	r1, #5
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fece 	bl	80077c0 <CODEC_IO_Write>
 8006a24:	4603      	mov	r3, r0
 8006a26:	461a      	mov	r2, r3
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006a2e:	89fb      	ldrh	r3, [r7, #14]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2201      	movs	r2, #1
 8006a34:	f240 6101 	movw	r1, #1537	; 0x601
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fec1 	bl	80077c0 <CODEC_IO_Write>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	461a      	mov	r2, r3
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006a48:	89fb      	ldrh	r3, [r7, #14]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f240 6102 	movw	r1, #1538	; 0x602
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 feb4 	bl	80077c0 <CODEC_IO_Write>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	4413      	add	r3, r2
 8006a60:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006a62:	89fb      	ldrh	r3, [r7, #14]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2200      	movs	r2, #0
 8006a68:	f240 6104 	movw	r1, #1540	; 0x604
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fea7 	bl	80077c0 <CODEC_IO_Write>
 8006a72:	4603      	mov	r3, r0
 8006a74:	461a      	mov	r2, r3
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006a7c:	89fb      	ldrh	r3, [r7, #14]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2200      	movs	r2, #0
 8006a82:	f240 6105 	movw	r1, #1541	; 0x605
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fe9a 	bl	80077c0 <CODEC_IO_Write>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	4413      	add	r3, r2
 8006a94:	61fb      	str	r3, [r7, #28]
      break;
 8006a96:	e004      	b.n	8006aa2 <wm8994_Init+0x39a>
 8006a98:	200003c8 	.word	0x200003c8
    }
  }
  else
  {
    outputEnabled = 0;
 8006a9c:	4b99      	ldr	r3, [pc, #612]	; (8006d04 <wm8994_Init+0x5fc>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8006aa2:	8afb      	ldrh	r3, [r7, #22]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 81ab 	beq.w	8006e00 <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 8006aaa:	4b97      	ldr	r3, [pc, #604]	; (8006d08 <wm8994_Init+0x600>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8006ab0:	8afb      	ldrh	r3, [r7, #22]
 8006ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab6:	f000 8129 	beq.w	8006d0c <wm8994_Init+0x604>
 8006aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006abe:	f300 819b 	bgt.w	8006df8 <wm8994_Init+0x6f0>
 8006ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac6:	d05a      	beq.n	8006b7e <wm8994_Init+0x476>
 8006ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006acc:	f300 8194 	bgt.w	8006df8 <wm8994_Init+0x6f0>
 8006ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad4:	f000 80c6 	beq.w	8006c64 <wm8994_Init+0x55c>
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006adc:	f040 818c 	bne.w	8006df8 <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8006ae0:	89fb      	ldrh	r3, [r7, #14]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8006ae8:	2104      	movs	r1, #4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fe68 	bl	80077c0 <CODEC_IO_Write>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006afa:	89fb      	ldrh	r3, [r7, #14]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	22db      	movs	r2, #219	; 0xdb
 8006b00:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fe5b 	bl	80077c0 <CODEC_IO_Write>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8006b14:	89fb      	ldrh	r3, [r7, #14]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8006b1c:	2102      	movs	r1, #2
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fe4e 	bl	80077c0 <CODEC_IO_Write>
 8006b24:	4603      	mov	r3, r0
 8006b26:	461a      	mov	r2, r3
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8006b2e:	89fb      	ldrh	r3, [r7, #14]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2202      	movs	r2, #2
 8006b34:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fe41 	bl	80077c0 <CODEC_IO_Write>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	461a      	mov	r2, r3
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006b48:	89fb      	ldrh	r3, [r7, #14]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	f240 6109 	movw	r1, #1545	; 0x609
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fe34 	bl	80077c0 <CODEC_IO_Write>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8006b62:	89fb      	ldrh	r3, [r7, #14]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	220e      	movs	r2, #14
 8006b68:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fe27 	bl	80077c0 <CODEC_IO_Write>
 8006b72:	4603      	mov	r3, r0
 8006b74:	461a      	mov	r2, r3
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	61fb      	str	r3, [r7, #28]
      break;
 8006b7c:	e143      	b.n	8006e06 <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8006b7e:	89fb      	ldrh	r3, [r7, #14]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2211      	movs	r2, #17
 8006b84:	2128      	movs	r1, #40	; 0x28
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fe1a 	bl	80077c0 <CODEC_IO_Write>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	4413      	add	r3, r2
 8006b94:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	2129      	movs	r1, #41	; 0x29
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fe0e 	bl	80077c0 <CODEC_IO_Write>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8006bae:	89fb      	ldrh	r3, [r7, #14]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	212a      	movs	r1, #42	; 0x2a
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fe02 	bl	80077c0 <CODEC_IO_Write>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8006bc6:	89fb      	ldrh	r3, [r7, #14]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	f240 3203 	movw	r2, #771	; 0x303
 8006bce:	2104      	movs	r1, #4
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fdf5 	bl	80077c0 <CODEC_IO_Write>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	461a      	mov	r2, r3
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006be0:	89fb      	ldrh	r3, [r7, #14]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	22db      	movs	r2, #219	; 0xdb
 8006be6:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fde8 	bl	80077c0 <CODEC_IO_Write>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8006bfa:	89fb      	ldrh	r3, [r7, #14]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f246 3250 	movw	r2, #25424	; 0x6350
 8006c02:	2102      	movs	r1, #2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fddb 	bl	80077c0 <CODEC_IO_Write>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006c14:	89fb      	ldrh	r3, [r7, #14]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2202      	movs	r2, #2
 8006c1a:	f240 6106 	movw	r1, #1542	; 0x606
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fdce 	bl	80077c0 <CODEC_IO_Write>
 8006c24:	4603      	mov	r3, r0
 8006c26:	461a      	mov	r2, r3
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006c2e:	89fb      	ldrh	r3, [r7, #14]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2202      	movs	r2, #2
 8006c34:	f240 6107 	movw	r1, #1543	; 0x607
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fdc1 	bl	80077c0 <CODEC_IO_Write>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	461a      	mov	r2, r3
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006c48:	89fb      	ldrh	r3, [r7, #14]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	220d      	movs	r2, #13
 8006c4e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fdb4 	bl	80077c0 <CODEC_IO_Write>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	4413      	add	r3, r2
 8006c60:	61fb      	str	r3, [r7, #28]
      break;
 8006c62:	e0d0      	b.n	8006e06 <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8006c64:	89fb      	ldrh	r3, [r7, #14]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8006c6c:	2104      	movs	r1, #4
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fda6 	bl	80077c0 <CODEC_IO_Write>
 8006c74:	4603      	mov	r3, r0
 8006c76:	461a      	mov	r2, r3
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006c7e:	89fb      	ldrh	r3, [r7, #14]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	22db      	movs	r2, #219	; 0xdb
 8006c84:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fd99 	bl	80077c0 <CODEC_IO_Write>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	461a      	mov	r2, r3
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8006c98:	89fb      	ldrh	r3, [r7, #14]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f246 3250 	movw	r2, #25424	; 0x6350
 8006ca0:	2102      	movs	r1, #2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fd8c 	bl	80077c0 <CODEC_IO_Write>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	461a      	mov	r2, r3
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006cb2:	89fb      	ldrh	r3, [r7, #14]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f240 6106 	movw	r1, #1542	; 0x606
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fd7f 	bl	80077c0 <CODEC_IO_Write>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006ccc:	89fb      	ldrh	r3, [r7, #14]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	f240 6107 	movw	r1, #1543	; 0x607
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fd72 	bl	80077c0 <CODEC_IO_Write>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006ce6:	89fb      	ldrh	r3, [r7, #14]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	220d      	movs	r2, #13
 8006cec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fd65 	bl	80077c0 <CODEC_IO_Write>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61fb      	str	r3, [r7, #28]
      break;
 8006d00:	e081      	b.n	8006e06 <wm8994_Init+0x6fe>
 8006d02:	bf00      	nop
 8006d04:	200003c8 	.word	0x200003c8
 8006d08:	200003cc 	.word	0x200003cc
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8006d0c:	89fb      	ldrh	r3, [r7, #14]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f640 723c 	movw	r2, #3900	; 0xf3c
 8006d14:	2104      	movs	r1, #4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fd52 	bl	80077c0 <CODEC_IO_Write>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006d26:	89fb      	ldrh	r3, [r7, #14]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	22db      	movs	r2, #219	; 0xdb
 8006d2c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fd45 	bl	80077c0 <CODEC_IO_Write>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006d40:	89fb      	ldrh	r3, [r7, #14]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	22db      	movs	r2, #219	; 0xdb
 8006d46:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fd38 	bl	80077c0 <CODEC_IO_Write>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	4413      	add	r3, r2
 8006d58:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8006d5a:	89fb      	ldrh	r3, [r7, #14]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fd2b 	bl	80077c0 <CODEC_IO_Write>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	4413      	add	r3, r2
 8006d72:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006d74:	89fb      	ldrh	r3, [r7, #14]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f240 6106 	movw	r1, #1542	; 0x606
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fd1e 	bl	80077c0 <CODEC_IO_Write>
 8006d84:	4603      	mov	r3, r0
 8006d86:	461a      	mov	r2, r3
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006d8e:	89fb      	ldrh	r3, [r7, #14]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2202      	movs	r2, #2
 8006d94:	f240 6107 	movw	r1, #1543	; 0x607
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fd11 	bl	80077c0 <CODEC_IO_Write>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461a      	mov	r2, r3
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8006da8:	89fb      	ldrh	r3, [r7, #14]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2202      	movs	r2, #2
 8006dae:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fd04 	bl	80077c0 <CODEC_IO_Write>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006dc2:	89fb      	ldrh	r3, [r7, #14]
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f240 6109 	movw	r1, #1545	; 0x609
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fcf7 	bl	80077c0 <CODEC_IO_Write>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006ddc:	89fb      	ldrh	r3, [r7, #14]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	220d      	movs	r2, #13
 8006de2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fcea 	bl	80077c0 <CODEC_IO_Write>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	4413      	add	r3, r2
 8006df4:	61fb      	str	r3, [r7, #28]
      break;
 8006df6:	e006      	b.n	8006e06 <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	61fb      	str	r3, [r7, #28]
      break;
 8006dfe:	e002      	b.n	8006e06 <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 8006e00:	4ba4      	ldr	r3, [pc, #656]	; (8007094 <wm8994_Init+0x98c>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4aa3      	ldr	r2, [pc, #652]	; (8007098 <wm8994_Init+0x990>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d079      	beq.n	8006f02 <wm8994_Init+0x7fa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4aa1      	ldr	r2, [pc, #644]	; (8007098 <wm8994_Init+0x990>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	f200 80ad 	bhi.w	8006f72 <wm8994_Init+0x86a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d061      	beq.n	8006ee6 <wm8994_Init+0x7de>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	f200 80a2 	bhi.w	8006f72 <wm8994_Init+0x86a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006e34:	4293      	cmp	r3, r2
 8006e36:	f000 808e 	beq.w	8006f56 <wm8994_Init+0x84e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006e40:	4293      	cmp	r3, r2
 8006e42:	f200 8096 	bhi.w	8006f72 <wm8994_Init+0x86a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006e4c:	d03d      	beq.n	8006eca <wm8994_Init+0x7c2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006e54:	f200 808d 	bhi.w	8006f72 <wm8994_Init+0x86a>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f245 6222 	movw	r2, #22050	; 0x5622
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d06b      	beq.n	8006f3a <wm8994_Init+0x832>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f245 6222 	movw	r2, #22050	; 0x5622
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	f200 8082 	bhi.w	8006f72 <wm8994_Init+0x86a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006e74:	d01b      	beq.n	8006eae <wm8994_Init+0x7a6>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006e7c:	d879      	bhi.n	8006f72 <wm8994_Init+0x86a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006e84:	d005      	beq.n	8006e92 <wm8994_Init+0x78a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f642 3211 	movw	r2, #11025	; 0x2b11
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d046      	beq.n	8006f1e <wm8994_Init+0x816>
 8006e90:	e06f      	b.n	8006f72 <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8006e92:	89fb      	ldrh	r3, [r7, #14]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2203      	movs	r2, #3
 8006e98:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fc8f 	bl	80077c0 <CODEC_IO_Write>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	61fb      	str	r3, [r7, #28]
    break;
 8006eac:	e06f      	b.n	8006f8e <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8006eae:	89fb      	ldrh	r3, [r7, #14]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2233      	movs	r2, #51	; 0x33
 8006eb4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fc81 	bl	80077c0 <CODEC_IO_Write>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	61fb      	str	r3, [r7, #28]
    break;
 8006ec8:	e061      	b.n	8006f8e <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8006eca:	89fb      	ldrh	r3, [r7, #14]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2263      	movs	r2, #99	; 0x63
 8006ed0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fc73 	bl	80077c0 <CODEC_IO_Write>
 8006eda:	4603      	mov	r3, r0
 8006edc:	461a      	mov	r2, r3
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	61fb      	str	r3, [r7, #28]
    break;
 8006ee4:	e053      	b.n	8006f8e <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006ee6:	89fb      	ldrh	r3, [r7, #14]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2283      	movs	r2, #131	; 0x83
 8006eec:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fc65 	bl	80077c0 <CODEC_IO_Write>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	461a      	mov	r2, r3
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	61fb      	str	r3, [r7, #28]
    break;
 8006f00:	e045      	b.n	8006f8e <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8006f02:	89fb      	ldrh	r3, [r7, #14]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	22a3      	movs	r2, #163	; 0xa3
 8006f08:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fc57 	bl	80077c0 <CODEC_IO_Write>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	61fb      	str	r3, [r7, #28]
    break;
 8006f1c:	e037      	b.n	8006f8e <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8006f1e:	89fb      	ldrh	r3, [r7, #14]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2213      	movs	r2, #19
 8006f24:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fc49 	bl	80077c0 <CODEC_IO_Write>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	461a      	mov	r2, r3
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	61fb      	str	r3, [r7, #28]
    break;
 8006f38:	e029      	b.n	8006f8e <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8006f3a:	89fb      	ldrh	r3, [r7, #14]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2243      	movs	r2, #67	; 0x43
 8006f40:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fc3b 	bl	80077c0 <CODEC_IO_Write>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	61fb      	str	r3, [r7, #28]
    break;
 8006f54:	e01b      	b.n	8006f8e <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8006f56:	89fb      	ldrh	r3, [r7, #14]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2273      	movs	r2, #115	; 0x73
 8006f5c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fc2d 	bl	80077c0 <CODEC_IO_Write>
 8006f66:	4603      	mov	r3, r0
 8006f68:	461a      	mov	r2, r3
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]
    break;
 8006f70:	e00d      	b.n	8006f8e <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006f72:	89fb      	ldrh	r3, [r7, #14]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2283      	movs	r2, #131	; 0x83
 8006f78:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fc1f 	bl	80077c0 <CODEC_IO_Write>
 8006f82:	4603      	mov	r3, r0
 8006f84:	461a      	mov	r2, r3
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	61fb      	str	r3, [r7, #28]
    break;
 8006f8c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006f8e:	8afb      	ldrh	r3, [r7, #22]
 8006f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f94:	d10e      	bne.n	8006fb4 <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 8006f96:	89fb      	ldrh	r3, [r7, #14]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f244 0218 	movw	r2, #16408	; 0x4018
 8006f9e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fc0c 	bl	80077c0 <CODEC_IO_Write>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	4413      	add	r3, r2
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	e00d      	b.n	8006fd0 <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8006fb4:	89fb      	ldrh	r3, [r7, #14]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f244 0210 	movw	r2, #16400	; 0x4010
 8006fbc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fbfd 	bl	80077c0 <CODEC_IO_Write>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	461a      	mov	r2, r3
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8006fd0:	89fb      	ldrh	r3, [r7, #14]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f240 3102 	movw	r1, #770	; 0x302
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fbf0 	bl	80077c0 <CODEC_IO_Write>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8006fea:	89fb      	ldrh	r3, [r7, #14]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	220a      	movs	r2, #10
 8006ff0:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fbe3 	bl	80077c0 <CODEC_IO_Write>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2201      	movs	r2, #1
 800700a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fbd6 	bl	80077c0 <CODEC_IO_Write>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800701e:	8b3b      	ldrh	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 817b 	beq.w	800731c <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8007026:	8b3b      	ldrh	r3, [r7, #24]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d157      	bne.n	80070dc <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 800702c:	89fb      	ldrh	r3, [r7, #14]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007034:	212d      	movs	r1, #45	; 0x2d
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fbc2 	bl	80077c0 <CODEC_IO_Write>
 800703c:	4603      	mov	r3, r0
 800703e:	461a      	mov	r2, r3
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 8007046:	89fb      	ldrh	r3, [r7, #14]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800704e:	212e      	movs	r1, #46	; 0x2e
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fbb5 	bl	80077c0 <CODEC_IO_Write>
 8007056:	4603      	mov	r3, r0
 8007058:	461a      	mov	r2, r3
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	4413      	add	r3, r2
 800705e:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 8007060:	4b0e      	ldr	r3, [pc, #56]	; (800709c <wm8994_Init+0x994>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01b      	beq.n	80070a0 <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8007068:	89fb      	ldrh	r3, [r7, #14]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8007070:	f44f 7188 	mov.w	r1, #272	; 0x110
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fba3 	bl	80077c0 <CODEC_IO_Write>
 800707a:	4603      	mov	r3, r0
 800707c:	461a      	mov	r2, r3
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <wm8994_Init+0x994>)
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 800708a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800708e:	f000 fc05 	bl	800789c <HAL_Delay>
 8007092:	e016      	b.n	80070c2 <wm8994_Init+0x9ba>
 8007094:	200003cc 	.word	0x200003cc
 8007098:	00017700 	.word	0x00017700
 800709c:	20000018 	.word	0x20000018
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f248 1208 	movw	r2, #33032	; 0x8108
 80070a8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fb87 	bl	80077c0 <CODEC_IO_Write>
 80070b2:	4603      	mov	r3, r0
 80070b4:	461a      	mov	r2, r3
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4413      	add	r3, r2
 80070ba:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 80070bc:	2032      	movs	r0, #50	; 0x32
 80070be:	f000 fbed 	bl	800789c <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80070c2:	89fb      	ldrh	r3, [r7, #14]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2200      	movs	r2, #0
 80070c8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fb77 	bl	80077c0 <CODEC_IO_Write>
 80070d2:	4603      	mov	r3, r0
 80070d4:	461a      	mov	r2, r3
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80070dc:	89fb      	ldrh	r3, [r7, #14]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80070e4:	2103      	movs	r1, #3
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fb6a 	bl	80077c0 <CODEC_IO_Write>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	4413      	add	r3, r2
 80070f4:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80070f6:	89fb      	ldrh	r3, [r7, #14]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2200      	movs	r2, #0
 80070fc:	2122      	movs	r1, #34	; 0x22
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fb5e 	bl	80077c0 <CODEC_IO_Write>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	4413      	add	r3, r2
 800710c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800710e:	89fb      	ldrh	r3, [r7, #14]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2200      	movs	r2, #0
 8007114:	2123      	movs	r1, #35	; 0x23
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fb52 	bl	80077c0 <CODEC_IO_Write>
 800711c:	4603      	mov	r3, r0
 800711e:	461a      	mov	r2, r3
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8007126:	89fb      	ldrh	r3, [r7, #14]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800712e:	2136      	movs	r1, #54	; 0x36
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fb45 	bl	80077c0 <CODEC_IO_Write>
 8007136:	4603      	mov	r3, r0
 8007138:	461a      	mov	r2, r3
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8007140:	89fb      	ldrh	r3, [r7, #14]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f243 0203 	movw	r2, #12291	; 0x3003
 8007148:	2101      	movs	r1, #1
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fb38 	bl	80077c0 <CODEC_IO_Write>
 8007150:	4603      	mov	r3, r0
 8007152:	461a      	mov	r2, r3
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4413      	add	r3, r2
 8007158:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800715a:	8afb      	ldrh	r3, [r7, #22]
 800715c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007160:	d10d      	bne.n	800717e <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8007162:	89fb      	ldrh	r3, [r7, #14]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	f240 2205 	movw	r2, #517	; 0x205
 800716a:	2151      	movs	r1, #81	; 0x51
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fb27 	bl	80077c0 <CODEC_IO_Write>
 8007172:	4603      	mov	r3, r0
 8007174:	461a      	mov	r2, r3
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	e00b      	b.n	8007196 <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 800717e:	89fb      	ldrh	r3, [r7, #14]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2205      	movs	r2, #5
 8007184:	2151      	movs	r1, #81	; 0x51
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fb1a 	bl	80077c0 <CODEC_IO_Write>
 800718c:	4603      	mov	r3, r0
 800718e:	461a      	mov	r2, r3
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8007196:	8b7b      	ldrh	r3, [r7, #26]
 8007198:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 800719c:	f043 0303 	orr.w	r3, r3, #3
 80071a0:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80071a2:	89fb      	ldrh	r3, [r7, #14]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	8b7a      	ldrh	r2, [r7, #26]
 80071a8:	2101      	movs	r1, #1
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fb08 	bl	80077c0 <CODEC_IO_Write>
 80071b0:	4603      	mov	r3, r0
 80071b2:	461a      	mov	r2, r3
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	4413      	add	r3, r2
 80071b8:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80071ba:	89fb      	ldrh	r3, [r7, #14]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2222      	movs	r2, #34	; 0x22
 80071c0:	2160      	movs	r1, #96	; 0x60
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fafc 	bl	80077c0 <CODEC_IO_Write>
 80071c8:	4603      	mov	r3, r0
 80071ca:	461a      	mov	r2, r3
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80071d2:	89fb      	ldrh	r3, [r7, #14]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f649 7225 	movw	r2, #40741	; 0x9f25
 80071da:	214c      	movs	r1, #76	; 0x4c
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 faef 	bl	80077c0 <CODEC_IO_Write>
 80071e2:	4603      	mov	r3, r0
 80071e4:	461a      	mov	r2, r3
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 80071ec:	200f      	movs	r0, #15
 80071ee:	f000 fb55 	bl	800789c <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80071f2:	89fb      	ldrh	r3, [r7, #14]
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2201      	movs	r2, #1
 80071f8:	212d      	movs	r1, #45	; 0x2d
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fae0 	bl	80077c0 <CODEC_IO_Write>
 8007200:	4603      	mov	r3, r0
 8007202:	461a      	mov	r2, r3
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	4413      	add	r3, r2
 8007208:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800720a:	89fb      	ldrh	r3, [r7, #14]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2201      	movs	r2, #1
 8007210:	212e      	movs	r1, #46	; 0x2e
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fad4 	bl	80077c0 <CODEC_IO_Write>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8007222:	89fb      	ldrh	r3, [r7, #14]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f44f 724c 	mov.w	r2, #816	; 0x330
 800722a:	2103      	movs	r1, #3
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fac7 	bl	80077c0 <CODEC_IO_Write>
 8007232:	4603      	mov	r3, r0
 8007234:	461a      	mov	r2, r3
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800723c:	89fb      	ldrh	r3, [r7, #14]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2233      	movs	r2, #51	; 0x33
 8007242:	2154      	movs	r1, #84	; 0x54
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fabb 	bl	80077c0 <CODEC_IO_Write>
 800724a:	4603      	mov	r3, r0
 800724c:	461a      	mov	r2, r3
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 8007254:	f240 1001 	movw	r0, #257	; 0x101
 8007258:	f000 fb20 	bl	800789c <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800725c:	89fb      	ldrh	r3, [r7, #14]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	22ee      	movs	r2, #238	; 0xee
 8007262:	2160      	movs	r1, #96	; 0x60
 8007264:	4618      	mov	r0, r3
 8007266:	f000 faab 	bl	80077c0 <CODEC_IO_Write>
 800726a:	4603      	mov	r3, r0
 800726c:	461a      	mov	r2, r3
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8007274:	89fb      	ldrh	r3, [r7, #14]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	22c0      	movs	r2, #192	; 0xc0
 800727a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fa9e 	bl	80077c0 <CODEC_IO_Write>
 8007284:	4603      	mov	r3, r0
 8007286:	461a      	mov	r2, r3
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	4413      	add	r3, r2
 800728c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800728e:	89fb      	ldrh	r3, [r7, #14]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	22c0      	movs	r2, #192	; 0xc0
 8007294:	f240 6111 	movw	r1, #1553	; 0x611
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fa91 	bl	80077c0 <CODEC_IO_Write>
 800729e:	4603      	mov	r3, r0
 80072a0:	461a      	mov	r2, r3
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80072a8:	89fb      	ldrh	r3, [r7, #14]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2210      	movs	r2, #16
 80072ae:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fa84 	bl	80077c0 <CODEC_IO_Write>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	4413      	add	r3, r2
 80072c0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80072c2:	89fb      	ldrh	r3, [r7, #14]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	22c0      	movs	r2, #192	; 0xc0
 80072c8:	f240 6112 	movw	r1, #1554	; 0x612
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fa77 	bl	80077c0 <CODEC_IO_Write>
 80072d2:	4603      	mov	r3, r0
 80072d4:	461a      	mov	r2, r3
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80072dc:	89fb      	ldrh	r3, [r7, #14]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	22c0      	movs	r2, #192	; 0xc0
 80072e2:	f240 6113 	movw	r1, #1555	; 0x613
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fa6a 	bl	80077c0 <CODEC_IO_Write>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	4413      	add	r3, r2
 80072f4:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80072f6:	89fb      	ldrh	r3, [r7, #14]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2210      	movs	r2, #16
 80072fc:	f240 4122 	movw	r1, #1058	; 0x422
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fa5d 	bl	80077c0 <CODEC_IO_Write>
 8007306:	4603      	mov	r3, r0
 8007308:	461a      	mov	r2, r3
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8007310:	7afa      	ldrb	r2, [r7, #11]
 8007312:	89fb      	ldrh	r3, [r7, #14]
 8007314:	4611      	mov	r1, r2
 8007316:	4618      	mov	r0, r3
 8007318:	f000 f8c0 	bl	800749c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 800731c:	8afb      	ldrh	r3, [r7, #22]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 80a6 	beq.w	8007470 <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8007324:	8afb      	ldrh	r3, [r7, #22]
 8007326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800732a:	d003      	beq.n	8007334 <wm8994_Init+0xc2c>
 800732c:	8afb      	ldrh	r3, [r7, #22]
 800732e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007332:	d12b      	bne.n	800738c <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8007334:	8b7b      	ldrh	r3, [r7, #26]
 8007336:	f043 0313 	orr.w	r3, r3, #19
 800733a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800733c:	89fb      	ldrh	r3, [r7, #14]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	8b7a      	ldrh	r2, [r7, #26]
 8007342:	2101      	movs	r1, #1
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fa3b 	bl	80077c0 <CODEC_IO_Write>
 800734a:	4603      	mov	r3, r0
 800734c:	461a      	mov	r2, r3
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8007354:	89fb      	ldrh	r3, [r7, #14]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2202      	movs	r2, #2
 800735a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fa2e 	bl	80077c0 <CODEC_IO_Write>
 8007364:	4603      	mov	r3, r0
 8007366:	461a      	mov	r2, r3
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	4413      	add	r3, r2
 800736c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800736e:	89fb      	ldrh	r3, [r7, #14]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007376:	f240 4111 	movw	r1, #1041	; 0x411
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fa20 	bl	80077c0 <CODEC_IO_Write>
 8007380:	4603      	mov	r3, r0
 8007382:	461a      	mov	r2, r3
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	61fb      	str	r3, [r7, #28]
 800738a:	e06b      	b.n	8007464 <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800738c:	8afb      	ldrh	r3, [r7, #22]
 800738e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007392:	d139      	bne.n	8007408 <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8007394:	8b7b      	ldrh	r3, [r7, #26]
 8007396:	f043 0313 	orr.w	r3, r3, #19
 800739a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800739c:	89fb      	ldrh	r3, [r7, #14]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	8b7a      	ldrh	r2, [r7, #26]
 80073a2:	2101      	movs	r1, #1
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fa0b 	bl	80077c0 <CODEC_IO_Write>
 80073aa:	4603      	mov	r3, r0
 80073ac:	461a      	mov	r2, r3
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80073b4:	89fb      	ldrh	r3, [r7, #14]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2202      	movs	r2, #2
 80073ba:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f9fe 	bl	80077c0 <CODEC_IO_Write>
 80073c4:	4603      	mov	r3, r0
 80073c6:	461a      	mov	r2, r3
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80073ce:	89fb      	ldrh	r3, [r7, #14]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80073d6:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f9f0 	bl	80077c0 <CODEC_IO_Write>
 80073e0:	4603      	mov	r3, r0
 80073e2:	461a      	mov	r2, r3
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 80073ea:	89fb      	ldrh	r3, [r7, #14]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80073f2:	f240 4111 	movw	r1, #1041	; 0x411
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 f9e2 	bl	80077c0 <CODEC_IO_Write>
 80073fc:	4603      	mov	r3, r0
 80073fe:	461a      	mov	r2, r3
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	4413      	add	r3, r2
 8007404:	61fb      	str	r3, [r7, #28]
 8007406:	e02d      	b.n	8007464 <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8007408:	8afb      	ldrh	r3, [r7, #22]
 800740a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800740e:	d003      	beq.n	8007418 <wm8994_Init+0xd10>
 8007410:	8afb      	ldrh	r3, [r7, #22]
 8007412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007416:	d125      	bne.n	8007464 <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8007418:	89fb      	ldrh	r3, [r7, #14]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	220b      	movs	r2, #11
 800741e:	2118      	movs	r1, #24
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f9cd 	bl	80077c0 <CODEC_IO_Write>
 8007426:	4603      	mov	r3, r0
 8007428:	461a      	mov	r2, r3
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8007430:	89fb      	ldrh	r3, [r7, #14]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	220b      	movs	r2, #11
 8007436:	211a      	movs	r1, #26
 8007438:	4618      	mov	r0, r3
 800743a:	f000 f9c1 	bl	80077c0 <CODEC_IO_Write>
 800743e:	4603      	mov	r3, r0
 8007440:	461a      	mov	r2, r3
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8007450:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f9b3 	bl	80077c0 <CODEC_IO_Write>
 800745a:	4603      	mov	r3, r0
 800745c:	461a      	mov	r2, r3
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8007464:	7afa      	ldrb	r2, [r7, #11]
 8007466:	89fb      	ldrh	r3, [r7, #14]
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f816 	bl	800749c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8007470:	69fb      	ldr	r3, [r7, #28]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3720      	adds	r7, #32
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop

0800747c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f7fd ff3d 	bl	800530c <AUDIO_I2C_Read>
 8007492:	4603      	mov	r3, r0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	460a      	mov	r2, r1
 80074a6:	80fb      	strh	r3, [r7, #6]
 80074a8:	4613      	mov	r3, r2
 80074aa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80074b0:	797b      	ldrb	r3, [r7, #5]
 80074b2:	2b64      	cmp	r3, #100	; 0x64
 80074b4:	d80b      	bhi.n	80074ce <wm8994_SetVolume+0x32>
 80074b6:	797a      	ldrb	r2, [r7, #5]
 80074b8:	4613      	mov	r3, r2
 80074ba:	019b      	lsls	r3, r3, #6
 80074bc:	1a9b      	subs	r3, r3, r2
 80074be:	4a86      	ldr	r2, [pc, #536]	; (80076d8 <wm8994_SetVolume+0x23c>)
 80074c0:	fb82 1203 	smull	r1, r2, r2, r3
 80074c4:	1152      	asrs	r2, r2, #5
 80074c6:	17db      	asrs	r3, r3, #31
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	e000      	b.n	80074d0 <wm8994_SetVolume+0x34>
 80074ce:	2364      	movs	r3, #100	; 0x64
 80074d0:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80074d2:	4b82      	ldr	r3, [pc, #520]	; (80076dc <wm8994_SetVolume+0x240>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 809b 	beq.w	8007612 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80074dc:	7afb      	ldrb	r3, [r7, #11]
 80074de:	2b3e      	cmp	r3, #62	; 0x3e
 80074e0:	d93d      	bls.n	800755e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f8fc 	bl	80076e4 <wm8994_SetMute>
 80074ec:	4602      	mov	r2, r0
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80074f4:	88fb      	ldrh	r3, [r7, #6]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	f240 127f 	movw	r2, #383	; 0x17f
 80074fc:	211c      	movs	r1, #28
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 f95e 	bl	80077c0 <CODEC_IO_Write>
 8007504:	4603      	mov	r3, r0
 8007506:	461a      	mov	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f240 127f 	movw	r2, #383	; 0x17f
 8007516:	211d      	movs	r1, #29
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f951 	bl	80077c0 <CODEC_IO_Write>
 800751e:	4603      	mov	r3, r0
 8007520:	461a      	mov	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	f240 127f 	movw	r2, #383	; 0x17f
 8007530:	2126      	movs	r1, #38	; 0x26
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f944 	bl	80077c0 <CODEC_IO_Write>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f240 127f 	movw	r2, #383	; 0x17f
 800754a:	2127      	movs	r1, #39	; 0x27
 800754c:	4618      	mov	r0, r3
 800754e:	f000 f937 	bl	80077c0 <CODEC_IO_Write>
 8007552:	4603      	mov	r3, r0
 8007554:	461a      	mov	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e059      	b.n	8007612 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800755e:	797b      	ldrb	r3, [r7, #5]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d109      	bne.n	8007578 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007564:	88fb      	ldrh	r3, [r7, #6]
 8007566:	2101      	movs	r1, #1
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f8bb 	bl	80076e4 <wm8994_SetMute>
 800756e:	4602      	mov	r2, r0
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e04c      	b.n	8007612 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	2100      	movs	r1, #0
 800757c:	4618      	mov	r0, r3
 800757e:	f000 f8b1 	bl	80076e4 <wm8994_SetMute>
 8007582:	4602      	mov	r2, r0
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	b2d8      	uxtb	r0, r3
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	b21b      	sxth	r3, r3
 8007592:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007596:	b21b      	sxth	r3, r3
 8007598:	b29b      	uxth	r3, r3
 800759a:	461a      	mov	r2, r3
 800759c:	211c      	movs	r1, #28
 800759e:	f000 f90f 	bl	80077c0 <CODEC_IO_Write>
 80075a2:	4603      	mov	r3, r0
 80075a4:	461a      	mov	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	b2d8      	uxtb	r0, r3
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	b21b      	sxth	r3, r3
 80075b4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80075b8:	b21b      	sxth	r3, r3
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	211d      	movs	r1, #29
 80075c0:	f000 f8fe 	bl	80077c0 <CODEC_IO_Write>
 80075c4:	4603      	mov	r3, r0
 80075c6:	461a      	mov	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80075ce:	88fb      	ldrh	r3, [r7, #6]
 80075d0:	b2d8      	uxtb	r0, r3
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	b21b      	sxth	r3, r3
 80075d6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80075da:	b21b      	sxth	r3, r3
 80075dc:	b29b      	uxth	r3, r3
 80075de:	461a      	mov	r2, r3
 80075e0:	2126      	movs	r1, #38	; 0x26
 80075e2:	f000 f8ed 	bl	80077c0 <CODEC_IO_Write>
 80075e6:	4603      	mov	r3, r0
 80075e8:	461a      	mov	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80075f0:	88fb      	ldrh	r3, [r7, #6]
 80075f2:	b2d8      	uxtb	r0, r3
 80075f4:	7afb      	ldrb	r3, [r7, #11]
 80075f6:	b21b      	sxth	r3, r3
 80075f8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80075fc:	b21b      	sxth	r3, r3
 80075fe:	b29b      	uxth	r3, r3
 8007600:	461a      	mov	r2, r3
 8007602:	2127      	movs	r1, #39	; 0x27
 8007604:	f000 f8dc 	bl	80077c0 <CODEC_IO_Write>
 8007608:	4603      	mov	r3, r0
 800760a:	461a      	mov	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8007612:	4b33      	ldr	r3, [pc, #204]	; (80076e0 <wm8994_SetVolume+0x244>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d059      	beq.n	80076ce <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800761a:	797b      	ldrb	r3, [r7, #5]
 800761c:	2b63      	cmp	r3, #99	; 0x63
 800761e:	d80c      	bhi.n	800763a <wm8994_SetVolume+0x19e>
 8007620:	797a      	ldrb	r2, [r7, #5]
 8007622:	4613      	mov	r3, r2
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	4a2b      	ldr	r2, [pc, #172]	; (80076d8 <wm8994_SetVolume+0x23c>)
 800762c:	fb82 1203 	smull	r1, r2, r2, r3
 8007630:	1152      	asrs	r2, r2, #5
 8007632:	17db      	asrs	r3, r3, #31
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	b2db      	uxtb	r3, r3
 8007638:	e000      	b.n	800763c <wm8994_SetVolume+0x1a0>
 800763a:	23ef      	movs	r3, #239	; 0xef
 800763c:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	b2d8      	uxtb	r0, r3
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	b21b      	sxth	r3, r3
 8007646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800764a:	b21b      	sxth	r3, r3
 800764c:	b29b      	uxth	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007654:	f000 f8b4 	bl	80077c0 <CODEC_IO_Write>
 8007658:	4603      	mov	r3, r0
 800765a:	461a      	mov	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	b2d8      	uxtb	r0, r3
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	b21b      	sxth	r3, r3
 800766a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800766e:	b21b      	sxth	r3, r3
 8007670:	b29b      	uxth	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	f240 4101 	movw	r1, #1025	; 0x401
 8007678:	f000 f8a2 	bl	80077c0 <CODEC_IO_Write>
 800767c:	4603      	mov	r3, r0
 800767e:	461a      	mov	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	b2d8      	uxtb	r0, r3
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	b21b      	sxth	r3, r3
 800768e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007692:	b21b      	sxth	r3, r3
 8007694:	b29b      	uxth	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	f240 4104 	movw	r1, #1028	; 0x404
 800769c:	f000 f890 	bl	80077c0 <CODEC_IO_Write>
 80076a0:	4603      	mov	r3, r0
 80076a2:	461a      	mov	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	b2d8      	uxtb	r0, r3
 80076ae:	7afb      	ldrb	r3, [r7, #11]
 80076b0:	b21b      	sxth	r3, r3
 80076b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076b6:	b21b      	sxth	r3, r3
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	f240 4105 	movw	r1, #1029	; 0x405
 80076c0:	f000 f87e 	bl	80077c0 <CODEC_IO_Write>
 80076c4:	4603      	mov	r3, r0
 80076c6:	461a      	mov	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80076ce:	68fb      	ldr	r3, [r7, #12]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	51eb851f 	.word	0x51eb851f
 80076dc:	200003c8 	.word	0x200003c8
 80076e0:	200003cc 	.word	0x200003cc

080076e4 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80076f4:	4b21      	ldr	r3, [pc, #132]	; (800777c <wm8994_SetMute+0x98>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d039      	beq.n	8007770 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d11c      	bne.n	800773c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800770a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800770e:	4618      	mov	r0, r3
 8007710:	f000 f856 	bl	80077c0 <CODEC_IO_Write>
 8007714:	4603      	mov	r3, r0
 8007716:	461a      	mov	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007726:	f240 4122 	movw	r1, #1058	; 0x422
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f848 	bl	80077c0 <CODEC_IO_Write>
 8007730:	4603      	mov	r3, r0
 8007732:	461a      	mov	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	e019      	b.n	8007770 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2210      	movs	r2, #16
 8007742:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f83a 	bl	80077c0 <CODEC_IO_Write>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2210      	movs	r2, #16
 800775c:	f240 4122 	movw	r1, #1058	; 0x422
 8007760:	4618      	mov	r0, r3
 8007762:	f000 f82d 	bl	80077c0 <CODEC_IO_Write>
 8007766:	4603      	mov	r3, r0
 8007768:	461a      	mov	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8007770:	68fb      	ldr	r3, [r7, #12]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200003c8 	.word	0x200003c8

08007780 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2200      	movs	r2, #0
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f812 	bl	80077c0 <CODEC_IO_Write>
 800779c:	4603      	mov	r3, r0
 800779e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80077a0:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <wm8994_Reset+0x38>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <wm8994_Reset+0x3c>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

  return counter;
 80077ac:	68fb      	ldr	r3, [r7, #12]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	200003c8 	.word	0x200003c8
 80077bc:	200003cc 	.word	0x200003cc

080077c0 <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
 80077ca:	460b      	mov	r3, r1
 80077cc:	80bb      	strh	r3, [r7, #4]
 80077ce:	4613      	mov	r3, r2
 80077d0:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 80077d6:	887a      	ldrh	r2, [r7, #2]
 80077d8:	88b9      	ldrh	r1, [r7, #4]
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fd fd6b 	bl	80052b8 <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	b2db      	uxtb	r3, r3
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80077f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80077f4:	480d      	ldr	r0, [pc, #52]	; (800782c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80077f6:	490e      	ldr	r1, [pc, #56]	; (8007830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80077f8:	4a0e      	ldr	r2, [pc, #56]	; (8007834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80077fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80077fc:	e002      	b.n	8007804 <LoopCopyDataInit>

080077fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80077fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007802:	3304      	adds	r3, #4

08007804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007808:	d3f9      	bcc.n	80077fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800780a:	4a0b      	ldr	r2, [pc, #44]	; (8007838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800780c:	4c0b      	ldr	r4, [pc, #44]	; (800783c <LoopFillZerobss+0x26>)
  movs r3, #0
 800780e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007810:	e001      	b.n	8007816 <LoopFillZerobss>

08007812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007814:	3204      	adds	r2, #4

08007816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007818:	d3fb      	bcc.n	8007812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800781a:	f7fc ff8d 	bl	8004738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800781e:	f013 fba9 	bl	801af74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007822:	f7fa fa9f 	bl	8001d64 <main>
  bx  lr    
 8007826:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007828:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800782c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007830:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8007834:	08032660 	.word	0x08032660
  ldr r2, =_sbss
 8007838:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 800783c:	2004b024 	.word	0x2004b024

08007840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007840:	e7fe      	b.n	8007840 <ADC_IRQHandler>

08007842 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007846:	2003      	movs	r0, #3
 8007848:	f000 fba5 	bl	8007f96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800784c:	2000      	movs	r0, #0
 800784e:	f7fc fdff 	bl	8004450 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007852:	f7fb fde3 	bl	800341c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <HAL_IncTick+0x20>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	4b06      	ldr	r3, [pc, #24]	; (8007880 <HAL_IncTick+0x24>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4413      	add	r3, r2
 800786c:	4a04      	ldr	r2, [pc, #16]	; (8007880 <HAL_IncTick+0x24>)
 800786e:	6013      	str	r3, [r2, #0]
}
 8007870:	bf00      	nop
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20000038 	.word	0x20000038
 8007880:	2004a4bc 	.word	0x2004a4bc

08007884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  return uwTick;
 8007888:	4b03      	ldr	r3, [pc, #12]	; (8007898 <HAL_GetTick+0x14>)
 800788a:	681b      	ldr	r3, [r3, #0]
}
 800788c:	4618      	mov	r0, r3
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	2004a4bc 	.word	0x2004a4bc

0800789c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80078a4:	f7ff ffee 	bl	8007884 <HAL_GetTick>
 80078a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b4:	d005      	beq.n	80078c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80078b6:	4b0a      	ldr	r3, [pc, #40]	; (80078e0 <HAL_Delay+0x44>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80078c2:	bf00      	nop
 80078c4:	f7ff ffde 	bl	8007884 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d8f7      	bhi.n	80078c4 <HAL_Delay+0x28>
  {
  }
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000038 	.word	0x20000038

080078e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e031      	b.n	800795e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fb fdb2 	bl	800346c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	f003 0310 	and.w	r3, r3, #16
 800791e:	2b00      	cmp	r3, #0
 8007920:	d116      	bne.n	8007950 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007926:	4b10      	ldr	r3, [pc, #64]	; (8007968 <HAL_ADC_Init+0x84>)
 8007928:	4013      	ands	r3, r2
 800792a:	f043 0202 	orr.w	r2, r3, #2
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f964 	bl	8007c00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f023 0303 	bic.w	r3, r3, #3
 8007946:	f043 0201 	orr.w	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	641a      	str	r2, [r3, #64]	; 0x40
 800794e:	e001      	b.n	8007954 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	ffffeefd 	.word	0xffffeefd

0800796c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_ADC_ConfigChannel+0x1c>
 8007984:	2302      	movs	r3, #2
 8007986:	e12a      	b.n	8007bde <HAL_ADC_ConfigChannel+0x272>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b09      	cmp	r3, #9
 8007996:	d93a      	bls.n	8007a0e <HAL_ADC_ConfigChannel+0xa2>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079a0:	d035      	beq.n	8007a0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68d9      	ldr	r1, [r3, #12]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	461a      	mov	r2, r3
 80079b0:	4613      	mov	r3, r2
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	4413      	add	r3, r2
 80079b6:	3b1e      	subs	r3, #30
 80079b8:	2207      	movs	r2, #7
 80079ba:	fa02 f303 	lsl.w	r3, r2, r3
 80079be:	43da      	mvns	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	400a      	ands	r2, r1
 80079c6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a87      	ldr	r2, [pc, #540]	; (8007bec <HAL_ADC_ConfigChannel+0x280>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d10a      	bne.n	80079e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68d9      	ldr	r1, [r3, #12]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	061a      	lsls	r2, r3, #24
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80079e6:	e035      	b.n	8007a54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68d9      	ldr	r1, [r3, #12]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	4618      	mov	r0, r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	4403      	add	r3, r0
 8007a00:	3b1e      	subs	r3, #30
 8007a02:	409a      	lsls	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a0c:	e022      	b.n	8007a54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6919      	ldr	r1, [r3, #16]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	4413      	add	r3, r2
 8007a22:	2207      	movs	r2, #7
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	43da      	mvns	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	400a      	ands	r2, r1
 8007a30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6919      	ldr	r1, [r3, #16]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4618      	mov	r0, r3
 8007a44:	4603      	mov	r3, r0
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	4403      	add	r3, r0
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	2b06      	cmp	r3, #6
 8007a5a:	d824      	bhi.n	8007aa6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	3b05      	subs	r3, #5
 8007a6e:	221f      	movs	r2, #31
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	43da      	mvns	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	400a      	ands	r2, r1
 8007a7c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	3b05      	subs	r3, #5
 8007a98:	fa00 f203 	lsl.w	r2, r0, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	635a      	str	r2, [r3, #52]	; 0x34
 8007aa4:	e04c      	b.n	8007b40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	2b0c      	cmp	r3, #12
 8007aac:	d824      	bhi.n	8007af8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	3b23      	subs	r3, #35	; 0x23
 8007ac0:	221f      	movs	r2, #31
 8007ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac6:	43da      	mvns	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	400a      	ands	r2, r1
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	4618      	mov	r0, r3
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	3b23      	subs	r3, #35	; 0x23
 8007aea:	fa00 f203 	lsl.w	r2, r0, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30
 8007af6:	e023      	b.n	8007b40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	3b41      	subs	r3, #65	; 0x41
 8007b0a:	221f      	movs	r2, #31
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	43da      	mvns	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	400a      	ands	r2, r1
 8007b18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	4618      	mov	r0, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	3b41      	subs	r3, #65	; 0x41
 8007b34:	fa00 f203 	lsl.w	r2, r0, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a2a      	ldr	r2, [pc, #168]	; (8007bf0 <HAL_ADC_ConfigChannel+0x284>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d10a      	bne.n	8007b60 <HAL_ADC_ConfigChannel+0x1f4>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b52:	d105      	bne.n	8007b60 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007b54:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <HAL_ADC_ConfigChannel+0x288>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <HAL_ADC_ConfigChannel+0x288>)
 8007b5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007b5e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a22      	ldr	r2, [pc, #136]	; (8007bf0 <HAL_ADC_ConfigChannel+0x284>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d109      	bne.n	8007b7e <HAL_ADC_ConfigChannel+0x212>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b12      	cmp	r3, #18
 8007b70:	d105      	bne.n	8007b7e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007b72:	4b20      	ldr	r3, [pc, #128]	; (8007bf4 <HAL_ADC_ConfigChannel+0x288>)
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <HAL_ADC_ConfigChannel+0x288>)
 8007b78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b7c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <HAL_ADC_ConfigChannel+0x284>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d125      	bne.n	8007bd4 <HAL_ADC_ConfigChannel+0x268>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a17      	ldr	r2, [pc, #92]	; (8007bec <HAL_ADC_ConfigChannel+0x280>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <HAL_ADC_ConfigChannel+0x22e>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b11      	cmp	r3, #17
 8007b98:	d11c      	bne.n	8007bd4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007b9a:	4b16      	ldr	r3, [pc, #88]	; (8007bf4 <HAL_ADC_ConfigChannel+0x288>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	4a15      	ldr	r2, [pc, #84]	; (8007bf4 <HAL_ADC_ConfigChannel+0x288>)
 8007ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ba4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a10      	ldr	r2, [pc, #64]	; (8007bec <HAL_ADC_ConfigChannel+0x280>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d111      	bne.n	8007bd4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007bb0:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <HAL_ADC_ConfigChannel+0x28c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <HAL_ADC_ConfigChannel+0x290>)
 8007bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bba:	0c9a      	lsrs	r2, r3, #18
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007bc6:	e002      	b.n	8007bce <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f9      	bne.n	8007bc8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	10000012 	.word	0x10000012
 8007bf0:	40012000 	.word	0x40012000
 8007bf4:	40012300 	.word	0x40012300
 8007bf8:	20000008 	.word	0x20000008
 8007bfc:	431bde83 	.word	0x431bde83

08007c00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007c08:	4b78      	ldr	r3, [pc, #480]	; (8007dec <ADC_Init+0x1ec>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	4a77      	ldr	r2, [pc, #476]	; (8007dec <ADC_Init+0x1ec>)
 8007c0e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007c12:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007c14:	4b75      	ldr	r3, [pc, #468]	; (8007dec <ADC_Init+0x1ec>)
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4973      	ldr	r1, [pc, #460]	; (8007dec <ADC_Init+0x1ec>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6859      	ldr	r1, [r3, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	021a      	lsls	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6859      	ldr	r1, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6899      	ldr	r1, [r3, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8e:	4a58      	ldr	r2, [pc, #352]	; (8007df0 <ADC_Init+0x1f0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d022      	beq.n	8007cda <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6899      	ldr	r1, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6899      	ldr	r1, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	609a      	str	r2, [r3, #8]
 8007cd8:	e00f      	b.n	8007cfa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0202 	bic.w	r2, r2, #2
 8007d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6899      	ldr	r1, [r3, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	005a      	lsls	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01b      	beq.n	8007d60 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007d46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6859      	ldr	r1, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	3b01      	subs	r3, #1
 8007d54:	035a      	lsls	r2, r3, #13
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
 8007d5e:	e007      	b.n	8007d70 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	051a      	lsls	r2, r3, #20
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6899      	ldr	r1, [r3, #8]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007db2:	025a      	lsls	r2, r3, #9
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689a      	ldr	r2, [r3, #8]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6899      	ldr	r1, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	029a      	lsls	r2, r3, #10
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	609a      	str	r2, [r3, #8]
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	40012300 	.word	0x40012300
 8007df0:	0f000001 	.word	0x0f000001

08007df4 <__NVIC_SetPriorityGrouping>:
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e04:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <__NVIC_SetPriorityGrouping+0x40>)
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e10:	4013      	ands	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <__NVIC_SetPriorityGrouping+0x44>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e22:	4a04      	ldr	r2, [pc, #16]	; (8007e34 <__NVIC_SetPriorityGrouping+0x40>)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	60d3      	str	r3, [r2, #12]
}
 8007e28:	bf00      	nop
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	e000ed00 	.word	0xe000ed00
 8007e38:	05fa0000 	.word	0x05fa0000

08007e3c <__NVIC_GetPriorityGrouping>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <__NVIC_GetPriorityGrouping+0x18>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	0a1b      	lsrs	r3, r3, #8
 8007e46:	f003 0307 	and.w	r3, r3, #7
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	e000ed00 	.word	0xe000ed00

08007e58 <__NVIC_EnableIRQ>:
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	db0b      	blt.n	8007e82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	f003 021f 	and.w	r2, r3, #31
 8007e70:	4907      	ldr	r1, [pc, #28]	; (8007e90 <__NVIC_EnableIRQ+0x38>)
 8007e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e76:	095b      	lsrs	r3, r3, #5
 8007e78:	2001      	movs	r0, #1
 8007e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8007e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	e000e100 	.word	0xe000e100

08007e94 <__NVIC_DisableIRQ>:
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	db12      	blt.n	8007ecc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	f003 021f 	and.w	r2, r3, #31
 8007eac:	490a      	ldr	r1, [pc, #40]	; (8007ed8 <__NVIC_DisableIRQ+0x44>)
 8007eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	2001      	movs	r0, #1
 8007eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8007eba:	3320      	adds	r3, #32
 8007ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ec0:	f3bf 8f4f 	dsb	sy
}
 8007ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007ec6:	f3bf 8f6f 	isb	sy
}
 8007eca:	bf00      	nop
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	e000e100 	.word	0xe000e100

08007edc <__NVIC_SetPriority>:
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	db0a      	blt.n	8007f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	490c      	ldr	r1, [pc, #48]	; (8007f28 <__NVIC_SetPriority+0x4c>)
 8007ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007efa:	0112      	lsls	r2, r2, #4
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	440b      	add	r3, r1
 8007f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f04:	e00a      	b.n	8007f1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	4908      	ldr	r1, [pc, #32]	; (8007f2c <__NVIC_SetPriority+0x50>)
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	3b04      	subs	r3, #4
 8007f14:	0112      	lsls	r2, r2, #4
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	440b      	add	r3, r1
 8007f1a:	761a      	strb	r2, [r3, #24]
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	e000e100 	.word	0xe000e100
 8007f2c:	e000ed00 	.word	0xe000ed00

08007f30 <NVIC_EncodePriority>:
{
 8007f30:	b480      	push	{r7}
 8007f32:	b089      	sub	sp, #36	; 0x24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f1c3 0307 	rsb	r3, r3, #7
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	bf28      	it	cs
 8007f4e:	2304      	movcs	r3, #4
 8007f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3304      	adds	r3, #4
 8007f56:	2b06      	cmp	r3, #6
 8007f58:	d902      	bls.n	8007f60 <NVIC_EncodePriority+0x30>
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	3b03      	subs	r3, #3
 8007f5e:	e000      	b.n	8007f62 <NVIC_EncodePriority+0x32>
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	43da      	mvns	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	401a      	ands	r2, r3
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f78:	f04f 31ff 	mov.w	r1, #4294967295
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f82:	43d9      	mvns	r1, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f88:	4313      	orrs	r3, r2
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3724      	adds	r7, #36	; 0x24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff ff28 	bl	8007df4 <__NVIC_SetPriorityGrouping>
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fbe:	f7ff ff3d 	bl	8007e3c <__NVIC_GetPriorityGrouping>
 8007fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	6978      	ldr	r0, [r7, #20]
 8007fca:	f7ff ffb1 	bl	8007f30 <NVIC_EncodePriority>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff ff80 	bl	8007edc <__NVIC_SetPriority>
}
 8007fdc:	bf00      	nop
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff ff30 	bl	8007e58 <__NVIC_EnableIRQ>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800800a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff ff40 	bl	8007e94 <__NVIC_DisableIRQ>
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008020:	f3bf 8f5f 	dmb	sy
}
 8008024:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008026:	4b07      	ldr	r3, [pc, #28]	; (8008044 <HAL_MPU_Disable+0x28>)
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	4a06      	ldr	r2, [pc, #24]	; (8008044 <HAL_MPU_Disable+0x28>)
 800802c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008030:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <HAL_MPU_Disable+0x2c>)
 8008034:	2200      	movs	r2, #0
 8008036:	605a      	str	r2, [r3, #4]
}
 8008038:	bf00      	nop
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	e000ed00 	.word	0xe000ed00
 8008048:	e000ed90 	.word	0xe000ed90

0800804c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008054:	4a0b      	ldr	r2, [pc, #44]	; (8008084 <HAL_MPU_Enable+0x38>)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f043 0301 	orr.w	r3, r3, #1
 800805c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800805e:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <HAL_MPU_Enable+0x3c>)
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	4a09      	ldr	r2, [pc, #36]	; (8008088 <HAL_MPU_Enable+0x3c>)
 8008064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008068:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800806a:	f3bf 8f4f 	dsb	sy
}
 800806e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008070:	f3bf 8f6f 	isb	sy
}
 8008074:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	e000ed90 	.word	0xe000ed90
 8008088:	e000ed00 	.word	0xe000ed00

0800808c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	785a      	ldrb	r2, [r3, #1]
 8008098:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <HAL_MPU_ConfigRegion+0x84>)
 800809a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d029      	beq.n	80080f8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80080a4:	4a1a      	ldr	r2, [pc, #104]	; (8008110 <HAL_MPU_ConfigRegion+0x84>)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7b1b      	ldrb	r3, [r3, #12]
 80080b0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	7adb      	ldrb	r3, [r3, #11]
 80080b6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80080b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	7a9b      	ldrb	r3, [r3, #10]
 80080be:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80080c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7b5b      	ldrb	r3, [r3, #13]
 80080c6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80080c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7b9b      	ldrb	r3, [r3, #14]
 80080ce:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80080d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	7bdb      	ldrb	r3, [r3, #15]
 80080d6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80080d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	7a5b      	ldrb	r3, [r3, #9]
 80080de:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80080e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7a1b      	ldrb	r3, [r3, #8]
 80080e6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80080e8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	7812      	ldrb	r2, [r2, #0]
 80080ee:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80080f0:	4a07      	ldr	r2, [pc, #28]	; (8008110 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80080f2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80080f4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80080f6:	e005      	b.n	8008104 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <HAL_MPU_ConfigRegion+0x84>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80080fe:	4b04      	ldr	r3, [pc, #16]	; (8008110 <HAL_MPU_ConfigRegion+0x84>)
 8008100:	2200      	movs	r2, #0
 8008102:	611a      	str	r2, [r3, #16]
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	e000ed90 	.word	0xe000ed90

08008114 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e054      	b.n	80081d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7f5b      	ldrb	r3, [r3, #29]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d105      	bne.n	800813c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fb f9f2 	bl	8003520 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	791b      	ldrb	r3, [r3, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10c      	bne.n	8008164 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a22      	ldr	r2, [pc, #136]	; (80081d8 <HAL_CRC_Init+0xc4>)
 8008150:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0218 	bic.w	r2, r2, #24
 8008160:	609a      	str	r2, [r3, #8]
 8008162:	e00c      	b.n	800817e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6899      	ldr	r1, [r3, #8]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	461a      	mov	r2, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f834 	bl	80081dc <HAL_CRCEx_Polynomial_Set>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e028      	b.n	80081d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	795b      	ldrb	r3, [r3, #5]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d105      	bne.n	8008192 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f04f 32ff 	mov.w	r2, #4294967295
 800818e:	611a      	str	r2, [r3, #16]
 8008190:	e004      	b.n	800819c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6912      	ldr	r2, [r2, #16]
 800819a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695a      	ldr	r2, [r3, #20]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	04c11db7 	.word	0x04c11db7

080081dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80081ec:	231f      	movs	r3, #31
 80081ee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80081f0:	bf00      	nop
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	1e5a      	subs	r2, r3, #1
 80081f6:	613a      	str	r2, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d009      	beq.n	8008210 <HAL_CRCEx_Polynomial_Set+0x34>
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f003 031f 	and.w	r3, r3, #31
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	fa22 f303 	lsr.w	r3, r2, r3
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0f0      	beq.n	80081f2 <HAL_CRCEx_Polynomial_Set+0x16>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b18      	cmp	r3, #24
 8008214:	d846      	bhi.n	80082a4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <HAL_CRCEx_Polynomial_Set+0x40>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	080082ab 	.word	0x080082ab
 8008220:	080082a5 	.word	0x080082a5
 8008224:	080082a5 	.word	0x080082a5
 8008228:	080082a5 	.word	0x080082a5
 800822c:	080082a5 	.word	0x080082a5
 8008230:	080082a5 	.word	0x080082a5
 8008234:	080082a5 	.word	0x080082a5
 8008238:	080082a5 	.word	0x080082a5
 800823c:	08008299 	.word	0x08008299
 8008240:	080082a5 	.word	0x080082a5
 8008244:	080082a5 	.word	0x080082a5
 8008248:	080082a5 	.word	0x080082a5
 800824c:	080082a5 	.word	0x080082a5
 8008250:	080082a5 	.word	0x080082a5
 8008254:	080082a5 	.word	0x080082a5
 8008258:	080082a5 	.word	0x080082a5
 800825c:	0800828d 	.word	0x0800828d
 8008260:	080082a5 	.word	0x080082a5
 8008264:	080082a5 	.word	0x080082a5
 8008268:	080082a5 	.word	0x080082a5
 800826c:	080082a5 	.word	0x080082a5
 8008270:	080082a5 	.word	0x080082a5
 8008274:	080082a5 	.word	0x080082a5
 8008278:	080082a5 	.word	0x080082a5
 800827c:	08008281 	.word	0x08008281
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	2b06      	cmp	r3, #6
 8008284:	d913      	bls.n	80082ae <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800828a:	e010      	b.n	80082ae <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2b07      	cmp	r3, #7
 8008290:	d90f      	bls.n	80082b2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008296:	e00c      	b.n	80082b2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d90b      	bls.n	80082b6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80082a2:	e008      	b.n	80082b6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	75fb      	strb	r3, [r7, #23]
      break;
 80082a8:	e006      	b.n	80082b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80082aa:	bf00      	nop
 80082ac:	e004      	b.n	80082b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80082ae:	bf00      	nop
 80082b0:	e002      	b.n	80082b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80082b2:	bf00      	nop
 80082b4:	e000      	b.n	80082b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80082b6:	bf00      	nop
  }
  if (status == HAL_OK)
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10d      	bne.n	80082da <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f023 0118 	bic.w	r1, r3, #24
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e069      	b.n	80083ce <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fb f92a 	bl	8003560 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6819      	ldr	r1, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	4b2a      	ldr	r3, [pc, #168]	; (80083d8 <HAL_DCMI_Init+0xf0>)
 800832e:	400b      	ands	r3, r1
 8008330:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6819      	ldr	r1, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008346:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8008352:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800835e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800836a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8008376:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2b10      	cmp	r3, #16
 8008386:	d112      	bne.n	80083ae <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	7f1b      	ldrb	r3, [r3, #28]
 800838c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	7f5b      	ldrb	r3, [r3, #29]
 8008392:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8008394:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	7f9b      	ldrb	r3, [r3, #30]
 800839a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800839c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	7fdb      	ldrb	r3, [r3, #31]
 80083a4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80083aa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80083ac:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 021e 	orr.w	r2, r2, #30
 80083bc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	ffe0f007 	.word	0xffe0f007

080083dc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d016      	beq.n	8008424 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2204      	movs	r2, #4
 80083fc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008402:	f043 0202 	orr.w	r2, r3, #2
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2204      	movs	r2, #4
 800840e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008416:	4a35      	ldr	r2, [pc, #212]	; (80084ec <HAL_DCMI_IRQHandler+0x110>)
 8008418:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fa2a 	bl	8008878 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d01e      	beq.n	800846c <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2202      	movs	r2, #2
 8008434:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800843a:	f043 0201 	orr.w	r2, r3, #1
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2204      	movs	r2, #4
 8008446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800844e:	4a27      	ldr	r2, [pc, #156]	; (80084ec <HAL_DCMI_IRQHandler+0x110>)
 8008450:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fa0e 	bl	8008878 <HAL_DMA_Abort_IT>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d004      	beq.n	800846c <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f86a 	bl	8008540 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f003 0310 	and.w	r3, r3, #16
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2210      	movs	r2, #16
 800847c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f840 	bl	8008504 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 0308 	and.w	r3, r3, #8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d006      	beq.n	800849c <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2208      	movs	r2, #8
 8008494:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f83e 	bl	8008518 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01d      	beq.n	80084e2 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d107      	bne.n	80084c4 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 021e 	bic.w	r2, r2, #30
 80084c2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0201 	bic.w	r2, r2, #1
 80084d2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2201      	movs	r2, #1
 80084da:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f825 	bl	800852c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	08008541 	.word	0x08008541

080084f0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008554:	2b02      	cmp	r3, #2
 8008556:	d009      	beq.n	800856c <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008564:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f7ff ffbf 	bl	80084f0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008588:	f7ff f97c 	bl	8007884 <HAL_GetTick>
 800858c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e099      	b.n	80086cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 0201 	bic.w	r2, r2, #1
 80085b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085b8:	e00f      	b.n	80085da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085ba:	f7ff f963 	bl	8007884 <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	2b05      	cmp	r3, #5
 80085c6:	d908      	bls.n	80085da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2220      	movs	r2, #32
 80085cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2203      	movs	r2, #3
 80085d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e078      	b.n	80086cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e8      	bne.n	80085ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	4b38      	ldr	r3, [pc, #224]	; (80086d4 <HAL_DMA_Init+0x158>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800861e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4313      	orrs	r3, r2
 800862a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b04      	cmp	r3, #4
 8008632:	d107      	bne.n	8008644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	4313      	orrs	r3, r2
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	2b04      	cmp	r3, #4
 800866c:	d117      	bne.n	800869e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00e      	beq.n	800869e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fb15 	bl	8008cb0 <DMA_CheckFifoParam>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d008      	beq.n	800869e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2240      	movs	r2, #64	; 0x40
 8008690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800869a:	2301      	movs	r3, #1
 800869c:	e016      	b.n	80086cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 facc 	bl	8008c44 <DMA_CalcBaseAndBitshift>
 80086ac:	4603      	mov	r3, r0
 80086ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b4:	223f      	movs	r2, #63	; 0x3f
 80086b6:	409a      	lsls	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	f010803f 	.word	0xf010803f

080086d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_DMA_Start_IT+0x26>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e048      	b.n	8008790 <HAL_DMA_Start_IT+0xb8>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b01      	cmp	r3, #1
 8008710:	d137      	bne.n	8008782 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2202      	movs	r2, #2
 8008716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fa5e 	bl	8008be8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008730:	223f      	movs	r2, #63	; 0x3f
 8008732:	409a      	lsls	r2, r3
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0216 	orr.w	r2, r2, #22
 8008746:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695a      	ldr	r2, [r3, #20]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008756:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0208 	orr.w	r2, r2, #8
 800876e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f042 0201 	orr.w	r2, r2, #1
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	e005      	b.n	800878e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800878a:	2302      	movs	r3, #2
 800878c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800878e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80087a6:	f7ff f86d 	bl	8007884 <HAL_GetTick>
 80087aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d008      	beq.n	80087ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2280      	movs	r2, #128	; 0x80
 80087bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e052      	b.n	8008870 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0216 	bic.w	r2, r2, #22
 80087d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695a      	ldr	r2, [r3, #20]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d103      	bne.n	80087fa <HAL_DMA_Abort+0x62>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0208 	bic.w	r2, r2, #8
 8008808:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0201 	bic.w	r2, r2, #1
 8008818:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800881a:	e013      	b.n	8008844 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800881c:	f7ff f832 	bl	8007884 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b05      	cmp	r3, #5
 8008828:	d90c      	bls.n	8008844 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2203      	movs	r2, #3
 800883c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e015      	b.n	8008870 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e4      	bne.n	800881c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008856:	223f      	movs	r2, #63	; 0x3f
 8008858:	409a      	lsls	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d004      	beq.n	8008896 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2280      	movs	r2, #128	; 0x80
 8008890:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e00c      	b.n	80088b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2205      	movs	r2, #5
 800889a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0201 	bic.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80088c8:	4b92      	ldr	r3, [pc, #584]	; (8008b14 <HAL_DMA_IRQHandler+0x258>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a92      	ldr	r2, [pc, #584]	; (8008b18 <HAL_DMA_IRQHandler+0x25c>)
 80088ce:	fba2 2303 	umull	r2, r3, r2, r3
 80088d2:	0a9b      	lsrs	r3, r3, #10
 80088d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e6:	2208      	movs	r2, #8
 80088e8:	409a      	lsls	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4013      	ands	r3, r2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01a      	beq.n	8008928 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d013      	beq.n	8008928 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 0204 	bic.w	r2, r2, #4
 800890e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008914:	2208      	movs	r2, #8
 8008916:	409a      	lsls	r2, r3
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008920:	f043 0201 	orr.w	r2, r3, #1
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800892c:	2201      	movs	r2, #1
 800892e:	409a      	lsls	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4013      	ands	r3, r2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d012      	beq.n	800895e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800894a:	2201      	movs	r2, #1
 800894c:	409a      	lsls	r2, r3
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008956:	f043 0202 	orr.w	r2, r3, #2
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008962:	2204      	movs	r2, #4
 8008964:	409a      	lsls	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4013      	ands	r3, r2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d012      	beq.n	8008994 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008980:	2204      	movs	r2, #4
 8008982:	409a      	lsls	r2, r3
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898c:	f043 0204 	orr.w	r2, r3, #4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008998:	2210      	movs	r2, #16
 800899a:	409a      	lsls	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4013      	ands	r3, r2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d043      	beq.n	8008a2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0308 	and.w	r3, r3, #8
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d03c      	beq.n	8008a2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b6:	2210      	movs	r2, #16
 80089b8:	409a      	lsls	r2, r3
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d018      	beq.n	80089fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d108      	bne.n	80089ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d024      	beq.n	8008a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	4798      	blx	r3
 80089ea:	e01f      	b.n	8008a2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d01b      	beq.n	8008a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4798      	blx	r3
 80089fc:	e016      	b.n	8008a2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d107      	bne.n	8008a1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0208 	bic.w	r2, r2, #8
 8008a1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a30:	2220      	movs	r2, #32
 8008a32:	409a      	lsls	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	4013      	ands	r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 808e 	beq.w	8008b5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0310 	and.w	r3, r3, #16
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 8086 	beq.w	8008b5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a52:	2220      	movs	r2, #32
 8008a54:	409a      	lsls	r2, r3
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b05      	cmp	r3, #5
 8008a64:	d136      	bne.n	8008ad4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0216 	bic.w	r2, r2, #22
 8008a74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	695a      	ldr	r2, [r3, #20]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <HAL_DMA_IRQHandler+0x1da>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d007      	beq.n	8008aa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f022 0208 	bic.w	r2, r2, #8
 8008aa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aaa:	223f      	movs	r2, #63	; 0x3f
 8008aac:	409a      	lsls	r2, r3
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d07d      	beq.n	8008bc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	4798      	blx	r3
        }
        return;
 8008ad2:	e078      	b.n	8008bc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d01c      	beq.n	8008b1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d108      	bne.n	8008b02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d030      	beq.n	8008b5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	4798      	blx	r3
 8008b00:	e02b      	b.n	8008b5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d027      	beq.n	8008b5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	4798      	blx	r3
 8008b12:	e022      	b.n	8008b5a <HAL_DMA_IRQHandler+0x29e>
 8008b14:	20000008 	.word	0x20000008
 8008b18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10f      	bne.n	8008b4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0210 	bic.w	r2, r2, #16
 8008b38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d032      	beq.n	8008bc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d022      	beq.n	8008bb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2205      	movs	r2, #5
 8008b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0201 	bic.w	r2, r2, #1
 8008b84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	60bb      	str	r3, [r7, #8]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d307      	bcc.n	8008ba2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1f2      	bne.n	8008b86 <HAL_DMA_IRQHandler+0x2ca>
 8008ba0:	e000      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008ba2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d005      	beq.n	8008bc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	4798      	blx	r3
 8008bc4:	e000      	b.n	8008bc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008bc6:	bf00      	nop
    }
  }
}
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop

08008bd0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	2b40      	cmp	r3, #64	; 0x40
 8008c14:	d108      	bne.n	8008c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008c26:	e007      	b.n	8008c38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	60da      	str	r2, [r3, #12]
}
 8008c38:	bf00      	nop
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	3b10      	subs	r3, #16
 8008c54:	4a13      	ldr	r2, [pc, #76]	; (8008ca4 <DMA_CalcBaseAndBitshift+0x60>)
 8008c56:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5a:	091b      	lsrs	r3, r3, #4
 8008c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c5e:	4a12      	ldr	r2, [pc, #72]	; (8008ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d908      	bls.n	8008c84 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <DMA_CalcBaseAndBitshift+0x68>)
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	1d1a      	adds	r2, r3, #4
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	659a      	str	r2, [r3, #88]	; 0x58
 8008c82:	e006      	b.n	8008c92 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4b08      	ldr	r3, [pc, #32]	; (8008cac <DMA_CalcBaseAndBitshift+0x68>)
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	aaaaaaab 	.word	0xaaaaaaab
 8008ca8:	0801f144 	.word	0x0801f144
 8008cac:	fffffc00 	.word	0xfffffc00

08008cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d11f      	bne.n	8008d0a <DMA_CheckFifoParam+0x5a>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d856      	bhi.n	8008d7e <DMA_CheckFifoParam+0xce>
 8008cd0:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <DMA_CheckFifoParam+0x28>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008ce9 	.word	0x08008ce9
 8008cdc:	08008cfb 	.word	0x08008cfb
 8008ce0:	08008ce9 	.word	0x08008ce9
 8008ce4:	08008d7f 	.word	0x08008d7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d046      	beq.n	8008d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cf8:	e043      	b.n	8008d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d02:	d140      	bne.n	8008d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d08:	e03d      	b.n	8008d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d12:	d121      	bne.n	8008d58 <DMA_CheckFifoParam+0xa8>
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d837      	bhi.n	8008d8a <DMA_CheckFifoParam+0xda>
 8008d1a:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <DMA_CheckFifoParam+0x70>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008d31 	.word	0x08008d31
 8008d24:	08008d37 	.word	0x08008d37
 8008d28:	08008d31 	.word	0x08008d31
 8008d2c:	08008d49 	.word	0x08008d49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
      break;
 8008d34:	e030      	b.n	8008d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d025      	beq.n	8008d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d46:	e022      	b.n	8008d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d50:	d11f      	bne.n	8008d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008d56:	e01c      	b.n	8008d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d903      	bls.n	8008d66 <DMA_CheckFifoParam+0xb6>
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d003      	beq.n	8008d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008d64:	e018      	b.n	8008d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6a:	e015      	b.n	8008d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00e      	beq.n	8008d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d7c:	e00b      	b.n	8008d96 <DMA_CheckFifoParam+0xe6>
      break;
 8008d7e:	bf00      	nop
 8008d80:	e00a      	b.n	8008d98 <DMA_CheckFifoParam+0xe8>
      break;
 8008d82:	bf00      	nop
 8008d84:	e008      	b.n	8008d98 <DMA_CheckFifoParam+0xe8>
      break;
 8008d86:	bf00      	nop
 8008d88:	e006      	b.n	8008d98 <DMA_CheckFifoParam+0xe8>
      break;
 8008d8a:	bf00      	nop
 8008d8c:	e004      	b.n	8008d98 <DMA_CheckFifoParam+0xe8>
      break;
 8008d8e:	bf00      	nop
 8008d90:	e002      	b.n	8008d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8008d92:	bf00      	nop
 8008d94:	e000      	b.n	8008d98 <DMA_CheckFifoParam+0xe8>
      break;
 8008d96:	bf00      	nop
    }
  } 
  
  return status; 
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop

08008da8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e039      	b.n	8008e2e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fa fcc0 	bl	8003754 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df8:	f023 0107 	bic.w	r1, r3, #7
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e0e:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <HAL_DMA2D_Init+0x90>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	68d1      	ldr	r1, [r2, #12]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6812      	ldr	r2, [r2, #0]
 8008e1a:	430b      	orrs	r3, r1
 8008e1c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	ffffc000 	.word	0xffffc000

08008e3c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_DMA2D_Start+0x1c>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e018      	b.n	8008e8a <HAL_DMA2D_Start+0x4e>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 fa98 	bl	80093a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0201 	orr.w	r2, r2, #1
 8008e86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b086      	sub	sp, #24
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d056      	beq.n	8008f5c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008eae:	f7fe fce9 	bl	8007884 <HAL_GetTick>
 8008eb2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008eb4:	e04b      	b.n	8008f4e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d023      	beq.n	8008f10 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed6:	f043 0202 	orr.w	r2, r3, #2
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eec:	f043 0201 	orr.w	r2, r3, #1
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2221      	movs	r2, #33	; 0x21
 8008efa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2204      	movs	r2, #4
 8008f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e0a5      	b.n	800905c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d01a      	beq.n	8008f4e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f18:	f7fe fcb4 	bl	8007884 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d302      	bcc.n	8008f2e <HAL_DMA2D_PollForTransfer+0x9c>
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10f      	bne.n	8008f4e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f32:	f043 0220 	orr.w	r2, r3, #32
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e086      	b.n	800905c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0ac      	beq.n	8008eb6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6e:	f003 0320 	and.w	r3, r3, #32
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d061      	beq.n	8009042 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f7e:	f7fe fc81 	bl	8007884 <HAL_GetTick>
 8008f82:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008f84:	e056      	b.n	8009034 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d02e      	beq.n	8008ff6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0308 	and.w	r3, r3, #8
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa6:	f043 0204 	orr.w	r2, r3, #4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f003 0320 	and.w	r3, r3, #32
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbc:	f043 0202 	orr.w	r2, r3, #2
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d005      	beq.n	8008fda <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd2:	f043 0201 	orr.w	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2229      	movs	r2, #41	; 0x29
 8008fe0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2204      	movs	r2, #4
 8008fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e032      	b.n	800905c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d01a      	beq.n	8009034 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ffe:	f7fe fc41 	bl	8007884 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d302      	bcc.n	8009014 <HAL_DMA2D_PollForTransfer+0x182>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10f      	bne.n	8009034 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009018:	f043 0220 	orr.w	r2, r3, #32
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2203      	movs	r2, #3
 8009024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e013      	b.n	800905c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f003 0310 	and.w	r3, r3, #16
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0a1      	beq.n	8008f86 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2212      	movs	r2, #18
 8009048:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d026      	beq.n	80090d4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908c:	2b00      	cmp	r3, #0
 800908e:	d021      	beq.n	80090d4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800909e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a4:	f043 0201 	orr.w	r2, r3, #1
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2201      	movs	r2, #1
 80090b2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2204      	movs	r2, #4
 80090b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d026      	beq.n	800912c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d021      	beq.n	800912c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090f6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2220      	movs	r2, #32
 80090fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009104:	f043 0202 	orr.w	r2, r3, #2
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2204      	movs	r2, #4
 8009110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f003 0308 	and.w	r3, r3, #8
 8009132:	2b00      	cmp	r3, #0
 8009134:	d026      	beq.n	8009184 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800913c:	2b00      	cmp	r3, #0
 800913e:	d021      	beq.n	8009184 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800914e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2208      	movs	r2, #8
 8009156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915c:	f043 0204 	orr.w	r2, r3, #4
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2204      	movs	r2, #4
 8009168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d013      	beq.n	80091b6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00e      	beq.n	80091b6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2204      	movs	r2, #4
 80091ae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f853 	bl	800925c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d024      	beq.n	800920a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01f      	beq.n	800920a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80091d8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2202      	movs	r2, #2
 80091e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b00      	cmp	r3, #0
 8009212:	d01f      	beq.n	8009254 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d01a      	beq.n	8009254 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800922c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2210      	movs	r2, #16
 8009234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f80e 	bl	8009270 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8009254:	bf00      	nop
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_DMA2D_ConfigLayer+0x20>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e079      	b.n	8009398 <HAL_DMA2D_ConfigLayer+0x114>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	3318      	adds	r3, #24
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	4413      	add	r3, r2
 80092be:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	041b      	lsls	r3, r3, #16
 80092ca:	4313      	orrs	r3, r2
 80092cc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80092ce:	4b35      	ldr	r3, [pc, #212]	; (80093a4 <HAL_DMA2D_ConfigLayer+0x120>)
 80092d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2b0a      	cmp	r3, #10
 80092d8:	d003      	beq.n	80092e2 <HAL_DMA2D_ConfigLayer+0x5e>
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2b09      	cmp	r3, #9
 80092e0:	d107      	bne.n	80092f2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	e005      	b.n	80092fe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	061b      	lsls	r3, r3, #24
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d120      	bne.n	8009346 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	43db      	mvns	r3, r3
 800930e:	ea02 0103 	and.w	r1, r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	430a      	orrs	r2, r1
 800931a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	6812      	ldr	r2, [r2, #0]
 8009324:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	2b0a      	cmp	r3, #10
 800932c:	d003      	beq.n	8009336 <HAL_DMA2D_ConfigLayer+0xb2>
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2b09      	cmp	r3, #9
 8009334:	d127      	bne.n	8009386 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009342:	629a      	str	r2, [r3, #40]	; 0x28
 8009344:	e01f      	b.n	8009386 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69da      	ldr	r2, [r3, #28]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	43db      	mvns	r3, r3
 8009350:	ea02 0103 	and.w	r1, r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	430a      	orrs	r2, r1
 800935c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	6812      	ldr	r2, [r2, #0]
 8009366:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	2b0a      	cmp	r3, #10
 800936e:	d003      	beq.n	8009378 <HAL_DMA2D_ConfigLayer+0xf4>
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	2b09      	cmp	r3, #9
 8009376:	d106      	bne.n	8009386 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009384:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	ff03000f 	.word	0xff03000f

080093a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b08b      	sub	sp, #44	; 0x2c
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	041a      	lsls	r2, r3, #16
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	431a      	orrs	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80093e0:	d174      	bne.n	80094cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80093e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80093f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d108      	bne.n	800941a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	431a      	orrs	r2, r3
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	4313      	orrs	r3, r2
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	4313      	orrs	r3, r2
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
 8009418:	e053      	b.n	80094c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d106      	bne.n	8009430 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	4313      	orrs	r3, r2
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
 800942e:	e048      	b.n	80094c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	2b02      	cmp	r3, #2
 8009436:	d111      	bne.n	800945c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	0cdb      	lsrs	r3, r3, #19
 800943c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	0a9b      	lsrs	r3, r3, #10
 8009442:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	08db      	lsrs	r3, r3, #3
 8009448:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	02db      	lsls	r3, r3, #11
 8009452:	4313      	orrs	r3, r2
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	4313      	orrs	r3, r2
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
 800945a:	e032      	b.n	80094c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	2b03      	cmp	r3, #3
 8009462:	d117      	bne.n	8009494 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	0fdb      	lsrs	r3, r3, #31
 8009468:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	0cdb      	lsrs	r3, r3, #19
 800946e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	0adb      	lsrs	r3, r3, #11
 8009474:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	08db      	lsrs	r3, r3, #3
 800947a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	029b      	lsls	r3, r3, #10
 8009484:	431a      	orrs	r2, r3
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	03db      	lsls	r3, r3, #15
 800948a:	4313      	orrs	r3, r2
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	4313      	orrs	r3, r2
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
 8009492:	e016      	b.n	80094c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	0f1b      	lsrs	r3, r3, #28
 8009498:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	0d1b      	lsrs	r3, r3, #20
 800949e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	0b1b      	lsrs	r3, r3, #12
 80094a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	091b      	lsrs	r3, r3, #4
 80094aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	011a      	lsls	r2, r3, #4
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	431a      	orrs	r2, r3
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	031b      	lsls	r3, r3, #12
 80094ba:	4313      	orrs	r3, r2
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	4313      	orrs	r3, r2
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80094ca:	e003      	b.n	80094d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	60da      	str	r2, [r3, #12]
}
 80094d4:	bf00      	nop
 80094d6:	372c      	adds	r7, #44	; 0x2c
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b089      	sub	sp, #36	; 0x24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80094ea:	2300      	movs	r3, #0
 80094ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80094ee:	2300      	movs	r3, #0
 80094f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80094f2:	2300      	movs	r3, #0
 80094f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80094f6:	2300      	movs	r3, #0
 80094f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80094fa:	2300      	movs	r3, #0
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	e175      	b.n	80097ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009500:	2201      	movs	r2, #1
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	fa02 f303 	lsl.w	r3, r2, r3
 8009508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	4013      	ands	r3, r2
 8009512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	429a      	cmp	r2, r3
 800951a:	f040 8164 	bne.w	80097e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d00b      	beq.n	800953e <HAL_GPIO_Init+0x5e>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d007      	beq.n	800953e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009532:	2b11      	cmp	r3, #17
 8009534:	d003      	beq.n	800953e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	2b12      	cmp	r3, #18
 800953c:	d130      	bne.n	80095a0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	2203      	movs	r2, #3
 800954a:	fa02 f303 	lsl.w	r3, r2, r3
 800954e:	43db      	mvns	r3, r3
 8009550:	69ba      	ldr	r2, [r7, #24]
 8009552:	4013      	ands	r3, r2
 8009554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	68da      	ldr	r2, [r3, #12]
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	fa02 f303 	lsl.w	r3, r2, r3
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	4313      	orrs	r3, r2
 8009566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009574:	2201      	movs	r2, #1
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	fa02 f303 	lsl.w	r3, r2, r3
 800957c:	43db      	mvns	r3, r3
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	4013      	ands	r3, r2
 8009582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	091b      	lsrs	r3, r3, #4
 800958a:	f003 0201 	and.w	r2, r3, #1
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	fa02 f303 	lsl.w	r3, r2, r3
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	4313      	orrs	r3, r2
 8009598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	2203      	movs	r2, #3
 80095ac:	fa02 f303 	lsl.w	r3, r2, r3
 80095b0:	43db      	mvns	r3, r3
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	4013      	ands	r3, r2
 80095b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	fa02 f303 	lsl.w	r3, r2, r3
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d003      	beq.n	80095e0 <HAL_GPIO_Init+0x100>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	2b12      	cmp	r3, #18
 80095de:	d123      	bne.n	8009628 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	08da      	lsrs	r2, r3, #3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3208      	adds	r2, #8
 80095e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	220f      	movs	r2, #15
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	43db      	mvns	r3, r3
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	4013      	ands	r3, r2
 8009602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	691a      	ldr	r2, [r3, #16]
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	fa02 f303 	lsl.w	r3, r2, r3
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	4313      	orrs	r3, r2
 8009618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	08da      	lsrs	r2, r3, #3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3208      	adds	r2, #8
 8009622:	69b9      	ldr	r1, [r7, #24]
 8009624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	2203      	movs	r2, #3
 8009634:	fa02 f303 	lsl.w	r3, r2, r3
 8009638:	43db      	mvns	r3, r3
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	4013      	ands	r3, r2
 800963e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f003 0203 	and.w	r2, r3, #3
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	fa02 f303 	lsl.w	r3, r2, r3
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	4313      	orrs	r3, r2
 8009654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 80be 	beq.w	80097e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800966a:	4b66      	ldr	r3, [pc, #408]	; (8009804 <HAL_GPIO_Init+0x324>)
 800966c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966e:	4a65      	ldr	r2, [pc, #404]	; (8009804 <HAL_GPIO_Init+0x324>)
 8009670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009674:	6453      	str	r3, [r2, #68]	; 0x44
 8009676:	4b63      	ldr	r3, [pc, #396]	; (8009804 <HAL_GPIO_Init+0x324>)
 8009678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009682:	4a61      	ldr	r2, [pc, #388]	; (8009808 <HAL_GPIO_Init+0x328>)
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	089b      	lsrs	r3, r3, #2
 8009688:	3302      	adds	r3, #2
 800968a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800968e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	220f      	movs	r2, #15
 800969a:	fa02 f303 	lsl.w	r3, r2, r3
 800969e:	43db      	mvns	r3, r3
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	4013      	ands	r3, r2
 80096a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a58      	ldr	r2, [pc, #352]	; (800980c <HAL_GPIO_Init+0x32c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d037      	beq.n	800971e <HAL_GPIO_Init+0x23e>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a57      	ldr	r2, [pc, #348]	; (8009810 <HAL_GPIO_Init+0x330>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d031      	beq.n	800971a <HAL_GPIO_Init+0x23a>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a56      	ldr	r2, [pc, #344]	; (8009814 <HAL_GPIO_Init+0x334>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d02b      	beq.n	8009716 <HAL_GPIO_Init+0x236>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a55      	ldr	r2, [pc, #340]	; (8009818 <HAL_GPIO_Init+0x338>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d025      	beq.n	8009712 <HAL_GPIO_Init+0x232>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a54      	ldr	r2, [pc, #336]	; (800981c <HAL_GPIO_Init+0x33c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d01f      	beq.n	800970e <HAL_GPIO_Init+0x22e>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a53      	ldr	r2, [pc, #332]	; (8009820 <HAL_GPIO_Init+0x340>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d019      	beq.n	800970a <HAL_GPIO_Init+0x22a>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a52      	ldr	r2, [pc, #328]	; (8009824 <HAL_GPIO_Init+0x344>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d013      	beq.n	8009706 <HAL_GPIO_Init+0x226>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a51      	ldr	r2, [pc, #324]	; (8009828 <HAL_GPIO_Init+0x348>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00d      	beq.n	8009702 <HAL_GPIO_Init+0x222>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a50      	ldr	r2, [pc, #320]	; (800982c <HAL_GPIO_Init+0x34c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d007      	beq.n	80096fe <HAL_GPIO_Init+0x21e>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a4f      	ldr	r2, [pc, #316]	; (8009830 <HAL_GPIO_Init+0x350>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d101      	bne.n	80096fa <HAL_GPIO_Init+0x21a>
 80096f6:	2309      	movs	r3, #9
 80096f8:	e012      	b.n	8009720 <HAL_GPIO_Init+0x240>
 80096fa:	230a      	movs	r3, #10
 80096fc:	e010      	b.n	8009720 <HAL_GPIO_Init+0x240>
 80096fe:	2308      	movs	r3, #8
 8009700:	e00e      	b.n	8009720 <HAL_GPIO_Init+0x240>
 8009702:	2307      	movs	r3, #7
 8009704:	e00c      	b.n	8009720 <HAL_GPIO_Init+0x240>
 8009706:	2306      	movs	r3, #6
 8009708:	e00a      	b.n	8009720 <HAL_GPIO_Init+0x240>
 800970a:	2305      	movs	r3, #5
 800970c:	e008      	b.n	8009720 <HAL_GPIO_Init+0x240>
 800970e:	2304      	movs	r3, #4
 8009710:	e006      	b.n	8009720 <HAL_GPIO_Init+0x240>
 8009712:	2303      	movs	r3, #3
 8009714:	e004      	b.n	8009720 <HAL_GPIO_Init+0x240>
 8009716:	2302      	movs	r3, #2
 8009718:	e002      	b.n	8009720 <HAL_GPIO_Init+0x240>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <HAL_GPIO_Init+0x240>
 800971e:	2300      	movs	r3, #0
 8009720:	69fa      	ldr	r2, [r7, #28]
 8009722:	f002 0203 	and.w	r2, r2, #3
 8009726:	0092      	lsls	r2, r2, #2
 8009728:	4093      	lsls	r3, r2
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	4313      	orrs	r3, r2
 800972e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009730:	4935      	ldr	r1, [pc, #212]	; (8009808 <HAL_GPIO_Init+0x328>)
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	089b      	lsrs	r3, r3, #2
 8009736:	3302      	adds	r3, #2
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800973e:	4b3d      	ldr	r3, [pc, #244]	; (8009834 <HAL_GPIO_Init+0x354>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	43db      	mvns	r3, r3
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	4013      	ands	r3, r2
 800974c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009762:	4a34      	ldr	r2, [pc, #208]	; (8009834 <HAL_GPIO_Init+0x354>)
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009768:	4b32      	ldr	r3, [pc, #200]	; (8009834 <HAL_GPIO_Init+0x354>)
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	43db      	mvns	r3, r3
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	4013      	ands	r3, r2
 8009776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d003      	beq.n	800978c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	4313      	orrs	r3, r2
 800978a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800978c:	4a29      	ldr	r2, [pc, #164]	; (8009834 <HAL_GPIO_Init+0x354>)
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009792:	4b28      	ldr	r3, [pc, #160]	; (8009834 <HAL_GPIO_Init+0x354>)
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	43db      	mvns	r3, r3
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	4013      	ands	r3, r2
 80097a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80097b6:	4a1f      	ldr	r2, [pc, #124]	; (8009834 <HAL_GPIO_Init+0x354>)
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80097bc:	4b1d      	ldr	r3, [pc, #116]	; (8009834 <HAL_GPIO_Init+0x354>)
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	43db      	mvns	r3, r3
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	4013      	ands	r3, r2
 80097ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80097e0:	4a14      	ldr	r2, [pc, #80]	; (8009834 <HAL_GPIO_Init+0x354>)
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	3301      	adds	r3, #1
 80097ea:	61fb      	str	r3, [r7, #28]
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	2b0f      	cmp	r3, #15
 80097f0:	f67f ae86 	bls.w	8009500 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	3724      	adds	r7, #36	; 0x24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40023800 	.word	0x40023800
 8009808:	40013800 	.word	0x40013800
 800980c:	40020000 	.word	0x40020000
 8009810:	40020400 	.word	0x40020400
 8009814:	40020800 	.word	0x40020800
 8009818:	40020c00 	.word	0x40020c00
 800981c:	40021000 	.word	0x40021000
 8009820:	40021400 	.word	0x40021400
 8009824:	40021800 	.word	0x40021800
 8009828:	40021c00 	.word	0x40021c00
 800982c:	40022000 	.word	0x40022000
 8009830:	40022400 	.word	0x40022400
 8009834:	40013c00 	.word	0x40013c00

08009838 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009842:	2300      	movs	r3, #0
 8009844:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800984a:	2300      	movs	r3, #0
 800984c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]
 8009852:	e0d9      	b.n	8009a08 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009854:	2201      	movs	r2, #1
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	fa02 f303 	lsl.w	r3, r2, r3
 800985c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	4013      	ands	r3, r2
 8009864:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	429a      	cmp	r2, r3
 800986c:	f040 80c9 	bne.w	8009a02 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009870:	4a6b      	ldr	r2, [pc, #428]	; (8009a20 <HAL_GPIO_DeInit+0x1e8>)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	089b      	lsrs	r3, r3, #2
 8009876:	3302      	adds	r3, #2
 8009878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800987c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f003 0303 	and.w	r3, r3, #3
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	220f      	movs	r2, #15
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	4013      	ands	r3, r2
 8009890:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a63      	ldr	r2, [pc, #396]	; (8009a24 <HAL_GPIO_DeInit+0x1ec>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d037      	beq.n	800990a <HAL_GPIO_DeInit+0xd2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a62      	ldr	r2, [pc, #392]	; (8009a28 <HAL_GPIO_DeInit+0x1f0>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d031      	beq.n	8009906 <HAL_GPIO_DeInit+0xce>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a61      	ldr	r2, [pc, #388]	; (8009a2c <HAL_GPIO_DeInit+0x1f4>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d02b      	beq.n	8009902 <HAL_GPIO_DeInit+0xca>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a60      	ldr	r2, [pc, #384]	; (8009a30 <HAL_GPIO_DeInit+0x1f8>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d025      	beq.n	80098fe <HAL_GPIO_DeInit+0xc6>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a5f      	ldr	r2, [pc, #380]	; (8009a34 <HAL_GPIO_DeInit+0x1fc>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d01f      	beq.n	80098fa <HAL_GPIO_DeInit+0xc2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a5e      	ldr	r2, [pc, #376]	; (8009a38 <HAL_GPIO_DeInit+0x200>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d019      	beq.n	80098f6 <HAL_GPIO_DeInit+0xbe>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a5d      	ldr	r2, [pc, #372]	; (8009a3c <HAL_GPIO_DeInit+0x204>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <HAL_GPIO_DeInit+0xba>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a5c      	ldr	r2, [pc, #368]	; (8009a40 <HAL_GPIO_DeInit+0x208>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00d      	beq.n	80098ee <HAL_GPIO_DeInit+0xb6>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a5b      	ldr	r2, [pc, #364]	; (8009a44 <HAL_GPIO_DeInit+0x20c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d007      	beq.n	80098ea <HAL_GPIO_DeInit+0xb2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a5a      	ldr	r2, [pc, #360]	; (8009a48 <HAL_GPIO_DeInit+0x210>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d101      	bne.n	80098e6 <HAL_GPIO_DeInit+0xae>
 80098e2:	2309      	movs	r3, #9
 80098e4:	e012      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 80098e6:	230a      	movs	r3, #10
 80098e8:	e010      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 80098ea:	2308      	movs	r3, #8
 80098ec:	e00e      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 80098ee:	2307      	movs	r3, #7
 80098f0:	e00c      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 80098f2:	2306      	movs	r3, #6
 80098f4:	e00a      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 80098f6:	2305      	movs	r3, #5
 80098f8:	e008      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 80098fa:	2304      	movs	r3, #4
 80098fc:	e006      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 80098fe:	2303      	movs	r3, #3
 8009900:	e004      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 8009902:	2302      	movs	r3, #2
 8009904:	e002      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 8009906:	2301      	movs	r3, #1
 8009908:	e000      	b.n	800990c <HAL_GPIO_DeInit+0xd4>
 800990a:	2300      	movs	r3, #0
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	f002 0203 	and.w	r2, r2, #3
 8009912:	0092      	lsls	r2, r2, #2
 8009914:	4093      	lsls	r3, r2
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	429a      	cmp	r2, r3
 800991a:	d132      	bne.n	8009982 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800991c:	4b4b      	ldr	r3, [pc, #300]	; (8009a4c <HAL_GPIO_DeInit+0x214>)
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	43db      	mvns	r3, r3
 8009924:	4949      	ldr	r1, [pc, #292]	; (8009a4c <HAL_GPIO_DeInit+0x214>)
 8009926:	4013      	ands	r3, r2
 8009928:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800992a:	4b48      	ldr	r3, [pc, #288]	; (8009a4c <HAL_GPIO_DeInit+0x214>)
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	43db      	mvns	r3, r3
 8009932:	4946      	ldr	r1, [pc, #280]	; (8009a4c <HAL_GPIO_DeInit+0x214>)
 8009934:	4013      	ands	r3, r2
 8009936:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009938:	4b44      	ldr	r3, [pc, #272]	; (8009a4c <HAL_GPIO_DeInit+0x214>)
 800993a:	689a      	ldr	r2, [r3, #8]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	43db      	mvns	r3, r3
 8009940:	4942      	ldr	r1, [pc, #264]	; (8009a4c <HAL_GPIO_DeInit+0x214>)
 8009942:	4013      	ands	r3, r2
 8009944:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009946:	4b41      	ldr	r3, [pc, #260]	; (8009a4c <HAL_GPIO_DeInit+0x214>)
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	43db      	mvns	r3, r3
 800994e:	493f      	ldr	r1, [pc, #252]	; (8009a4c <HAL_GPIO_DeInit+0x214>)
 8009950:	4013      	ands	r3, r2
 8009952:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	220f      	movs	r2, #15
 800995e:	fa02 f303 	lsl.w	r3, r2, r3
 8009962:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009964:	4a2e      	ldr	r2, [pc, #184]	; (8009a20 <HAL_GPIO_DeInit+0x1e8>)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	089b      	lsrs	r3, r3, #2
 800996a:	3302      	adds	r3, #2
 800996c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	43da      	mvns	r2, r3
 8009974:	482a      	ldr	r0, [pc, #168]	; (8009a20 <HAL_GPIO_DeInit+0x1e8>)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	089b      	lsrs	r3, r3, #2
 800997a:	400a      	ands	r2, r1
 800997c:	3302      	adds	r3, #2
 800997e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	2103      	movs	r1, #3
 800998c:	fa01 f303 	lsl.w	r3, r1, r3
 8009990:	43db      	mvns	r3, r3
 8009992:	401a      	ands	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	08da      	lsrs	r2, r3, #3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3208      	adds	r2, #8
 80099a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f003 0307 	and.w	r3, r3, #7
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	220f      	movs	r2, #15
 80099ae:	fa02 f303 	lsl.w	r3, r2, r3
 80099b2:	43db      	mvns	r3, r3
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	08d2      	lsrs	r2, r2, #3
 80099b8:	4019      	ands	r1, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3208      	adds	r2, #8
 80099be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	2103      	movs	r1, #3
 80099cc:	fa01 f303 	lsl.w	r3, r1, r3
 80099d0:	43db      	mvns	r3, r3
 80099d2:	401a      	ands	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	2101      	movs	r1, #1
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	fa01 f303 	lsl.w	r3, r1, r3
 80099e4:	43db      	mvns	r3, r3
 80099e6:	401a      	ands	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689a      	ldr	r2, [r3, #8]
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	2103      	movs	r1, #3
 80099f6:	fa01 f303 	lsl.w	r3, r1, r3
 80099fa:	43db      	mvns	r3, r3
 80099fc:	401a      	ands	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	3301      	adds	r3, #1
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2b0f      	cmp	r3, #15
 8009a0c:	f67f af22 	bls.w	8009854 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	371c      	adds	r7, #28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	40013800 	.word	0x40013800
 8009a24:	40020000 	.word	0x40020000
 8009a28:	40020400 	.word	0x40020400
 8009a2c:	40020800 	.word	0x40020800
 8009a30:	40020c00 	.word	0x40020c00
 8009a34:	40021000 	.word	0x40021000
 8009a38:	40021400 	.word	0x40021400
 8009a3c:	40021800 	.word	0x40021800
 8009a40:	40021c00 	.word	0x40021c00
 8009a44:	40022000 	.word	0x40022000
 8009a48:	40022400 	.word	0x40022400
 8009a4c:	40013c00 	.word	0x40013c00

08009a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691a      	ldr	r2, [r3, #16]
 8009a60:	887b      	ldrh	r3, [r7, #2]
 8009a62:	4013      	ands	r3, r2
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	73fb      	strb	r3, [r7, #15]
 8009a6c:	e001      	b.n	8009a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	807b      	strh	r3, [r7, #2]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009a90:	787b      	ldrb	r3, [r7, #1]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a96:	887a      	ldrh	r2, [r7, #2]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009a9c:	e003      	b.n	8009aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009a9e:	887b      	ldrh	r3, [r7, #2]
 8009aa0:	041a      	lsls	r2, r3, #16
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	619a      	str	r2, [r3, #24]
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b085      	sub	sp, #20
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	460b      	mov	r3, r1
 8009abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ac4:	887a      	ldrh	r2, [r7, #2]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4013      	ands	r3, r2
 8009aca:	041a      	lsls	r2, r3, #16
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	43d9      	mvns	r1, r3
 8009ad0:	887b      	ldrh	r3, [r7, #2]
 8009ad2:	400b      	ands	r3, r1
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	619a      	str	r2, [r3, #24]
}
 8009ada:	bf00      	nop
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
	...

08009ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009af2:	4b08      	ldr	r3, [pc, #32]	; (8009b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009af4:	695a      	ldr	r2, [r3, #20]
 8009af6:	88fb      	ldrh	r3, [r7, #6]
 8009af8:	4013      	ands	r3, r2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d006      	beq.n	8009b0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009afe:	4a05      	ldr	r2, [pc, #20]	; (8009b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009b00:	88fb      	ldrh	r3, [r7, #6]
 8009b02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009b04:	88fb      	ldrh	r3, [r7, #6]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 f806 	bl	8009b18 <HAL_GPIO_EXTI_Callback>
  }
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	40013c00 	.word	0x40013c00

08009b18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009b22:	bf00      	nop
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b30:	b08f      	sub	sp, #60	; 0x3c
 8009b32:	af0a      	add	r7, sp, #40	; 0x28
 8009b34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e054      	b.n	8009bea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d106      	bne.n	8009b60 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f00f fe70 	bl	8019840 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2203      	movs	r2, #3
 8009b64:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f009 fd7d 	bl	801367e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	603b      	str	r3, [r7, #0]
 8009b8a:	687e      	ldr	r6, [r7, #4]
 8009b8c:	466d      	mov	r5, sp
 8009b8e:	f106 0410 	add.w	r4, r6, #16
 8009b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ba2:	1d33      	adds	r3, r6, #4
 8009ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ba6:	6838      	ldr	r0, [r7, #0]
 8009ba8:	f009 fd00 	bl	80135ac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f009 fd74 	bl	80136a0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	603b      	str	r3, [r7, #0]
 8009bbe:	687e      	ldr	r6, [r7, #4]
 8009bc0:	466d      	mov	r5, sp
 8009bc2:	f106 0410 	add.w	r4, r6, #16
 8009bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8009bd6:	1d33      	adds	r3, r6, #4
 8009bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bda:	6838      	ldr	r0, [r7, #0]
 8009bdc:	f009 fe86 	bl	80138ec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009bf2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8009bf2:	b590      	push	{r4, r7, lr}
 8009bf4:	b089      	sub	sp, #36	; 0x24
 8009bf6:	af04      	add	r7, sp, #16
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	4608      	mov	r0, r1
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	461a      	mov	r2, r3
 8009c00:	4603      	mov	r3, r0
 8009c02:	70fb      	strb	r3, [r7, #3]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70bb      	strb	r3, [r7, #2]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d101      	bne.n	8009c1a <HAL_HCD_HC_Init+0x28>
 8009c16:	2302      	movs	r3, #2
 8009c18:	e076      	b.n	8009d08 <HAL_HCD_HC_Init+0x116>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	212c      	movs	r1, #44	; 0x2c
 8009c28:	fb01 f303 	mul.w	r3, r1, r3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	333d      	adds	r3, #61	; 0x3d
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	212c      	movs	r1, #44	; 0x2c
 8009c3a:	fb01 f303 	mul.w	r3, r1, r3
 8009c3e:	4413      	add	r3, r2
 8009c40:	3338      	adds	r3, #56	; 0x38
 8009c42:	787a      	ldrb	r2, [r7, #1]
 8009c44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009c46:	78fb      	ldrb	r3, [r7, #3]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	212c      	movs	r1, #44	; 0x2c
 8009c4c:	fb01 f303 	mul.w	r3, r1, r3
 8009c50:	4413      	add	r3, r2
 8009c52:	3340      	adds	r3, #64	; 0x40
 8009c54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009c56:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	212c      	movs	r1, #44	; 0x2c
 8009c5e:	fb01 f303 	mul.w	r3, r1, r3
 8009c62:	4413      	add	r3, r2
 8009c64:	3339      	adds	r3, #57	; 0x39
 8009c66:	78fa      	ldrb	r2, [r7, #3]
 8009c68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	212c      	movs	r1, #44	; 0x2c
 8009c70:	fb01 f303 	mul.w	r3, r1, r3
 8009c74:	4413      	add	r3, r2
 8009c76:	333f      	adds	r3, #63	; 0x3f
 8009c78:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009c7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	78ba      	ldrb	r2, [r7, #2]
 8009c82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c86:	b2d0      	uxtb	r0, r2
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	212c      	movs	r1, #44	; 0x2c
 8009c8c:	fb01 f303 	mul.w	r3, r1, r3
 8009c90:	4413      	add	r3, r2
 8009c92:	333a      	adds	r3, #58	; 0x3a
 8009c94:	4602      	mov	r2, r0
 8009c96:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009c98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da09      	bge.n	8009cb4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009ca0:	78fb      	ldrb	r3, [r7, #3]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	212c      	movs	r1, #44	; 0x2c
 8009ca6:	fb01 f303 	mul.w	r3, r1, r3
 8009caa:	4413      	add	r3, r2
 8009cac:	333b      	adds	r3, #59	; 0x3b
 8009cae:	2201      	movs	r2, #1
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	e008      	b.n	8009cc6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	212c      	movs	r1, #44	; 0x2c
 8009cba:	fb01 f303 	mul.w	r3, r1, r3
 8009cbe:	4413      	add	r3, r2
 8009cc0:	333b      	adds	r3, #59	; 0x3b
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009cc6:	78fb      	ldrb	r3, [r7, #3]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	212c      	movs	r1, #44	; 0x2c
 8009ccc:	fb01 f303 	mul.w	r3, r1, r3
 8009cd0:	4413      	add	r3, r2
 8009cd2:	333c      	adds	r3, #60	; 0x3c
 8009cd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009cd8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6818      	ldr	r0, [r3, #0]
 8009cde:	787c      	ldrb	r4, [r7, #1]
 8009ce0:	78ba      	ldrb	r2, [r7, #2]
 8009ce2:	78f9      	ldrb	r1, [r7, #3]
 8009ce4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ce6:	9302      	str	r3, [sp, #8]
 8009ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	4623      	mov	r3, r4
 8009cf6:	f009 ff6f 	bl	8013bd8 <USB_HC_Init>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd90      	pop	{r4, r7, pc}

08009d10 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d101      	bne.n	8009d2e <HAL_HCD_HC_Halt+0x1e>
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e00f      	b.n	8009d4e <HAL_HCD_HC_Halt+0x3e>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	78fa      	ldrb	r2, [r7, #3]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f00a f9ab 	bl	801409a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	4608      	mov	r0, r1
 8009d62:	4611      	mov	r1, r2
 8009d64:	461a      	mov	r2, r3
 8009d66:	4603      	mov	r3, r0
 8009d68:	70fb      	strb	r3, [r7, #3]
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	70bb      	strb	r3, [r7, #2]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8009d72:	78fb      	ldrb	r3, [r7, #3]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	212c      	movs	r1, #44	; 0x2c
 8009d78:	fb01 f303 	mul.w	r3, r1, r3
 8009d7c:	4413      	add	r3, r2
 8009d7e:	333b      	adds	r3, #59	; 0x3b
 8009d80:	78ba      	ldrb	r2, [r7, #2]
 8009d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	212c      	movs	r1, #44	; 0x2c
 8009d8a:	fb01 f303 	mul.w	r3, r1, r3
 8009d8e:	4413      	add	r3, r2
 8009d90:	333f      	adds	r3, #63	; 0x3f
 8009d92:	787a      	ldrb	r2, [r7, #1]
 8009d94:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8009d96:	7c3b      	ldrb	r3, [r7, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d112      	bne.n	8009dc2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009d9c:	78fb      	ldrb	r3, [r7, #3]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	212c      	movs	r1, #44	; 0x2c
 8009da2:	fb01 f303 	mul.w	r3, r1, r3
 8009da6:	4413      	add	r3, r2
 8009da8:	3342      	adds	r3, #66	; 0x42
 8009daa:	2203      	movs	r2, #3
 8009dac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	212c      	movs	r1, #44	; 0x2c
 8009db4:	fb01 f303 	mul.w	r3, r1, r3
 8009db8:	4413      	add	r3, r2
 8009dba:	333d      	adds	r3, #61	; 0x3d
 8009dbc:	7f3a      	ldrb	r2, [r7, #28]
 8009dbe:	701a      	strb	r2, [r3, #0]
 8009dc0:	e008      	b.n	8009dd4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	212c      	movs	r1, #44	; 0x2c
 8009dc8:	fb01 f303 	mul.w	r3, r1, r3
 8009dcc:	4413      	add	r3, r2
 8009dce:	3342      	adds	r3, #66	; 0x42
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009dd4:	787b      	ldrb	r3, [r7, #1]
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	f200 80c6 	bhi.w	8009f68 <HAL_HCD_HC_SubmitRequest+0x210>
 8009ddc:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8009dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de2:	bf00      	nop
 8009de4:	08009df5 	.word	0x08009df5
 8009de8:	08009f55 	.word	0x08009f55
 8009dec:	08009e59 	.word	0x08009e59
 8009df0:	08009ed7 	.word	0x08009ed7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009df4:	7c3b      	ldrb	r3, [r7, #16]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	f040 80b8 	bne.w	8009f6c <HAL_HCD_HC_SubmitRequest+0x214>
 8009dfc:	78bb      	ldrb	r3, [r7, #2]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f040 80b4 	bne.w	8009f6c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009e04:	8b3b      	ldrh	r3, [r7, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d108      	bne.n	8009e1c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	212c      	movs	r1, #44	; 0x2c
 8009e10:	fb01 f303 	mul.w	r3, r1, r3
 8009e14:	4413      	add	r3, r2
 8009e16:	3355      	adds	r3, #85	; 0x55
 8009e18:	2201      	movs	r2, #1
 8009e1a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009e1c:	78fb      	ldrb	r3, [r7, #3]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	212c      	movs	r1, #44	; 0x2c
 8009e22:	fb01 f303 	mul.w	r3, r1, r3
 8009e26:	4413      	add	r3, r2
 8009e28:	3355      	adds	r3, #85	; 0x55
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d109      	bne.n	8009e44 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	212c      	movs	r1, #44	; 0x2c
 8009e36:	fb01 f303 	mul.w	r3, r1, r3
 8009e3a:	4413      	add	r3, r2
 8009e3c:	3342      	adds	r3, #66	; 0x42
 8009e3e:	2200      	movs	r2, #0
 8009e40:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009e42:	e093      	b.n	8009f6c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	212c      	movs	r1, #44	; 0x2c
 8009e4a:	fb01 f303 	mul.w	r3, r1, r3
 8009e4e:	4413      	add	r3, r2
 8009e50:	3342      	adds	r3, #66	; 0x42
 8009e52:	2202      	movs	r2, #2
 8009e54:	701a      	strb	r2, [r3, #0]
      break;
 8009e56:	e089      	b.n	8009f6c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009e58:	78bb      	ldrb	r3, [r7, #2]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d11d      	bne.n	8009e9a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	212c      	movs	r1, #44	; 0x2c
 8009e64:	fb01 f303 	mul.w	r3, r1, r3
 8009e68:	4413      	add	r3, r2
 8009e6a:	3355      	adds	r3, #85	; 0x55
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d109      	bne.n	8009e86 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009e72:	78fb      	ldrb	r3, [r7, #3]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	212c      	movs	r1, #44	; 0x2c
 8009e78:	fb01 f303 	mul.w	r3, r1, r3
 8009e7c:	4413      	add	r3, r2
 8009e7e:	3342      	adds	r3, #66	; 0x42
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009e84:	e073      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009e86:	78fb      	ldrb	r3, [r7, #3]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	212c      	movs	r1, #44	; 0x2c
 8009e8c:	fb01 f303 	mul.w	r3, r1, r3
 8009e90:	4413      	add	r3, r2
 8009e92:	3342      	adds	r3, #66	; 0x42
 8009e94:	2202      	movs	r2, #2
 8009e96:	701a      	strb	r2, [r3, #0]
      break;
 8009e98:	e069      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	212c      	movs	r1, #44	; 0x2c
 8009ea0:	fb01 f303 	mul.w	r3, r1, r3
 8009ea4:	4413      	add	r3, r2
 8009ea6:	3354      	adds	r3, #84	; 0x54
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d109      	bne.n	8009ec2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009eae:	78fb      	ldrb	r3, [r7, #3]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	212c      	movs	r1, #44	; 0x2c
 8009eb4:	fb01 f303 	mul.w	r3, r1, r3
 8009eb8:	4413      	add	r3, r2
 8009eba:	3342      	adds	r3, #66	; 0x42
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	701a      	strb	r2, [r3, #0]
      break;
 8009ec0:	e055      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	212c      	movs	r1, #44	; 0x2c
 8009ec8:	fb01 f303 	mul.w	r3, r1, r3
 8009ecc:	4413      	add	r3, r2
 8009ece:	3342      	adds	r3, #66	; 0x42
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	701a      	strb	r2, [r3, #0]
      break;
 8009ed4:	e04b      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009ed6:	78bb      	ldrb	r3, [r7, #2]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d11d      	bne.n	8009f18 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	212c      	movs	r1, #44	; 0x2c
 8009ee2:	fb01 f303 	mul.w	r3, r1, r3
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3355      	adds	r3, #85	; 0x55
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d109      	bne.n	8009f04 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	212c      	movs	r1, #44	; 0x2c
 8009ef6:	fb01 f303 	mul.w	r3, r1, r3
 8009efa:	4413      	add	r3, r2
 8009efc:	3342      	adds	r3, #66	; 0x42
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009f02:	e034      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	212c      	movs	r1, #44	; 0x2c
 8009f0a:	fb01 f303 	mul.w	r3, r1, r3
 8009f0e:	4413      	add	r3, r2
 8009f10:	3342      	adds	r3, #66	; 0x42
 8009f12:	2202      	movs	r2, #2
 8009f14:	701a      	strb	r2, [r3, #0]
      break;
 8009f16:	e02a      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	212c      	movs	r1, #44	; 0x2c
 8009f1e:	fb01 f303 	mul.w	r3, r1, r3
 8009f22:	4413      	add	r3, r2
 8009f24:	3354      	adds	r3, #84	; 0x54
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d109      	bne.n	8009f40 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009f2c:	78fb      	ldrb	r3, [r7, #3]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	212c      	movs	r1, #44	; 0x2c
 8009f32:	fb01 f303 	mul.w	r3, r1, r3
 8009f36:	4413      	add	r3, r2
 8009f38:	3342      	adds	r3, #66	; 0x42
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	701a      	strb	r2, [r3, #0]
      break;
 8009f3e:	e016      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	212c      	movs	r1, #44	; 0x2c
 8009f46:	fb01 f303 	mul.w	r3, r1, r3
 8009f4a:	4413      	add	r3, r2
 8009f4c:	3342      	adds	r3, #66	; 0x42
 8009f4e:	2202      	movs	r2, #2
 8009f50:	701a      	strb	r2, [r3, #0]
      break;
 8009f52:	e00c      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	212c      	movs	r1, #44	; 0x2c
 8009f5a:	fb01 f303 	mul.w	r3, r1, r3
 8009f5e:	4413      	add	r3, r2
 8009f60:	3342      	adds	r3, #66	; 0x42
 8009f62:	2200      	movs	r2, #0
 8009f64:	701a      	strb	r2, [r3, #0]
      break;
 8009f66:	e002      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009f68:	bf00      	nop
 8009f6a:	e000      	b.n	8009f6e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009f6c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	212c      	movs	r1, #44	; 0x2c
 8009f74:	fb01 f303 	mul.w	r3, r1, r3
 8009f78:	4413      	add	r3, r2
 8009f7a:	3344      	adds	r3, #68	; 0x44
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	8b3a      	ldrh	r2, [r7, #24]
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	202c      	movs	r0, #44	; 0x2c
 8009f88:	fb00 f303 	mul.w	r3, r0, r3
 8009f8c:	440b      	add	r3, r1
 8009f8e:	334c      	adds	r3, #76	; 0x4c
 8009f90:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009f92:	78fb      	ldrb	r3, [r7, #3]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	212c      	movs	r1, #44	; 0x2c
 8009f98:	fb01 f303 	mul.w	r3, r1, r3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	3360      	adds	r3, #96	; 0x60
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	212c      	movs	r1, #44	; 0x2c
 8009faa:	fb01 f303 	mul.w	r3, r1, r3
 8009fae:	4413      	add	r3, r2
 8009fb0:	3350      	adds	r3, #80	; 0x50
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	212c      	movs	r1, #44	; 0x2c
 8009fbc:	fb01 f303 	mul.w	r3, r1, r3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3339      	adds	r3, #57	; 0x39
 8009fc4:	78fa      	ldrb	r2, [r7, #3]
 8009fc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	212c      	movs	r1, #44	; 0x2c
 8009fce:	fb01 f303 	mul.w	r3, r1, r3
 8009fd2:	4413      	add	r3, r2
 8009fd4:	3361      	adds	r3, #97	; 0x61
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6818      	ldr	r0, [r3, #0]
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	222c      	movs	r2, #44	; 0x2c
 8009fe2:	fb02 f303 	mul.w	r3, r2, r3
 8009fe6:	3338      	adds	r3, #56	; 0x38
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	18d1      	adds	r1, r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f009 fefe 	bl	8013df4 <USB_HC_StartXfer>
 8009ff8:	4603      	mov	r3, r0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop

0800a004 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f009 fc23 	bl	8013866 <USB_GetMode>
 800a020:	4603      	mov	r3, r0
 800a022:	2b01      	cmp	r3, #1
 800a024:	f040 80ef 	bne.w	800a206 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f009 fc07 	bl	8013840 <USB_ReadInterrupts>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80e5 	beq.w	800a204 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4618      	mov	r0, r3
 800a040:	f009 fbfe 	bl	8013840 <USB_ReadInterrupts>
 800a044:	4603      	mov	r3, r0
 800a046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a04a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a04e:	d104      	bne.n	800a05a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a058:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4618      	mov	r0, r3
 800a060:	f009 fbee 	bl	8013840 <USB_ReadInterrupts>
 800a064:	4603      	mov	r3, r0
 800a066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a06a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a06e:	d104      	bne.n	800a07a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a078:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4618      	mov	r0, r3
 800a080:	f009 fbde 	bl	8013840 <USB_ReadInterrupts>
 800a084:	4603      	mov	r3, r0
 800a086:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a08a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a08e:	d104      	bne.n	800a09a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a098:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f009 fbce 	bl	8013840 <USB_ReadInterrupts>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	f003 0302 	and.w	r3, r3, #2
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d103      	bne.n	800a0b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f009 fbc0 	bl	8013840 <USB_ReadInterrupts>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ca:	d115      	bne.n	800a0f8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a0d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d108      	bne.n	800a0f8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f00f fc1c 	bl	8019924 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f009 fcaa 	bl	8013a4c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f009 fb9f 	bl	8013840 <USB_ReadInterrupts>
 800a102:	4603      	mov	r3, r0
 800a104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a10c:	d102      	bne.n	800a114 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f001 f9ff 	bl	800b512 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4618      	mov	r0, r3
 800a11a:	f009 fb91 	bl	8013840 <USB_ReadInterrupts>
 800a11e:	4603      	mov	r3, r0
 800a120:	f003 0308 	and.w	r3, r3, #8
 800a124:	2b08      	cmp	r3, #8
 800a126:	d106      	bne.n	800a136 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f00f fbdf 	bl	80198ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2208      	movs	r2, #8
 800a134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f009 fb80 	bl	8013840 <USB_ReadInterrupts>
 800a140:	4603      	mov	r3, r0
 800a142:	f003 0310 	and.w	r3, r3, #16
 800a146:	2b10      	cmp	r3, #16
 800a148:	d101      	bne.n	800a14e <HAL_HCD_IRQHandler+0x14a>
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <HAL_HCD_IRQHandler+0x14c>
 800a14e:	2300      	movs	r3, #0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d012      	beq.n	800a17a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	699a      	ldr	r2, [r3, #24]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0210 	bic.w	r2, r2, #16
 800a162:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 f902 	bl	800b36e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699a      	ldr	r2, [r3, #24]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f042 0210 	orr.w	r2, r2, #16
 800a178:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f009 fb5e 	bl	8013840 <USB_ReadInterrupts>
 800a184:	4603      	mov	r3, r0
 800a186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a18a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a18e:	d13a      	bne.n	800a206 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4618      	mov	r0, r3
 800a196:	f009 ff6f 	bl	8014078 <USB_HC_ReadInterrupt>
 800a19a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a19c:	2300      	movs	r3, #0
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	e025      	b.n	800a1ee <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d018      	beq.n	800a1e8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1cc:	d106      	bne.n	800a1dc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f8ab 	bl	800a330 <HCD_HC_IN_IRQHandler>
 800a1da:	e005      	b.n	800a1e8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fcc6 	bl	800ab74 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d3d4      	bcc.n	800a1a2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a200:	615a      	str	r2, [r3, #20]
 800a202:	e000      	b.n	800a206 <HAL_HCD_IRQHandler+0x202>
      return;
 800a204:	bf00      	nop
    }
  }
}
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d101      	bne.n	800a222 <HAL_HCD_Start+0x16>
 800a21e:	2302      	movs	r3, #2
 800a220:	e013      	b.n	800a24a <HAL_HCD_Start+0x3e>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4618      	mov	r0, r3
 800a230:	f009 fa14 	bl	801365c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2101      	movs	r1, #1
 800a23a:	4618      	mov	r0, r3
 800a23c:	f009 fc6a 	bl	8013b14 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b082      	sub	sp, #8
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800a260:	2b01      	cmp	r3, #1
 800a262:	d101      	bne.n	800a268 <HAL_HCD_Stop+0x16>
 800a264:	2302      	movs	r3, #2
 800a266:	e00d      	b.n	800a284 <HAL_HCD_Stop+0x32>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f00a f869 	bl	801434c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4618      	mov	r0, r3
 800a29a:	f009 fc11 	bl	8013ac0 <USB_ResetPort>
 800a29e:	4603      	mov	r3, r0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800a2b4:	78fb      	ldrb	r3, [r7, #3]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	212c      	movs	r1, #44	; 0x2c
 800a2ba:	fb01 f303 	mul.w	r3, r1, r3
 800a2be:	4413      	add	r3, r2
 800a2c0:	3360      	adds	r3, #96	; 0x60
 800a2c2:	781b      	ldrb	r3, [r3, #0]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	212c      	movs	r1, #44	; 0x2c
 800a2e2:	fb01 f303 	mul.w	r3, r1, r3
 800a2e6:	4413      	add	r3, r2
 800a2e8:	3350      	adds	r3, #80	; 0x50
 800a2ea:	681b      	ldr	r3, [r3, #0]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4618      	mov	r0, r3
 800a306:	f009 fc55 	bl	8013bb4 <USB_GetCurrentFrame>
 800a30a:	4603      	mov	r3, r0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4618      	mov	r0, r3
 800a322:	f009 fc30 	bl	8013b86 <USB_GetHostSpeed>
 800a326:	4603      	mov	r3, r0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	4413      	add	r3, r2
 800a352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f003 0304 	and.w	r3, r3, #4
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d119      	bne.n	800a394 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	4413      	add	r3, r2
 800a368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a36c:	461a      	mov	r2, r3
 800a36e:	2304      	movs	r3, #4
 800a370:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	0151      	lsls	r1, r2, #5
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	440a      	add	r2, r1
 800a388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a38c:	f043 0302 	orr.w	r3, r3, #2
 800a390:	60d3      	str	r3, [r2, #12]
 800a392:	e101      	b.n	800a598 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3aa:	d12b      	bne.n	800a404 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	212c      	movs	r1, #44	; 0x2c
 800a3c6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ca:	4413      	add	r3, r2
 800a3cc:	3361      	adds	r3, #97	; 0x61
 800a3ce:	2207      	movs	r2, #7
 800a3d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	0151      	lsls	r1, r2, #5
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	440a      	add	r2, r1
 800a3e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3ec:	f043 0302 	orr.w	r3, r3, #2
 800a3f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f009 fe4c 	bl	801409a <USB_HC_Halt>
 800a402:	e0c9      	b.n	800a598 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b20      	cmp	r3, #32
 800a418:	d109      	bne.n	800a42e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	4413      	add	r3, r2
 800a422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a426:	461a      	mov	r2, r3
 800a428:	2320      	movs	r3, #32
 800a42a:	6093      	str	r3, [r2, #8]
 800a42c:	e0b4      	b.n	800a598 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	015a      	lsls	r2, r3, #5
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	4413      	add	r3, r2
 800a436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f003 0308 	and.w	r3, r3, #8
 800a440:	2b08      	cmp	r3, #8
 800a442:	d133      	bne.n	800a4ac <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	0151      	lsls	r1, r2, #5
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	440a      	add	r2, r1
 800a45a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a45e:	f043 0302 	orr.w	r3, r3, #2
 800a462:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	212c      	movs	r1, #44	; 0x2c
 800a46a:	fb01 f303 	mul.w	r3, r1, r3
 800a46e:	4413      	add	r3, r2
 800a470:	3361      	adds	r3, #97	; 0x61
 800a472:	2205      	movs	r2, #5
 800a474:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a482:	461a      	mov	r2, r3
 800a484:	2310      	movs	r3, #16
 800a486:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a494:	461a      	mov	r2, r3
 800a496:	2308      	movs	r3, #8
 800a498:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	b2d2      	uxtb	r2, r2
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f009 fdf8 	bl	801409a <USB_HC_Halt>
 800a4aa:	e075      	b.n	800a598 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4c2:	d134      	bne.n	800a52e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	0151      	lsls	r1, r2, #5
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	440a      	add	r2, r1
 800a4da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4de:	f043 0302 	orr.w	r3, r3, #2
 800a4e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	212c      	movs	r1, #44	; 0x2c
 800a4ea:	fb01 f303 	mul.w	r3, r1, r3
 800a4ee:	4413      	add	r3, r2
 800a4f0:	3361      	adds	r3, #97	; 0x61
 800a4f2:	2208      	movs	r2, #8
 800a4f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a502:	461a      	mov	r2, r3
 800a504:	2310      	movs	r3, #16
 800a506:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a514:	461a      	mov	r2, r3
 800a516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a51a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f009 fdb7 	bl	801409a <USB_HC_Halt>
 800a52c:	e034      	b.n	800a598 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	4413      	add	r3, r2
 800a536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a540:	2b80      	cmp	r3, #128	; 0x80
 800a542:	d129      	bne.n	800a598 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a55e:	f043 0302 	orr.w	r3, r3, #2
 800a562:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	212c      	movs	r1, #44	; 0x2c
 800a56a:	fb01 f303 	mul.w	r3, r1, r3
 800a56e:	4413      	add	r3, r2
 800a570:	3361      	adds	r3, #97	; 0x61
 800a572:	2206      	movs	r2, #6
 800a574:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	b2d2      	uxtb	r2, r2
 800a57e:	4611      	mov	r1, r2
 800a580:	4618      	mov	r0, r3
 800a582:	f009 fd8a 	bl	801409a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	015a      	lsls	r2, r3, #5
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	4413      	add	r3, r2
 800a58e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a592:	461a      	mov	r2, r3
 800a594:	2380      	movs	r3, #128	; 0x80
 800a596:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ae:	d122      	bne.n	800a5f6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	0151      	lsls	r1, r2, #5
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	440a      	add	r2, r1
 800a5c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ca:	f043 0302 	orr.w	r3, r3, #2
 800a5ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	b2d2      	uxtb	r2, r2
 800a5d8:	4611      	mov	r1, r2
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f009 fd5d 	bl	801409a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5f2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800a5f4:	e2ba      	b.n	800ab6c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b01      	cmp	r3, #1
 800a60a:	f040 811b 	bne.w	800a844 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d019      	beq.n	800a64a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	212c      	movs	r1, #44	; 0x2c
 800a61c:	fb01 f303 	mul.w	r3, r1, r3
 800a620:	4413      	add	r3, r2
 800a622:	3348      	adds	r3, #72	; 0x48
 800a624:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	0159      	lsls	r1, r3, #5
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	440b      	add	r3, r1
 800a62e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800a638:	1ad2      	subs	r2, r2, r3
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	202c      	movs	r0, #44	; 0x2c
 800a640:	fb00 f303 	mul.w	r3, r0, r3
 800a644:	440b      	add	r3, r1
 800a646:	3350      	adds	r3, #80	; 0x50
 800a648:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	212c      	movs	r1, #44	; 0x2c
 800a650:	fb01 f303 	mul.w	r3, r1, r3
 800a654:	4413      	add	r3, r2
 800a656:	3361      	adds	r3, #97	; 0x61
 800a658:	2201      	movs	r2, #1
 800a65a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	212c      	movs	r1, #44	; 0x2c
 800a662:	fb01 f303 	mul.w	r3, r1, r3
 800a666:	4413      	add	r3, r2
 800a668:	335c      	adds	r3, #92	; 0x5c
 800a66a:	2200      	movs	r2, #0
 800a66c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	4413      	add	r3, r2
 800a676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a67a:	461a      	mov	r2, r3
 800a67c:	2301      	movs	r3, #1
 800a67e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	212c      	movs	r1, #44	; 0x2c
 800a686:	fb01 f303 	mul.w	r3, r1, r3
 800a68a:	4413      	add	r3, r2
 800a68c:	333f      	adds	r3, #63	; 0x3f
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d009      	beq.n	800a6a8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	212c      	movs	r1, #44	; 0x2c
 800a69a:	fb01 f303 	mul.w	r3, r1, r3
 800a69e:	4413      	add	r3, r2
 800a6a0:	333f      	adds	r3, #63	; 0x3f
 800a6a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d121      	bne.n	800a6ec <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	0151      	lsls	r1, r2, #5
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	440a      	add	r2, r1
 800a6be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6c2:	f043 0302 	orr.w	r3, r3, #2
 800a6c6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f009 fce1 	bl	801409a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	2310      	movs	r3, #16
 800a6e8:	6093      	str	r3, [r2, #8]
 800a6ea:	e066      	b.n	800a7ba <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	212c      	movs	r1, #44	; 0x2c
 800a6f2:	fb01 f303 	mul.w	r3, r1, r3
 800a6f6:	4413      	add	r3, r2
 800a6f8:	333f      	adds	r3, #63	; 0x3f
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d127      	bne.n	800a750 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	4413      	add	r3, r2
 800a708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	440a      	add	r2, r1
 800a716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a71a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a71e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	212c      	movs	r1, #44	; 0x2c
 800a726:	fb01 f303 	mul.w	r3, r1, r3
 800a72a:	4413      	add	r3, r2
 800a72c:	3360      	adds	r3, #96	; 0x60
 800a72e:	2201      	movs	r2, #1
 800a730:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	b2d9      	uxtb	r1, r3
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	202c      	movs	r0, #44	; 0x2c
 800a73c:	fb00 f303 	mul.w	r3, r0, r3
 800a740:	4413      	add	r3, r2
 800a742:	3360      	adds	r3, #96	; 0x60
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	461a      	mov	r2, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f00f f8f9 	bl	8019940 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a74e:	e034      	b.n	800a7ba <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	212c      	movs	r1, #44	; 0x2c
 800a756:	fb01 f303 	mul.w	r3, r1, r3
 800a75a:	4413      	add	r3, r2
 800a75c:	333f      	adds	r3, #63	; 0x3f
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d12a      	bne.n	800a7ba <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	212c      	movs	r1, #44	; 0x2c
 800a76a:	fb01 f303 	mul.w	r3, r1, r3
 800a76e:	4413      	add	r3, r2
 800a770:	3360      	adds	r3, #96	; 0x60
 800a772:	2201      	movs	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	212c      	movs	r1, #44	; 0x2c
 800a77c:	fb01 f303 	mul.w	r3, r1, r3
 800a780:	4413      	add	r3, r2
 800a782:	3354      	adds	r3, #84	; 0x54
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	f083 0301 	eor.w	r3, r3, #1
 800a78a:	b2d8      	uxtb	r0, r3
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	212c      	movs	r1, #44	; 0x2c
 800a792:	fb01 f303 	mul.w	r3, r1, r3
 800a796:	4413      	add	r3, r2
 800a798:	3354      	adds	r3, #84	; 0x54
 800a79a:	4602      	mov	r2, r0
 800a79c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	b2d9      	uxtb	r1, r3
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	202c      	movs	r0, #44	; 0x2c
 800a7a8:	fb00 f303 	mul.w	r3, r0, r3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	3360      	adds	r3, #96	; 0x60
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f00f f8c3 	bl	8019940 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d12b      	bne.n	800a81a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	212c      	movs	r1, #44	; 0x2c
 800a7c8:	fb01 f303 	mul.w	r3, r1, r3
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3348      	adds	r3, #72	; 0x48
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	202c      	movs	r0, #44	; 0x2c
 800a7d8:	fb00 f202 	mul.w	r2, r0, r2
 800a7dc:	440a      	add	r2, r1
 800a7de:	3240      	adds	r2, #64	; 0x40
 800a7e0:	8812      	ldrh	r2, [r2, #0]
 800a7e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 81be 	beq.w	800ab6c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	212c      	movs	r1, #44	; 0x2c
 800a7f6:	fb01 f303 	mul.w	r3, r1, r3
 800a7fa:	4413      	add	r3, r2
 800a7fc:	3354      	adds	r3, #84	; 0x54
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	f083 0301 	eor.w	r3, r3, #1
 800a804:	b2d8      	uxtb	r0, r3
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	212c      	movs	r1, #44	; 0x2c
 800a80c:	fb01 f303 	mul.w	r3, r1, r3
 800a810:	4413      	add	r3, r2
 800a812:	3354      	adds	r3, #84	; 0x54
 800a814:	4602      	mov	r2, r0
 800a816:	701a      	strb	r2, [r3, #0]
}
 800a818:	e1a8      	b.n	800ab6c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	212c      	movs	r1, #44	; 0x2c
 800a820:	fb01 f303 	mul.w	r3, r1, r3
 800a824:	4413      	add	r3, r2
 800a826:	3354      	adds	r3, #84	; 0x54
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	f083 0301 	eor.w	r3, r3, #1
 800a82e:	b2d8      	uxtb	r0, r3
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	212c      	movs	r1, #44	; 0x2c
 800a836:	fb01 f303 	mul.w	r3, r1, r3
 800a83a:	4413      	add	r3, r2
 800a83c:	3354      	adds	r3, #84	; 0x54
 800a83e:	4602      	mov	r2, r0
 800a840:	701a      	strb	r2, [r3, #0]
}
 800a842:	e193      	b.n	800ab6c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f003 0302 	and.w	r3, r3, #2
 800a856:	2b02      	cmp	r3, #2
 800a858:	f040 8106 	bne.w	800aa68 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	4413      	add	r3, r2
 800a864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	0151      	lsls	r1, r2, #5
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	440a      	add	r2, r1
 800a872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a876:	f023 0302 	bic.w	r3, r3, #2
 800a87a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	212c      	movs	r1, #44	; 0x2c
 800a882:	fb01 f303 	mul.w	r3, r1, r3
 800a886:	4413      	add	r3, r2
 800a888:	3361      	adds	r3, #97	; 0x61
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d109      	bne.n	800a8a4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	212c      	movs	r1, #44	; 0x2c
 800a896:	fb01 f303 	mul.w	r3, r1, r3
 800a89a:	4413      	add	r3, r2
 800a89c:	3360      	adds	r3, #96	; 0x60
 800a89e:	2201      	movs	r2, #1
 800a8a0:	701a      	strb	r2, [r3, #0]
 800a8a2:	e0c9      	b.n	800aa38 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	212c      	movs	r1, #44	; 0x2c
 800a8aa:	fb01 f303 	mul.w	r3, r1, r3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	3361      	adds	r3, #97	; 0x61
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2b05      	cmp	r3, #5
 800a8b6:	d109      	bne.n	800a8cc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	212c      	movs	r1, #44	; 0x2c
 800a8be:	fb01 f303 	mul.w	r3, r1, r3
 800a8c2:	4413      	add	r3, r2
 800a8c4:	3360      	adds	r3, #96	; 0x60
 800a8c6:	2205      	movs	r2, #5
 800a8c8:	701a      	strb	r2, [r3, #0]
 800a8ca:	e0b5      	b.n	800aa38 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	212c      	movs	r1, #44	; 0x2c
 800a8d2:	fb01 f303 	mul.w	r3, r1, r3
 800a8d6:	4413      	add	r3, r2
 800a8d8:	3361      	adds	r3, #97	; 0x61
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b06      	cmp	r3, #6
 800a8de:	d009      	beq.n	800a8f4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	212c      	movs	r1, #44	; 0x2c
 800a8e6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ea:	4413      	add	r3, r2
 800a8ec:	3361      	adds	r3, #97	; 0x61
 800a8ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d150      	bne.n	800a996 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	212c      	movs	r1, #44	; 0x2c
 800a8fa:	fb01 f303 	mul.w	r3, r1, r3
 800a8fe:	4413      	add	r3, r2
 800a900:	335c      	adds	r3, #92	; 0x5c
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	1c5a      	adds	r2, r3, #1
 800a906:	6879      	ldr	r1, [r7, #4]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	202c      	movs	r0, #44	; 0x2c
 800a90c:	fb00 f303 	mul.w	r3, r0, r3
 800a910:	440b      	add	r3, r1
 800a912:	335c      	adds	r3, #92	; 0x5c
 800a914:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	212c      	movs	r1, #44	; 0x2c
 800a91c:	fb01 f303 	mul.w	r3, r1, r3
 800a920:	4413      	add	r3, r2
 800a922:	335c      	adds	r3, #92	; 0x5c
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b02      	cmp	r3, #2
 800a928:	d912      	bls.n	800a950 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	212c      	movs	r1, #44	; 0x2c
 800a930:	fb01 f303 	mul.w	r3, r1, r3
 800a934:	4413      	add	r3, r2
 800a936:	335c      	adds	r3, #92	; 0x5c
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	212c      	movs	r1, #44	; 0x2c
 800a942:	fb01 f303 	mul.w	r3, r1, r3
 800a946:	4413      	add	r3, r2
 800a948:	3360      	adds	r3, #96	; 0x60
 800a94a:	2204      	movs	r2, #4
 800a94c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a94e:	e073      	b.n	800aa38 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	212c      	movs	r1, #44	; 0x2c
 800a956:	fb01 f303 	mul.w	r3, r1, r3
 800a95a:	4413      	add	r3, r2
 800a95c:	3360      	adds	r3, #96	; 0x60
 800a95e:	2202      	movs	r2, #2
 800a960:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a978:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a980:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a98e:	461a      	mov	r2, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a994:	e050      	b.n	800aa38 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	212c      	movs	r1, #44	; 0x2c
 800a99c:	fb01 f303 	mul.w	r3, r1, r3
 800a9a0:	4413      	add	r3, r2
 800a9a2:	3361      	adds	r3, #97	; 0x61
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	2b03      	cmp	r3, #3
 800a9a8:	d122      	bne.n	800a9f0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	212c      	movs	r1, #44	; 0x2c
 800a9b0:	fb01 f303 	mul.w	r3, r1, r3
 800a9b4:	4413      	add	r3, r2
 800a9b6:	3360      	adds	r3, #96	; 0x60
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	015a      	lsls	r2, r3, #5
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	e023      	b.n	800aa38 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	212c      	movs	r1, #44	; 0x2c
 800a9f6:	fb01 f303 	mul.w	r3, r1, r3
 800a9fa:	4413      	add	r3, r2
 800a9fc:	3361      	adds	r3, #97	; 0x61
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b07      	cmp	r3, #7
 800aa02:	d119      	bne.n	800aa38 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	212c      	movs	r1, #44	; 0x2c
 800aa0a:	fb01 f303 	mul.w	r3, r1, r3
 800aa0e:	4413      	add	r3, r2
 800aa10:	335c      	adds	r3, #92	; 0x5c
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	202c      	movs	r0, #44	; 0x2c
 800aa1c:	fb00 f303 	mul.w	r3, r0, r3
 800aa20:	440b      	add	r3, r1
 800aa22:	335c      	adds	r3, #92	; 0x5c
 800aa24:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	212c      	movs	r1, #44	; 0x2c
 800aa2c:	fb01 f303 	mul.w	r3, r1, r3
 800aa30:	4413      	add	r3, r2
 800aa32:	3360      	adds	r3, #96	; 0x60
 800aa34:	2204      	movs	r2, #4
 800aa36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa44:	461a      	mov	r2, r3
 800aa46:	2302      	movs	r3, #2
 800aa48:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	b2d9      	uxtb	r1, r3
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	202c      	movs	r0, #44	; 0x2c
 800aa54:	fb00 f303 	mul.w	r3, r0, r3
 800aa58:	4413      	add	r3, r2
 800aa5a:	3360      	adds	r3, #96	; 0x60
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f00e ff6d 	bl	8019940 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800aa66:	e081      	b.n	800ab6c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f003 0310 	and.w	r3, r3, #16
 800aa7a:	2b10      	cmp	r3, #16
 800aa7c:	d176      	bne.n	800ab6c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	212c      	movs	r1, #44	; 0x2c
 800aa84:	fb01 f303 	mul.w	r3, r1, r3
 800aa88:	4413      	add	r3, r2
 800aa8a:	333f      	adds	r3, #63	; 0x3f
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d121      	bne.n	800aad6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	212c      	movs	r1, #44	; 0x2c
 800aa98:	fb01 f303 	mul.w	r3, r1, r3
 800aa9c:	4413      	add	r3, r2
 800aa9e:	335c      	adds	r3, #92	; 0x5c
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	0151      	lsls	r1, r2, #5
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	440a      	add	r2, r1
 800aaba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aabe:	f043 0302 	orr.w	r3, r3, #2
 800aac2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	b2d2      	uxtb	r2, r2
 800aacc:	4611      	mov	r1, r2
 800aace:	4618      	mov	r0, r3
 800aad0:	f009 fae3 	bl	801409a <USB_HC_Halt>
 800aad4:	e041      	b.n	800ab5a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	212c      	movs	r1, #44	; 0x2c
 800aadc:	fb01 f303 	mul.w	r3, r1, r3
 800aae0:	4413      	add	r3, r2
 800aae2:	333f      	adds	r3, #63	; 0x3f
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d009      	beq.n	800aafe <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	212c      	movs	r1, #44	; 0x2c
 800aaf0:	fb01 f303 	mul.w	r3, r1, r3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	333f      	adds	r3, #63	; 0x3f
 800aaf8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d12d      	bne.n	800ab5a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	212c      	movs	r1, #44	; 0x2c
 800ab04:	fb01 f303 	mul.w	r3, r1, r3
 800ab08:	4413      	add	r3, r2
 800ab0a:	335c      	adds	r3, #92	; 0x5c
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d120      	bne.n	800ab5a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	212c      	movs	r1, #44	; 0x2c
 800ab1e:	fb01 f303 	mul.w	r3, r1, r3
 800ab22:	4413      	add	r3, r2
 800ab24:	3361      	adds	r3, #97	; 0x61
 800ab26:	2203      	movs	r2, #3
 800ab28:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	0151      	lsls	r1, r2, #5
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	440a      	add	r2, r1
 800ab40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab44:	f043 0302 	orr.w	r3, r3, #2
 800ab48:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	b2d2      	uxtb	r2, r2
 800ab52:	4611      	mov	r1, r2
 800ab54:	4618      	mov	r0, r3
 800ab56:	f009 faa0 	bl	801409a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	015a      	lsls	r2, r3, #5
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	4413      	add	r3, r2
 800ab62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab66:	461a      	mov	r2, r3
 800ab68:	2310      	movs	r3, #16
 800ab6a:	6093      	str	r3, [r2, #8]
}
 800ab6c:	bf00      	nop
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	015a      	lsls	r2, r3, #5
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	4413      	add	r3, r2
 800ab96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f003 0304 	and.w	r3, r3, #4
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d119      	bne.n	800abd8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	015a      	lsls	r2, r3, #5
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	4413      	add	r3, r2
 800abac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abb0:	461a      	mov	r2, r3
 800abb2:	2304      	movs	r3, #4
 800abb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abd0:	f043 0302 	orr.w	r3, r3, #2
 800abd4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800abd6:	e3c6      	b.n	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 0320 	and.w	r3, r3, #32
 800abea:	2b20      	cmp	r3, #32
 800abec:	d13e      	bne.n	800ac6c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	015a      	lsls	r2, r3, #5
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	4413      	add	r3, r2
 800abf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abfa:	461a      	mov	r2, r3
 800abfc:	2320      	movs	r3, #32
 800abfe:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	212c      	movs	r1, #44	; 0x2c
 800ac06:	fb01 f303 	mul.w	r3, r1, r3
 800ac0a:	4413      	add	r3, r2
 800ac0c:	333d      	adds	r3, #61	; 0x3d
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	f040 83a8 	bne.w	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	212c      	movs	r1, #44	; 0x2c
 800ac1c:	fb01 f303 	mul.w	r3, r1, r3
 800ac20:	4413      	add	r3, r2
 800ac22:	333d      	adds	r3, #61	; 0x3d
 800ac24:	2200      	movs	r2, #0
 800ac26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	212c      	movs	r1, #44	; 0x2c
 800ac2e:	fb01 f303 	mul.w	r3, r1, r3
 800ac32:	4413      	add	r3, r2
 800ac34:	3360      	adds	r3, #96	; 0x60
 800ac36:	2202      	movs	r2, #2
 800ac38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	0151      	lsls	r1, r2, #5
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	440a      	add	r2, r1
 800ac50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac54:	f043 0302 	orr.w	r3, r3, #2
 800ac58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	b2d2      	uxtb	r2, r2
 800ac62:	4611      	mov	r1, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f009 fa18 	bl	801409a <USB_HC_Halt>
}
 800ac6a:	e37c      	b.n	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac82:	d122      	bne.n	800acca <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	015a      	lsls	r2, r3, #5
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	0151      	lsls	r1, r2, #5
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	440a      	add	r2, r1
 800ac9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac9e:	f043 0302 	orr.w	r3, r3, #2
 800aca2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	b2d2      	uxtb	r2, r2
 800acac:	4611      	mov	r1, r2
 800acae:	4618      	mov	r0, r3
 800acb0:	f009 f9f3 	bl	801409a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	4413      	add	r3, r2
 800acbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acc0:	461a      	mov	r2, r3
 800acc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acc6:	6093      	str	r3, [r2, #8]
}
 800acc8:	e34d      	b.n	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	015a      	lsls	r2, r3, #5
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	4413      	add	r3, r2
 800acd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d150      	bne.n	800ad82 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	212c      	movs	r1, #44	; 0x2c
 800ace6:	fb01 f303 	mul.w	r3, r1, r3
 800acea:	4413      	add	r3, r2
 800acec:	335c      	adds	r3, #92	; 0x5c
 800acee:	2200      	movs	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad04:	2b40      	cmp	r3, #64	; 0x40
 800ad06:	d111      	bne.n	800ad2c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	212c      	movs	r1, #44	; 0x2c
 800ad0e:	fb01 f303 	mul.w	r3, r1, r3
 800ad12:	4413      	add	r3, r2
 800ad14:	333d      	adds	r3, #61	; 0x3d
 800ad16:	2201      	movs	r2, #1
 800ad18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	015a      	lsls	r2, r3, #5
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	4413      	add	r3, r2
 800ad22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad26:	461a      	mov	r2, r3
 800ad28:	2340      	movs	r3, #64	; 0x40
 800ad2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	697a      	ldr	r2, [r7, #20]
 800ad3c:	0151      	lsls	r1, r2, #5
 800ad3e:	69ba      	ldr	r2, [r7, #24]
 800ad40:	440a      	add	r2, r1
 800ad42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad46:	f043 0302 	orr.w	r3, r3, #2
 800ad4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	697a      	ldr	r2, [r7, #20]
 800ad52:	b2d2      	uxtb	r2, r2
 800ad54:	4611      	mov	r1, r2
 800ad56:	4618      	mov	r0, r3
 800ad58:	f009 f99f 	bl	801409a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad68:	461a      	mov	r2, r3
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	212c      	movs	r1, #44	; 0x2c
 800ad74:	fb01 f303 	mul.w	r3, r1, r3
 800ad78:	4413      	add	r3, r2
 800ad7a:	3361      	adds	r3, #97	; 0x61
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	701a      	strb	r2, [r3, #0]
}
 800ad80:	e2f1      	b.n	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	015a      	lsls	r2, r3, #5
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	4413      	add	r3, r2
 800ad8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad94:	2b40      	cmp	r3, #64	; 0x40
 800ad96:	d13c      	bne.n	800ae12 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	212c      	movs	r1, #44	; 0x2c
 800ad9e:	fb01 f303 	mul.w	r3, r1, r3
 800ada2:	4413      	add	r3, r2
 800ada4:	3361      	adds	r3, #97	; 0x61
 800ada6:	2204      	movs	r2, #4
 800ada8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	212c      	movs	r1, #44	; 0x2c
 800adb0:	fb01 f303 	mul.w	r3, r1, r3
 800adb4:	4413      	add	r3, r2
 800adb6:	333d      	adds	r3, #61	; 0x3d
 800adb8:	2201      	movs	r2, #1
 800adba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	212c      	movs	r1, #44	; 0x2c
 800adc2:	fb01 f303 	mul.w	r3, r1, r3
 800adc6:	4413      	add	r3, r2
 800adc8:	335c      	adds	r3, #92	; 0x5c
 800adca:	2200      	movs	r2, #0
 800adcc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	4413      	add	r3, r2
 800add6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	0151      	lsls	r1, r2, #5
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	440a      	add	r2, r1
 800ade4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ade8:	f043 0302 	orr.w	r3, r3, #2
 800adec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	b2d2      	uxtb	r2, r2
 800adf6:	4611      	mov	r1, r2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f009 f94e 	bl	801409a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	2340      	movs	r3, #64	; 0x40
 800ae0e:	6093      	str	r3, [r2, #8]
}
 800ae10:	e2a9      	b.n	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f003 0308 	and.w	r3, r3, #8
 800ae24:	2b08      	cmp	r3, #8
 800ae26:	d12a      	bne.n	800ae7e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae34:	461a      	mov	r2, r3
 800ae36:	2308      	movs	r3, #8
 800ae38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	015a      	lsls	r2, r3, #5
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	4413      	add	r3, r2
 800ae42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	0151      	lsls	r1, r2, #5
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	440a      	add	r2, r1
 800ae50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae54:	f043 0302 	orr.w	r3, r3, #2
 800ae58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	b2d2      	uxtb	r2, r2
 800ae62:	4611      	mov	r1, r2
 800ae64:	4618      	mov	r0, r3
 800ae66:	f009 f918 	bl	801409a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	212c      	movs	r1, #44	; 0x2c
 800ae70:	fb01 f303 	mul.w	r3, r1, r3
 800ae74:	4413      	add	r3, r2
 800ae76:	3361      	adds	r3, #97	; 0x61
 800ae78:	2205      	movs	r2, #5
 800ae7a:	701a      	strb	r2, [r3, #0]
}
 800ae7c:	e273      	b.n	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f003 0310 	and.w	r3, r3, #16
 800ae90:	2b10      	cmp	r3, #16
 800ae92:	d150      	bne.n	800af36 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	212c      	movs	r1, #44	; 0x2c
 800ae9a:	fb01 f303 	mul.w	r3, r1, r3
 800ae9e:	4413      	add	r3, r2
 800aea0:	335c      	adds	r3, #92	; 0x5c
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	212c      	movs	r1, #44	; 0x2c
 800aeac:	fb01 f303 	mul.w	r3, r1, r3
 800aeb0:	4413      	add	r3, r2
 800aeb2:	3361      	adds	r3, #97	; 0x61
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	212c      	movs	r1, #44	; 0x2c
 800aebe:	fb01 f303 	mul.w	r3, r1, r3
 800aec2:	4413      	add	r3, r2
 800aec4:	333d      	adds	r3, #61	; 0x3d
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d112      	bne.n	800aef2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	212c      	movs	r1, #44	; 0x2c
 800aed2:	fb01 f303 	mul.w	r3, r1, r3
 800aed6:	4413      	add	r3, r2
 800aed8:	333c      	adds	r3, #60	; 0x3c
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d108      	bne.n	800aef2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	212c      	movs	r1, #44	; 0x2c
 800aee6:	fb01 f303 	mul.w	r3, r1, r3
 800aeea:	4413      	add	r3, r2
 800aeec:	333d      	adds	r3, #61	; 0x3d
 800aeee:	2201      	movs	r2, #1
 800aef0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	015a      	lsls	r2, r3, #5
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	4413      	add	r3, r2
 800aefa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	0151      	lsls	r1, r2, #5
 800af04:	69ba      	ldr	r2, [r7, #24]
 800af06:	440a      	add	r2, r1
 800af08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af0c:	f043 0302 	orr.w	r3, r3, #2
 800af10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	b2d2      	uxtb	r2, r2
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f009 f8bc 	bl	801409a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af2e:	461a      	mov	r2, r3
 800af30:	2310      	movs	r3, #16
 800af32:	6093      	str	r3, [r2, #8]
}
 800af34:	e217      	b.n	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	015a      	lsls	r2, r3, #5
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	4413      	add	r3, r2
 800af3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af48:	2b80      	cmp	r3, #128	; 0x80
 800af4a:	d174      	bne.n	800b036 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d121      	bne.n	800af98 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	212c      	movs	r1, #44	; 0x2c
 800af5a:	fb01 f303 	mul.w	r3, r1, r3
 800af5e:	4413      	add	r3, r2
 800af60:	3361      	adds	r3, #97	; 0x61
 800af62:	2206      	movs	r2, #6
 800af64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	0151      	lsls	r1, r2, #5
 800af78:	69ba      	ldr	r2, [r7, #24]
 800af7a:	440a      	add	r2, r1
 800af7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af80:	f043 0302 	orr.w	r3, r3, #2
 800af84:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	b2d2      	uxtb	r2, r2
 800af8e:	4611      	mov	r1, r2
 800af90:	4618      	mov	r0, r3
 800af92:	f009 f882 	bl	801409a <USB_HC_Halt>
 800af96:	e044      	b.n	800b022 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	212c      	movs	r1, #44	; 0x2c
 800af9e:	fb01 f303 	mul.w	r3, r1, r3
 800afa2:	4413      	add	r3, r2
 800afa4:	335c      	adds	r3, #92	; 0x5c
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	6879      	ldr	r1, [r7, #4]
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	202c      	movs	r0, #44	; 0x2c
 800afb0:	fb00 f303 	mul.w	r3, r0, r3
 800afb4:	440b      	add	r3, r1
 800afb6:	335c      	adds	r3, #92	; 0x5c
 800afb8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	212c      	movs	r1, #44	; 0x2c
 800afc0:	fb01 f303 	mul.w	r3, r1, r3
 800afc4:	4413      	add	r3, r2
 800afc6:	335c      	adds	r3, #92	; 0x5c
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d920      	bls.n	800b010 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	212c      	movs	r1, #44	; 0x2c
 800afd4:	fb01 f303 	mul.w	r3, r1, r3
 800afd8:	4413      	add	r3, r2
 800afda:	335c      	adds	r3, #92	; 0x5c
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	212c      	movs	r1, #44	; 0x2c
 800afe6:	fb01 f303 	mul.w	r3, r1, r3
 800afea:	4413      	add	r3, r2
 800afec:	3360      	adds	r3, #96	; 0x60
 800afee:	2204      	movs	r2, #4
 800aff0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	b2d9      	uxtb	r1, r3
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	202c      	movs	r0, #44	; 0x2c
 800affc:	fb00 f303 	mul.w	r3, r0, r3
 800b000:	4413      	add	r3, r2
 800b002:	3360      	adds	r3, #96	; 0x60
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f00e fc99 	bl	8019940 <HAL_HCD_HC_NotifyURBChange_Callback>
 800b00e:	e008      	b.n	800b022 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	212c      	movs	r1, #44	; 0x2c
 800b016:	fb01 f303 	mul.w	r3, r1, r3
 800b01a:	4413      	add	r3, r2
 800b01c:	3360      	adds	r3, #96	; 0x60
 800b01e:	2202      	movs	r2, #2
 800b020:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	015a      	lsls	r2, r3, #5
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	4413      	add	r3, r2
 800b02a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b02e:	461a      	mov	r2, r3
 800b030:	2380      	movs	r3, #128	; 0x80
 800b032:	6093      	str	r3, [r2, #8]
}
 800b034:	e197      	b.n	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	015a      	lsls	r2, r3, #5
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	4413      	add	r3, r2
 800b03e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b04c:	d134      	bne.n	800b0b8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	015a      	lsls	r2, r3, #5
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	4413      	add	r3, r2
 800b056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	0151      	lsls	r1, r2, #5
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	440a      	add	r2, r1
 800b064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b068:	f043 0302 	orr.w	r3, r3, #2
 800b06c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	b2d2      	uxtb	r2, r2
 800b076:	4611      	mov	r1, r2
 800b078:	4618      	mov	r0, r3
 800b07a:	f009 f80e 	bl	801409a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	015a      	lsls	r2, r3, #5
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	4413      	add	r3, r2
 800b086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b08a:	461a      	mov	r2, r3
 800b08c:	2310      	movs	r3, #16
 800b08e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	4413      	add	r3, r2
 800b098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b09c:	461a      	mov	r2, r3
 800b09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	212c      	movs	r1, #44	; 0x2c
 800b0aa:	fb01 f303 	mul.w	r3, r1, r3
 800b0ae:	4413      	add	r3, r2
 800b0b0:	3361      	adds	r3, #97	; 0x61
 800b0b2:	2208      	movs	r2, #8
 800b0b4:	701a      	strb	r2, [r3, #0]
}
 800b0b6:	e156      	b.n	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	015a      	lsls	r2, r3, #5
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f003 0302 	and.w	r3, r3, #2
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	f040 814b 	bne.w	800b366 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	015a      	lsls	r2, r3, #5
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	0151      	lsls	r1, r2, #5
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	440a      	add	r2, r1
 800b0e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0ea:	f023 0302 	bic.w	r3, r3, #2
 800b0ee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	212c      	movs	r1, #44	; 0x2c
 800b0f6:	fb01 f303 	mul.w	r3, r1, r3
 800b0fa:	4413      	add	r3, r2
 800b0fc:	3361      	adds	r3, #97	; 0x61
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d179      	bne.n	800b1f8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	212c      	movs	r1, #44	; 0x2c
 800b10a:	fb01 f303 	mul.w	r3, r1, r3
 800b10e:	4413      	add	r3, r2
 800b110:	3360      	adds	r3, #96	; 0x60
 800b112:	2201      	movs	r2, #1
 800b114:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	212c      	movs	r1, #44	; 0x2c
 800b11c:	fb01 f303 	mul.w	r3, r1, r3
 800b120:	4413      	add	r3, r2
 800b122:	333f      	adds	r3, #63	; 0x3f
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b02      	cmp	r3, #2
 800b128:	d00a      	beq.n	800b140 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	212c      	movs	r1, #44	; 0x2c
 800b130:	fb01 f303 	mul.w	r3, r1, r3
 800b134:	4413      	add	r3, r2
 800b136:	333f      	adds	r3, #63	; 0x3f
 800b138:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	f040 80fc 	bne.w	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d142      	bne.n	800b1ce <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	212c      	movs	r1, #44	; 0x2c
 800b14e:	fb01 f303 	mul.w	r3, r1, r3
 800b152:	4413      	add	r3, r2
 800b154:	334c      	adds	r3, #76	; 0x4c
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f000 80ed 	beq.w	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	212c      	movs	r1, #44	; 0x2c
 800b164:	fb01 f303 	mul.w	r3, r1, r3
 800b168:	4413      	add	r3, r2
 800b16a:	334c      	adds	r3, #76	; 0x4c
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6879      	ldr	r1, [r7, #4]
 800b170:	697a      	ldr	r2, [r7, #20]
 800b172:	202c      	movs	r0, #44	; 0x2c
 800b174:	fb00 f202 	mul.w	r2, r0, r2
 800b178:	440a      	add	r2, r1
 800b17a:	3240      	adds	r2, #64	; 0x40
 800b17c:	8812      	ldrh	r2, [r2, #0]
 800b17e:	4413      	add	r3, r2
 800b180:	3b01      	subs	r3, #1
 800b182:	6879      	ldr	r1, [r7, #4]
 800b184:	697a      	ldr	r2, [r7, #20]
 800b186:	202c      	movs	r0, #44	; 0x2c
 800b188:	fb00 f202 	mul.w	r2, r0, r2
 800b18c:	440a      	add	r2, r1
 800b18e:	3240      	adds	r2, #64	; 0x40
 800b190:	8812      	ldrh	r2, [r2, #0]
 800b192:	fbb3 f3f2 	udiv	r3, r3, r2
 800b196:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f000 80ca 	beq.w	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	212c      	movs	r1, #44	; 0x2c
 800b1aa:	fb01 f303 	mul.w	r3, r1, r3
 800b1ae:	4413      	add	r3, r2
 800b1b0:	3355      	adds	r3, #85	; 0x55
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	f083 0301 	eor.w	r3, r3, #1
 800b1b8:	b2d8      	uxtb	r0, r3
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	212c      	movs	r1, #44	; 0x2c
 800b1c0:	fb01 f303 	mul.w	r3, r1, r3
 800b1c4:	4413      	add	r3, r2
 800b1c6:	3355      	adds	r3, #85	; 0x55
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	701a      	strb	r2, [r3, #0]
 800b1cc:	e0b4      	b.n	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	212c      	movs	r1, #44	; 0x2c
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	4413      	add	r3, r2
 800b1da:	3355      	adds	r3, #85	; 0x55
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	f083 0301 	eor.w	r3, r3, #1
 800b1e2:	b2d8      	uxtb	r0, r3
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	212c      	movs	r1, #44	; 0x2c
 800b1ea:	fb01 f303 	mul.w	r3, r1, r3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	3355      	adds	r3, #85	; 0x55
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	e09f      	b.n	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	212c      	movs	r1, #44	; 0x2c
 800b1fe:	fb01 f303 	mul.w	r3, r1, r3
 800b202:	4413      	add	r3, r2
 800b204:	3361      	adds	r3, #97	; 0x61
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b03      	cmp	r3, #3
 800b20a:	d109      	bne.n	800b220 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	212c      	movs	r1, #44	; 0x2c
 800b212:	fb01 f303 	mul.w	r3, r1, r3
 800b216:	4413      	add	r3, r2
 800b218:	3360      	adds	r3, #96	; 0x60
 800b21a:	2202      	movs	r2, #2
 800b21c:	701a      	strb	r2, [r3, #0]
 800b21e:	e08b      	b.n	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	212c      	movs	r1, #44	; 0x2c
 800b226:	fb01 f303 	mul.w	r3, r1, r3
 800b22a:	4413      	add	r3, r2
 800b22c:	3361      	adds	r3, #97	; 0x61
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	2b04      	cmp	r3, #4
 800b232:	d109      	bne.n	800b248 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	212c      	movs	r1, #44	; 0x2c
 800b23a:	fb01 f303 	mul.w	r3, r1, r3
 800b23e:	4413      	add	r3, r2
 800b240:	3360      	adds	r3, #96	; 0x60
 800b242:	2202      	movs	r2, #2
 800b244:	701a      	strb	r2, [r3, #0]
 800b246:	e077      	b.n	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	212c      	movs	r1, #44	; 0x2c
 800b24e:	fb01 f303 	mul.w	r3, r1, r3
 800b252:	4413      	add	r3, r2
 800b254:	3361      	adds	r3, #97	; 0x61
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b05      	cmp	r3, #5
 800b25a:	d109      	bne.n	800b270 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	212c      	movs	r1, #44	; 0x2c
 800b262:	fb01 f303 	mul.w	r3, r1, r3
 800b266:	4413      	add	r3, r2
 800b268:	3360      	adds	r3, #96	; 0x60
 800b26a:	2205      	movs	r2, #5
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	e063      	b.n	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	212c      	movs	r1, #44	; 0x2c
 800b276:	fb01 f303 	mul.w	r3, r1, r3
 800b27a:	4413      	add	r3, r2
 800b27c:	3361      	adds	r3, #97	; 0x61
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b06      	cmp	r3, #6
 800b282:	d009      	beq.n	800b298 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	212c      	movs	r1, #44	; 0x2c
 800b28a:	fb01 f303 	mul.w	r3, r1, r3
 800b28e:	4413      	add	r3, r2
 800b290:	3361      	adds	r3, #97	; 0x61
 800b292:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800b294:	2b08      	cmp	r3, #8
 800b296:	d14f      	bne.n	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	212c      	movs	r1, #44	; 0x2c
 800b29e:	fb01 f303 	mul.w	r3, r1, r3
 800b2a2:	4413      	add	r3, r2
 800b2a4:	335c      	adds	r3, #92	; 0x5c
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	202c      	movs	r0, #44	; 0x2c
 800b2b0:	fb00 f303 	mul.w	r3, r0, r3
 800b2b4:	440b      	add	r3, r1
 800b2b6:	335c      	adds	r3, #92	; 0x5c
 800b2b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	212c      	movs	r1, #44	; 0x2c
 800b2c0:	fb01 f303 	mul.w	r3, r1, r3
 800b2c4:	4413      	add	r3, r2
 800b2c6:	335c      	adds	r3, #92	; 0x5c
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d912      	bls.n	800b2f4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	212c      	movs	r1, #44	; 0x2c
 800b2d4:	fb01 f303 	mul.w	r3, r1, r3
 800b2d8:	4413      	add	r3, r2
 800b2da:	335c      	adds	r3, #92	; 0x5c
 800b2dc:	2200      	movs	r2, #0
 800b2de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	212c      	movs	r1, #44	; 0x2c
 800b2e6:	fb01 f303 	mul.w	r3, r1, r3
 800b2ea:	4413      	add	r3, r2
 800b2ec:	3360      	adds	r3, #96	; 0x60
 800b2ee:	2204      	movs	r2, #4
 800b2f0:	701a      	strb	r2, [r3, #0]
 800b2f2:	e021      	b.n	800b338 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	212c      	movs	r1, #44	; 0x2c
 800b2fa:	fb01 f303 	mul.w	r3, r1, r3
 800b2fe:	4413      	add	r3, r2
 800b300:	3360      	adds	r3, #96	; 0x60
 800b302:	2202      	movs	r2, #2
 800b304:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	015a      	lsls	r2, r3, #5
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	4413      	add	r3, r2
 800b30e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b31c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b324:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	015a      	lsls	r2, r3, #5
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b332:	461a      	mov	r2, r3
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	015a      	lsls	r2, r3, #5
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	4413      	add	r3, r2
 800b340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b344:	461a      	mov	r2, r3
 800b346:	2302      	movs	r3, #2
 800b348:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	b2d9      	uxtb	r1, r3
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	202c      	movs	r0, #44	; 0x2c
 800b354:	fb00 f303 	mul.w	r3, r0, r3
 800b358:	4413      	add	r3, r2
 800b35a:	3360      	adds	r3, #96	; 0x60
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f00e faed 	bl	8019940 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800b366:	bf00      	nop
 800b368:	3720      	adds	r7, #32
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b08a      	sub	sp, #40	; 0x28
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	f003 030f 	and.w	r3, r3, #15
 800b38e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	0c5b      	lsrs	r3, r3, #17
 800b394:	f003 030f 	and.w	r3, r3, #15
 800b398:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	091b      	lsrs	r3, r3, #4
 800b39e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3a2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d004      	beq.n	800b3b4 <HCD_RXQLVL_IRQHandler+0x46>
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2b05      	cmp	r3, #5
 800b3ae:	f000 80a9 	beq.w	800b504 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800b3b2:	e0aa      	b.n	800b50a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f000 80a6 	beq.w	800b508 <HCD_RXQLVL_IRQHandler+0x19a>
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	212c      	movs	r1, #44	; 0x2c
 800b3c2:	fb01 f303 	mul.w	r3, r1, r3
 800b3c6:	4413      	add	r3, r2
 800b3c8:	3344      	adds	r3, #68	; 0x44
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 809b 	beq.w	800b508 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	212c      	movs	r1, #44	; 0x2c
 800b3d8:	fb01 f303 	mul.w	r3, r1, r3
 800b3dc:	4413      	add	r3, r2
 800b3de:	3350      	adds	r3, #80	; 0x50
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	441a      	add	r2, r3
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	202c      	movs	r0, #44	; 0x2c
 800b3ec:	fb00 f303 	mul.w	r3, r0, r3
 800b3f0:	440b      	add	r3, r1
 800b3f2:	334c      	adds	r3, #76	; 0x4c
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d87a      	bhi.n	800b4f0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6818      	ldr	r0, [r3, #0]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	212c      	movs	r1, #44	; 0x2c
 800b404:	fb01 f303 	mul.w	r3, r1, r3
 800b408:	4413      	add	r3, r2
 800b40a:	3344      	adds	r3, #68	; 0x44
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	b292      	uxth	r2, r2
 800b412:	4619      	mov	r1, r3
 800b414:	f008 f9eb 	bl	80137ee <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	212c      	movs	r1, #44	; 0x2c
 800b41e:	fb01 f303 	mul.w	r3, r1, r3
 800b422:	4413      	add	r3, r2
 800b424:	3344      	adds	r3, #68	; 0x44
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	441a      	add	r2, r3
 800b42c:	6879      	ldr	r1, [r7, #4]
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	202c      	movs	r0, #44	; 0x2c
 800b432:	fb00 f303 	mul.w	r3, r0, r3
 800b436:	440b      	add	r3, r1
 800b438:	3344      	adds	r3, #68	; 0x44
 800b43a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	212c      	movs	r1, #44	; 0x2c
 800b442:	fb01 f303 	mul.w	r3, r1, r3
 800b446:	4413      	add	r3, r2
 800b448:	3350      	adds	r3, #80	; 0x50
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	441a      	add	r2, r3
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	202c      	movs	r0, #44	; 0x2c
 800b456:	fb00 f303 	mul.w	r3, r0, r3
 800b45a:	440b      	add	r3, r1
 800b45c:	3350      	adds	r3, #80	; 0x50
 800b45e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	6a3b      	ldr	r3, [r7, #32]
 800b466:	4413      	add	r3, r2
 800b468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	0cdb      	lsrs	r3, r3, #19
 800b470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b474:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	212c      	movs	r1, #44	; 0x2c
 800b47c:	fb01 f303 	mul.w	r3, r1, r3
 800b480:	4413      	add	r3, r2
 800b482:	3340      	adds	r3, #64	; 0x40
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d13c      	bne.n	800b508 <HCD_RXQLVL_IRQHandler+0x19a>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d039      	beq.n	800b508 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	015a      	lsls	r2, r3, #5
 800b498:	6a3b      	ldr	r3, [r7, #32]
 800b49a:	4413      	add	r3, r2
 800b49c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4aa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4b2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	6a3b      	ldr	r3, [r7, #32]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	212c      	movs	r1, #44	; 0x2c
 800b4cc:	fb01 f303 	mul.w	r3, r1, r3
 800b4d0:	4413      	add	r3, r2
 800b4d2:	3354      	adds	r3, #84	; 0x54
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	f083 0301 	eor.w	r3, r3, #1
 800b4da:	b2d8      	uxtb	r0, r3
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	212c      	movs	r1, #44	; 0x2c
 800b4e2:	fb01 f303 	mul.w	r3, r1, r3
 800b4e6:	4413      	add	r3, r2
 800b4e8:	3354      	adds	r3, #84	; 0x54
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	701a      	strb	r2, [r3, #0]
      break;
 800b4ee:	e00b      	b.n	800b508 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	212c      	movs	r1, #44	; 0x2c
 800b4f6:	fb01 f303 	mul.w	r3, r1, r3
 800b4fa:	4413      	add	r3, r2
 800b4fc:	3360      	adds	r3, #96	; 0x60
 800b4fe:	2204      	movs	r2, #4
 800b500:	701a      	strb	r2, [r3, #0]
      break;
 800b502:	e001      	b.n	800b508 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800b504:	bf00      	nop
 800b506:	e000      	b.n	800b50a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800b508:	bf00      	nop
  }
}
 800b50a:	bf00      	nop
 800b50c:	3728      	adds	r7, #40	; 0x28
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b086      	sub	sp, #24
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b53e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f003 0302 	and.w	r3, r3, #2
 800b546:	2b02      	cmp	r3, #2
 800b548:	d10b      	bne.n	800b562 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b01      	cmp	r3, #1
 800b552:	d102      	bne.n	800b55a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f00e f9d7 	bl	8019908 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	f043 0302 	orr.w	r3, r3, #2
 800b560:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f003 0308 	and.w	r3, r3, #8
 800b568:	2b08      	cmp	r3, #8
 800b56a:	d132      	bne.n	800b5d2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f043 0308 	orr.w	r3, r3, #8
 800b572:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f003 0304 	and.w	r3, r3, #4
 800b57a:	2b04      	cmp	r3, #4
 800b57c:	d126      	bne.n	800b5cc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	2b02      	cmp	r3, #2
 800b584:	d113      	bne.n	800b5ae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b58c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b590:	d106      	bne.n	800b5a0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2102      	movs	r1, #2
 800b598:	4618      	mov	r0, r3
 800b59a:	f008 fa57 	bl	8013a4c <USB_InitFSLSPClkSel>
 800b59e:	e011      	b.n	800b5c4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f008 fa50 	bl	8013a4c <USB_InitFSLSPClkSel>
 800b5ac:	e00a      	b.n	800b5c4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d106      	bne.n	800b5c4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5bc:	461a      	mov	r2, r3
 800b5be:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b5c2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f00e f9cd 	bl	8019964 <HAL_HCD_PortEnabled_Callback>
 800b5ca:	e002      	b.n	800b5d2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f00e f9d7 	bl	8019980 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	2b20      	cmp	r3, #32
 800b5da:	d103      	bne.n	800b5e4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f043 0320 	orr.w	r3, r3, #32
 800b5e2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	6013      	str	r3, [r2, #0]
}
 800b5f0:	bf00      	nop
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e07f      	b.n	800b70a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d106      	bne.n	800b624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7f8 f8be 	bl	80037a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2224      	movs	r2, #36	; 0x24
 800b628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f022 0201 	bic.w	r2, r2, #1
 800b63a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b648:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	689a      	ldr	r2, [r3, #8]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b658:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d107      	bne.n	800b672 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689a      	ldr	r2, [r3, #8]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b66e:	609a      	str	r2, [r3, #8]
 800b670:	e006      	b.n	800b680 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689a      	ldr	r2, [r3, #8]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b67e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d104      	bne.n	800b692 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	6859      	ldr	r1, [r3, #4]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	4b1d      	ldr	r3, [pc, #116]	; (800b714 <HAL_I2C_Init+0x11c>)
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68da      	ldr	r2, [r3, #12]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b6b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	691a      	ldr	r2, [r3, #16]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	ea42 0103 	orr.w	r1, r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	021a      	lsls	r2, r3, #8
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	69d9      	ldr	r1, [r3, #28]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6a1a      	ldr	r2, [r3, #32]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	430a      	orrs	r2, r1
 800b6da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f042 0201 	orr.w	r2, r2, #1
 800b6ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2220      	movs	r2, #32
 800b6f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	02008000 	.word	0x02008000

0800b718 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d101      	bne.n	800b72a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	e021      	b.n	800b76e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2224      	movs	r2, #36	; 0x24
 800b72e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f022 0201 	bic.w	r2, r2, #1
 800b740:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7f8 f8a4 	bl	8003890 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
	...

0800b778 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af02      	add	r7, sp, #8
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	4608      	mov	r0, r1
 800b782:	4611      	mov	r1, r2
 800b784:	461a      	mov	r2, r3
 800b786:	4603      	mov	r3, r0
 800b788:	817b      	strh	r3, [r7, #10]
 800b78a:	460b      	mov	r3, r1
 800b78c:	813b      	strh	r3, [r7, #8]
 800b78e:	4613      	mov	r3, r2
 800b790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b20      	cmp	r3, #32
 800b79c:	f040 80f9 	bne.w	800b992 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <HAL_I2C_Mem_Write+0x34>
 800b7a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d105      	bne.n	800b7b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e0ed      	b.n	800b994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d101      	bne.n	800b7c6 <HAL_I2C_Mem_Write+0x4e>
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	e0e6      	b.n	800b994 <HAL_I2C_Mem_Write+0x21c>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b7ce:	f7fc f859 	bl	8007884 <HAL_GetTick>
 800b7d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	2319      	movs	r3, #25
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 fac3 	bl	800bd6c <I2C_WaitOnFlagUntilTimeout>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e0d1      	b.n	800b994 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2221      	movs	r2, #33	; 0x21
 800b7f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2240      	movs	r2, #64	; 0x40
 800b7fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2200      	movs	r2, #0
 800b804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6a3a      	ldr	r2, [r7, #32]
 800b80a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b818:	88f8      	ldrh	r0, [r7, #6]
 800b81a:	893a      	ldrh	r2, [r7, #8]
 800b81c:	8979      	ldrh	r1, [r7, #10]
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	4603      	mov	r3, r0
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 f9d3 	bl	800bbd4 <I2C_RequestMemoryWrite>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d005      	beq.n	800b840 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e0a9      	b.n	800b994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b844:	b29b      	uxth	r3, r3
 800b846:	2bff      	cmp	r3, #255	; 0xff
 800b848:	d90e      	bls.n	800b868 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	22ff      	movs	r2, #255	; 0xff
 800b84e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b854:	b2da      	uxtb	r2, r3
 800b856:	8979      	ldrh	r1, [r7, #10]
 800b858:	2300      	movs	r3, #0
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 fba5 	bl	800bfb0 <I2C_TransferConfig>
 800b866:	e00f      	b.n	800b888 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b876:	b2da      	uxtb	r2, r3
 800b878:	8979      	ldrh	r1, [r7, #10]
 800b87a:	2300      	movs	r3, #0
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f000 fb94 	bl	800bfb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f000 faad 	bl	800bdec <I2C_WaitOnTXISFlagUntilTimeout>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d001      	beq.n	800b89c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e07b      	b.n	800b994 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a0:	781a      	ldrb	r2, [r3, #0]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	1c5a      	adds	r2, r3, #1
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d034      	beq.n	800b940 <HAL_I2C_Mem_Write+0x1c8>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d130      	bne.n	800b940 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2180      	movs	r1, #128	; 0x80
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 fa3f 	bl	800bd6c <I2C_WaitOnFlagUntilTimeout>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e04d      	b.n	800b994 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	2bff      	cmp	r3, #255	; 0xff
 800b900:	d90e      	bls.n	800b920 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	22ff      	movs	r2, #255	; 0xff
 800b906:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b90c:	b2da      	uxtb	r2, r3
 800b90e:	8979      	ldrh	r1, [r7, #10]
 800b910:	2300      	movs	r3, #0
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f000 fb49 	bl	800bfb0 <I2C_TransferConfig>
 800b91e:	e00f      	b.n	800b940 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b924:	b29a      	uxth	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	8979      	ldrh	r1, [r7, #10]
 800b932:	2300      	movs	r3, #0
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 fb38 	bl	800bfb0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b944:	b29b      	uxth	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d19e      	bne.n	800b888 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f000 fa8c 	bl	800be6c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e01a      	b.n	800b994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2220      	movs	r2, #32
 800b964:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6859      	ldr	r1, [r3, #4]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <HAL_I2C_Mem_Write+0x224>)
 800b972:	400b      	ands	r3, r1
 800b974:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2220      	movs	r2, #32
 800b97a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	e000      	b.n	800b994 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b992:	2302      	movs	r3, #2
  }
}
 800b994:	4618      	mov	r0, r3
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	fe00e800 	.word	0xfe00e800

0800b9a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af02      	add	r7, sp, #8
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	817b      	strh	r3, [r7, #10]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	813b      	strh	r3, [r7, #8]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b20      	cmp	r3, #32
 800b9c4:	f040 80fd 	bne.w	800bbc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d002      	beq.n	800b9d4 <HAL_I2C_Mem_Read+0x34>
 800b9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d105      	bne.n	800b9e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e0f1      	b.n	800bbc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d101      	bne.n	800b9ee <HAL_I2C_Mem_Read+0x4e>
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e0ea      	b.n	800bbc4 <HAL_I2C_Mem_Read+0x224>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b9f6:	f7fb ff45 	bl	8007884 <HAL_GetTick>
 800b9fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	2319      	movs	r3, #25
 800ba02:	2201      	movs	r2, #1
 800ba04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f9af 	bl	800bd6c <I2C_WaitOnFlagUntilTimeout>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e0d5      	b.n	800bbc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2222      	movs	r2, #34	; 0x22
 800ba1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2240      	movs	r2, #64	; 0x40
 800ba24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6a3a      	ldr	r2, [r7, #32]
 800ba32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ba40:	88f8      	ldrh	r0, [r7, #6]
 800ba42:	893a      	ldrh	r2, [r7, #8]
 800ba44:	8979      	ldrh	r1, [r7, #10]
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	4603      	mov	r3, r0
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f913 	bl	800bc7c <I2C_RequestMemoryRead>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d005      	beq.n	800ba68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e0ad      	b.n	800bbc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	2bff      	cmp	r3, #255	; 0xff
 800ba70:	d90e      	bls.n	800ba90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	22ff      	movs	r2, #255	; 0xff
 800ba76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7c:	b2da      	uxtb	r2, r3
 800ba7e:	8979      	ldrh	r1, [r7, #10]
 800ba80:	4b52      	ldr	r3, [pc, #328]	; (800bbcc <HAL_I2C_Mem_Read+0x22c>)
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 fa91 	bl	800bfb0 <I2C_TransferConfig>
 800ba8e:	e00f      	b.n	800bab0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	8979      	ldrh	r1, [r7, #10]
 800baa2:	4b4a      	ldr	r3, [pc, #296]	; (800bbcc <HAL_I2C_Mem_Read+0x22c>)
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f000 fa80 	bl	800bfb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	2200      	movs	r2, #0
 800bab8:	2104      	movs	r1, #4
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f000 f956 	bl	800bd6c <I2C_WaitOnFlagUntilTimeout>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	e07c      	b.n	800bbc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad4:	b2d2      	uxtb	r2, r2
 800bad6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bae6:	3b01      	subs	r3, #1
 800bae8:	b29a      	uxth	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	3b01      	subs	r3, #1
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d034      	beq.n	800bb70 <HAL_I2C_Mem_Read+0x1d0>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d130      	bne.n	800bb70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb14:	2200      	movs	r2, #0
 800bb16:	2180      	movs	r1, #128	; 0x80
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f000 f927 	bl	800bd6c <I2C_WaitOnFlagUntilTimeout>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	e04d      	b.n	800bbc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	2bff      	cmp	r3, #255	; 0xff
 800bb30:	d90e      	bls.n	800bb50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	22ff      	movs	r2, #255	; 0xff
 800bb36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb3c:	b2da      	uxtb	r2, r3
 800bb3e:	8979      	ldrh	r1, [r7, #10]
 800bb40:	2300      	movs	r3, #0
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f000 fa31 	bl	800bfb0 <I2C_TransferConfig>
 800bb4e:	e00f      	b.n	800bb70 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	8979      	ldrh	r1, [r7, #10]
 800bb62:	2300      	movs	r3, #0
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f000 fa20 	bl	800bfb0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d19a      	bne.n	800bab0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 f974 	bl	800be6c <I2C_WaitOnSTOPFlagUntilTimeout>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e01a      	b.n	800bbc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2220      	movs	r2, #32
 800bb94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	6859      	ldr	r1, [r3, #4]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <HAL_I2C_Mem_Read+0x230>)
 800bba2:	400b      	ands	r3, r1
 800bba4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2220      	movs	r2, #32
 800bbaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	e000      	b.n	800bbc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bbc2:	2302      	movs	r3, #2
  }
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	80002400 	.word	0x80002400
 800bbd0:	fe00e800 	.word	0xfe00e800

0800bbd4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af02      	add	r7, sp, #8
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	4608      	mov	r0, r1
 800bbde:	4611      	mov	r1, r2
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	817b      	strh	r3, [r7, #10]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	813b      	strh	r3, [r7, #8]
 800bbea:	4613      	mov	r3, r2
 800bbec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	8979      	ldrh	r1, [r7, #10]
 800bbf4:	4b20      	ldr	r3, [pc, #128]	; (800bc78 <I2C_RequestMemoryWrite+0xa4>)
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f9d7 	bl	800bfb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc02:	69fa      	ldr	r2, [r7, #28]
 800bc04:	69b9      	ldr	r1, [r7, #24]
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f000 f8f0 	bl	800bdec <I2C_WaitOnTXISFlagUntilTimeout>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e02c      	b.n	800bc70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bc16:	88fb      	ldrh	r3, [r7, #6]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d105      	bne.n	800bc28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc1c:	893b      	ldrh	r3, [r7, #8]
 800bc1e:	b2da      	uxtb	r2, r3
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	629a      	str	r2, [r3, #40]	; 0x28
 800bc26:	e015      	b.n	800bc54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bc28:	893b      	ldrh	r3, [r7, #8]
 800bc2a:	0a1b      	lsrs	r3, r3, #8
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc36:	69fa      	ldr	r2, [r7, #28]
 800bc38:	69b9      	ldr	r1, [r7, #24]
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f000 f8d6 	bl	800bdec <I2C_WaitOnTXISFlagUntilTimeout>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e012      	b.n	800bc70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc4a:	893b      	ldrh	r3, [r7, #8]
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2180      	movs	r1, #128	; 0x80
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f000 f884 	bl	800bd6c <I2C_WaitOnFlagUntilTimeout>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e000      	b.n	800bc70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	80002000 	.word	0x80002000

0800bc7c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af02      	add	r7, sp, #8
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	4608      	mov	r0, r1
 800bc86:	4611      	mov	r1, r2
 800bc88:	461a      	mov	r2, r3
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	817b      	strh	r3, [r7, #10]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	813b      	strh	r3, [r7, #8]
 800bc92:	4613      	mov	r3, r2
 800bc94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bc96:	88fb      	ldrh	r3, [r7, #6]
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	8979      	ldrh	r1, [r7, #10]
 800bc9c:	4b20      	ldr	r3, [pc, #128]	; (800bd20 <I2C_RequestMemoryRead+0xa4>)
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	2300      	movs	r3, #0
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 f984 	bl	800bfb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bca8:	69fa      	ldr	r2, [r7, #28]
 800bcaa:	69b9      	ldr	r1, [r7, #24]
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 f89d 	bl	800bdec <I2C_WaitOnTXISFlagUntilTimeout>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d001      	beq.n	800bcbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e02c      	b.n	800bd16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bcbc:	88fb      	ldrh	r3, [r7, #6]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d105      	bne.n	800bcce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bcc2:	893b      	ldrh	r3, [r7, #8]
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	629a      	str	r2, [r3, #40]	; 0x28
 800bccc:	e015      	b.n	800bcfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bcce:	893b      	ldrh	r3, [r7, #8]
 800bcd0:	0a1b      	lsrs	r3, r3, #8
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcdc:	69fa      	ldr	r2, [r7, #28]
 800bcde:	69b9      	ldr	r1, [r7, #24]
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f000 f883 	bl	800bdec <I2C_WaitOnTXISFlagUntilTimeout>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e012      	b.n	800bd16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bcf0:	893b      	ldrh	r3, [r7, #8]
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	2200      	movs	r2, #0
 800bd02:	2140      	movs	r1, #64	; 0x40
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f831 	bl	800bd6c <I2C_WaitOnFlagUntilTimeout>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	e000      	b.n	800bd16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	80002000 	.word	0x80002000

0800bd24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	f003 0302 	and.w	r3, r3, #2
 800bd36:	2b02      	cmp	r3, #2
 800bd38:	d103      	bne.n	800bd42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	f003 0301 	and.w	r3, r3, #1
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d007      	beq.n	800bd60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	699a      	ldr	r2, [r3, #24]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f042 0201 	orr.w	r2, r2, #1
 800bd5e:	619a      	str	r2, [r3, #24]
  }
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	603b      	str	r3, [r7, #0]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd7c:	e022      	b.n	800bdc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd84:	d01e      	beq.n	800bdc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd86:	f7fb fd7d 	bl	8007884 <HAL_GetTick>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d302      	bcc.n	800bd9c <I2C_WaitOnFlagUntilTimeout+0x30>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d113      	bne.n	800bdc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bda0:	f043 0220 	orr.w	r2, r3, #32
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2220      	movs	r2, #32
 800bdac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e00f      	b.n	800bde4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	699a      	ldr	r2, [r3, #24]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	4013      	ands	r3, r2
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	bf0c      	ite	eq
 800bdd4:	2301      	moveq	r3, #1
 800bdd6:	2300      	movne	r3, #0
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	461a      	mov	r2, r3
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d0cd      	beq.n	800bd7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bdf8:	e02c      	b.n	800be54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	68b9      	ldr	r1, [r7, #8]
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f000 f870 	bl	800bee4 <I2C_IsAcknowledgeFailed>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e02a      	b.n	800be64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be14:	d01e      	beq.n	800be54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be16:	f7fb fd35 	bl	8007884 <HAL_GetTick>
 800be1a:	4602      	mov	r2, r0
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	429a      	cmp	r2, r3
 800be24:	d302      	bcc.n	800be2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d113      	bne.n	800be54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be30:	f043 0220 	orr.w	r2, r3, #32
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2220      	movs	r2, #32
 800be3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	e007      	b.n	800be64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	f003 0302 	and.w	r3, r3, #2
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d1cb      	bne.n	800bdfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800be78:	e028      	b.n	800becc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	68b9      	ldr	r1, [r7, #8]
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f000 f830 	bl	800bee4 <I2C_IsAcknowledgeFailed>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e026      	b.n	800bedc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be8e:	f7fb fcf9 	bl	8007884 <HAL_GetTick>
 800be92:	4602      	mov	r2, r0
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d302      	bcc.n	800bea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d113      	bne.n	800becc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea8:	f043 0220 	orr.w	r2, r3, #32
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2220      	movs	r2, #32
 800beb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	e007      	b.n	800bedc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	f003 0320 	and.w	r3, r3, #32
 800bed6:	2b20      	cmp	r3, #32
 800bed8:	d1cf      	bne.n	800be7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	699b      	ldr	r3, [r3, #24]
 800bef6:	f003 0310 	and.w	r3, r3, #16
 800befa:	2b10      	cmp	r3, #16
 800befc:	d151      	bne.n	800bfa2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800befe:	e022      	b.n	800bf46 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf06:	d01e      	beq.n	800bf46 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf08:	f7fb fcbc 	bl	8007884 <HAL_GetTick>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d302      	bcc.n	800bf1e <I2C_IsAcknowledgeFailed+0x3a>
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d113      	bne.n	800bf46 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf22:	f043 0220 	orr.w	r2, r3, #32
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2220      	movs	r2, #32
 800bf2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e02e      	b.n	800bfa4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	f003 0320 	and.w	r3, r3, #32
 800bf50:	2b20      	cmp	r3, #32
 800bf52:	d1d5      	bne.n	800bf00 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2210      	movs	r2, #16
 800bf5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2220      	movs	r2, #32
 800bf62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f7ff fedd 	bl	800bd24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	6859      	ldr	r1, [r3, #4]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	4b0d      	ldr	r3, [pc, #52]	; (800bfac <I2C_IsAcknowledgeFailed+0xc8>)
 800bf76:	400b      	ands	r3, r1
 800bf78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7e:	f043 0204 	orr.w	r2, r3, #4
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2220      	movs	r2, #32
 800bf8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e000      	b.n	800bfa4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	fe00e800 	.word	0xfe00e800

0800bfb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	607b      	str	r3, [r7, #4]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	817b      	strh	r3, [r7, #10]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	685a      	ldr	r2, [r3, #4]
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	0d5b      	lsrs	r3, r3, #21
 800bfcc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bfd0:	4b0d      	ldr	r3, [pc, #52]	; (800c008 <I2C_TransferConfig+0x58>)
 800bfd2:	430b      	orrs	r3, r1
 800bfd4:	43db      	mvns	r3, r3
 800bfd6:	ea02 0103 	and.w	r1, r2, r3
 800bfda:	897b      	ldrh	r3, [r7, #10]
 800bfdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bfe0:	7a7b      	ldrb	r3, [r7, #9]
 800bfe2:	041b      	lsls	r3, r3, #16
 800bfe4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	431a      	orrs	r2, r3
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	431a      	orrs	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	430a      	orrs	r2, r1
 800bff8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800bffa:	bf00      	nop
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	03ff63ff 	.word	0x03ff63ff

0800c00c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b20      	cmp	r3, #32
 800c020:	d138      	bne.n	800c094 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d101      	bne.n	800c030 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c02c:	2302      	movs	r3, #2
 800c02e:	e032      	b.n	800c096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2224      	movs	r2, #36	; 0x24
 800c03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f022 0201 	bic.w	r2, r2, #1
 800c04e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c05e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6819      	ldr	r1, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f042 0201 	orr.w	r2, r2, #1
 800c07e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2220      	movs	r2, #32
 800c084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	e000      	b.n	800c096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c094:	2302      	movs	r3, #2
  }
}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b085      	sub	sp, #20
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b20      	cmp	r3, #32
 800c0b6:	d139      	bne.n	800c12c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	e033      	b.n	800c12e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2224      	movs	r2, #36	; 0x24
 800c0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f022 0201 	bic.w	r2, r2, #1
 800c0e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c0f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	021b      	lsls	r3, r3, #8
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f042 0201 	orr.w	r2, r2, #1
 800c116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2220      	movs	r2, #32
 800c11c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c128:	2300      	movs	r3, #0
 800c12a:	e000      	b.n	800c12e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c12c:	2302      	movs	r3, #2
  }
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
	...

0800c13c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e0bf      	b.n	800c2ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d106      	bne.n	800c168 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7f7 fbd0 	bl	8003908 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2202      	movs	r2, #2
 800c16c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	699a      	ldr	r2, [r3, #24]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c17e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6999      	ldr	r1, [r3, #24]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	685a      	ldr	r2, [r3, #4]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c194:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	430a      	orrs	r2, r1
 800c1a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6899      	ldr	r1, [r3, #8]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	4b4a      	ldr	r3, [pc, #296]	; (800c2d8 <HAL_LTDC_Init+0x19c>)
 800c1b0:	400b      	ands	r3, r1
 800c1b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	695b      	ldr	r3, [r3, #20]
 800c1b8:	041b      	lsls	r3, r3, #16
 800c1ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6899      	ldr	r1, [r3, #8]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	699a      	ldr	r2, [r3, #24]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	431a      	orrs	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68d9      	ldr	r1, [r3, #12]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	4b3e      	ldr	r3, [pc, #248]	; (800c2d8 <HAL_LTDC_Init+0x19c>)
 800c1de:	400b      	ands	r3, r1
 800c1e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	69db      	ldr	r3, [r3, #28]
 800c1e6:	041b      	lsls	r3, r3, #16
 800c1e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68d9      	ldr	r1, [r3, #12]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a1a      	ldr	r2, [r3, #32]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	431a      	orrs	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	430a      	orrs	r2, r1
 800c1fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6919      	ldr	r1, [r3, #16]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	4b33      	ldr	r3, [pc, #204]	; (800c2d8 <HAL_LTDC_Init+0x19c>)
 800c20c:	400b      	ands	r3, r1
 800c20e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	041b      	lsls	r3, r3, #16
 800c216:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6919      	ldr	r1, [r3, #16]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	431a      	orrs	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	430a      	orrs	r2, r1
 800c22c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6959      	ldr	r1, [r3, #20]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	4b27      	ldr	r3, [pc, #156]	; (800c2d8 <HAL_LTDC_Init+0x19c>)
 800c23a:	400b      	ands	r3, r1
 800c23c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c242:	041b      	lsls	r3, r3, #16
 800c244:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	6959      	ldr	r1, [r3, #20]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	431a      	orrs	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	430a      	orrs	r2, r1
 800c25a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c262:	021b      	lsls	r3, r3, #8
 800c264:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c26c:	041b      	lsls	r3, r3, #16
 800c26e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c27e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c292:	431a      	orrs	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	430a      	orrs	r2, r1
 800c29a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f042 0206 	orr.w	r2, r2, #6
 800c2aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	699a      	ldr	r2, [r3, #24]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f042 0201 	orr.w	r2, r2, #1
 800c2ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	f000f800 	.word	0xf000f800

0800c2dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c2dc:	b5b0      	push	{r4, r5, r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d101      	bne.n	800c2f6 <HAL_LTDC_ConfigLayer+0x1a>
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	e02c      	b.n	800c350 <HAL_LTDC_ConfigLayer+0x74>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2202      	movs	r2, #2
 800c302:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2134      	movs	r1, #52	; 0x34
 800c30c:	fb01 f303 	mul.w	r3, r1, r3
 800c310:	4413      	add	r3, r2
 800c312:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	4614      	mov	r4, r2
 800c31a:	461d      	mov	r5, r3
 800c31c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c31e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f000 f847 	bl	800c3c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2201      	movs	r2, #1
 800c33c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2201      	movs	r2, #1
 800c342:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bdb0      	pop	{r4, r5, r7, pc}

0800c358 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d101      	bne.n	800c372 <HAL_LTDC_SetAddress+0x1a>
 800c36e:	2302      	movs	r3, #2
 800c370:	e024      	b.n	800c3bc <HAL_LTDC_SetAddress+0x64>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2201      	movs	r2, #1
 800c376:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2202      	movs	r2, #2
 800c37e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2234      	movs	r2, #52	; 0x34
 800c386:	fb02 f303 	mul.w	r3, r2, r3
 800c38a:	3338      	adds	r3, #56	; 0x38
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	4413      	add	r3, r2
 800c390:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	68ba      	ldr	r2, [r7, #8]
 800c396:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	6979      	ldr	r1, [r7, #20]
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 f811 	bl	800c3c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b089      	sub	sp, #36	; 0x24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	0c1b      	lsrs	r3, r3, #16
 800c3dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3e0:	4413      	add	r3, r2
 800c3e2:	041b      	lsls	r3, r3, #16
 800c3e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	01db      	lsls	r3, r3, #7
 800c3f0:	4413      	add	r3, r2
 800c3f2:	3384      	adds	r3, #132	; 0x84
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	6812      	ldr	r2, [r2, #0]
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	01d2      	lsls	r2, r2, #7
 800c400:	440a      	add	r2, r1
 800c402:	3284      	adds	r2, #132	; 0x84
 800c404:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c408:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	0c1b      	lsrs	r3, r3, #16
 800c416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c41a:	4413      	add	r3, r2
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4619      	mov	r1, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	01db      	lsls	r3, r3, #7
 800c428:	440b      	add	r3, r1
 800c42a:	3384      	adds	r3, #132	; 0x84
 800c42c:	4619      	mov	r1, r3
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	4313      	orrs	r3, r2
 800c432:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	68da      	ldr	r2, [r3, #12]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c442:	4413      	add	r3, r2
 800c444:	041b      	lsls	r3, r3, #16
 800c446:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	461a      	mov	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	01db      	lsls	r3, r3, #7
 800c452:	4413      	add	r3, r2
 800c454:	3384      	adds	r3, #132	; 0x84
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	6812      	ldr	r2, [r2, #0]
 800c45c:	4611      	mov	r1, r2
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	01d2      	lsls	r2, r2, #7
 800c462:	440a      	add	r2, r1
 800c464:	3284      	adds	r2, #132	; 0x84
 800c466:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c46a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c47a:	4413      	add	r3, r2
 800c47c:	1c5a      	adds	r2, r3, #1
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4619      	mov	r1, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	01db      	lsls	r3, r3, #7
 800c488:	440b      	add	r3, r1
 800c48a:	3384      	adds	r3, #132	; 0x84
 800c48c:	4619      	mov	r1, r3
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	4313      	orrs	r3, r2
 800c492:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	01db      	lsls	r3, r3, #7
 800c49e:	4413      	add	r3, r2
 800c4a0:	3384      	adds	r3, #132	; 0x84
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	6812      	ldr	r2, [r2, #0]
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	01d2      	lsls	r2, r2, #7
 800c4ae:	440a      	add	r2, r1
 800c4b0:	3284      	adds	r2, #132	; 0x84
 800c4b2:	f023 0307 	bic.w	r3, r3, #7
 800c4b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	01db      	lsls	r3, r3, #7
 800c4c2:	4413      	add	r3, r2
 800c4c4:	3384      	adds	r3, #132	; 0x84
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4d4:	021b      	lsls	r3, r3, #8
 800c4d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c4de:	041b      	lsls	r3, r3, #16
 800c4e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	061b      	lsls	r3, r3, #24
 800c4e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	01db      	lsls	r3, r3, #7
 800c4f4:	4413      	add	r3, r2
 800c4f6:	3384      	adds	r3, #132	; 0x84
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	461a      	mov	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	01db      	lsls	r3, r3, #7
 800c504:	4413      	add	r3, r2
 800c506:	3384      	adds	r3, #132	; 0x84
 800c508:	461a      	mov	r2, r3
 800c50a:	2300      	movs	r3, #0
 800c50c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c514:	461a      	mov	r2, r3
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	431a      	orrs	r2, r3
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	431a      	orrs	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4619      	mov	r1, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	01db      	lsls	r3, r3, #7
 800c528:	440b      	add	r3, r1
 800c52a:	3384      	adds	r3, #132	; 0x84
 800c52c:	4619      	mov	r1, r3
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	4313      	orrs	r3, r2
 800c532:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	461a      	mov	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	01db      	lsls	r3, r3, #7
 800c53e:	4413      	add	r3, r2
 800c540:	3384      	adds	r3, #132	; 0x84
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	6812      	ldr	r2, [r2, #0]
 800c548:	4611      	mov	r1, r2
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	01d2      	lsls	r2, r2, #7
 800c54e:	440a      	add	r2, r1
 800c550:	3284      	adds	r2, #132	; 0x84
 800c552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c556:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	461a      	mov	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	01db      	lsls	r3, r3, #7
 800c562:	4413      	add	r3, r2
 800c564:	3384      	adds	r3, #132	; 0x84
 800c566:	461a      	mov	r2, r3
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	695b      	ldr	r3, [r3, #20]
 800c56c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	461a      	mov	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	01db      	lsls	r3, r3, #7
 800c578:	4413      	add	r3, r2
 800c57a:	3384      	adds	r3, #132	; 0x84
 800c57c:	69da      	ldr	r2, [r3, #28]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4619      	mov	r1, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	01db      	lsls	r3, r3, #7
 800c588:	440b      	add	r3, r1
 800c58a:	3384      	adds	r3, #132	; 0x84
 800c58c:	4619      	mov	r1, r3
 800c58e:	4b58      	ldr	r3, [pc, #352]	; (800c6f0 <LTDC_SetConfig+0x32c>)
 800c590:	4013      	ands	r3, r2
 800c592:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	69da      	ldr	r2, [r3, #28]
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	6a1b      	ldr	r3, [r3, #32]
 800c59c:	68f9      	ldr	r1, [r7, #12]
 800c59e:	6809      	ldr	r1, [r1, #0]
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	01c9      	lsls	r1, r1, #7
 800c5a6:	4401      	add	r1, r0
 800c5a8:	3184      	adds	r1, #132	; 0x84
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	01db      	lsls	r3, r3, #7
 800c5b8:	4413      	add	r3, r2
 800c5ba:	3384      	adds	r3, #132	; 0x84
 800c5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	01db      	lsls	r3, r3, #7
 800c5c8:	4413      	add	r3, r2
 800c5ca:	3384      	adds	r3, #132	; 0x84
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	01db      	lsls	r3, r3, #7
 800c5dc:	4413      	add	r3, r2
 800c5de:	3384      	adds	r3, #132	; 0x84
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d102      	bne.n	800c5f6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800c5f0:	2304      	movs	r3, #4
 800c5f2:	61fb      	str	r3, [r7, #28]
 800c5f4:	e01b      	b.n	800c62e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d102      	bne.n	800c604 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800c5fe:	2303      	movs	r3, #3
 800c600:	61fb      	str	r3, [r7, #28]
 800c602:	e014      	b.n	800c62e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	2b04      	cmp	r3, #4
 800c60a:	d00b      	beq.n	800c624 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c610:	2b02      	cmp	r3, #2
 800c612:	d007      	beq.n	800c624 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d003      	beq.n	800c624 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c620:	2b07      	cmp	r3, #7
 800c622:	d102      	bne.n	800c62a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800c624:	2302      	movs	r3, #2
 800c626:	61fb      	str	r3, [r7, #28]
 800c628:	e001      	b.n	800c62e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800c62a:	2301      	movs	r3, #1
 800c62c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	461a      	mov	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	01db      	lsls	r3, r3, #7
 800c638:	4413      	add	r3, r2
 800c63a:	3384      	adds	r3, #132	; 0x84
 800c63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	6812      	ldr	r2, [r2, #0]
 800c642:	4611      	mov	r1, r2
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	01d2      	lsls	r2, r2, #7
 800c648:	440a      	add	r2, r1
 800c64a:	3284      	adds	r2, #132	; 0x84
 800c64c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c650:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c656:	69fa      	ldr	r2, [r7, #28]
 800c658:	fb02 f303 	mul.w	r3, r2, r3
 800c65c:	041a      	lsls	r2, r3, #16
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	6859      	ldr	r1, [r3, #4]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	1acb      	subs	r3, r1, r3
 800c668:	69f9      	ldr	r1, [r7, #28]
 800c66a:	fb01 f303 	mul.w	r3, r1, r3
 800c66e:	3303      	adds	r3, #3
 800c670:	68f9      	ldr	r1, [r7, #12]
 800c672:	6809      	ldr	r1, [r1, #0]
 800c674:	4608      	mov	r0, r1
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	01c9      	lsls	r1, r1, #7
 800c67a:	4401      	add	r1, r0
 800c67c:	3184      	adds	r1, #132	; 0x84
 800c67e:	4313      	orrs	r3, r2
 800c680:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	01db      	lsls	r3, r3, #7
 800c68c:	4413      	add	r3, r2
 800c68e:	3384      	adds	r3, #132	; 0x84
 800c690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4619      	mov	r1, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	01db      	lsls	r3, r3, #7
 800c69c:	440b      	add	r3, r1
 800c69e:	3384      	adds	r3, #132	; 0x84
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	4b14      	ldr	r3, [pc, #80]	; (800c6f4 <LTDC_SetConfig+0x330>)
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	01db      	lsls	r3, r3, #7
 800c6b2:	4413      	add	r3, r2
 800c6b4:	3384      	adds	r3, #132	; 0x84
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	01db      	lsls	r3, r3, #7
 800c6c8:	4413      	add	r3, r2
 800c6ca:	3384      	adds	r3, #132	; 0x84
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	6812      	ldr	r2, [r2, #0]
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	01d2      	lsls	r2, r2, #7
 800c6d8:	440a      	add	r2, r1
 800c6da:	3284      	adds	r2, #132	; 0x84
 800c6dc:	f043 0301 	orr.w	r3, r3, #1
 800c6e0:	6013      	str	r3, [r2, #0]
}
 800c6e2:	bf00      	nop
 800c6e4:	3724      	adds	r7, #36	; 0x24
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	fffff8f8 	.word	0xfffff8f8
 800c6f4:	fffff800 	.word	0xfffff800

0800c6f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c6fc:	4b05      	ldr	r3, [pc, #20]	; (800c714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a04      	ldr	r2, [pc, #16]	; (800c714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c706:	6013      	str	r3, [r2, #0]
}
 800c708:	bf00      	nop
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	40007000 	.word	0x40007000

0800c718 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c722:	4b23      	ldr	r3, [pc, #140]	; (800c7b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c726:	4a22      	ldr	r2, [pc, #136]	; (800c7b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c72c:	6413      	str	r3, [r2, #64]	; 0x40
 800c72e:	4b20      	ldr	r3, [pc, #128]	; (800c7b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c736:	603b      	str	r3, [r7, #0]
 800c738:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c73a:	4b1e      	ldr	r3, [pc, #120]	; (800c7b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a1d      	ldr	r2, [pc, #116]	; (800c7b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c744:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c746:	f7fb f89d 	bl	8007884 <HAL_GetTick>
 800c74a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c74c:	e009      	b.n	800c762 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c74e:	f7fb f899 	bl	8007884 <HAL_GetTick>
 800c752:	4602      	mov	r2, r0
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c75c:	d901      	bls.n	800c762 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c75e:	2303      	movs	r3, #3
 800c760:	e022      	b.n	800c7a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c762:	4b14      	ldr	r3, [pc, #80]	; (800c7b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c76a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c76e:	d1ee      	bne.n	800c74e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c770:	4b10      	ldr	r3, [pc, #64]	; (800c7b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a0f      	ldr	r2, [pc, #60]	; (800c7b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c77a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c77c:	f7fb f882 	bl	8007884 <HAL_GetTick>
 800c780:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c782:	e009      	b.n	800c798 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c784:	f7fb f87e 	bl	8007884 <HAL_GetTick>
 800c788:	4602      	mov	r2, r0
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c792:	d901      	bls.n	800c798 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c794:	2303      	movs	r3, #3
 800c796:	e007      	b.n	800c7a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c798:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7a4:	d1ee      	bne.n	800c784 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	40023800 	.word	0x40023800
 800c7b4:	40007000 	.word	0x40007000

0800c7b8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af02      	add	r7, sp, #8
 800c7be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c7c0:	f7fb f860 	bl	8007884 <HAL_GetTick>
 800c7c4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e067      	b.n	800c8a0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10b      	bne.n	800c7f4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7f7 f94f 	bl	8003a88 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c7ea:	f241 3188 	movw	r1, #5000	; 0x1388
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fda8 	bl	800d344 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	3b01      	subs	r3, #1
 800c804:	021a      	lsls	r2, r3, #8
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	430a      	orrs	r2, r1
 800c80c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2200      	movs	r2, #0
 800c818:	2120      	movs	r1, #32
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 fdd3 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800c820:	4603      	mov	r3, r0
 800c822:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c824:	7afb      	ldrb	r3, [r7, #11]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d135      	bne.n	800c896 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	4b1d      	ldr	r3, [pc, #116]	; (800c8a8 <HAL_QSPI_Init+0xf0>)
 800c832:	4013      	ands	r3, r2
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	6852      	ldr	r2, [r2, #4]
 800c838:	0611      	lsls	r1, r2, #24
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	68d2      	ldr	r2, [r2, #12]
 800c83e:	4311      	orrs	r1, r2
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	69d2      	ldr	r2, [r2, #28]
 800c844:	4311      	orrs	r1, r2
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	6a12      	ldr	r2, [r2, #32]
 800c84a:	4311      	orrs	r1, r2
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	6812      	ldr	r2, [r2, #0]
 800c850:	430b      	orrs	r3, r1
 800c852:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	4b14      	ldr	r3, [pc, #80]	; (800c8ac <HAL_QSPI_Init+0xf4>)
 800c85c:	4013      	ands	r3, r2
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	6912      	ldr	r2, [r2, #16]
 800c862:	0411      	lsls	r1, r2, #16
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	6952      	ldr	r2, [r2, #20]
 800c868:	4311      	orrs	r1, r2
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	6992      	ldr	r2, [r2, #24]
 800c86e:	4311      	orrs	r1, r2
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6812      	ldr	r2, [r2, #0]
 800c874:	430b      	orrs	r3, r1
 800c876:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f042 0201 	orr.w	r2, r2, #1
 800c886:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c89e:	7afb      	ldrb	r3, [r7, #11]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	00ffff2f 	.word	0x00ffff2f
 800c8ac:	ffe0f8fe 	.word	0xffe0f8fe

0800c8b0 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	f003 0304 	and.w	r3, r3, #4
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d064      	beq.n	800c99c <HAL_QSPI_IRQHandler+0xec>
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d05f      	beq.n	800c99c <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	3320      	adds	r3, #32
 800c8e2:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b12      	cmp	r3, #18
 800c8ee:	d125      	bne.n	800c93c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c8f0:	e01c      	b.n	800c92c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00f      	beq.n	800c91a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fe:	781a      	ldrb	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c912:	1e5a      	subs	r2, r3, #1
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	62da      	str	r2, [r3, #44]	; 0x2c
 800c918:	e008      	b.n	800c92c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c928:	601a      	str	r2, [r3, #0]
          break;
 800c92a:	e033      	b.n	800c994 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	f003 0304 	and.w	r3, r3, #4
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1db      	bne.n	800c8f2 <HAL_QSPI_IRQHandler+0x42>
 800c93a:	e02b      	b.n	800c994 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c942:	b2db      	uxtb	r3, r3
 800c944:	2b22      	cmp	r3, #34	; 0x22
 800c946:	d125      	bne.n	800c994 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c948:	e01d      	b.n	800c986 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d010      	beq.n	800c974 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	7812      	ldrb	r2, [r2, #0]
 800c95a:	b2d2      	uxtb	r2, r2
 800c95c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96c:	1e5a      	subs	r2, r3, #1
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	639a      	str	r2, [r3, #56]	; 0x38
 800c972:	e008      	b.n	800c986 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c982:	601a      	str	r2, [r3, #0]
          break;
 800c984:	e006      	b.n	800c994 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	f003 0304 	and.w	r3, r3, #4
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1da      	bne.n	800c94a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fbed 	bl	800d174 <HAL_QSPI_FifoThresholdCallback>
 800c99a:	e142      	b.n	800cc22 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	f003 0302 	and.w	r3, r3, #2
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f000 80b6 	beq.w	800cb14 <HAL_QSPI_IRQHandler+0x264>
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 80b0 	beq.w	800cb14 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2202      	movs	r2, #2
 800c9ba:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800c9ca:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	2b12      	cmp	r3, #18
 800c9d6:	d123      	bne.n	800ca20 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f003 0304 	and.w	r3, r3, #4
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d011      	beq.n	800ca0a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f022 0204 	bic.w	r2, r2, #4
 800c9f4:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f022 0201 	bic.w	r2, r2, #1
 800ca08:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fc3e 	bl	800d28c <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fba1 	bl	800d160 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ca1e:	e0fd      	b.n	800cc1c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	2b22      	cmp	r3, #34	; 0x22
 800ca2a:	d146      	bne.n	800caba <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 0304 	and.w	r3, r3, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d012      	beq.n	800ca60 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f022 0204 	bic.w	r2, r2, #4
 800ca48:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f022 0201 	bic.w	r2, r2, #1
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	e021      	b.n	800caa4 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3320      	adds	r3, #32
 800ca66:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ca68:	e013      	b.n	800ca92 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d017      	beq.n	800caa2 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	7812      	ldrb	r2, [r2, #0]
 800ca7a:	b2d2      	uxtb	r2, r2
 800ca7c:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca82:	1c5a      	adds	r2, r3, #1
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8c:	1e5a      	subs	r2, r3, #1
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1e4      	bne.n	800ca6a <HAL_QSPI_IRQHandler+0x1ba>
 800caa0:	e000      	b.n	800caa4 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800caa2:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fbf1 	bl	800d28c <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fb4a 	bl	800d14c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cab8:	e0b0      	b.n	800cc1c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d107      	bne.n	800cad6 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fb32 	bl	800d138 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cad4:	e0a2      	b.n	800cc1c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	2b08      	cmp	r3, #8
 800cae0:	f040 809c 	bne.w	800cc1c <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	695a      	ldr	r2, [r3, #20]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800caf2:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d103      	bne.n	800cb0c <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 fb0d 	bl	800d124 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cb0a:	e087      	b.n	800cc1c <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 faff 	bl	800d110 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cb12:	e083      	b.n	800cc1c <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f003 0308 	and.w	r3, r3, #8
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d01f      	beq.n	800cb5e <HAL_QSPI_IRQHandler+0x2ae>
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01a      	beq.n	800cb5e <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2208      	movs	r2, #8
 800cb2e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00b      	beq.n	800cb56 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800cb4c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fb16 	bl	800d188 <HAL_QSPI_StatusMatchCallback>
 800cb5c:	e061      	b.n	800cc22 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d047      	beq.n	800cbf8 <HAL_QSPI_IRQHandler+0x348>
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d042      	beq.n	800cbf8 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2201      	movs	r2, #1
 800cb78:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800cb88:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb8e:	f043 0202 	orr.w	r2, r3, #2
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f003 0304 	and.w	r3, r3, #4
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d021      	beq.n	800cbe8 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f022 0204 	bic.w	r2, r2, #4
 800cbb2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbb8:	4a1c      	ldr	r2, [pc, #112]	; (800cc2c <HAL_QSPI_IRQHandler+0x37c>)
 800cbba:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fb fe59 	bl	8008878 <HAL_DMA_Abort_IT>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d029      	beq.n	800cc20 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd0:	f043 0204 	orr.w	r2, r3, #4
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fa95 	bl	800d110 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cbe6:	e01b      	b.n	800cc20 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fa8d 	bl	800d110 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cbf6:	e013      	b.n	800cc20 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	f003 0310 	and.w	r3, r3, #16
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00f      	beq.n	800cc22 <HAL_QSPI_IRQHandler+0x372>
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00a      	beq.n	800cc22 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2210      	movs	r2, #16
 800cc12:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 fac1 	bl	800d19c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800cc1a:	e002      	b.n	800cc22 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cc1c:	bf00      	nop
 800cc1e:	e000      	b.n	800cc22 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cc20:	bf00      	nop
}
 800cc22:	bf00      	nop
 800cc24:	3718      	adds	r7, #24
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	0800d361 	.word	0x0800d361

0800cc30 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b088      	sub	sp, #32
 800cc34:	af02      	add	r7, sp, #8
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800cc3c:	f7fa fe22 	bl	8007884 <HAL_GetTick>
 800cc40:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d101      	bne.n	800cc52 <HAL_QSPI_Command+0x22>
 800cc4e:	2302      	movs	r3, #2
 800cc50:	e048      	b.n	800cce4 <HAL_QSPI_Command+0xb4>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2201      	movs	r2, #1
 800cc56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d137      	bne.n	800ccd6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2202      	movs	r2, #2
 800cc70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	2120      	movs	r1, #32
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 fba1 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800cc84:	4603      	mov	r3, r0
 800cc86:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d125      	bne.n	800ccda <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cc8e:	2200      	movs	r2, #0
 800cc90:	68b9      	ldr	r1, [r7, #8]
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f000 fbce 	bl	800d434 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d115      	bne.n	800cccc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	2201      	movs	r2, #1
 800cca8:	2102      	movs	r1, #2
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f000 fb8b 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800ccb4:	7dfb      	ldrb	r3, [r7, #23]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10f      	bne.n	800ccda <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2202      	movs	r2, #2
 800ccc0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ccca:	e006      	b.n	800ccda <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ccd4:	e001      	b.n	800ccda <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3718      	adds	r7, #24
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08a      	sub	sp, #40	; 0x28
 800ccf0:	af02      	add	r7, sp, #8
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ccfc:	f7fa fdc2 	bl	8007884 <HAL_GetTick>
 800cd00:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3320      	adds	r3, #32
 800cd08:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d101      	bne.n	800cd1a <HAL_QSPI_Transmit+0x2e>
 800cd16:	2302      	movs	r3, #2
 800cd18:	e07b      	b.n	800ce12 <HAL_QSPI_Transmit+0x126>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d16a      	bne.n	800ce04 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d05b      	beq.n	800cdf2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2212      	movs	r2, #18
 800cd3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	691b      	ldr	r3, [r3, #16]
 800cd54:	1c5a      	adds	r2, r3, #1
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	695a      	ldr	r2, [r3, #20]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800cd6e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800cd70:	e01b      	b.n	800cdaa <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	2104      	movs	r1, #4
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 fb22 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800cd82:	4603      	mov	r3, r0
 800cd84:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800cd86:	7ffb      	ldrb	r3, [r7, #31]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d113      	bne.n	800cdb4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd90:	781a      	ldrb	r2, [r3, #0]
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda4:	1e5a      	subs	r2, r3, #1
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1df      	bne.n	800cd72 <HAL_QSPI_Transmit+0x86>
 800cdb2:	e000      	b.n	800cdb6 <HAL_QSPI_Transmit+0xca>
          break;
 800cdb4:	bf00      	nop
      }

      if (status == HAL_OK)
 800cdb6:	7ffb      	ldrb	r3, [r7, #31]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d115      	bne.n	800cde8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	2102      	movs	r1, #2
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f000 fafd 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800cdd0:	7ffb      	ldrb	r3, [r7, #31]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d108      	bne.n	800cde8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2202      	movs	r2, #2
 800cddc:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 f9e6 	bl	800d1b0 <HAL_QSPI_Abort>
 800cde4:	4603      	mov	r3, r0
 800cde6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdf0:	e00a      	b.n	800ce08 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdf6:	f043 0208 	orr.w	r2, r3, #8
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	77fb      	strb	r3, [r7, #31]
 800ce02:	e001      	b.n	800ce08 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ce04:	2302      	movs	r3, #2
 800ce06:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800ce10:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3720      	adds	r7, #32
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b08a      	sub	sp, #40	; 0x28
 800ce1e:	af02      	add	r7, sp, #8
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce26:	2300      	movs	r3, #0
 800ce28:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ce2a:	f7fa fd2b 	bl	8007884 <HAL_GetTick>
 800ce2e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3320      	adds	r3, #32
 800ce3e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d101      	bne.n	800ce50 <HAL_QSPI_Receive+0x36>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e082      	b.n	800cf56 <HAL_QSPI_Receive+0x13c>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d171      	bne.n	800cf48 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d062      	beq.n	800cf36 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2222      	movs	r2, #34	; 0x22
 800ce74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	1c5a      	adds	r2, r3, #1
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	691b      	ldr	r3, [r3, #16]
 800ce8a:	1c5a      	adds	r2, r3, #1
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	68ba      	ldr	r2, [r7, #8]
 800ce94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800cea8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	697a      	ldr	r2, [r7, #20]
 800ceb0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800ceb2:	e01c      	b.n	800ceee <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	2201      	movs	r2, #1
 800cebc:	2106      	movs	r1, #6
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f000 fa81 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800cec4:	4603      	mov	r3, r0
 800cec6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800cec8:	7ffb      	ldrb	r3, [r7, #31]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d114      	bne.n	800cef8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	7812      	ldrb	r2, [r2, #0]
 800ced6:	b2d2      	uxtb	r2, r2
 800ced8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cede:	1c5a      	adds	r2, r3, #1
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee8:	1e5a      	subs	r2, r3, #1
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1de      	bne.n	800ceb4 <HAL_QSPI_Receive+0x9a>
 800cef6:	e000      	b.n	800cefa <HAL_QSPI_Receive+0xe0>
          break;
 800cef8:	bf00      	nop
      }

      if (status == HAL_OK)
 800cefa:	7ffb      	ldrb	r3, [r7, #31]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d115      	bne.n	800cf2c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	9300      	str	r3, [sp, #0]
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	2201      	movs	r2, #1
 800cf08:	2102      	movs	r1, #2
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f000 fa5b 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800cf10:	4603      	mov	r3, r0
 800cf12:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800cf14:	7ffb      	ldrb	r3, [r7, #31]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d108      	bne.n	800cf2c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2202      	movs	r2, #2
 800cf20:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f000 f944 	bl	800d1b0 <HAL_QSPI_Abort>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf34:	e00a      	b.n	800cf4c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf3a:	f043 0208 	orr.w	r2, r3, #8
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	77fb      	strb	r3, [r7, #31]
 800cf46:	e001      	b.n	800cf4c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800cf48:	2302      	movs	r3, #2
 800cf4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800cf54:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3720      	adds	r7, #32
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b088      	sub	sp, #32
 800cf62:	af02      	add	r7, sp, #8
 800cf64:	60f8      	str	r0, [r7, #12]
 800cf66:	60b9      	str	r1, [r7, #8]
 800cf68:	607a      	str	r2, [r7, #4]
 800cf6a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800cf6c:	f7fa fc8a 	bl	8007884 <HAL_GetTick>
 800cf70:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d101      	bne.n	800cf82 <HAL_QSPI_AutoPolling+0x24>
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e060      	b.n	800d044 <HAL_QSPI_AutoPolling+0xe6>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d14f      	bne.n	800d036 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2242      	movs	r2, #66	; 0x42
 800cfa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	2120      	movs	r1, #32
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f000 fa09 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800cfb8:	7dfb      	ldrb	r3, [r7, #23]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d13d      	bne.n	800d03a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	6812      	ldr	r2, [r2, #0]
 800cfc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	6852      	ldr	r2, [r2, #4]
 800cfd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	6892      	ldr	r2, [r2, #8]
 800cfda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	431a      	orrs	r2, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800cff4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	68da      	ldr	r2, [r3, #12]
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cffe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d002:	68b9      	ldr	r1, [r7, #8]
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f000 fa15 	bl	800d434 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	2201      	movs	r2, #1
 800d012:	2108      	movs	r1, #8
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f000 f9d6 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800d01a:	4603      	mov	r3, r0
 800d01c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800d01e:	7dfb      	ldrb	r3, [r7, #23]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10a      	bne.n	800d03a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2208      	movs	r2, #8
 800d02a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d034:	e001      	b.n	800d03a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800d036:	2302      	movs	r3, #2
 800d038:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d042:	7dfb      	ldrb	r3, [r7, #23]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3718      	adds	r7, #24
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b088      	sub	sp, #32
 800d050:	af02      	add	r7, sp, #8
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d058:	f7fa fc14 	bl	8007884 <HAL_GetTick>
 800d05c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d064:	b2db      	uxtb	r3, r3
 800d066:	2b01      	cmp	r3, #1
 800d068:	d101      	bne.n	800d06e <HAL_QSPI_MemoryMapped+0x22>
 800d06a:	2302      	movs	r3, #2
 800d06c:	e04c      	b.n	800d108 <HAL_QSPI_MemoryMapped+0xbc>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2201      	movs	r2, #1
 800d072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d13b      	bne.n	800d0fa <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2200      	movs	r2, #0
 800d086:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2282      	movs	r2, #130	; 0x82
 800d08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	2200      	movs	r2, #0
 800d09a:	2120      	movs	r1, #32
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f000 f992 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800d0a6:	7dfb      	ldrb	r3, [r7, #23]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d128      	bne.n	800d0fe <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f023 0108 	bic.w	r1, r3, #8
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	685a      	ldr	r2, [r3, #4]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	430a      	orrs	r2, r1
 800d0c0:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	2b08      	cmp	r3, #8
 800d0c8:	d110      	bne.n	800d0ec <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	6812      	ldr	r2, [r2, #0]
 800d0d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2210      	movs	r2, #16
 800d0da:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d0ea:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d0ec:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800d0f0:	68b9      	ldr	r1, [r7, #8]
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f000 f99e 	bl	800d434 <QSPI_Config>
 800d0f8:	e001      	b.n	800d0fe <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d106:	7dfb      	ldrb	r3, [r7, #23]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3718      	adds	r7, #24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800d12c:	bf00      	nop
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800d154:	bf00      	nop
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800d1a4:	bf00      	nop
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800d1bc:	f7fa fb62 	bl	8007884 <HAL_GetTick>
 800d1c0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d056      	beq.n	800d280 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 0304 	and.w	r3, r3, #4
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d017      	beq.n	800d218 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f022 0204 	bic.w	r2, r2, #4
 800d1f6:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fb facb 	bl	8008798 <HAL_DMA_Abort>
 800d202:	4603      	mov	r3, r0
 800d204:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800d206:	7bfb      	ldrb	r3, [r7, #15]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d210:	f043 0204 	orr.w	r2, r3, #4
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f042 0202 	orr.w	r2, r2, #2
 800d226:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	2201      	movs	r2, #1
 800d232:	2102      	movs	r1, #2
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f8c6 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800d23a:	4603      	mov	r3, r0
 800d23c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10e      	bne.n	800d262 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2202      	movs	r2, #2
 800d24a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2200      	movs	r2, #0
 800d256:	2120      	movs	r1, #32
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f8b4 	bl	800d3c6 <QSPI_WaitFlagStateUntilTimeout>
 800d25e:	4603      	mov	r3, r0
 800d260:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d262:	7bfb      	ldrb	r3, [r7, #15]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d10b      	bne.n	800d280 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	695a      	ldr	r2, [r3, #20]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800d276:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800d280:	7bfb      	ldrb	r3, [r7, #15]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	f003 0302 	and.w	r3, r3, #2
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d046      	beq.n	800d336 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2208      	movs	r2, #8
 800d2b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800d2c6:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f003 0304 	and.w	r3, r3, #4
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d01b      	beq.n	800d30e <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f022 0204 	bic.w	r2, r2, #4
 800d2e4:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ea:	4a15      	ldr	r2, [pc, #84]	; (800d340 <HAL_QSPI_Abort_IT+0xb4>)
 800d2ec:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fb fac0 	bl	8008878 <HAL_DMA_Abort_IT>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d01b      	beq.n	800d336 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f7ff ff0c 	bl	800d124 <HAL_QSPI_AbortCpltCallback>
 800d30c:	e013      	b.n	800d336 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2202      	movs	r2, #2
 800d314:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d324:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f042 0202 	orr.w	r2, r2, #2
 800d334:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800d336:	7bfb      	ldrb	r3, [r7, #15]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	0800d361 	.word	0x0800d361

0800d344 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	683a      	ldr	r2, [r7, #0]
 800d352:	649a      	str	r2, [r3, #72]	; 0x48
}
 800d354:	bf00      	nop
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2200      	movs	r2, #0
 800d372:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d380:	b2db      	uxtb	r3, r3
 800d382:	2b08      	cmp	r3, #8
 800d384:	d114      	bne.n	800d3b0 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2202      	movs	r2, #2
 800d38c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d39c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f042 0202 	orr.w	r2, r2, #2
 800d3ac:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800d3ae:	e006      	b.n	800d3be <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f7ff fea9 	bl	800d110 <HAL_QSPI_ErrorCallback>
}
 800d3be:	bf00      	nop
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b084      	sub	sp, #16
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	60f8      	str	r0, [r7, #12]
 800d3ce:	60b9      	str	r1, [r7, #8]
 800d3d0:	603b      	str	r3, [r7, #0]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d3d6:	e01a      	b.n	800d40e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3de:	d016      	beq.n	800d40e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3e0:	f7fa fa50 	bl	8007884 <HAL_GetTick>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d302      	bcc.n	800d3f6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10b      	bne.n	800d40e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2204      	movs	r2, #4
 800d3fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d402:	f043 0201 	orr.w	r2, r3, #1
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e00e      	b.n	800d42c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	689a      	ldr	r2, [r3, #8]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	4013      	ands	r3, r2
 800d418:	2b00      	cmp	r3, #0
 800d41a:	bf14      	ite	ne
 800d41c:	2301      	movne	r3, #1
 800d41e:	2300      	moveq	r3, #0
 800d420:	b2db      	uxtb	r3, r3
 800d422:	461a      	mov	r2, r3
 800d424:	79fb      	ldrb	r3, [r7, #7]
 800d426:	429a      	cmp	r2, r3
 800d428:	d1d6      	bne.n	800d3d8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d444:	2b00      	cmp	r3, #0
 800d446:	d009      	beq.n	800d45c <QSPI_Config+0x28>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d44e:	d005      	beq.n	800d45c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3a01      	subs	r2, #1
 800d45a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	2b00      	cmp	r3, #0
 800d462:	f000 80b9 	beq.w	800d5d8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	6a1b      	ldr	r3, [r3, #32]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d05f      	beq.n	800d52e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	6892      	ldr	r2, [r2, #8]
 800d476:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	69db      	ldr	r3, [r3, #28]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d031      	beq.n	800d4e4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d488:	431a      	orrs	r2, r3
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48e:	431a      	orrs	r2, r3
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d494:	431a      	orrs	r2, r3
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	695b      	ldr	r3, [r3, #20]
 800d49a:	049b      	lsls	r3, r3, #18
 800d49c:	431a      	orrs	r2, r3
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	431a      	orrs	r2, r3
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	6a1b      	ldr	r3, [r3, #32]
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	68db      	ldr	r3, [r3, #12]
 800d4ae:	431a      	orrs	r2, r3
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	69db      	ldr	r3, [r3, #28]
 800d4b4:	431a      	orrs	r2, r3
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	699b      	ldr	r3, [r3, #24]
 800d4ba:	431a      	orrs	r2, r3
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	ea42 0103 	orr.w	r1, r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	430a      	orrs	r2, r1
 800d4cc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d4d4:	f000 812e 	beq.w	800d734 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	6852      	ldr	r2, [r2, #4]
 800d4e0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800d4e2:	e127      	b.n	800d734 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ec:	431a      	orrs	r2, r3
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	049b      	lsls	r3, r3, #18
 800d500:	431a      	orrs	r2, r3
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	431a      	orrs	r2, r3
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	6a1b      	ldr	r3, [r3, #32]
 800d50c:	431a      	orrs	r2, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	69db      	ldr	r3, [r3, #28]
 800d512:	431a      	orrs	r2, r3
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	431a      	orrs	r2, r3
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	ea42 0103 	orr.w	r1, r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	430a      	orrs	r2, r1
 800d52a:	615a      	str	r2, [r3, #20]
}
 800d52c:	e102      	b.n	800d734 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	69db      	ldr	r3, [r3, #28]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d02e      	beq.n	800d594 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53e:	431a      	orrs	r2, r3
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d544:	431a      	orrs	r2, r3
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54a:	431a      	orrs	r2, r3
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	049b      	lsls	r3, r3, #18
 800d552:	431a      	orrs	r2, r3
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	6a1b      	ldr	r3, [r3, #32]
 800d558:	431a      	orrs	r2, r3
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	431a      	orrs	r2, r3
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	69db      	ldr	r3, [r3, #28]
 800d564:	431a      	orrs	r2, r3
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	699b      	ldr	r3, [r3, #24]
 800d56a:	431a      	orrs	r2, r3
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	ea42 0103 	orr.w	r1, r2, r3
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	430a      	orrs	r2, r1
 800d57c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d584:	f000 80d6 	beq.w	800d734 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68ba      	ldr	r2, [r7, #8]
 800d58e:	6852      	ldr	r2, [r2, #4]
 800d590:	619a      	str	r2, [r3, #24]
}
 800d592:	e0cf      	b.n	800d734 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d59c:	431a      	orrs	r2, r3
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a8:	431a      	orrs	r2, r3
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	695b      	ldr	r3, [r3, #20]
 800d5ae:	049b      	lsls	r3, r3, #18
 800d5b0:	431a      	orrs	r2, r3
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	6a1b      	ldr	r3, [r3, #32]
 800d5b6:	431a      	orrs	r2, r3
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	69db      	ldr	r3, [r3, #28]
 800d5bc:	431a      	orrs	r2, r3
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	699b      	ldr	r3, [r3, #24]
 800d5c2:	431a      	orrs	r2, r3
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	ea42 0103 	orr.w	r1, r2, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	430a      	orrs	r2, r1
 800d5d4:	615a      	str	r2, [r3, #20]
}
 800d5d6:	e0ad      	b.n	800d734 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	6a1b      	ldr	r3, [r3, #32]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d058      	beq.n	800d692 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	6892      	ldr	r2, [r2, #8]
 800d5e8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	69db      	ldr	r3, [r3, #28]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d02d      	beq.n	800d64e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d600:	431a      	orrs	r2, r3
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d606:	431a      	orrs	r2, r3
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	049b      	lsls	r3, r3, #18
 800d60e:	431a      	orrs	r2, r3
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	431a      	orrs	r2, r3
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	6a1b      	ldr	r3, [r3, #32]
 800d61a:	431a      	orrs	r2, r3
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	431a      	orrs	r2, r3
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	69db      	ldr	r3, [r3, #28]
 800d626:	431a      	orrs	r2, r3
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	699b      	ldr	r3, [r3, #24]
 800d62c:	ea42 0103 	orr.w	r1, r2, r3
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	430a      	orrs	r2, r1
 800d638:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d640:	d078      	beq.n	800d734 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	6852      	ldr	r2, [r2, #4]
 800d64a:	619a      	str	r2, [r3, #24]
}
 800d64c:	e072      	b.n	800d734 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d656:	431a      	orrs	r2, r3
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d65c:	431a      	orrs	r2, r3
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d662:	431a      	orrs	r2, r3
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	695b      	ldr	r3, [r3, #20]
 800d668:	049b      	lsls	r3, r3, #18
 800d66a:	431a      	orrs	r2, r3
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	691b      	ldr	r3, [r3, #16]
 800d670:	431a      	orrs	r2, r3
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	6a1b      	ldr	r3, [r3, #32]
 800d676:	431a      	orrs	r2, r3
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	69db      	ldr	r3, [r3, #28]
 800d67c:	431a      	orrs	r2, r3
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	699b      	ldr	r3, [r3, #24]
 800d682:	ea42 0103 	orr.w	r1, r2, r3
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	430a      	orrs	r2, r1
 800d68e:	615a      	str	r2, [r3, #20]
}
 800d690:	e050      	b.n	800d734 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	69db      	ldr	r3, [r3, #28]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d02a      	beq.n	800d6f0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a2:	431a      	orrs	r2, r3
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a8:	431a      	orrs	r2, r3
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ae:	431a      	orrs	r2, r3
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	695b      	ldr	r3, [r3, #20]
 800d6b4:	049b      	lsls	r3, r3, #18
 800d6b6:	431a      	orrs	r2, r3
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	6a1b      	ldr	r3, [r3, #32]
 800d6bc:	431a      	orrs	r2, r3
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	431a      	orrs	r2, r3
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	431a      	orrs	r2, r3
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	ea42 0103 	orr.w	r1, r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	430a      	orrs	r2, r1
 800d6da:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d6e2:	d027      	beq.n	800d734 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	6852      	ldr	r2, [r2, #4]
 800d6ec:	619a      	str	r2, [r3, #24]
}
 800d6ee:	e021      	b.n	800d734 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d01d      	beq.n	800d734 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d700:	431a      	orrs	r2, r3
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d706:	431a      	orrs	r2, r3
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	431a      	orrs	r2, r3
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	695b      	ldr	r3, [r3, #20]
 800d712:	049b      	lsls	r3, r3, #18
 800d714:	431a      	orrs	r2, r3
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	6a1b      	ldr	r3, [r3, #32]
 800d71a:	431a      	orrs	r2, r3
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	69db      	ldr	r3, [r3, #28]
 800d720:	431a      	orrs	r2, r3
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	ea42 0103 	orr.w	r1, r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	430a      	orrs	r2, r1
 800d732:	615a      	str	r2, [r3, #20]
}
 800d734:	bf00      	nop
 800d736:	3714      	adds	r7, #20
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d748:	2300      	movs	r3, #0
 800d74a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e291      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f000 8087 	beq.w	800d872 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d764:	4b96      	ldr	r3, [pc, #600]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d766:	689b      	ldr	r3, [r3, #8]
 800d768:	f003 030c 	and.w	r3, r3, #12
 800d76c:	2b04      	cmp	r3, #4
 800d76e:	d00c      	beq.n	800d78a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d770:	4b93      	ldr	r3, [pc, #588]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	f003 030c 	and.w	r3, r3, #12
 800d778:	2b08      	cmp	r3, #8
 800d77a:	d112      	bne.n	800d7a2 <HAL_RCC_OscConfig+0x62>
 800d77c:	4b90      	ldr	r3, [pc, #576]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d788:	d10b      	bne.n	800d7a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d78a:	4b8d      	ldr	r3, [pc, #564]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d792:	2b00      	cmp	r3, #0
 800d794:	d06c      	beq.n	800d870 <HAL_RCC_OscConfig+0x130>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d168      	bne.n	800d870 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e26b      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7aa:	d106      	bne.n	800d7ba <HAL_RCC_OscConfig+0x7a>
 800d7ac:	4b84      	ldr	r3, [pc, #528]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a83      	ldr	r2, [pc, #524]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	e02e      	b.n	800d818 <HAL_RCC_OscConfig+0xd8>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10c      	bne.n	800d7dc <HAL_RCC_OscConfig+0x9c>
 800d7c2:	4b7f      	ldr	r3, [pc, #508]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a7e      	ldr	r2, [pc, #504]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7cc:	6013      	str	r3, [r2, #0]
 800d7ce:	4b7c      	ldr	r3, [pc, #496]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4a7b      	ldr	r2, [pc, #492]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d7d8:	6013      	str	r3, [r2, #0]
 800d7da:	e01d      	b.n	800d818 <HAL_RCC_OscConfig+0xd8>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d7e4:	d10c      	bne.n	800d800 <HAL_RCC_OscConfig+0xc0>
 800d7e6:	4b76      	ldr	r3, [pc, #472]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a75      	ldr	r2, [pc, #468]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d7f0:	6013      	str	r3, [r2, #0]
 800d7f2:	4b73      	ldr	r3, [pc, #460]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a72      	ldr	r2, [pc, #456]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d7f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7fc:	6013      	str	r3, [r2, #0]
 800d7fe:	e00b      	b.n	800d818 <HAL_RCC_OscConfig+0xd8>
 800d800:	4b6f      	ldr	r3, [pc, #444]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a6e      	ldr	r2, [pc, #440]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	4b6c      	ldr	r3, [pc, #432]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a6b      	ldr	r2, [pc, #428]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d013      	beq.n	800d848 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d820:	f7fa f830 	bl	8007884 <HAL_GetTick>
 800d824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d826:	e008      	b.n	800d83a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d828:	f7fa f82c 	bl	8007884 <HAL_GetTick>
 800d82c:	4602      	mov	r2, r0
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	2b64      	cmp	r3, #100	; 0x64
 800d834:	d901      	bls.n	800d83a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d836:	2303      	movs	r3, #3
 800d838:	e21f      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d83a:	4b61      	ldr	r3, [pc, #388]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d842:	2b00      	cmp	r3, #0
 800d844:	d0f0      	beq.n	800d828 <HAL_RCC_OscConfig+0xe8>
 800d846:	e014      	b.n	800d872 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d848:	f7fa f81c 	bl	8007884 <HAL_GetTick>
 800d84c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d84e:	e008      	b.n	800d862 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d850:	f7fa f818 	bl	8007884 <HAL_GetTick>
 800d854:	4602      	mov	r2, r0
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	2b64      	cmp	r3, #100	; 0x64
 800d85c:	d901      	bls.n	800d862 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d85e:	2303      	movs	r3, #3
 800d860:	e20b      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d862:	4b57      	ldr	r3, [pc, #348]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1f0      	bne.n	800d850 <HAL_RCC_OscConfig+0x110>
 800d86e:	e000      	b.n	800d872 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 0302 	and.w	r3, r3, #2
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d069      	beq.n	800d952 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d87e:	4b50      	ldr	r3, [pc, #320]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	f003 030c 	and.w	r3, r3, #12
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00b      	beq.n	800d8a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d88a:	4b4d      	ldr	r3, [pc, #308]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	f003 030c 	and.w	r3, r3, #12
 800d892:	2b08      	cmp	r3, #8
 800d894:	d11c      	bne.n	800d8d0 <HAL_RCC_OscConfig+0x190>
 800d896:	4b4a      	ldr	r3, [pc, #296]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d116      	bne.n	800d8d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d8a2:	4b47      	ldr	r3, [pc, #284]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f003 0302 	and.w	r3, r3, #2
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d005      	beq.n	800d8ba <HAL_RCC_OscConfig+0x17a>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d001      	beq.n	800d8ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e1df      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8ba:	4b41      	ldr	r3, [pc, #260]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	00db      	lsls	r3, r3, #3
 800d8c8:	493d      	ldr	r1, [pc, #244]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d8ce:	e040      	b.n	800d952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d023      	beq.n	800d920 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d8d8:	4b39      	ldr	r3, [pc, #228]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a38      	ldr	r2, [pc, #224]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d8de:	f043 0301 	orr.w	r3, r3, #1
 800d8e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8e4:	f7f9 ffce 	bl	8007884 <HAL_GetTick>
 800d8e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8ea:	e008      	b.n	800d8fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d8ec:	f7f9 ffca 	bl	8007884 <HAL_GetTick>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	d901      	bls.n	800d8fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	e1bd      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8fe:	4b30      	ldr	r3, [pc, #192]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f003 0302 	and.w	r3, r3, #2
 800d906:	2b00      	cmp	r3, #0
 800d908:	d0f0      	beq.n	800d8ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d90a:	4b2d      	ldr	r3, [pc, #180]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	00db      	lsls	r3, r3, #3
 800d918:	4929      	ldr	r1, [pc, #164]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d91a:	4313      	orrs	r3, r2
 800d91c:	600b      	str	r3, [r1, #0]
 800d91e:	e018      	b.n	800d952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d920:	4b27      	ldr	r3, [pc, #156]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a26      	ldr	r2, [pc, #152]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d926:	f023 0301 	bic.w	r3, r3, #1
 800d92a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d92c:	f7f9 ffaa 	bl	8007884 <HAL_GetTick>
 800d930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d932:	e008      	b.n	800d946 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d934:	f7f9 ffa6 	bl	8007884 <HAL_GetTick>
 800d938:	4602      	mov	r2, r0
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	2b02      	cmp	r3, #2
 800d940:	d901      	bls.n	800d946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d942:	2303      	movs	r3, #3
 800d944:	e199      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d946:	4b1e      	ldr	r3, [pc, #120]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f003 0302 	and.w	r3, r3, #2
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1f0      	bne.n	800d934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f003 0308 	and.w	r3, r3, #8
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d038      	beq.n	800d9d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	695b      	ldr	r3, [r3, #20]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d019      	beq.n	800d99a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d966:	4b16      	ldr	r3, [pc, #88]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d96a:	4a15      	ldr	r2, [pc, #84]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d96c:	f043 0301 	orr.w	r3, r3, #1
 800d970:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d972:	f7f9 ff87 	bl	8007884 <HAL_GetTick>
 800d976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d978:	e008      	b.n	800d98c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d97a:	f7f9 ff83 	bl	8007884 <HAL_GetTick>
 800d97e:	4602      	mov	r2, r0
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	2b02      	cmp	r3, #2
 800d986:	d901      	bls.n	800d98c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d988:	2303      	movs	r3, #3
 800d98a:	e176      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d98c:	4b0c      	ldr	r3, [pc, #48]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d990:	f003 0302 	and.w	r3, r3, #2
 800d994:	2b00      	cmp	r3, #0
 800d996:	d0f0      	beq.n	800d97a <HAL_RCC_OscConfig+0x23a>
 800d998:	e01a      	b.n	800d9d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d99a:	4b09      	ldr	r3, [pc, #36]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d99e:	4a08      	ldr	r2, [pc, #32]	; (800d9c0 <HAL_RCC_OscConfig+0x280>)
 800d9a0:	f023 0301 	bic.w	r3, r3, #1
 800d9a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9a6:	f7f9 ff6d 	bl	8007884 <HAL_GetTick>
 800d9aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d9ac:	e00a      	b.n	800d9c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d9ae:	f7f9 ff69 	bl	8007884 <HAL_GetTick>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	1ad3      	subs	r3, r2, r3
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d903      	bls.n	800d9c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d9bc:	2303      	movs	r3, #3
 800d9be:	e15c      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
 800d9c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d9c4:	4b91      	ldr	r3, [pc, #580]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800d9c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c8:	f003 0302 	and.w	r3, r3, #2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1ee      	bne.n	800d9ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f003 0304 	and.w	r3, r3, #4
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 80a4 	beq.w	800db26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d9de:	4b8b      	ldr	r3, [pc, #556]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800d9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d10d      	bne.n	800da06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d9ea:	4b88      	ldr	r3, [pc, #544]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800d9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ee:	4a87      	ldr	r2, [pc, #540]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800d9f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9f4:	6413      	str	r3, [r2, #64]	; 0x40
 800d9f6:	4b85      	ldr	r3, [pc, #532]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800d9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9fe:	60bb      	str	r3, [r7, #8]
 800da00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800da02:	2301      	movs	r3, #1
 800da04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800da06:	4b82      	ldr	r3, [pc, #520]	; (800dc10 <HAL_RCC_OscConfig+0x4d0>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d118      	bne.n	800da44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800da12:	4b7f      	ldr	r3, [pc, #508]	; (800dc10 <HAL_RCC_OscConfig+0x4d0>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a7e      	ldr	r2, [pc, #504]	; (800dc10 <HAL_RCC_OscConfig+0x4d0>)
 800da18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800da1e:	f7f9 ff31 	bl	8007884 <HAL_GetTick>
 800da22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800da24:	e008      	b.n	800da38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800da26:	f7f9 ff2d 	bl	8007884 <HAL_GetTick>
 800da2a:	4602      	mov	r2, r0
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	2b64      	cmp	r3, #100	; 0x64
 800da32:	d901      	bls.n	800da38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800da34:	2303      	movs	r3, #3
 800da36:	e120      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800da38:	4b75      	ldr	r3, [pc, #468]	; (800dc10 <HAL_RCC_OscConfig+0x4d0>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da40:	2b00      	cmp	r3, #0
 800da42:	d0f0      	beq.n	800da26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d106      	bne.n	800da5a <HAL_RCC_OscConfig+0x31a>
 800da4c:	4b6f      	ldr	r3, [pc, #444]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da50:	4a6e      	ldr	r2, [pc, #440]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da52:	f043 0301 	orr.w	r3, r3, #1
 800da56:	6713      	str	r3, [r2, #112]	; 0x70
 800da58:	e02d      	b.n	800dab6 <HAL_RCC_OscConfig+0x376>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10c      	bne.n	800da7c <HAL_RCC_OscConfig+0x33c>
 800da62:	4b6a      	ldr	r3, [pc, #424]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da66:	4a69      	ldr	r2, [pc, #420]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da68:	f023 0301 	bic.w	r3, r3, #1
 800da6c:	6713      	str	r3, [r2, #112]	; 0x70
 800da6e:	4b67      	ldr	r3, [pc, #412]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da72:	4a66      	ldr	r2, [pc, #408]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da74:	f023 0304 	bic.w	r3, r3, #4
 800da78:	6713      	str	r3, [r2, #112]	; 0x70
 800da7a:	e01c      	b.n	800dab6 <HAL_RCC_OscConfig+0x376>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	2b05      	cmp	r3, #5
 800da82:	d10c      	bne.n	800da9e <HAL_RCC_OscConfig+0x35e>
 800da84:	4b61      	ldr	r3, [pc, #388]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da88:	4a60      	ldr	r2, [pc, #384]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da8a:	f043 0304 	orr.w	r3, r3, #4
 800da8e:	6713      	str	r3, [r2, #112]	; 0x70
 800da90:	4b5e      	ldr	r3, [pc, #376]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da94:	4a5d      	ldr	r2, [pc, #372]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800da96:	f043 0301 	orr.w	r3, r3, #1
 800da9a:	6713      	str	r3, [r2, #112]	; 0x70
 800da9c:	e00b      	b.n	800dab6 <HAL_RCC_OscConfig+0x376>
 800da9e:	4b5b      	ldr	r3, [pc, #364]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800daa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daa2:	4a5a      	ldr	r2, [pc, #360]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800daa4:	f023 0301 	bic.w	r3, r3, #1
 800daa8:	6713      	str	r3, [r2, #112]	; 0x70
 800daaa:	4b58      	ldr	r3, [pc, #352]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800daac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daae:	4a57      	ldr	r2, [pc, #348]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800dab0:	f023 0304 	bic.w	r3, r3, #4
 800dab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d015      	beq.n	800daea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dabe:	f7f9 fee1 	bl	8007884 <HAL_GetTick>
 800dac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dac4:	e00a      	b.n	800dadc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dac6:	f7f9 fedd 	bl	8007884 <HAL_GetTick>
 800daca:	4602      	mov	r2, r0
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	1ad3      	subs	r3, r2, r3
 800dad0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d901      	bls.n	800dadc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800dad8:	2303      	movs	r3, #3
 800dada:	e0ce      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dadc:	4b4b      	ldr	r3, [pc, #300]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800dade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dae0:	f003 0302 	and.w	r3, r3, #2
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d0ee      	beq.n	800dac6 <HAL_RCC_OscConfig+0x386>
 800dae8:	e014      	b.n	800db14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daea:	f7f9 fecb 	bl	8007884 <HAL_GetTick>
 800daee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800daf0:	e00a      	b.n	800db08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800daf2:	f7f9 fec7 	bl	8007884 <HAL_GetTick>
 800daf6:	4602      	mov	r2, r0
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	1ad3      	subs	r3, r2, r3
 800dafc:	f241 3288 	movw	r2, #5000	; 0x1388
 800db00:	4293      	cmp	r3, r2
 800db02:	d901      	bls.n	800db08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800db04:	2303      	movs	r3, #3
 800db06:	e0b8      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800db08:	4b40      	ldr	r3, [pc, #256]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800db0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db0c:	f003 0302 	and.w	r3, r3, #2
 800db10:	2b00      	cmp	r3, #0
 800db12:	d1ee      	bne.n	800daf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	2b01      	cmp	r3, #1
 800db18:	d105      	bne.n	800db26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800db1a:	4b3c      	ldr	r3, [pc, #240]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800db1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db1e:	4a3b      	ldr	r2, [pc, #236]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800db20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	699b      	ldr	r3, [r3, #24]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f000 80a4 	beq.w	800dc78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800db30:	4b36      	ldr	r3, [pc, #216]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	f003 030c 	and.w	r3, r3, #12
 800db38:	2b08      	cmp	r3, #8
 800db3a:	d06b      	beq.n	800dc14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	699b      	ldr	r3, [r3, #24]
 800db40:	2b02      	cmp	r3, #2
 800db42:	d149      	bne.n	800dbd8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db44:	4b31      	ldr	r3, [pc, #196]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a30      	ldr	r2, [pc, #192]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800db4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db50:	f7f9 fe98 	bl	8007884 <HAL_GetTick>
 800db54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db56:	e008      	b.n	800db6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db58:	f7f9 fe94 	bl	8007884 <HAL_GetTick>
 800db5c:	4602      	mov	r2, r0
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	1ad3      	subs	r3, r2, r3
 800db62:	2b02      	cmp	r3, #2
 800db64:	d901      	bls.n	800db6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800db66:	2303      	movs	r3, #3
 800db68:	e087      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db6a:	4b28      	ldr	r3, [pc, #160]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1f0      	bne.n	800db58 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	69da      	ldr	r2, [r3, #28]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	431a      	orrs	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db84:	019b      	lsls	r3, r3, #6
 800db86:	431a      	orrs	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8c:	085b      	lsrs	r3, r3, #1
 800db8e:	3b01      	subs	r3, #1
 800db90:	041b      	lsls	r3, r3, #16
 800db92:	431a      	orrs	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	061b      	lsls	r3, r3, #24
 800db9a:	4313      	orrs	r3, r2
 800db9c:	4a1b      	ldr	r2, [pc, #108]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800db9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dba2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dba4:	4b19      	ldr	r3, [pc, #100]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a18      	ldr	r2, [pc, #96]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800dbaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dbae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbb0:	f7f9 fe68 	bl	8007884 <HAL_GetTick>
 800dbb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbb6:	e008      	b.n	800dbca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbb8:	f7f9 fe64 	bl	8007884 <HAL_GetTick>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d901      	bls.n	800dbca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800dbc6:	2303      	movs	r3, #3
 800dbc8:	e057      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbca:	4b10      	ldr	r3, [pc, #64]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d0f0      	beq.n	800dbb8 <HAL_RCC_OscConfig+0x478>
 800dbd6:	e04f      	b.n	800dc78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbd8:	4b0c      	ldr	r3, [pc, #48]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a0b      	ldr	r2, [pc, #44]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800dbde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dbe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbe4:	f7f9 fe4e 	bl	8007884 <HAL_GetTick>
 800dbe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbea:	e008      	b.n	800dbfe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbec:	f7f9 fe4a 	bl	8007884 <HAL_GetTick>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d901      	bls.n	800dbfe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	e03d      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbfe:	4b03      	ldr	r3, [pc, #12]	; (800dc0c <HAL_RCC_OscConfig+0x4cc>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1f0      	bne.n	800dbec <HAL_RCC_OscConfig+0x4ac>
 800dc0a:	e035      	b.n	800dc78 <HAL_RCC_OscConfig+0x538>
 800dc0c:	40023800 	.word	0x40023800
 800dc10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800dc14:	4b1b      	ldr	r3, [pc, #108]	; (800dc84 <HAL_RCC_OscConfig+0x544>)
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	699b      	ldr	r3, [r3, #24]
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d028      	beq.n	800dc74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d121      	bne.n	800dc74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d11a      	bne.n	800dc74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc3e:	68fa      	ldr	r2, [r7, #12]
 800dc40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dc44:	4013      	ands	r3, r2
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dc4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d111      	bne.n	800dc74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5a:	085b      	lsrs	r3, r3, #1
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d107      	bne.n	800dc74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d001      	beq.n	800dc78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800dc74:	2301      	movs	r3, #1
 800dc76:	e000      	b.n	800dc7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	40023800 	.word	0x40023800

0800dc88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dc92:	2300      	movs	r3, #0
 800dc94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d101      	bne.n	800dca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e0d0      	b.n	800de42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dca0:	4b6a      	ldr	r3, [pc, #424]	; (800de4c <HAL_RCC_ClockConfig+0x1c4>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f003 030f 	and.w	r3, r3, #15
 800dca8:	683a      	ldr	r2, [r7, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d910      	bls.n	800dcd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcae:	4b67      	ldr	r3, [pc, #412]	; (800de4c <HAL_RCC_ClockConfig+0x1c4>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f023 020f 	bic.w	r2, r3, #15
 800dcb6:	4965      	ldr	r1, [pc, #404]	; (800de4c <HAL_RCC_ClockConfig+0x1c4>)
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcbe:	4b63      	ldr	r3, [pc, #396]	; (800de4c <HAL_RCC_ClockConfig+0x1c4>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f003 030f 	and.w	r3, r3, #15
 800dcc6:	683a      	ldr	r2, [r7, #0]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d001      	beq.n	800dcd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dccc:	2301      	movs	r3, #1
 800dcce:	e0b8      	b.n	800de42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f003 0302 	and.w	r3, r3, #2
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d020      	beq.n	800dd1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f003 0304 	and.w	r3, r3, #4
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d005      	beq.n	800dcf4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dce8:	4b59      	ldr	r3, [pc, #356]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	4a58      	ldr	r2, [pc, #352]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dcee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dcf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f003 0308 	and.w	r3, r3, #8
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d005      	beq.n	800dd0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dd00:	4b53      	ldr	r3, [pc, #332]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	4a52      	ldr	r2, [pc, #328]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dd0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd0c:	4b50      	ldr	r3, [pc, #320]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	494d      	ldr	r1, [pc, #308]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d040      	beq.n	800ddac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d107      	bne.n	800dd42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd32:	4b47      	ldr	r3, [pc, #284]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d115      	bne.n	800dd6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e07f      	b.n	800de42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d107      	bne.n	800dd5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd4a:	4b41      	ldr	r3, [pc, #260]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d109      	bne.n	800dd6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd56:	2301      	movs	r3, #1
 800dd58:	e073      	b.n	800de42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd5a:	4b3d      	ldr	r3, [pc, #244]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f003 0302 	and.w	r3, r3, #2
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d101      	bne.n	800dd6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e06b      	b.n	800de42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dd6a:	4b39      	ldr	r3, [pc, #228]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	f023 0203 	bic.w	r2, r3, #3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	4936      	ldr	r1, [pc, #216]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd7c:	f7f9 fd82 	bl	8007884 <HAL_GetTick>
 800dd80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd82:	e00a      	b.n	800dd9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd84:	f7f9 fd7e 	bl	8007884 <HAL_GetTick>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d901      	bls.n	800dd9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800dd96:	2303      	movs	r3, #3
 800dd98:	e053      	b.n	800de42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd9a:	4b2d      	ldr	r3, [pc, #180]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	f003 020c 	and.w	r2, r3, #12
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d1eb      	bne.n	800dd84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ddac:	4b27      	ldr	r3, [pc, #156]	; (800de4c <HAL_RCC_ClockConfig+0x1c4>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f003 030f 	and.w	r3, r3, #15
 800ddb4:	683a      	ldr	r2, [r7, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d210      	bcs.n	800dddc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddba:	4b24      	ldr	r3, [pc, #144]	; (800de4c <HAL_RCC_ClockConfig+0x1c4>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f023 020f 	bic.w	r2, r3, #15
 800ddc2:	4922      	ldr	r1, [pc, #136]	; (800de4c <HAL_RCC_ClockConfig+0x1c4>)
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ddca:	4b20      	ldr	r3, [pc, #128]	; (800de4c <HAL_RCC_ClockConfig+0x1c4>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f003 030f 	and.w	r3, r3, #15
 800ddd2:	683a      	ldr	r2, [r7, #0]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d001      	beq.n	800dddc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	e032      	b.n	800de42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f003 0304 	and.w	r3, r3, #4
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d008      	beq.n	800ddfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dde8:	4b19      	ldr	r3, [pc, #100]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	4916      	ldr	r1, [pc, #88]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f003 0308 	and.w	r3, r3, #8
 800de02:	2b00      	cmp	r3, #0
 800de04:	d009      	beq.n	800de1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800de06:	4b12      	ldr	r3, [pc, #72]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	00db      	lsls	r3, r3, #3
 800de14:	490e      	ldr	r1, [pc, #56]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800de16:	4313      	orrs	r3, r2
 800de18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800de1a:	f000 f821 	bl	800de60 <HAL_RCC_GetSysClockFreq>
 800de1e:	4602      	mov	r2, r0
 800de20:	4b0b      	ldr	r3, [pc, #44]	; (800de50 <HAL_RCC_ClockConfig+0x1c8>)
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	091b      	lsrs	r3, r3, #4
 800de26:	f003 030f 	and.w	r3, r3, #15
 800de2a:	490a      	ldr	r1, [pc, #40]	; (800de54 <HAL_RCC_ClockConfig+0x1cc>)
 800de2c:	5ccb      	ldrb	r3, [r1, r3]
 800de2e:	fa22 f303 	lsr.w	r3, r2, r3
 800de32:	4a09      	ldr	r2, [pc, #36]	; (800de58 <HAL_RCC_ClockConfig+0x1d0>)
 800de34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800de36:	4b09      	ldr	r3, [pc, #36]	; (800de5c <HAL_RCC_ClockConfig+0x1d4>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7f6 fb08 	bl	8004450 <HAL_InitTick>

  return HAL_OK;
 800de40:	2300      	movs	r3, #0
}
 800de42:	4618      	mov	r0, r3
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	40023c00 	.word	0x40023c00
 800de50:	40023800 	.word	0x40023800
 800de54:	0801c620 	.word	0x0801c620
 800de58:	20000008 	.word	0x20000008
 800de5c:	20000034 	.word	0x20000034

0800de60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800de60:	b5b0      	push	{r4, r5, r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800de66:	2100      	movs	r1, #0
 800de68:	6079      	str	r1, [r7, #4]
 800de6a:	2100      	movs	r1, #0
 800de6c:	60f9      	str	r1, [r7, #12]
 800de6e:	2100      	movs	r1, #0
 800de70:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800de72:	2100      	movs	r1, #0
 800de74:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800de76:	4952      	ldr	r1, [pc, #328]	; (800dfc0 <HAL_RCC_GetSysClockFreq+0x160>)
 800de78:	6889      	ldr	r1, [r1, #8]
 800de7a:	f001 010c 	and.w	r1, r1, #12
 800de7e:	2908      	cmp	r1, #8
 800de80:	d00d      	beq.n	800de9e <HAL_RCC_GetSysClockFreq+0x3e>
 800de82:	2908      	cmp	r1, #8
 800de84:	f200 8094 	bhi.w	800dfb0 <HAL_RCC_GetSysClockFreq+0x150>
 800de88:	2900      	cmp	r1, #0
 800de8a:	d002      	beq.n	800de92 <HAL_RCC_GetSysClockFreq+0x32>
 800de8c:	2904      	cmp	r1, #4
 800de8e:	d003      	beq.n	800de98 <HAL_RCC_GetSysClockFreq+0x38>
 800de90:	e08e      	b.n	800dfb0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800de92:	4b4c      	ldr	r3, [pc, #304]	; (800dfc4 <HAL_RCC_GetSysClockFreq+0x164>)
 800de94:	60bb      	str	r3, [r7, #8]
      break;
 800de96:	e08e      	b.n	800dfb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800de98:	4b4b      	ldr	r3, [pc, #300]	; (800dfc8 <HAL_RCC_GetSysClockFreq+0x168>)
 800de9a:	60bb      	str	r3, [r7, #8]
      break;
 800de9c:	e08b      	b.n	800dfb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800de9e:	4948      	ldr	r1, [pc, #288]	; (800dfc0 <HAL_RCC_GetSysClockFreq+0x160>)
 800dea0:	6849      	ldr	r1, [r1, #4]
 800dea2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800dea6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800dea8:	4945      	ldr	r1, [pc, #276]	; (800dfc0 <HAL_RCC_GetSysClockFreq+0x160>)
 800deaa:	6849      	ldr	r1, [r1, #4]
 800deac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800deb0:	2900      	cmp	r1, #0
 800deb2:	d024      	beq.n	800defe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800deb4:	4942      	ldr	r1, [pc, #264]	; (800dfc0 <HAL_RCC_GetSysClockFreq+0x160>)
 800deb6:	6849      	ldr	r1, [r1, #4]
 800deb8:	0989      	lsrs	r1, r1, #6
 800deba:	4608      	mov	r0, r1
 800debc:	f04f 0100 	mov.w	r1, #0
 800dec0:	f240 14ff 	movw	r4, #511	; 0x1ff
 800dec4:	f04f 0500 	mov.w	r5, #0
 800dec8:	ea00 0204 	and.w	r2, r0, r4
 800decc:	ea01 0305 	and.w	r3, r1, r5
 800ded0:	493d      	ldr	r1, [pc, #244]	; (800dfc8 <HAL_RCC_GetSysClockFreq+0x168>)
 800ded2:	fb01 f003 	mul.w	r0, r1, r3
 800ded6:	2100      	movs	r1, #0
 800ded8:	fb01 f102 	mul.w	r1, r1, r2
 800dedc:	1844      	adds	r4, r0, r1
 800dede:	493a      	ldr	r1, [pc, #232]	; (800dfc8 <HAL_RCC_GetSysClockFreq+0x168>)
 800dee0:	fba2 0101 	umull	r0, r1, r2, r1
 800dee4:	1863      	adds	r3, r4, r1
 800dee6:	4619      	mov	r1, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	461a      	mov	r2, r3
 800deec:	f04f 0300 	mov.w	r3, #0
 800def0:	f7f2 fe5c 	bl	8000bac <__aeabi_uldivmod>
 800def4:	4602      	mov	r2, r0
 800def6:	460b      	mov	r3, r1
 800def8:	4613      	mov	r3, r2
 800defa:	60fb      	str	r3, [r7, #12]
 800defc:	e04a      	b.n	800df94 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800defe:	4b30      	ldr	r3, [pc, #192]	; (800dfc0 <HAL_RCC_GetSysClockFreq+0x160>)
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	099b      	lsrs	r3, r3, #6
 800df04:	461a      	mov	r2, r3
 800df06:	f04f 0300 	mov.w	r3, #0
 800df0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800df0e:	f04f 0100 	mov.w	r1, #0
 800df12:	ea02 0400 	and.w	r4, r2, r0
 800df16:	ea03 0501 	and.w	r5, r3, r1
 800df1a:	4620      	mov	r0, r4
 800df1c:	4629      	mov	r1, r5
 800df1e:	f04f 0200 	mov.w	r2, #0
 800df22:	f04f 0300 	mov.w	r3, #0
 800df26:	014b      	lsls	r3, r1, #5
 800df28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800df2c:	0142      	lsls	r2, r0, #5
 800df2e:	4610      	mov	r0, r2
 800df30:	4619      	mov	r1, r3
 800df32:	1b00      	subs	r0, r0, r4
 800df34:	eb61 0105 	sbc.w	r1, r1, r5
 800df38:	f04f 0200 	mov.w	r2, #0
 800df3c:	f04f 0300 	mov.w	r3, #0
 800df40:	018b      	lsls	r3, r1, #6
 800df42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800df46:	0182      	lsls	r2, r0, #6
 800df48:	1a12      	subs	r2, r2, r0
 800df4a:	eb63 0301 	sbc.w	r3, r3, r1
 800df4e:	f04f 0000 	mov.w	r0, #0
 800df52:	f04f 0100 	mov.w	r1, #0
 800df56:	00d9      	lsls	r1, r3, #3
 800df58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800df5c:	00d0      	lsls	r0, r2, #3
 800df5e:	4602      	mov	r2, r0
 800df60:	460b      	mov	r3, r1
 800df62:	1912      	adds	r2, r2, r4
 800df64:	eb45 0303 	adc.w	r3, r5, r3
 800df68:	f04f 0000 	mov.w	r0, #0
 800df6c:	f04f 0100 	mov.w	r1, #0
 800df70:	0299      	lsls	r1, r3, #10
 800df72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800df76:	0290      	lsls	r0, r2, #10
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4610      	mov	r0, r2
 800df7e:	4619      	mov	r1, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	461a      	mov	r2, r3
 800df84:	f04f 0300 	mov.w	r3, #0
 800df88:	f7f2 fe10 	bl	8000bac <__aeabi_uldivmod>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	4613      	mov	r3, r2
 800df92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800df94:	4b0a      	ldr	r3, [pc, #40]	; (800dfc0 <HAL_RCC_GetSysClockFreq+0x160>)
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	0c1b      	lsrs	r3, r3, #16
 800df9a:	f003 0303 	and.w	r3, r3, #3
 800df9e:	3301      	adds	r3, #1
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfac:	60bb      	str	r3, [r7, #8]
      break;
 800dfae:	e002      	b.n	800dfb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dfb0:	4b04      	ldr	r3, [pc, #16]	; (800dfc4 <HAL_RCC_GetSysClockFreq+0x164>)
 800dfb2:	60bb      	str	r3, [r7, #8]
      break;
 800dfb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dfb6:	68bb      	ldr	r3, [r7, #8]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bdb0      	pop	{r4, r5, r7, pc}
 800dfc0:	40023800 	.word	0x40023800
 800dfc4:	00f42400 	.word	0x00f42400
 800dfc8:	017d7840 	.word	0x017d7840

0800dfcc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dfd0:	4b03      	ldr	r3, [pc, #12]	; (800dfe0 <HAL_RCC_GetHCLKFreq+0x14>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	20000008 	.word	0x20000008

0800dfe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dfe8:	f7ff fff0 	bl	800dfcc <HAL_RCC_GetHCLKFreq>
 800dfec:	4602      	mov	r2, r0
 800dfee:	4b05      	ldr	r3, [pc, #20]	; (800e004 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	0a9b      	lsrs	r3, r3, #10
 800dff4:	f003 0307 	and.w	r3, r3, #7
 800dff8:	4903      	ldr	r1, [pc, #12]	; (800e008 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dffa:	5ccb      	ldrb	r3, [r1, r3]
 800dffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e000:	4618      	mov	r0, r3
 800e002:	bd80      	pop	{r7, pc}
 800e004:	40023800 	.word	0x40023800
 800e008:	0801c630 	.word	0x0801c630

0800e00c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e010:	f7ff ffdc 	bl	800dfcc <HAL_RCC_GetHCLKFreq>
 800e014:	4602      	mov	r2, r0
 800e016:	4b05      	ldr	r3, [pc, #20]	; (800e02c <HAL_RCC_GetPCLK2Freq+0x20>)
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	0b5b      	lsrs	r3, r3, #13
 800e01c:	f003 0307 	and.w	r3, r3, #7
 800e020:	4903      	ldr	r1, [pc, #12]	; (800e030 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e022:	5ccb      	ldrb	r3, [r1, r3]
 800e024:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e028:	4618      	mov	r0, r3
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	40023800 	.word	0x40023800
 800e030:	0801c630 	.word	0x0801c630

0800e034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	220f      	movs	r2, #15
 800e042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e044:	4b12      	ldr	r3, [pc, #72]	; (800e090 <HAL_RCC_GetClockConfig+0x5c>)
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	f003 0203 	and.w	r2, r3, #3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e050:	4b0f      	ldr	r3, [pc, #60]	; (800e090 <HAL_RCC_GetClockConfig+0x5c>)
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e05c:	4b0c      	ldr	r3, [pc, #48]	; (800e090 <HAL_RCC_GetClockConfig+0x5c>)
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e068:	4b09      	ldr	r3, [pc, #36]	; (800e090 <HAL_RCC_GetClockConfig+0x5c>)
 800e06a:	689b      	ldr	r3, [r3, #8]
 800e06c:	08db      	lsrs	r3, r3, #3
 800e06e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e076:	4b07      	ldr	r3, [pc, #28]	; (800e094 <HAL_RCC_GetClockConfig+0x60>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f003 020f 	and.w	r2, r3, #15
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	601a      	str	r2, [r3, #0]
}
 800e082:	bf00      	nop
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	40023800 	.word	0x40023800
 800e094:	40023c00 	.word	0x40023c00

0800e098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b088      	sub	sp, #32
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f003 0301 	and.w	r3, r3, #1
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d012      	beq.n	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e0c0:	4b69      	ldr	r3, [pc, #420]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	4a68      	ldr	r2, [pc, #416]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e0ca:	6093      	str	r3, [r2, #8]
 800e0cc:	4b66      	ldr	r3, [pc, #408]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0ce:	689a      	ldr	r2, [r3, #8]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d4:	4964      	ldr	r1, [pc, #400]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d017      	beq.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e0f2:	4b5d      	ldr	r3, [pc, #372]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e100:	4959      	ldr	r1, [pc, #356]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e102:	4313      	orrs	r3, r2
 800e104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e10c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e110:	d101      	bne.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e112:	2301      	movs	r3, #1
 800e114:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d101      	bne.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e11e:	2301      	movs	r3, #1
 800e120:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d017      	beq.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e12e:	4b4e      	ldr	r3, [pc, #312]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e134:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e13c:	494a      	ldr	r1, [pc, #296]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e13e:	4313      	orrs	r3, r2
 800e140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e14c:	d101      	bne.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e14e:	2301      	movs	r3, #1
 800e150:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e156:	2b00      	cmp	r3, #0
 800e158:	d101      	bne.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e15a:	2301      	movs	r3, #1
 800e15c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e16a:	2301      	movs	r3, #1
 800e16c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f003 0320 	and.w	r3, r3, #32
 800e176:	2b00      	cmp	r3, #0
 800e178:	f000 808b 	beq.w	800e292 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e17c:	4b3a      	ldr	r3, [pc, #232]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e180:	4a39      	ldr	r2, [pc, #228]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e186:	6413      	str	r3, [r2, #64]	; 0x40
 800e188:	4b37      	ldr	r3, [pc, #220]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e18c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e190:	60bb      	str	r3, [r7, #8]
 800e192:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e194:	4b35      	ldr	r3, [pc, #212]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a34      	ldr	r2, [pc, #208]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e19a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e19e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e1a0:	f7f9 fb70 	bl	8007884 <HAL_GetTick>
 800e1a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e1a6:	e008      	b.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1a8:	f7f9 fb6c 	bl	8007884 <HAL_GetTick>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	1ad3      	subs	r3, r2, r3
 800e1b2:	2b64      	cmp	r3, #100	; 0x64
 800e1b4:	d901      	bls.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e1b6:	2303      	movs	r3, #3
 800e1b8:	e357      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e1ba:	4b2c      	ldr	r3, [pc, #176]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d0f0      	beq.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e1c6:	4b28      	ldr	r3, [pc, #160]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d035      	beq.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1de:	693a      	ldr	r2, [r7, #16]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d02e      	beq.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e1e4:	4b20      	ldr	r3, [pc, #128]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e1ee:	4b1e      	ldr	r3, [pc, #120]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1f2:	4a1d      	ldr	r2, [pc, #116]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e1f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e1fa:	4b1b      	ldr	r3, [pc, #108]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1fe:	4a1a      	ldr	r2, [pc, #104]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e204:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e206:	4a18      	ldr	r2, [pc, #96]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e20c:	4b16      	ldr	r3, [pc, #88]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e210:	f003 0301 	and.w	r3, r3, #1
 800e214:	2b01      	cmp	r3, #1
 800e216:	d114      	bne.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e218:	f7f9 fb34 	bl	8007884 <HAL_GetTick>
 800e21c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e21e:	e00a      	b.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e220:	f7f9 fb30 	bl	8007884 <HAL_GetTick>
 800e224:	4602      	mov	r2, r0
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	1ad3      	subs	r3, r2, r3
 800e22a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e22e:	4293      	cmp	r3, r2
 800e230:	d901      	bls.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e232:	2303      	movs	r3, #3
 800e234:	e319      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e236:	4b0c      	ldr	r3, [pc, #48]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e23a:	f003 0302 	and.w	r3, r3, #2
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d0ee      	beq.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e24a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e24e:	d111      	bne.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e250:	4b05      	ldr	r3, [pc, #20]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e25c:	4b04      	ldr	r3, [pc, #16]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e25e:	400b      	ands	r3, r1
 800e260:	4901      	ldr	r1, [pc, #4]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e262:	4313      	orrs	r3, r2
 800e264:	608b      	str	r3, [r1, #8]
 800e266:	e00b      	b.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e268:	40023800 	.word	0x40023800
 800e26c:	40007000 	.word	0x40007000
 800e270:	0ffffcff 	.word	0x0ffffcff
 800e274:	4bb1      	ldr	r3, [pc, #708]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	4ab0      	ldr	r2, [pc, #704]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e27a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e27e:	6093      	str	r3, [r2, #8]
 800e280:	4bae      	ldr	r3, [pc, #696]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e28c:	49ab      	ldr	r1, [pc, #684]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e28e:	4313      	orrs	r3, r2
 800e290:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f003 0310 	and.w	r3, r3, #16
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d010      	beq.n	800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e29e:	4ba7      	ldr	r3, [pc, #668]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2a4:	4aa5      	ldr	r2, [pc, #660]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e2a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e2aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e2ae:	4ba3      	ldr	r3, [pc, #652]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e2b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b8:	49a0      	ldr	r1, [pc, #640]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d00a      	beq.n	800e2e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e2cc:	4b9b      	ldr	r3, [pc, #620]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2da:	4998      	ldr	r1, [pc, #608]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d00a      	beq.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e2ee:	4b93      	ldr	r3, [pc, #588]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e2f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2fc:	498f      	ldr	r1, [pc, #572]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e2fe:	4313      	orrs	r3, r2
 800e300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00a      	beq.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e310:	4b8a      	ldr	r3, [pc, #552]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e31e:	4987      	ldr	r1, [pc, #540]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e320:	4313      	orrs	r3, r2
 800e322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00a      	beq.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e332:	4b82      	ldr	r3, [pc, #520]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e338:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e340:	497e      	ldr	r1, [pc, #504]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e342:	4313      	orrs	r3, r2
 800e344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00a      	beq.n	800e36a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e354:	4b79      	ldr	r3, [pc, #484]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e35a:	f023 0203 	bic.w	r2, r3, #3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e362:	4976      	ldr	r1, [pc, #472]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e364:	4313      	orrs	r3, r2
 800e366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00a      	beq.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e376:	4b71      	ldr	r3, [pc, #452]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e37c:	f023 020c 	bic.w	r2, r3, #12
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e384:	496d      	ldr	r1, [pc, #436]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e386:	4313      	orrs	r3, r2
 800e388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00a      	beq.n	800e3ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e398:	4b68      	ldr	r3, [pc, #416]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e39e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3a6:	4965      	ldr	r1, [pc, #404]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00a      	beq.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e3ba:	4b60      	ldr	r3, [pc, #384]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3c8:	495c      	ldr	r1, [pc, #368]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00a      	beq.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e3dc:	4b57      	ldr	r3, [pc, #348]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ea:	4954      	ldr	r1, [pc, #336]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00a      	beq.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e3fe:	4b4f      	ldr	r3, [pc, #316]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e404:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e40c:	494b      	ldr	r1, [pc, #300]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e40e:	4313      	orrs	r3, r2
 800e410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00a      	beq.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e420:	4b46      	ldr	r3, [pc, #280]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e426:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e42e:	4943      	ldr	r1, [pc, #268]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e430:	4313      	orrs	r3, r2
 800e432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00a      	beq.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e442:	4b3e      	ldr	r3, [pc, #248]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e450:	493a      	ldr	r1, [pc, #232]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e452:	4313      	orrs	r3, r2
 800e454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00a      	beq.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e464:	4b35      	ldr	r3, [pc, #212]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e46a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e472:	4932      	ldr	r1, [pc, #200]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e474:	4313      	orrs	r3, r2
 800e476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e482:	2b00      	cmp	r3, #0
 800e484:	d011      	beq.n	800e4aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e486:	4b2d      	ldr	r3, [pc, #180]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e48c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e494:	4929      	ldr	r1, [pc, #164]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e496:	4313      	orrs	r3, r2
 800e498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4a4:	d101      	bne.n	800e4aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f003 0308 	and.w	r3, r3, #8
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d001      	beq.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00a      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e4c6:	4b1d      	ldr	r3, [pc, #116]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4d4:	4919      	ldr	r1, [pc, #100]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d00b      	beq.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e4e8:	4b14      	ldr	r3, [pc, #80]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4f8:	4910      	ldr	r1, [pc, #64]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d006      	beq.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 80d9 	beq.w	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e514:	4b09      	ldr	r3, [pc, #36]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4a08      	ldr	r2, [pc, #32]	; (800e53c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e51a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e51e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e520:	f7f9 f9b0 	bl	8007884 <HAL_GetTick>
 800e524:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e526:	e00b      	b.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e528:	f7f9 f9ac 	bl	8007884 <HAL_GetTick>
 800e52c:	4602      	mov	r2, r0
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	2b64      	cmp	r3, #100	; 0x64
 800e534:	d904      	bls.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e536:	2303      	movs	r3, #3
 800e538:	e197      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e53a:	bf00      	nop
 800e53c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e540:	4b6c      	ldr	r3, [pc, #432]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d1ed      	bne.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f003 0301 	and.w	r3, r3, #1
 800e554:	2b00      	cmp	r3, #0
 800e556:	d021      	beq.n	800e59c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d11d      	bne.n	800e59c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e560:	4b64      	ldr	r3, [pc, #400]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e566:	0c1b      	lsrs	r3, r3, #16
 800e568:	f003 0303 	and.w	r3, r3, #3
 800e56c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e56e:	4b61      	ldr	r3, [pc, #388]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e574:	0e1b      	lsrs	r3, r3, #24
 800e576:	f003 030f 	and.w	r3, r3, #15
 800e57a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	019a      	lsls	r2, r3, #6
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	041b      	lsls	r3, r3, #16
 800e586:	431a      	orrs	r2, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	061b      	lsls	r3, r3, #24
 800e58c:	431a      	orrs	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	071b      	lsls	r3, r3, #28
 800e594:	4957      	ldr	r1, [pc, #348]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e596:	4313      	orrs	r3, r2
 800e598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d004      	beq.n	800e5b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5b0:	d00a      	beq.n	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d02e      	beq.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5c6:	d129      	bne.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e5c8:	4b4a      	ldr	r3, [pc, #296]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5ce:	0c1b      	lsrs	r3, r3, #16
 800e5d0:	f003 0303 	and.w	r3, r3, #3
 800e5d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e5d6:	4b47      	ldr	r3, [pc, #284]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5dc:	0f1b      	lsrs	r3, r3, #28
 800e5de:	f003 0307 	and.w	r3, r3, #7
 800e5e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	019a      	lsls	r2, r3, #6
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	041b      	lsls	r3, r3, #16
 800e5ee:	431a      	orrs	r2, r3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	061b      	lsls	r3, r3, #24
 800e5f6:	431a      	orrs	r2, r3
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	071b      	lsls	r3, r3, #28
 800e5fc:	493d      	ldr	r1, [pc, #244]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5fe:	4313      	orrs	r3, r2
 800e600:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e604:	4b3b      	ldr	r3, [pc, #236]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e60a:	f023 021f 	bic.w	r2, r3, #31
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e612:	3b01      	subs	r3, #1
 800e614:	4937      	ldr	r1, [pc, #220]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e616:	4313      	orrs	r3, r2
 800e618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e624:	2b00      	cmp	r3, #0
 800e626:	d01d      	beq.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e628:	4b32      	ldr	r3, [pc, #200]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e62e:	0e1b      	lsrs	r3, r3, #24
 800e630:	f003 030f 	and.w	r3, r3, #15
 800e634:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e636:	4b2f      	ldr	r3, [pc, #188]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e63c:	0f1b      	lsrs	r3, r3, #28
 800e63e:	f003 0307 	and.w	r3, r3, #7
 800e642:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	019a      	lsls	r2, r3, #6
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	041b      	lsls	r3, r3, #16
 800e650:	431a      	orrs	r2, r3
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	061b      	lsls	r3, r3, #24
 800e656:	431a      	orrs	r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	071b      	lsls	r3, r3, #28
 800e65c:	4925      	ldr	r1, [pc, #148]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e65e:	4313      	orrs	r3, r2
 800e660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d011      	beq.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	019a      	lsls	r2, r3, #6
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	041b      	lsls	r3, r3, #16
 800e67c:	431a      	orrs	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	061b      	lsls	r3, r3, #24
 800e684:	431a      	orrs	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	071b      	lsls	r3, r3, #28
 800e68c:	4919      	ldr	r1, [pc, #100]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e68e:	4313      	orrs	r3, r2
 800e690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e694:	4b17      	ldr	r3, [pc, #92]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a16      	ldr	r2, [pc, #88]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e69a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e69e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6a0:	f7f9 f8f0 	bl	8007884 <HAL_GetTick>
 800e6a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6a6:	e008      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e6a8:	f7f9 f8ec 	bl	8007884 <HAL_GetTick>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	1ad3      	subs	r3, r2, r3
 800e6b2:	2b64      	cmp	r3, #100	; 0x64
 800e6b4:	d901      	bls.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6b6:	2303      	movs	r3, #3
 800e6b8:	e0d7      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6ba:	4b0e      	ldr	r3, [pc, #56]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d0f0      	beq.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	f040 80cd 	bne.w	800e868 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e6ce:	4b09      	ldr	r3, [pc, #36]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4a08      	ldr	r2, [pc, #32]	; (800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6da:	f7f9 f8d3 	bl	8007884 <HAL_GetTick>
 800e6de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e6e0:	e00a      	b.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e6e2:	f7f9 f8cf 	bl	8007884 <HAL_GetTick>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	2b64      	cmp	r3, #100	; 0x64
 800e6ee:	d903      	bls.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6f0:	2303      	movs	r3, #3
 800e6f2:	e0ba      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e6f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e6f8:	4b5e      	ldr	r3, [pc, #376]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e704:	d0ed      	beq.n	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d003      	beq.n	800e71a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e716:	2b00      	cmp	r3, #0
 800e718:	d009      	beq.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e722:	2b00      	cmp	r3, #0
 800e724:	d02e      	beq.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d12a      	bne.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e72e:	4b51      	ldr	r3, [pc, #324]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e734:	0c1b      	lsrs	r3, r3, #16
 800e736:	f003 0303 	and.w	r3, r3, #3
 800e73a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e73c:	4b4d      	ldr	r3, [pc, #308]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e742:	0f1b      	lsrs	r3, r3, #28
 800e744:	f003 0307 	and.w	r3, r3, #7
 800e748:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	019a      	lsls	r2, r3, #6
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	041b      	lsls	r3, r3, #16
 800e754:	431a      	orrs	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	699b      	ldr	r3, [r3, #24]
 800e75a:	061b      	lsls	r3, r3, #24
 800e75c:	431a      	orrs	r2, r3
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	071b      	lsls	r3, r3, #28
 800e762:	4944      	ldr	r1, [pc, #272]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e764:	4313      	orrs	r3, r2
 800e766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e76a:	4b42      	ldr	r3, [pc, #264]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e770:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e778:	3b01      	subs	r3, #1
 800e77a:	021b      	lsls	r3, r3, #8
 800e77c:	493d      	ldr	r1, [pc, #244]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e77e:	4313      	orrs	r3, r2
 800e780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d022      	beq.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e798:	d11d      	bne.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e79a:	4b36      	ldr	r3, [pc, #216]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7a0:	0e1b      	lsrs	r3, r3, #24
 800e7a2:	f003 030f 	and.w	r3, r3, #15
 800e7a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e7a8:	4b32      	ldr	r3, [pc, #200]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7ae:	0f1b      	lsrs	r3, r3, #28
 800e7b0:	f003 0307 	and.w	r3, r3, #7
 800e7b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	695b      	ldr	r3, [r3, #20]
 800e7ba:	019a      	lsls	r2, r3, #6
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a1b      	ldr	r3, [r3, #32]
 800e7c0:	041b      	lsls	r3, r3, #16
 800e7c2:	431a      	orrs	r2, r3
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	061b      	lsls	r3, r3, #24
 800e7c8:	431a      	orrs	r2, r3
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	071b      	lsls	r3, r3, #28
 800e7ce:	4929      	ldr	r1, [pc, #164]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f003 0308 	and.w	r3, r3, #8
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d028      	beq.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e7e2:	4b24      	ldr	r3, [pc, #144]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7e8:	0e1b      	lsrs	r3, r3, #24
 800e7ea:	f003 030f 	and.w	r3, r3, #15
 800e7ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e7f0:	4b20      	ldr	r3, [pc, #128]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7f6:	0c1b      	lsrs	r3, r3, #16
 800e7f8:	f003 0303 	and.w	r3, r3, #3
 800e7fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	019a      	lsls	r2, r3, #6
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	041b      	lsls	r3, r3, #16
 800e808:	431a      	orrs	r2, r3
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	061b      	lsls	r3, r3, #24
 800e80e:	431a      	orrs	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	69db      	ldr	r3, [r3, #28]
 800e814:	071b      	lsls	r3, r3, #28
 800e816:	4917      	ldr	r1, [pc, #92]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e818:	4313      	orrs	r3, r2
 800e81a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e81e:	4b15      	ldr	r3, [pc, #84]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82c:	4911      	ldr	r1, [pc, #68]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e82e:	4313      	orrs	r3, r2
 800e830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e834:	4b0f      	ldr	r3, [pc, #60]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a0e      	ldr	r2, [pc, #56]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e83a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e83e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e840:	f7f9 f820 	bl	8007884 <HAL_GetTick>
 800e844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e846:	e008      	b.n	800e85a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e848:	f7f9 f81c 	bl	8007884 <HAL_GetTick>
 800e84c:	4602      	mov	r2, r0
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	2b64      	cmp	r3, #100	; 0x64
 800e854:	d901      	bls.n	800e85a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e856:	2303      	movs	r3, #3
 800e858:	e007      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e85a:	4b06      	ldr	r3, [pc, #24]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e866:	d1ef      	bne.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3720      	adds	r7, #32
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	40023800 	.word	0x40023800

0800e878 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800e878:	b480      	push	{r7}
 800e87a:	b087      	sub	sp, #28
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e880:	2300      	movs	r3, #0
 800e882:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800e884:	2300      	movs	r3, #0
 800e886:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800e888:	2300      	movs	r3, #0
 800e88a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800e88c:	2300      	movs	r3, #0
 800e88e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e896:	f040 808c 	bne.w	800e9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800e89a:	4b95      	ldr	r3, [pc, #596]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8a0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e8a8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8b0:	d07c      	beq.n	800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8b8:	d87d      	bhi.n	800e9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d004      	beq.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8c6:	d039      	beq.n	800e93c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800e8c8:	e075      	b.n	800e9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e8ca:	4b89      	ldr	r3, [pc, #548]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d108      	bne.n	800e8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e8d6:	4b86      	ldr	r3, [pc, #536]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8de:	4a85      	ldr	r2, [pc, #532]	; (800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8e4:	613b      	str	r3, [r7, #16]
 800e8e6:	e007      	b.n	800e8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e8e8:	4b81      	ldr	r3, [pc, #516]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8f0:	4a81      	ldr	r2, [pc, #516]	; (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800e8f8:	4b7d      	ldr	r3, [pc, #500]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8fe:	0e1b      	lsrs	r3, r3, #24
 800e900:	f003 030f 	and.w	r3, r3, #15
 800e904:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800e906:	4b7a      	ldr	r3, [pc, #488]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e90c:	099b      	lsrs	r3, r3, #6
 800e90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e912:	693a      	ldr	r2, [r7, #16]
 800e914:	fb02 f203 	mul.w	r2, r2, r3
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e91e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800e920:	4b73      	ldr	r3, [pc, #460]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e926:	0a1b      	lsrs	r3, r3, #8
 800e928:	f003 031f 	and.w	r3, r3, #31
 800e92c:	3301      	adds	r3, #1
 800e92e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	fbb2 f3f3 	udiv	r3, r2, r3
 800e938:	617b      	str	r3, [r7, #20]
        break;
 800e93a:	e03d      	b.n	800e9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e93c:	4b6c      	ldr	r3, [pc, #432]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e944:	2b00      	cmp	r3, #0
 800e946:	d108      	bne.n	800e95a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e948:	4b69      	ldr	r3, [pc, #420]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e950:	4a68      	ldr	r2, [pc, #416]	; (800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e952:	fbb2 f3f3 	udiv	r3, r2, r3
 800e956:	613b      	str	r3, [r7, #16]
 800e958:	e007      	b.n	800e96a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e95a:	4b65      	ldr	r3, [pc, #404]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e962:	4a65      	ldr	r2, [pc, #404]	; (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e964:	fbb2 f3f3 	udiv	r3, r2, r3
 800e968:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800e96a:	4b61      	ldr	r3, [pc, #388]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e970:	0e1b      	lsrs	r3, r3, #24
 800e972:	f003 030f 	and.w	r3, r3, #15
 800e976:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800e978:	4b5d      	ldr	r3, [pc, #372]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e97a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e97e:	099b      	lsrs	r3, r3, #6
 800e980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e984:	693a      	ldr	r2, [r7, #16]
 800e986:	fb02 f203 	mul.w	r2, r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e990:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800e992:	4b57      	ldr	r3, [pc, #348]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e998:	f003 031f 	and.w	r3, r3, #31
 800e99c:	3301      	adds	r3, #1
 800e99e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9a8:	617b      	str	r3, [r7, #20]
        break;
 800e9aa:	e005      	b.n	800e9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e9ac:	4b53      	ldr	r3, [pc, #332]	; (800eafc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e9ae:	617b      	str	r3, [r7, #20]
        break;
 800e9b0:	e002      	b.n	800e9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800e9b2:	bf00      	nop
 800e9b4:	e000      	b.n	800e9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800e9b6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9be:	f040 808c 	bne.w	800eada <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800e9c2:	4b4b      	ldr	r3, [pc, #300]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e9c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9c8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800e9d0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e9d8:	d07c      	beq.n	800ead4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e9e0:	d87d      	bhi.n	800eade <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d004      	beq.n	800e9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9ee:	d039      	beq.n	800ea64 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800e9f0:	e075      	b.n	800eade <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e9f2:	4b3f      	ldr	r3, [pc, #252]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d108      	bne.n	800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e9fe:	4b3c      	ldr	r3, [pc, #240]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea06:	4a3b      	ldr	r2, [pc, #236]	; (800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ea08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea0c:	613b      	str	r3, [r7, #16]
 800ea0e:	e007      	b.n	800ea20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ea10:	4b37      	ldr	r3, [pc, #220]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea18:	4a37      	ldr	r2, [pc, #220]	; (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ea1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea1e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ea20:	4b33      	ldr	r3, [pc, #204]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea26:	0e1b      	lsrs	r3, r3, #24
 800ea28:	f003 030f 	and.w	r3, r3, #15
 800ea2c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ea2e:	4b30      	ldr	r3, [pc, #192]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea34:	099b      	lsrs	r3, r3, #6
 800ea36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea3a:	693a      	ldr	r2, [r7, #16]
 800ea3c:	fb02 f203 	mul.w	r2, r2, r3
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea46:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ea48:	4b29      	ldr	r3, [pc, #164]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea4e:	0a1b      	lsrs	r3, r3, #8
 800ea50:	f003 031f 	and.w	r3, r3, #31
 800ea54:	3301      	adds	r3, #1
 800ea56:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ea58:	697a      	ldr	r2, [r7, #20]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea60:	617b      	str	r3, [r7, #20]
        break;
 800ea62:	e03d      	b.n	800eae0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ea64:	4b22      	ldr	r3, [pc, #136]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d108      	bne.n	800ea82 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ea70:	4b1f      	ldr	r3, [pc, #124]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea78:	4a1e      	ldr	r2, [pc, #120]	; (800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ea7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea7e:	613b      	str	r3, [r7, #16]
 800ea80:	e007      	b.n	800ea92 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ea82:	4b1b      	ldr	r3, [pc, #108]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea8a:	4a1b      	ldr	r2, [pc, #108]	; (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ea8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea90:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ea92:	4b17      	ldr	r3, [pc, #92]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea98:	0e1b      	lsrs	r3, r3, #24
 800ea9a:	f003 030f 	and.w	r3, r3, #15
 800ea9e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800eaa0:	4b13      	ldr	r3, [pc, #76]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eaa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaa6:	099b      	lsrs	r3, r3, #6
 800eaa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaac:	693a      	ldr	r2, [r7, #16]
 800eaae:	fb02 f203 	mul.w	r2, r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eab8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800eaba:	4b0d      	ldr	r3, [pc, #52]	; (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eac0:	f003 031f 	and.w	r3, r3, #31
 800eac4:	3301      	adds	r3, #1
 800eac6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800eac8:	697a      	ldr	r2, [r7, #20]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ead0:	617b      	str	r3, [r7, #20]
        break;
 800ead2:	e005      	b.n	800eae0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ead4:	4b09      	ldr	r3, [pc, #36]	; (800eafc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800ead6:	617b      	str	r3, [r7, #20]
        break;
 800ead8:	e002      	b.n	800eae0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800eada:	bf00      	nop
 800eadc:	e000      	b.n	800eae0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800eade:	bf00      	nop

  return frequency;
 800eae0:	697b      	ldr	r3, [r7, #20]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	371c      	adds	r7, #28
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	40023800 	.word	0x40023800
 800eaf4:	00f42400 	.word	0x00f42400
 800eaf8:	017d7840 	.word	0x017d7840
 800eafc:	00bb8000 	.word	0x00bb8000

0800eb00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e081      	b.n	800ec16 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	7f5b      	ldrb	r3, [r3, #29]
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d105      	bne.n	800eb28 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7f5 f848 	bl	8003bb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2202      	movs	r2, #2
 800eb2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	22ca      	movs	r2, #202	; 0xca
 800eb34:	625a      	str	r2, [r3, #36]	; 0x24
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2253      	movs	r2, #83	; 0x53
 800eb3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 fb16 	bl	800f170 <RTC_EnterInitMode>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d008      	beq.n	800eb5c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	22ff      	movs	r2, #255	; 0xff
 800eb50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2204      	movs	r2, #4
 800eb56:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	e05c      	b.n	800ec16 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6899      	ldr	r1, [r3, #8]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	4b2e      	ldr	r3, [pc, #184]	; (800ec20 <HAL_RTC_Init+0x120>)
 800eb68:	400b      	ands	r3, r1
 800eb6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	6899      	ldr	r1, [r3, #8]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	685a      	ldr	r2, [r3, #4]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	431a      	orrs	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	695b      	ldr	r3, [r3, #20]
 800eb80:	431a      	orrs	r2, r3
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	430a      	orrs	r2, r1
 800eb88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	68d2      	ldr	r2, [r2, #12]
 800eb92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6919      	ldr	r1, [r3, #16]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	041a      	lsls	r2, r3, #16
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	430a      	orrs	r2, r1
 800eba6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	68da      	ldr	r2, [r3, #12]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ebb6:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	f003 0320 	and.w	r3, r3, #32
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10e      	bne.n	800ebe4 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 faaa 	bl	800f120 <HAL_RTC_WaitForSynchro>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d008      	beq.n	800ebe4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	22ff      	movs	r2, #255	; 0xff
 800ebd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2204      	movs	r2, #4
 800ebde:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	e018      	b.n	800ec16 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f022 0208 	bic.w	r2, r2, #8
 800ebf2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	699a      	ldr	r2, [r3, #24]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	430a      	orrs	r2, r1
 800ec04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	22ff      	movs	r2, #255	; 0xff
 800ec0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2201      	movs	r2, #1
 800ec12:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ec14:	2300      	movs	r3, #0
  }
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3708      	adds	r7, #8
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	ff8fffbf 	.word	0xff8fffbf

0800ec24 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ec24:	b590      	push	{r4, r7, lr}
 800ec26:	b087      	sub	sp, #28
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800ec30:	2300      	movs	r3, #0
 800ec32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	7f1b      	ldrb	r3, [r3, #28]
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d101      	bne.n	800ec40 <HAL_RTC_SetTime+0x1c>
 800ec3c:	2302      	movs	r3, #2
 800ec3e:	e0a8      	b.n	800ed92 <HAL_RTC_SetTime+0x16e>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2201      	movs	r2, #1
 800ec44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2202      	movs	r2, #2
 800ec4a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d126      	bne.n	800eca0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d102      	bne.n	800ec66 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	2200      	movs	r2, #0
 800ec64:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f000 faac 	bl	800f1c8 <RTC_ByteToBcd2>
 800ec70:	4603      	mov	r3, r0
 800ec72:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	785b      	ldrb	r3, [r3, #1]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f000 faa5 	bl	800f1c8 <RTC_ByteToBcd2>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ec82:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	789b      	ldrb	r3, [r3, #2]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f000 fa9d 	bl	800f1c8 <RTC_ByteToBcd2>
 800ec8e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ec90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	7b1b      	ldrb	r3, [r3, #12]
 800ec98:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	617b      	str	r3, [r7, #20]
 800ec9e:	e018      	b.n	800ecd2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d102      	bne.n	800ecb4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	785b      	ldrb	r3, [r3, #1]
 800ecbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ecc0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ecc6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	7b1b      	ldrb	r3, [r3, #12]
 800eccc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	22ca      	movs	r2, #202	; 0xca
 800ecd8:	625a      	str	r2, [r3, #36]	; 0x24
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2253      	movs	r2, #83	; 0x53
 800ece0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f000 fa44 	bl	800f170 <RTC_EnterInitMode>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00b      	beq.n	800ed06 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	22ff      	movs	r2, #255	; 0xff
 800ecf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2204      	movs	r2, #4
 800ecfa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ed02:	2301      	movs	r3, #1
 800ed04:	e045      	b.n	800ed92 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	6979      	ldr	r1, [r7, #20]
 800ed0c:	4b23      	ldr	r3, [pc, #140]	; (800ed9c <HAL_RTC_SetTime+0x178>)
 800ed0e:	400b      	ands	r3, r1
 800ed10:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ed20:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	6899      	ldr	r1, [r3, #8]
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	691a      	ldr	r2, [r3, #16]
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	695b      	ldr	r3, [r3, #20]
 800ed30:	431a      	orrs	r2, r3
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	430a      	orrs	r2, r1
 800ed38:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	68da      	ldr	r2, [r3, #12]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed48:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	f003 0320 	and.w	r3, r3, #32
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d111      	bne.n	800ed7c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ed58:	68f8      	ldr	r0, [r7, #12]
 800ed5a:	f000 f9e1 	bl	800f120 <HAL_RTC_WaitForSynchro>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d00b      	beq.n	800ed7c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	22ff      	movs	r2, #255	; 0xff
 800ed6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2204      	movs	r2, #4
 800ed70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2200      	movs	r2, #0
 800ed76:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e00a      	b.n	800ed92 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	22ff      	movs	r2, #255	; 0xff
 800ed82:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2201      	movs	r2, #1
 800ed88:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ed90:	2300      	movs	r3, #0
  }
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	371c      	adds	r7, #28
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd90      	pop	{r4, r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	007f7f7f 	.word	0x007f7f7f

0800eda0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800eda0:	b590      	push	{r4, r7, lr}
 800eda2:	b087      	sub	sp, #28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	7f1b      	ldrb	r3, [r3, #28]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d101      	bne.n	800edbc <HAL_RTC_SetDate+0x1c>
 800edb8:	2302      	movs	r3, #2
 800edba:	e092      	b.n	800eee2 <HAL_RTC_SetDate+0x142>
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2201      	movs	r2, #1
 800edc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2202      	movs	r2, #2
 800edc6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d10e      	bne.n	800edec <HAL_RTC_SetDate+0x4c>
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	785b      	ldrb	r3, [r3, #1]
 800edd2:	f003 0310 	and.w	r3, r3, #16
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d008      	beq.n	800edec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	785b      	ldrb	r3, [r3, #1]
 800edde:	f023 0310 	bic.w	r3, r3, #16
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	330a      	adds	r3, #10
 800ede6:	b2da      	uxtb	r2, r3
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d11c      	bne.n	800ee2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	78db      	ldrb	r3, [r3, #3]
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 f9e6 	bl	800f1c8 <RTC_ByteToBcd2>
 800edfc:	4603      	mov	r3, r0
 800edfe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	785b      	ldrb	r3, [r3, #1]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f000 f9df 	bl	800f1c8 <RTC_ByteToBcd2>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ee0e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	789b      	ldrb	r3, [r3, #2]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f000 f9d7 	bl	800f1c8 <RTC_ByteToBcd2>
 800ee1a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ee1c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ee26:	4313      	orrs	r3, r2
 800ee28:	617b      	str	r3, [r7, #20]
 800ee2a:	e00e      	b.n	800ee4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	78db      	ldrb	r3, [r3, #3]
 800ee30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	785b      	ldrb	r3, [r3, #1]
 800ee36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ee38:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ee3a:	68ba      	ldr	r2, [r7, #8]
 800ee3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800ee3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ee46:	4313      	orrs	r3, r2
 800ee48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	22ca      	movs	r2, #202	; 0xca
 800ee50:	625a      	str	r2, [r3, #36]	; 0x24
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2253      	movs	r2, #83	; 0x53
 800ee58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f000 f988 	bl	800f170 <RTC_EnterInitMode>
 800ee60:	4603      	mov	r3, r0
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00b      	beq.n	800ee7e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	22ff      	movs	r2, #255	; 0xff
 800ee6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2204      	movs	r2, #4
 800ee72:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2200      	movs	r2, #0
 800ee78:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e031      	b.n	800eee2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	6979      	ldr	r1, [r7, #20]
 800ee84:	4b19      	ldr	r3, [pc, #100]	; (800eeec <HAL_RTC_SetDate+0x14c>)
 800ee86:	400b      	ands	r3, r1
 800ee88:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	68da      	ldr	r2, [r3, #12]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee98:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	689b      	ldr	r3, [r3, #8]
 800eea0:	f003 0320 	and.w	r3, r3, #32
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d111      	bne.n	800eecc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f000 f939 	bl	800f120 <HAL_RTC_WaitForSynchro>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00b      	beq.n	800eecc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	22ff      	movs	r2, #255	; 0xff
 800eeba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2204      	movs	r2, #4
 800eec0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2200      	movs	r2, #0
 800eec6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800eec8:	2301      	movs	r3, #1
 800eeca:	e00a      	b.n	800eee2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	22ff      	movs	r2, #255	; 0xff
 800eed2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2201      	movs	r2, #1
 800eed8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2200      	movs	r2, #0
 800eede:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800eee0:	2300      	movs	r3, #0
  }
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	371c      	adds	r7, #28
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd90      	pop	{r4, r7, pc}
 800eeea:	bf00      	nop
 800eeec:	00ffff3f 	.word	0x00ffff3f

0800eef0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800eef0:	b590      	push	{r4, r7, lr}
 800eef2:	b089      	sub	sp, #36	; 0x24
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800ef00:	2300      	movs	r3, #0
 800ef02:	61fb      	str	r3, [r7, #28]
 800ef04:	2300      	movs	r3, #0
 800ef06:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	7f1b      	ldrb	r3, [r3, #28]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d101      	bne.n	800ef14 <HAL_RTC_SetAlarm+0x24>
 800ef10:	2302      	movs	r3, #2
 800ef12:	e101      	b.n	800f118 <HAL_RTC_SetAlarm+0x228>
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2201      	movs	r2, #1
 800ef18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2202      	movs	r2, #2
 800ef1e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d137      	bne.n	800ef96 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d102      	bne.n	800ef3a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	2200      	movs	r2, #0
 800ef38:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f000 f942 	bl	800f1c8 <RTC_ByteToBcd2>
 800ef44:	4603      	mov	r3, r0
 800ef46:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	785b      	ldrb	r3, [r3, #1]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f000 f93b 	bl	800f1c8 <RTC_ByteToBcd2>
 800ef52:	4603      	mov	r3, r0
 800ef54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ef56:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	789b      	ldrb	r3, [r3, #2]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f000 f933 	bl	800f1c8 <RTC_ByteToBcd2>
 800ef62:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ef64:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	7b1b      	ldrb	r3, [r3, #12]
 800ef6c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ef6e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f000 f925 	bl	800f1c8 <RTC_ByteToBcd2>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ef82:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ef8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ef90:	4313      	orrs	r3, r2
 800ef92:	61fb      	str	r3, [r7, #28]
 800ef94:	e023      	b.n	800efde <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d102      	bne.n	800efaa <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	2200      	movs	r2, #0
 800efa8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	785b      	ldrb	r3, [r3, #1]
 800efb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800efb6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800efbc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	7b1b      	ldrb	r3, [r3, #12]
 800efc2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800efc4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800efcc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800efce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800efd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800efda:	4313      	orrs	r3, r2
 800efdc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	685a      	ldr	r2, [r3, #4]
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	69db      	ldr	r3, [r3, #28]
 800efe6:	4313      	orrs	r3, r2
 800efe8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	22ca      	movs	r2, #202	; 0xca
 800eff0:	625a      	str	r2, [r3, #36]	; 0x24
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2253      	movs	r2, #83	; 0x53
 800eff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800effe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f002:	d13f      	bne.n	800f084 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	689a      	ldr	r2, [r3, #8]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f012:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	689a      	ldr	r2, [r3, #8]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f022:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f024:	f7f8 fc2e 	bl	8007884 <HAL_GetTick>
 800f028:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800f02a:	e013      	b.n	800f054 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f02c:	f7f8 fc2a 	bl	8007884 <HAL_GetTick>
 800f030:	4602      	mov	r2, r0
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f03a:	d90b      	bls.n	800f054 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	22ff      	movs	r2, #255	; 0xff
 800f042:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2203      	movs	r2, #3
 800f048:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2200      	movs	r2, #0
 800f04e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800f050:	2303      	movs	r3, #3
 800f052:	e061      	b.n	800f118 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d0e4      	beq.n	800f02c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	69fa      	ldr	r2, [r7, #28]
 800f068:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	697a      	ldr	r2, [r7, #20]
 800f070:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	689a      	ldr	r2, [r3, #8]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f080:	609a      	str	r2, [r3, #8]
 800f082:	e03e      	b.n	800f102 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	689a      	ldr	r2, [r3, #8]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f092:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	689a      	ldr	r2, [r3, #8]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f0a2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f0a4:	f7f8 fbee 	bl	8007884 <HAL_GetTick>
 800f0a8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800f0aa:	e013      	b.n	800f0d4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f0ac:	f7f8 fbea 	bl	8007884 <HAL_GetTick>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	1ad3      	subs	r3, r2, r3
 800f0b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f0ba:	d90b      	bls.n	800f0d4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	22ff      	movs	r2, #255	; 0xff
 800f0c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2203      	movs	r2, #3
 800f0c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800f0d0:	2303      	movs	r3, #3
 800f0d2:	e021      	b.n	800f118 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	f003 0302 	and.w	r3, r3, #2
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d0e4      	beq.n	800f0ac <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	69fa      	ldr	r2, [r7, #28]
 800f0e8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	697a      	ldr	r2, [r7, #20]
 800f0f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	689a      	ldr	r2, [r3, #8]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f100:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	22ff      	movs	r2, #255	; 0xff
 800f108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2201      	movs	r2, #1
 800f10e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2200      	movs	r2, #0
 800f114:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800f116:	2300      	movs	r3, #0
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3724      	adds	r7, #36	; 0x24
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd90      	pop	{r4, r7, pc}

0800f120 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f128:	2300      	movs	r3, #0
 800f12a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	68da      	ldr	r2, [r3, #12]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f13a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f13c:	f7f8 fba2 	bl	8007884 <HAL_GetTick>
 800f140:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f142:	e009      	b.n	800f158 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f144:	f7f8 fb9e 	bl	8007884 <HAL_GetTick>
 800f148:	4602      	mov	r2, r0
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	1ad3      	subs	r3, r2, r3
 800f14e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f152:	d901      	bls.n	800f158 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800f154:	2303      	movs	r3, #3
 800f156:	e007      	b.n	800f168 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	f003 0320 	and.w	r3, r3, #32
 800f162:	2b00      	cmp	r3, #0
 800f164:	d0ee      	beq.n	800f144 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f178:	2300      	movs	r3, #0
 800f17a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f186:	2b00      	cmp	r3, #0
 800f188:	d119      	bne.n	800f1be <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f04f 32ff 	mov.w	r2, #4294967295
 800f192:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f194:	f7f8 fb76 	bl	8007884 <HAL_GetTick>
 800f198:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f19a:	e009      	b.n	800f1b0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f19c:	f7f8 fb72 	bl	8007884 <HAL_GetTick>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f1aa:	d901      	bls.n	800f1b0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800f1ac:	2303      	movs	r3, #3
 800f1ae:	e007      	b.n	800f1c0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d0ee      	beq.n	800f19c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800f1d6:	e005      	b.n	800f1e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	3b0a      	subs	r3, #10
 800f1e2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800f1e4:	79fb      	ldrb	r3, [r7, #7]
 800f1e6:	2b09      	cmp	r3, #9
 800f1e8:	d8f6      	bhi.n	800f1d8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	011b      	lsls	r3, r3, #4
 800f1f0:	b2da      	uxtb	r2, r3
 800f1f2:	79fb      	ldrb	r3, [r7, #7]
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	b2db      	uxtb	r3, r3
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3714      	adds	r7, #20
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800f204:	b480      	push	{r7}
 800f206:	b087      	sub	sp, #28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800f210:	2300      	movs	r3, #0
 800f212:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	7f1b      	ldrb	r3, [r3, #28]
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d101      	bne.n	800f220 <HAL_RTCEx_SetTimeStamp+0x1c>
 800f21c:	2302      	movs	r3, #2
 800f21e:	e03e      	b.n	800f29e <HAL_RTCEx_SetTimeStamp+0x9a>
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2201      	movs	r2, #1
 800f224:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2202      	movs	r2, #2
 800f22a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	689a      	ldr	r2, [r3, #8]
 800f232:	4b1e      	ldr	r3, [pc, #120]	; (800f2ac <HAL_RTCEx_SetTimeStamp+0xa8>)
 800f234:	4013      	ands	r3, r2
 800f236:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800f238:	697a      	ldr	r2, [r7, #20]
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	4313      	orrs	r3, r2
 800f23e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	22ca      	movs	r2, #202	; 0xca
 800f246:	625a      	str	r2, [r3, #36]	; 0x24
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2253      	movs	r2, #83	; 0x53
 800f24e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f022 0206 	bic.w	r2, r2, #6
 800f25e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	430a      	orrs	r2, r1
 800f26e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689a      	ldr	r2, [r3, #8]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f286:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	22ff      	movs	r2, #255	; 0xff
 800f28e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2201      	movs	r2, #1
 800f294:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2200      	movs	r2, #0
 800f29a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	371c      	adds	r7, #28
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop
 800f2ac:	fffff7f7 	.word	0xfffff7f7

0800f2b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b088      	sub	sp, #32
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e156      	b.n	800f57c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d106      	bne.n	800f2e8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7f4 ffba 	bl	800425c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2202      	movs	r2, #2
 800f2ec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 facf 	bl	800f894 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d00c      	beq.n	800f318 <HAL_SAI_Init+0x68>
 800f2fe:	2b02      	cmp	r3, #2
 800f300:	d80d      	bhi.n	800f31e <HAL_SAI_Init+0x6e>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d002      	beq.n	800f30c <HAL_SAI_Init+0x5c>
 800f306:	2b01      	cmp	r3, #1
 800f308:	d003      	beq.n	800f312 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800f30a:	e008      	b.n	800f31e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800f30c:	2300      	movs	r3, #0
 800f30e:	61fb      	str	r3, [r7, #28]
      break;
 800f310:	e006      	b.n	800f320 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f312:	2310      	movs	r3, #16
 800f314:	61fb      	str	r3, [r7, #28]
      break;
 800f316:	e003      	b.n	800f320 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f318:	2320      	movs	r3, #32
 800f31a:	61fb      	str	r3, [r7, #28]
      break;
 800f31c:	e000      	b.n	800f320 <HAL_SAI_Init+0x70>
      break;
 800f31e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	2b03      	cmp	r3, #3
 800f326:	d81e      	bhi.n	800f366 <HAL_SAI_Init+0xb6>
 800f328:	a201      	add	r2, pc, #4	; (adr r2, 800f330 <HAL_SAI_Init+0x80>)
 800f32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f32e:	bf00      	nop
 800f330:	0800f341 	.word	0x0800f341
 800f334:	0800f347 	.word	0x0800f347
 800f338:	0800f34f 	.word	0x0800f34f
 800f33c:	0800f357 	.word	0x0800f357
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800f340:	2300      	movs	r3, #0
 800f342:	617b      	str	r3, [r7, #20]
    }
    break;
 800f344:	e010      	b.n	800f368 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f34a:	617b      	str	r3, [r7, #20]
    }
    break;
 800f34c:	e00c      	b.n	800f368 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f34e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f352:	617b      	str	r3, [r7, #20]
    }
    break;
 800f354:	e008      	b.n	800f368 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f35a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	f043 0301 	orr.w	r3, r3, #1
 800f362:	61fb      	str	r3, [r7, #28]
    }
    break;
 800f364:	e000      	b.n	800f368 <HAL_SAI_Init+0xb8>
    default:
      break;
 800f366:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a85      	ldr	r2, [pc, #532]	; (800f584 <HAL_SAI_Init+0x2d4>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d004      	beq.n	800f37c <HAL_SAI_Init+0xcc>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4a84      	ldr	r2, [pc, #528]	; (800f588 <HAL_SAI_Init+0x2d8>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d103      	bne.n	800f384 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800f37c:	4a83      	ldr	r2, [pc, #524]	; (800f58c <HAL_SAI_Init+0x2dc>)
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	6013      	str	r3, [r2, #0]
 800f382:	e002      	b.n	800f38a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800f384:	4a82      	ldr	r2, [pc, #520]	; (800f590 <HAL_SAI_Init+0x2e0>)
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	69db      	ldr	r3, [r3, #28]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d04c      	beq.n	800f42c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800f392:	2300      	movs	r3, #0
 800f394:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4a7a      	ldr	r2, [pc, #488]	; (800f584 <HAL_SAI_Init+0x2d4>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d004      	beq.n	800f3aa <HAL_SAI_Init+0xfa>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a78      	ldr	r2, [pc, #480]	; (800f588 <HAL_SAI_Init+0x2d8>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d104      	bne.n	800f3b4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f3aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800f3ae:	f7ff fa63 	bl	800e878 <HAL_RCCEx_GetPeriphCLKFreq>
 800f3b2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	4a76      	ldr	r2, [pc, #472]	; (800f594 <HAL_SAI_Init+0x2e4>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d004      	beq.n	800f3c8 <HAL_SAI_Init+0x118>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4a75      	ldr	r2, [pc, #468]	; (800f598 <HAL_SAI_Init+0x2e8>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d104      	bne.n	800f3d2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f3c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f3cc:	f7ff fa54 	bl	800e878 <HAL_RCCEx_GetPeriphCLKFreq>
 800f3d0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800f3d2:	693a      	ldr	r2, [r7, #16]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	4413      	add	r3, r2
 800f3da:	005b      	lsls	r3, r3, #1
 800f3dc:	461a      	mov	r2, r3
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	69db      	ldr	r3, [r3, #28]
 800f3e2:	025b      	lsls	r3, r3, #9
 800f3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3e8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	4a6b      	ldr	r2, [pc, #428]	; (800f59c <HAL_SAI_Init+0x2ec>)
 800f3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f3f2:	08da      	lsrs	r2, r3, #3
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800f3f8:	68f9      	ldr	r1, [r7, #12]
 800f3fa:	4b68      	ldr	r3, [pc, #416]	; (800f59c <HAL_SAI_Init+0x2ec>)
 800f3fc:	fba3 2301 	umull	r2, r3, r3, r1
 800f400:	08da      	lsrs	r2, r3, #3
 800f402:	4613      	mov	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4413      	add	r3, r2
 800f408:	005b      	lsls	r3, r3, #1
 800f40a:	1aca      	subs	r2, r1, r3
 800f40c:	2a08      	cmp	r2, #8
 800f40e:	d904      	bls.n	800f41a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6a1b      	ldr	r3, [r3, #32]
 800f414:	1c5a      	adds	r2, r3, #1
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f41e:	2b04      	cmp	r3, #4
 800f420:	d104      	bne.n	800f42c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6a1b      	ldr	r3, [r3, #32]
 800f426:	085a      	lsrs	r2, r3, #1
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d003      	beq.n	800f43c <HAL_SAI_Init+0x18c>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	2b02      	cmp	r3, #2
 800f43a:	d109      	bne.n	800f450 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f440:	2b01      	cmp	r3, #1
 800f442:	d101      	bne.n	800f448 <HAL_SAI_Init+0x198>
 800f444:	2300      	movs	r3, #0
 800f446:	e001      	b.n	800f44c <HAL_SAI_Init+0x19c>
 800f448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f44c:	61bb      	str	r3, [r7, #24]
 800f44e:	e008      	b.n	800f462 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f454:	2b01      	cmp	r3, #1
 800f456:	d102      	bne.n	800f45e <HAL_SAI_Init+0x1ae>
 800f458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f45c:	e000      	b.n	800f460 <HAL_SAI_Init+0x1b0>
 800f45e:	2300      	movs	r3, #0
 800f460:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	6819      	ldr	r1, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	4b4c      	ldr	r3, [pc, #304]	; (800f5a0 <HAL_SAI_Init+0x2f0>)
 800f46e:	400b      	ands	r3, r1
 800f470:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	6819      	ldr	r1, [r3, #0]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	685a      	ldr	r2, [r3, #4]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f480:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f486:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f48c:	431a      	orrs	r2, r3
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800f49a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	691b      	ldr	r3, [r3, #16]
 800f4a0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f4a6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6a1b      	ldr	r3, [r3, #32]
 800f4ac:	051b      	lsls	r3, r3, #20
 800f4ae:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	430a      	orrs	r2, r1
 800f4b6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6859      	ldr	r1, [r3, #4]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	4b38      	ldr	r3, [pc, #224]	; (800f5a4 <HAL_SAI_Init+0x2f4>)
 800f4c4:	400b      	ands	r3, r1
 800f4c6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	6859      	ldr	r1, [r3, #4]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	699a      	ldr	r2, [r3, #24]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d6:	431a      	orrs	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4dc:	431a      	orrs	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	430a      	orrs	r2, r1
 800f4e4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	6899      	ldr	r1, [r3, #8]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	4b2d      	ldr	r3, [pc, #180]	; (800f5a8 <HAL_SAI_Init+0x2f8>)
 800f4f2:	400b      	ands	r3, r1
 800f4f4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	6899      	ldr	r1, [r3, #8]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f500:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800f506:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800f50c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800f512:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f518:	3b01      	subs	r3, #1
 800f51a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f51c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	430a      	orrs	r2, r1
 800f524:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	68d9      	ldr	r1, [r3, #12]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f534:	400b      	ands	r3, r1
 800f536:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	68d9      	ldr	r1, [r3, #12]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f546:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f54c:	041b      	lsls	r3, r3, #16
 800f54e:	431a      	orrs	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f554:	3b01      	subs	r3, #1
 800f556:	021b      	lsls	r3, r3, #8
 800f558:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	430a      	orrs	r2, r1
 800f560:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2200      	movs	r2, #0
 800f566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2201      	movs	r2, #1
 800f56e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f57a:	2300      	movs	r3, #0
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3720      	adds	r7, #32
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	40015804 	.word	0x40015804
 800f588:	40015824 	.word	0x40015824
 800f58c:	40015800 	.word	0x40015800
 800f590:	40015c00 	.word	0x40015c00
 800f594:	40015c04 	.word	0x40015c04
 800f598:	40015c24 	.word	0x40015c24
 800f59c:	cccccccd 	.word	0xcccccccd
 800f5a0:	ff05c010 	.word	0xff05c010
 800f5a4:	ffff1ff0 	.word	0xffff1ff0
 800f5a8:	fff88000 	.word	0xfff88000

0800f5ac <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b086      	sub	sp, #24
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800f5ba:	f7f8 f963 	bl	8007884 <HAL_GetTick>
 800f5be:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d002      	beq.n	800f5cc <HAL_SAI_Transmit_DMA+0x20>
 800f5c6:	88fb      	ldrh	r3, [r7, #6]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d101      	bne.n	800f5d0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e093      	b.n	800f6f8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	f040 808c 	bne.w	800f6f6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d101      	bne.n	800f5ec <HAL_SAI_Transmit_DMA+0x40>
 800f5e8:	2302      	movs	r3, #2
 800f5ea:	e085      	b.n	800f6f8 <HAL_SAI_Transmit_DMA+0x14c>
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	88fa      	ldrh	r2, [r7, #6]
 800f5fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	88fa      	ldrh	r2, [r7, #6]
 800f606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2200      	movs	r2, #0
 800f60e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2212      	movs	r2, #18
 800f616:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f61e:	4a38      	ldr	r2, [pc, #224]	; (800f700 <HAL_SAI_Transmit_DMA+0x154>)
 800f620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f626:	4a37      	ldr	r2, [pc, #220]	; (800f704 <HAL_SAI_Transmit_DMA+0x158>)
 800f628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f62e:	4a36      	ldr	r2, [pc, #216]	; (800f708 <HAL_SAI_Transmit_DMA+0x15c>)
 800f630:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f636:	2200      	movs	r2, #0
 800f638:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f642:	4619      	mov	r1, r3
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	331c      	adds	r3, #28
 800f64a:	461a      	mov	r2, r3
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f652:	f7f9 f841 	bl	80086d8 <HAL_DMA_Start_IT>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d005      	beq.n	800f668 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800f664:	2301      	movs	r3, #1
 800f666:	e047      	b.n	800f6f8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f668:	2100      	movs	r1, #0
 800f66a:	68f8      	ldr	r0, [r7, #12]
 800f66c:	f000 f8dc 	bl	800f828 <SAI_InterruptFlag>
 800f670:	4601      	mov	r1, r0
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	691a      	ldr	r2, [r3, #16]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	430a      	orrs	r2, r1
 800f67e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f68e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f690:	e015      	b.n	800f6be <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f692:	f7f8 f8f7 	bl	8007884 <HAL_GetTick>
 800f696:	4602      	mov	r2, r0
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f6a0:	d90d      	bls.n	800f6be <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f6a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800f6ba:	2303      	movs	r3, #3
 800f6bc:	e01c      	b.n	800f6f8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	695b      	ldr	r3, [r3, #20]
 800f6c4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d0e2      	beq.n	800f692 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d107      	bne.n	800f6ea <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f6e8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	e000      	b.n	800f6f8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800f6f6:	2302      	movs	r3, #2
  }
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3718      	adds	r7, #24
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	0800f965 	.word	0x0800f965
 800f704:	0800f905 	.word	0x0800f905
 800f708:	0800f9fd 	.word	0x0800f9fd

0800f70c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	4613      	mov	r3, r2
 800f718:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d002      	beq.n	800f726 <HAL_SAI_Receive_DMA+0x1a>
 800f720:	88fb      	ldrh	r3, [r7, #6]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d101      	bne.n	800f72a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f726:	2301      	movs	r3, #1
 800f728:	e074      	b.n	800f814 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f730:	b2db      	uxtb	r3, r3
 800f732:	2b01      	cmp	r3, #1
 800f734:	d16d      	bne.n	800f812 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d101      	bne.n	800f744 <HAL_SAI_Receive_DMA+0x38>
 800f740:	2302      	movs	r3, #2
 800f742:	e067      	b.n	800f814 <HAL_SAI_Receive_DMA+0x108>
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2201      	movs	r2, #1
 800f748:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	88fa      	ldrh	r2, [r7, #6]
 800f756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	88fa      	ldrh	r2, [r7, #6]
 800f75e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2200      	movs	r2, #0
 800f766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2222      	movs	r2, #34	; 0x22
 800f76e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f776:	4a29      	ldr	r2, [pc, #164]	; (800f81c <HAL_SAI_Receive_DMA+0x110>)
 800f778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f77e:	4a28      	ldr	r2, [pc, #160]	; (800f820 <HAL_SAI_Receive_DMA+0x114>)
 800f780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f786:	4a27      	ldr	r2, [pc, #156]	; (800f824 <HAL_SAI_Receive_DMA+0x118>)
 800f788:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f78e:	2200      	movs	r2, #0
 800f790:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	331c      	adds	r3, #28
 800f79c:	4619      	mov	r1, r3
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7aa:	f7f8 ff95 	bl	80086d8 <HAL_DMA_Start_IT>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d005      	beq.n	800f7c0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e029      	b.n	800f814 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	68f8      	ldr	r0, [r7, #12]
 800f7c4:	f000 f830 	bl	800f828 <SAI_InterruptFlag>
 800f7c8:	4601      	mov	r1, r0
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	691a      	ldr	r2, [r3, #16]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	430a      	orrs	r2, r1
 800f7d6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	681a      	ldr	r2, [r3, #0]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f7e6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d107      	bne.n	800f806 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f804:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2200      	movs	r2, #0
 800f80a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800f80e:	2300      	movs	r3, #0
 800f810:	e000      	b.n	800f814 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800f812:	2302      	movs	r3, #2
  }
}
 800f814:	4618      	mov	r0, r3
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	0800f9e1 	.word	0x0800f9e1
 800f820:	0800f981 	.word	0x0800f981
 800f824:	0800f9fd 	.word	0x0800f9fd

0800f828 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f832:	2301      	movs	r3, #1
 800f834:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d103      	bne.n	800f844 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f043 0308 	orr.w	r3, r3, #8
 800f842:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f848:	2b08      	cmp	r3, #8
 800f84a:	d10b      	bne.n	800f864 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f850:	2b03      	cmp	r3, #3
 800f852:	d003      	beq.n	800f85c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d103      	bne.n	800f864 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f043 0310 	orr.w	r3, r3, #16
 800f862:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	2b03      	cmp	r3, #3
 800f86a:	d003      	beq.n	800f874 <SAI_InterruptFlag+0x4c>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	2b02      	cmp	r3, #2
 800f872:	d104      	bne.n	800f87e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f87a:	60fb      	str	r3, [r7, #12]
 800f87c:	e003      	b.n	800f886 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f043 0304 	orr.w	r3, r3, #4
 800f884:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f886:	68fb      	ldr	r3, [r7, #12]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3714      	adds	r7, #20
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f894:	b480      	push	{r7}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800f89c:	4b17      	ldr	r3, [pc, #92]	; (800f8fc <SAI_Disable+0x68>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a17      	ldr	r2, [pc, #92]	; (800f900 <SAI_Disable+0x6c>)
 800f8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8a6:	0b1b      	lsrs	r3, r3, #12
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f8be:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	1e5a      	subs	r2, r3, #1
 800f8c4:	60fa      	str	r2, [r7, #12]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10a      	bne.n	800f8e0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f8d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800f8da:	2303      	movs	r3, #3
 800f8dc:	72fb      	strb	r3, [r7, #11]
      break;
 800f8de:	e006      	b.n	800f8ee <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1e8      	bne.n	800f8c0 <SAI_Disable+0x2c>

  return status;
 800f8ee:	7afb      	ldrb	r3, [r7, #11]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3714      	adds	r7, #20
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr
 800f8fc:	20000008 	.word	0x20000008
 800f900:	95cbec1b 	.word	0x95cbec1b

0800f904 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f910:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	69db      	ldr	r3, [r3, #28]
 800f916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f91a:	d01c      	beq.n	800f956 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2200      	movs	r2, #0
 800f920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f932:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f934:	2100      	movs	r1, #0
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	f7ff ff76 	bl	800f828 <SAI_InterruptFlag>
 800f93c:	4603      	mov	r3, r0
 800f93e:	43d9      	mvns	r1, r3
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	691a      	ldr	r2, [r3, #16]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	400a      	ands	r2, r1
 800f94c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2201      	movs	r2, #1
 800f952:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	f7f6 fa56 	bl	8005e08 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f95c:	bf00      	nop
 800f95e:	3710      	adds	r7, #16
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f970:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f7f6 fa52 	bl	8005e1c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f978:	bf00      	nop
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f98c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	69db      	ldr	r3, [r3, #28]
 800f992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f996:	d01c      	beq.n	800f9d2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f9a6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f7ff ff38 	bl	800f828 <SAI_InterruptFlag>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	43d9      	mvns	r1, r3
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	691a      	ldr	r2, [r3, #16]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	400a      	ands	r2, r1
 800f9c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	f7f1 fb84 	bl	80010e0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f9d8:	bf00      	nop
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f9ee:	68f8      	ldr	r0, [r7, #12]
 800f9f0:	f7f1 fb86 	bl	8001100 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f9f4:	bf00      	nop
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa08:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d004      	beq.n	800fa2e <SAI_DMAError+0x32>
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d112      	bne.n	800fa54 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fa3c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f7ff ff28 	bl	800f894 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2201      	movs	r2, #1
 800fa48:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f7f6 f9eb 	bl	8005e30 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fa5a:	bf00      	nop
 800fa5c:	3710      	adds	r7, #16
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b082      	sub	sp, #8
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d101      	bne.n	800fa74 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800fa70:	2301      	movs	r3, #1
 800fa72:	e022      	b.n	800faba <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d105      	bne.n	800fa8c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7f4 f8b0 	bl	8003bec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2203      	movs	r2, #3
 800fa90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 f815 	bl	800fac4 <HAL_SD_InitCard>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d001      	beq.n	800faa4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800faa0:	2301      	movs	r3, #1
 800faa2:	e00a      	b.n	800faba <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2201      	movs	r2, #1
 800fab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800fab8:	2300      	movs	r3, #0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
	...

0800fac4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fac4:	b5b0      	push	{r4, r5, r7, lr}
 800fac6:	b08e      	sub	sp, #56	; 0x38
 800fac8:	af04      	add	r7, sp, #16
 800faca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800facc:	2300      	movs	r3, #0
 800face:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800fad0:	2300      	movs	r3, #0
 800fad2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800fad4:	2300      	movs	r3, #0
 800fad6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800fad8:	2300      	movs	r3, #0
 800fada:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800fadc:	2300      	movs	r3, #0
 800fade:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800fae0:	2376      	movs	r3, #118	; 0x76
 800fae2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681d      	ldr	r5, [r3, #0]
 800fae8:	466c      	mov	r4, sp
 800faea:	f107 0314 	add.w	r3, r7, #20
 800faee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800faf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800faf6:	f107 0308 	add.w	r3, r7, #8
 800fafa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fafc:	4628      	mov	r0, r5
 800fafe:	f002 ffef 	bl	8012ae0 <SDMMC_Init>
 800fb02:	4603      	mov	r3, r0
 800fb04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800fb08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d001      	beq.n	800fb14 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800fb10:	2301      	movs	r3, #1
 800fb12:	e056      	b.n	800fbc2 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	685a      	ldr	r2, [r3, #4]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fb22:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f003 f812 	bl	8012b52 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	685a      	ldr	r2, [r3, #4]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fb3c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 fe0e 	bl	8010760 <SD_PowerON>
 800fb44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb46:	6a3b      	ldr	r3, [r7, #32]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00b      	beq.n	800fb64 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2201      	movs	r2, #1
 800fb50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb58:	6a3b      	ldr	r3, [r7, #32]
 800fb5a:	431a      	orrs	r2, r3
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800fb60:	2301      	movs	r3, #1
 800fb62:	e02e      	b.n	800fbc2 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fd2f 	bl	80105c8 <SD_InitCard>
 800fb6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb6c:	6a3b      	ldr	r3, [r7, #32]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00b      	beq.n	800fb8a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2201      	movs	r2, #1
 800fb76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb7e:	6a3b      	ldr	r3, [r7, #32]
 800fb80:	431a      	orrs	r2, r3
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800fb86:	2301      	movs	r3, #1
 800fb88:	e01b      	b.n	800fbc2 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fb92:	4618      	mov	r0, r3
 800fb94:	f003 f870 	bl	8012c78 <SDMMC_CmdBlockLength>
 800fb98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb9a:	6a3b      	ldr	r3, [r7, #32]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d00f      	beq.n	800fbc0 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a09      	ldr	r2, [pc, #36]	; (800fbcc <HAL_SD_InitCard+0x108>)
 800fba6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	431a      	orrs	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	e000      	b.n	800fbc2 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800fbc0:	2300      	movs	r3, #0
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3728      	adds	r7, #40	; 0x28
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bdb0      	pop	{r4, r5, r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	004005ff 	.word	0x004005ff

0800fbd0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b08c      	sub	sp, #48	; 0x30
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	607a      	str	r2, [r7, #4]
 800fbdc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d107      	bne.n	800fbf8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	e0c3      	b.n	800fd80 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbfe:	b2db      	uxtb	r3, r3
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	f040 80bc 	bne.w	800fd7e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fc0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	441a      	add	r2, r3
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d907      	bls.n	800fc2a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800fc26:	2301      	movs	r3, #1
 800fc28:	e0aa      	b.n	800fd80 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2203      	movs	r2, #3
 800fc2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2200      	movs	r2, #0
 800fc38:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800fc48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc4e:	4a4e      	ldr	r2, [pc, #312]	; (800fd88 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800fc50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc56:	4a4d      	ldr	r2, [pc, #308]	; (800fd8c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800fc58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc5e:	2200      	movs	r2, #0
 800fc60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc66:	2200      	movs	r2, #0
 800fc68:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc7a:	689a      	ldr	r2, [r3, #8]
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	430a      	orrs	r2, r1
 800fc84:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	3380      	adds	r3, #128	; 0x80
 800fc90:	4619      	mov	r1, r3
 800fc92:	68ba      	ldr	r2, [r7, #8]
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	025b      	lsls	r3, r3, #9
 800fc98:	089b      	lsrs	r3, r3, #2
 800fc9a:	f7f8 fd1d 	bl	80086d8 <HAL_DMA_Start_IT>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d017      	beq.n	800fcd4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800fcb2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a35      	ldr	r2, [pc, #212]	; (800fd90 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800fcba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	e055      	b.n	800fd80 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f042 0208 	orr.w	r2, r2, #8
 800fce2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d002      	beq.n	800fcf2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800fcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcee:	025b      	lsls	r3, r3, #9
 800fcf0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fcf2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	025b      	lsls	r3, r3, #9
 800fcfc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800fcfe:	2390      	movs	r3, #144	; 0x90
 800fd00:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fd02:	2302      	movs	r3, #2
 800fd04:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fd06:	2300      	movs	r3, #0
 800fd08:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f107 0210 	add.w	r2, r7, #16
 800fd16:	4611      	mov	r1, r2
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f002 ff81 	bl	8012c20 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d90a      	bls.n	800fd3a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2282      	movs	r2, #130	; 0x82
 800fd28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd30:	4618      	mov	r0, r3
 800fd32:	f002 ffe5 	bl	8012d00 <SDMMC_CmdReadMultiBlock>
 800fd36:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fd38:	e009      	b.n	800fd4e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2281      	movs	r2, #129	; 0x81
 800fd3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd46:	4618      	mov	r0, r3
 800fd48:	f002 ffb8 	bl	8012cbc <SDMMC_CmdReadSingleBlock>
 800fd4c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800fd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d012      	beq.n	800fd7a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4a0d      	ldr	r2, [pc, #52]	; (800fd90 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800fd5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd62:	431a      	orrs	r2, r3
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2200      	movs	r2, #0
 800fd74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800fd76:	2301      	movs	r3, #1
 800fd78:	e002      	b.n	800fd80 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	e000      	b.n	800fd80 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800fd7e:	2302      	movs	r3, #2
  }
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3730      	adds	r7, #48	; 0x30
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	080104b3 	.word	0x080104b3
 800fd8c:	08010525 	.word	0x08010525
 800fd90:	004005ff 	.word	0x004005ff

0800fd94 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b08c      	sub	sp, #48	; 0x30
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	607a      	str	r2, [r7, #4]
 800fda0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d107      	bne.n	800fdbc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e0c6      	b.n	800ff4a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	f040 80bf 	bne.w	800ff48 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fdd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	441a      	add	r2, r3
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d907      	bls.n	800fdee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fde2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800fdea:	2301      	movs	r3, #1
 800fdec:	e0ad      	b.n	800ff4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2203      	movs	r2, #3
 800fdf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f042 021a 	orr.w	r2, r2, #26
 800fe0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe12:	4a50      	ldr	r2, [pc, #320]	; (800ff54 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800fe14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe1a:	4a4f      	ldr	r2, [pc, #316]	; (800ff58 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800fe1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe22:	2200      	movs	r2, #0
 800fe24:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d002      	beq.n	800fe34 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe30:	025b      	lsls	r3, r3, #9
 800fe32:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	2b01      	cmp	r3, #1
 800fe38:	d90a      	bls.n	800fe50 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	22a0      	movs	r2, #160	; 0xa0
 800fe3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe46:	4618      	mov	r0, r3
 800fe48:	f002 ff9e 	bl	8012d88 <SDMMC_CmdWriteMultiBlock>
 800fe4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fe4e:	e009      	b.n	800fe64 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2290      	movs	r2, #144	; 0x90
 800fe54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f002 ff71 	bl	8012d44 <SDMMC_CmdWriteSingleBlock>
 800fe62:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800fe64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d012      	beq.n	800fe90 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4a3b      	ldr	r2, [pc, #236]	; (800ff5c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800fe70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe78:	431a      	orrs	r2, r3
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2201      	movs	r2, #1
 800fe82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e05c      	b.n	800ff4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f042 0208 	orr.w	r2, r2, #8
 800fe9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fea4:	2240      	movs	r2, #64	; 0x40
 800fea6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feb8:	689a      	ldr	r2, [r3, #8]
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	430a      	orrs	r2, r1
 800fec2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fec8:	68b9      	ldr	r1, [r7, #8]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	3380      	adds	r3, #128	; 0x80
 800fed0:	461a      	mov	r2, r3
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	025b      	lsls	r3, r3, #9
 800fed6:	089b      	lsrs	r3, r3, #2
 800fed8:	f7f8 fbfe 	bl	80086d8 <HAL_DMA_Start_IT>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d01a      	beq.n	800ff18 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f022 021a 	bic.w	r2, r2, #26
 800fef0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4a19      	ldr	r2, [pc, #100]	; (800ff5c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800fef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fefe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2201      	movs	r2, #1
 800ff0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2200      	movs	r2, #0
 800ff12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ff14:	2301      	movs	r3, #1
 800ff16:	e018      	b.n	800ff4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ff18:	f04f 33ff 	mov.w	r3, #4294967295
 800ff1c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	025b      	lsls	r3, r3, #9
 800ff22:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ff24:	2390      	movs	r3, #144	; 0x90
 800ff26:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800ff30:	2301      	movs	r3, #1
 800ff32:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f107 0210 	add.w	r2, r7, #16
 800ff3c:	4611      	mov	r1, r2
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f002 fe6e 	bl	8012c20 <SDMMC_ConfigData>

      return HAL_OK;
 800ff44:	2300      	movs	r3, #0
 800ff46:	e000      	b.n	800ff4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800ff48:	2302      	movs	r3, #2
  }
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3730      	adds	r7, #48	; 0x30
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	08010489 	.word	0x08010489
 800ff58:	08010525 	.word	0x08010525
 800ff5c:	004005ff 	.word	0x004005ff

0800ff60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ff68:	bf00      	nop
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff82:	0f9b      	lsrs	r3, r3, #30
 800ff84:	b2da      	uxtb	r2, r3
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff8e:	0e9b      	lsrs	r3, r3, #26
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	f003 030f 	and.w	r3, r3, #15
 800ff96:	b2da      	uxtb	r2, r3
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffa0:	0e1b      	lsrs	r3, r3, #24
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	f003 0303 	and.w	r3, r3, #3
 800ffa8:	b2da      	uxtb	r2, r3
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffb2:	0c1b      	lsrs	r3, r3, #16
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffbe:	0a1b      	lsrs	r3, r3, #8
 800ffc0:	b2da      	uxtb	r2, r3
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffca:	b2da      	uxtb	r2, r3
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffd4:	0d1b      	lsrs	r3, r3, #20
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffe0:	0c1b      	lsrs	r3, r3, #16
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	f003 030f 	and.w	r3, r3, #15
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fff2:	0bdb      	lsrs	r3, r3, #15
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	f003 0301 	and.w	r3, r3, #1
 800fffa:	b2da      	uxtb	r2, r3
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010004:	0b9b      	lsrs	r3, r3, #14
 8010006:	b2db      	uxtb	r3, r3
 8010008:	f003 0301 	and.w	r3, r3, #1
 801000c:	b2da      	uxtb	r2, r3
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010016:	0b5b      	lsrs	r3, r3, #13
 8010018:	b2db      	uxtb	r3, r3
 801001a:	f003 0301 	and.w	r3, r3, #1
 801001e:	b2da      	uxtb	r2, r3
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010028:	0b1b      	lsrs	r3, r3, #12
 801002a:	b2db      	uxtb	r3, r3
 801002c:	f003 0301 	and.w	r3, r3, #1
 8010030:	b2da      	uxtb	r2, r3
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	2200      	movs	r2, #0
 801003a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010040:	2b00      	cmp	r3, #0
 8010042:	d163      	bne.n	801010c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010048:	009a      	lsls	r2, r3, #2
 801004a:	f640 73fc 	movw	r3, #4092	; 0xffc
 801004e:	4013      	ands	r3, r2
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8010054:	0f92      	lsrs	r2, r2, #30
 8010056:	431a      	orrs	r2, r3
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010060:	0edb      	lsrs	r3, r3, #27
 8010062:	b2db      	uxtb	r3, r3
 8010064:	f003 0307 	and.w	r3, r3, #7
 8010068:	b2da      	uxtb	r2, r3
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010072:	0e1b      	lsrs	r3, r3, #24
 8010074:	b2db      	uxtb	r3, r3
 8010076:	f003 0307 	and.w	r3, r3, #7
 801007a:	b2da      	uxtb	r2, r3
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010084:	0d5b      	lsrs	r3, r3, #21
 8010086:	b2db      	uxtb	r3, r3
 8010088:	f003 0307 	and.w	r3, r3, #7
 801008c:	b2da      	uxtb	r2, r3
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010096:	0c9b      	lsrs	r3, r3, #18
 8010098:	b2db      	uxtb	r3, r3
 801009a:	f003 0307 	and.w	r3, r3, #7
 801009e:	b2da      	uxtb	r2, r3
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100a8:	0bdb      	lsrs	r3, r3, #15
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	f003 0307 	and.w	r3, r3, #7
 80100b0:	b2da      	uxtb	r2, r3
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	691b      	ldr	r3, [r3, #16]
 80100ba:	1c5a      	adds	r2, r3, #1
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	7e1b      	ldrb	r3, [r3, #24]
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	f003 0307 	and.w	r3, r3, #7
 80100ca:	3302      	adds	r3, #2
 80100cc:	2201      	movs	r2, #1
 80100ce:	fa02 f303 	lsl.w	r3, r2, r3
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80100d6:	fb02 f203 	mul.w	r2, r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	7a1b      	ldrb	r3, [r3, #8]
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	f003 030f 	and.w	r3, r3, #15
 80100e8:	2201      	movs	r2, #1
 80100ea:	409a      	lsls	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100f4:	687a      	ldr	r2, [r7, #4]
 80100f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80100f8:	0a52      	lsrs	r2, r2, #9
 80100fa:	fb02 f203 	mul.w	r2, r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010108:	661a      	str	r2, [r3, #96]	; 0x60
 801010a:	e031      	b.n	8010170 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010110:	2b01      	cmp	r3, #1
 8010112:	d11d      	bne.n	8010150 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010118:	041b      	lsls	r3, r3, #16
 801011a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010122:	0c1b      	lsrs	r3, r3, #16
 8010124:	431a      	orrs	r2, r3
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	3301      	adds	r3, #1
 8010130:	029a      	lsls	r2, r3, #10
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010144:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	661a      	str	r2, [r3, #96]	; 0x60
 801014e:	e00f      	b.n	8010170 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a58      	ldr	r2, [pc, #352]	; (80102b8 <HAL_SD_GetCardCSD+0x344>)
 8010156:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801015c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2201      	movs	r2, #1
 8010168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801016c:	2301      	movs	r3, #1
 801016e:	e09d      	b.n	80102ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010174:	0b9b      	lsrs	r3, r3, #14
 8010176:	b2db      	uxtb	r3, r3
 8010178:	f003 0301 	and.w	r3, r3, #1
 801017c:	b2da      	uxtb	r2, r3
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010186:	09db      	lsrs	r3, r3, #7
 8010188:	b2db      	uxtb	r3, r3
 801018a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801018e:	b2da      	uxtb	r2, r3
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010198:	b2db      	uxtb	r3, r3
 801019a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101a8:	0fdb      	lsrs	r3, r3, #31
 80101aa:	b2da      	uxtb	r2, r3
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101b4:	0f5b      	lsrs	r3, r3, #29
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	f003 0303 	and.w	r3, r3, #3
 80101bc:	b2da      	uxtb	r2, r3
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101c6:	0e9b      	lsrs	r3, r3, #26
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	f003 0307 	and.w	r3, r3, #7
 80101ce:	b2da      	uxtb	r2, r3
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101d8:	0d9b      	lsrs	r3, r3, #22
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	f003 030f 	and.w	r3, r3, #15
 80101e0:	b2da      	uxtb	r2, r3
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ea:	0d5b      	lsrs	r3, r3, #21
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	f003 0301 	and.w	r3, r3, #1
 80101f2:	b2da      	uxtb	r2, r3
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	2200      	movs	r2, #0
 80101fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010206:	0c1b      	lsrs	r3, r3, #16
 8010208:	b2db      	uxtb	r3, r3
 801020a:	f003 0301 	and.w	r3, r3, #1
 801020e:	b2da      	uxtb	r2, r3
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801021a:	0bdb      	lsrs	r3, r3, #15
 801021c:	b2db      	uxtb	r3, r3
 801021e:	f003 0301 	and.w	r3, r3, #1
 8010222:	b2da      	uxtb	r2, r3
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801022e:	0b9b      	lsrs	r3, r3, #14
 8010230:	b2db      	uxtb	r3, r3
 8010232:	f003 0301 	and.w	r3, r3, #1
 8010236:	b2da      	uxtb	r2, r3
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010242:	0b5b      	lsrs	r3, r3, #13
 8010244:	b2db      	uxtb	r3, r3
 8010246:	f003 0301 	and.w	r3, r3, #1
 801024a:	b2da      	uxtb	r2, r3
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010256:	0b1b      	lsrs	r3, r3, #12
 8010258:	b2db      	uxtb	r3, r3
 801025a:	f003 0301 	and.w	r3, r3, #1
 801025e:	b2da      	uxtb	r2, r3
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801026a:	0a9b      	lsrs	r3, r3, #10
 801026c:	b2db      	uxtb	r3, r3
 801026e:	f003 0303 	and.w	r3, r3, #3
 8010272:	b2da      	uxtb	r2, r3
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801027e:	0a1b      	lsrs	r3, r3, #8
 8010280:	b2db      	uxtb	r3, r3
 8010282:	f003 0303 	and.w	r3, r3, #3
 8010286:	b2da      	uxtb	r2, r3
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010292:	085b      	lsrs	r3, r3, #1
 8010294:	b2db      	uxtb	r3, r3
 8010296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801029a:	b2da      	uxtb	r2, r3
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	2201      	movs	r2, #1
 80102a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80102aa:	2300      	movs	r3, #0
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr
 80102b8:	004005ff 	.word	0x004005ff

080102bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80102bc:	b480      	push	{r7}
 80102be:	b083      	sub	sp, #12
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8010306:	2300      	movs	r3, #0
}
 8010308:	4618      	mov	r0, r3
 801030a:	370c      	adds	r7, #12
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010314:	b5b0      	push	{r4, r5, r7, lr}
 8010316:	b08e      	sub	sp, #56	; 0x38
 8010318:	af04      	add	r7, sp, #16
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801031e:	2300      	movs	r3, #0
 8010320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2203      	movs	r2, #3
 8010328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010330:	2b03      	cmp	r3, #3
 8010332:	d02e      	beq.n	8010392 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801033a:	d106      	bne.n	801034a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	639a      	str	r2, [r3, #56]	; 0x38
 8010348:	e029      	b.n	801039e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010350:	d10a      	bne.n	8010368 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 faba 	bl	80108cc <SD_WideBus_Enable>
 8010358:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801035e:	6a3b      	ldr	r3, [r7, #32]
 8010360:	431a      	orrs	r2, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	639a      	str	r2, [r3, #56]	; 0x38
 8010366:	e01a      	b.n	801039e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d10a      	bne.n	8010384 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 faf7 	bl	8010962 <SD_WideBus_Disable>
 8010374:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801037a:	6a3b      	ldr	r3, [r7, #32]
 801037c:	431a      	orrs	r2, r3
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	639a      	str	r2, [r3, #56]	; 0x38
 8010382:	e00c      	b.n	801039e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010388:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	639a      	str	r2, [r3, #56]	; 0x38
 8010390:	e005      	b.n	801039e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010396:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00b      	beq.n	80103be <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	4a26      	ldr	r2, [pc, #152]	; (8010444 <HAL_SD_ConfigWideBusOperation+0x130>)
 80103ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80103b6:	2301      	movs	r3, #1
 80103b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80103bc:	e01f      	b.n	80103fe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	695b      	ldr	r3, [r3, #20]
 80103d8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	699b      	ldr	r3, [r3, #24]
 80103de:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681d      	ldr	r5, [r3, #0]
 80103e4:	466c      	mov	r4, sp
 80103e6:	f107 0314 	add.w	r3, r7, #20
 80103ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80103ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80103f2:	f107 0308 	add.w	r3, r7, #8
 80103f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80103f8:	4628      	mov	r0, r5
 80103fa:	f002 fb71 	bl	8012ae0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010406:	4618      	mov	r0, r3
 8010408:	f002 fc36 	bl	8012c78 <SDMMC_CmdBlockLength>
 801040c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801040e:	6a3b      	ldr	r3, [r7, #32]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00c      	beq.n	801042e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a0a      	ldr	r2, [pc, #40]	; (8010444 <HAL_SD_ConfigWideBusOperation+0x130>)
 801041a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010420:	6a3b      	ldr	r3, [r7, #32]
 8010422:	431a      	orrs	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8010428:	2301      	movs	r3, #1
 801042a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2201      	movs	r2, #1
 8010432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8010436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801043a:	4618      	mov	r0, r3
 801043c:	3728      	adds	r7, #40	; 0x28
 801043e:	46bd      	mov	sp, r7
 8010440:	bdb0      	pop	{r4, r5, r7, pc}
 8010442:	bf00      	nop
 8010444:	004005ff 	.word	0x004005ff

08010448 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b086      	sub	sp, #24
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010450:	2300      	movs	r3, #0
 8010452:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010454:	f107 030c 	add.w	r3, r7, #12
 8010458:	4619      	mov	r1, r3
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f000 fa0e 	bl	801087c <SD_SendStatus>
 8010460:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d005      	beq.n	8010474 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	431a      	orrs	r2, r3
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	0a5b      	lsrs	r3, r3, #9
 8010478:	f003 030f 	and.w	r3, r3, #15
 801047c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801047e:	693b      	ldr	r3, [r7, #16]
}
 8010480:	4618      	mov	r0, r3
 8010482:	3718      	adds	r7, #24
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010494:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80104a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80104a6:	bf00      	nop
 80104a8:	3714      	adds	r7, #20
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr

080104b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b084      	sub	sp, #16
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c4:	2b82      	cmp	r3, #130	; 0x82
 80104c6:	d111      	bne.n	80104ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4618      	mov	r0, r3
 80104ce:	f002 fc7d 	bl	8012dcc <SDMMC_CmdStopTransfer>
 80104d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d008      	beq.n	80104ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	431a      	orrs	r2, r3
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f7ff fd3a 	bl	800ff60 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f022 0208 	bic.w	r2, r2, #8
 80104fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f240 523a 	movw	r2, #1338	; 0x53a
 8010504:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2201      	movs	r2, #1
 801050a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2200      	movs	r2, #0
 8010512:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8010514:	68f8      	ldr	r0, [r7, #12]
 8010516:	f004 f829 	bl	801456c <HAL_SD_RxCpltCallback>
#endif
}
 801051a:	bf00      	nop
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
	...

08010524 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010530:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f7f8 fb4c 	bl	8008bd0 <HAL_DMA_GetError>
 8010538:	4603      	mov	r3, r0
 801053a:	2b02      	cmp	r3, #2
 801053c:	d03e      	beq.n	80105bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010544:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801054a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801054c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	2b01      	cmp	r3, #1
 8010552:	d002      	beq.n	801055a <SD_DMAError+0x36>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2b01      	cmp	r3, #1
 8010558:	d12d      	bne.n	80105b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4a19      	ldr	r2, [pc, #100]	; (80105c4 <SD_DMAError+0xa0>)
 8010560:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8010570:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 801057e:	6978      	ldr	r0, [r7, #20]
 8010580:	f7ff ff62 	bl	8010448 <HAL_SD_GetCardState>
 8010584:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2b06      	cmp	r3, #6
 801058a:	d002      	beq.n	8010592 <SD_DMAError+0x6e>
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	2b05      	cmp	r3, #5
 8010590:	d10a      	bne.n	80105a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4618      	mov	r0, r3
 8010598:	f002 fc18 	bl	8012dcc <SDMMC_CmdStopTransfer>
 801059c:	4602      	mov	r2, r0
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a2:	431a      	orrs	r2, r3
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	2201      	movs	r2, #1
 80105ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	2200      	movs	r2, #0
 80105b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80105b6:	6978      	ldr	r0, [r7, #20]
 80105b8:	f7ff fcd2 	bl	800ff60 <HAL_SD_ErrorCallback>
#endif
  }
}
 80105bc:	bf00      	nop
 80105be:	3718      	adds	r7, #24
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	004005ff 	.word	0x004005ff

080105c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80105c8:	b5b0      	push	{r4, r5, r7, lr}
 80105ca:	b094      	sub	sp, #80	; 0x50
 80105cc:	af04      	add	r7, sp, #16
 80105ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80105d0:	2301      	movs	r3, #1
 80105d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4618      	mov	r0, r3
 80105da:	f002 fac9 	bl	8012b70 <SDMMC_GetPowerState>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d102      	bne.n	80105ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80105e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80105e8:	e0b6      	b.n	8010758 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ee:	2b03      	cmp	r3, #3
 80105f0:	d02f      	beq.n	8010652 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f002 fcf3 	bl	8012fe2 <SDMMC_CmdSendCID>
 80105fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80105fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010600:	2b00      	cmp	r3, #0
 8010602:	d001      	beq.n	8010608 <SD_InitCard+0x40>
    {
      return errorstate;
 8010604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010606:	e0a7      	b.n	8010758 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2100      	movs	r1, #0
 801060e:	4618      	mov	r0, r3
 8010610:	f002 faf3 	bl	8012bfa <SDMMC_GetResponse>
 8010614:	4602      	mov	r2, r0
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2104      	movs	r1, #4
 8010620:	4618      	mov	r0, r3
 8010622:	f002 faea 	bl	8012bfa <SDMMC_GetResponse>
 8010626:	4602      	mov	r2, r0
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2108      	movs	r1, #8
 8010632:	4618      	mov	r0, r3
 8010634:	f002 fae1 	bl	8012bfa <SDMMC_GetResponse>
 8010638:	4602      	mov	r2, r0
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	210c      	movs	r1, #12
 8010644:	4618      	mov	r0, r3
 8010646:	f002 fad8 	bl	8012bfa <SDMMC_GetResponse>
 801064a:	4602      	mov	r2, r0
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010656:	2b03      	cmp	r3, #3
 8010658:	d00d      	beq.n	8010676 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f107 020e 	add.w	r2, r7, #14
 8010662:	4611      	mov	r1, r2
 8010664:	4618      	mov	r0, r3
 8010666:	f002 fcf9 	bl	801305c <SDMMC_CmdSetRelAdd>
 801066a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801066c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801066e:	2b00      	cmp	r3, #0
 8010670:	d001      	beq.n	8010676 <SD_InitCard+0xae>
    {
      return errorstate;
 8010672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010674:	e070      	b.n	8010758 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801067a:	2b03      	cmp	r3, #3
 801067c:	d036      	beq.n	80106ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801067e:	89fb      	ldrh	r3, [r7, #14]
 8010680:	461a      	mov	r2, r3
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801068e:	041b      	lsls	r3, r3, #16
 8010690:	4619      	mov	r1, r3
 8010692:	4610      	mov	r0, r2
 8010694:	f002 fcc3 	bl	801301e <SDMMC_CmdSendCSD>
 8010698:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801069a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801069c:	2b00      	cmp	r3, #0
 801069e:	d001      	beq.n	80106a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80106a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106a2:	e059      	b.n	8010758 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2100      	movs	r1, #0
 80106aa:	4618      	mov	r0, r3
 80106ac:	f002 faa5 	bl	8012bfa <SDMMC_GetResponse>
 80106b0:	4602      	mov	r2, r0
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	2104      	movs	r1, #4
 80106bc:	4618      	mov	r0, r3
 80106be:	f002 fa9c 	bl	8012bfa <SDMMC_GetResponse>
 80106c2:	4602      	mov	r2, r0
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2108      	movs	r1, #8
 80106ce:	4618      	mov	r0, r3
 80106d0:	f002 fa93 	bl	8012bfa <SDMMC_GetResponse>
 80106d4:	4602      	mov	r2, r0
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	210c      	movs	r1, #12
 80106e0:	4618      	mov	r0, r3
 80106e2:	f002 fa8a 	bl	8012bfa <SDMMC_GetResponse>
 80106e6:	4602      	mov	r2, r0
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2104      	movs	r1, #4
 80106f2:	4618      	mov	r0, r3
 80106f4:	f002 fa81 	bl	8012bfa <SDMMC_GetResponse>
 80106f8:	4603      	mov	r3, r0
 80106fa:	0d1a      	lsrs	r2, r3, #20
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010700:	f107 0310 	add.w	r3, r7, #16
 8010704:	4619      	mov	r1, r3
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7ff fc34 	bl	800ff74 <HAL_SD_GetCardCSD>
 801070c:	4603      	mov	r3, r0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d002      	beq.n	8010718 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010712:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010716:	e01f      	b.n	8010758 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6819      	ldr	r1, [r3, #0]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010720:	041b      	lsls	r3, r3, #16
 8010722:	461a      	mov	r2, r3
 8010724:	f04f 0300 	mov.w	r3, #0
 8010728:	4608      	mov	r0, r1
 801072a:	f002 fb71 	bl	8012e10 <SDMMC_CmdSelDesel>
 801072e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8010730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010732:	2b00      	cmp	r3, #0
 8010734:	d001      	beq.n	801073a <SD_InitCard+0x172>
  {
    return errorstate;
 8010736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010738:	e00e      	b.n	8010758 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681d      	ldr	r5, [r3, #0]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	466c      	mov	r4, sp
 8010742:	f103 0210 	add.w	r2, r3, #16
 8010746:	ca07      	ldmia	r2, {r0, r1, r2}
 8010748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801074c:	3304      	adds	r3, #4
 801074e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010750:	4628      	mov	r0, r5
 8010752:	f002 f9c5 	bl	8012ae0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010756:	2300      	movs	r3, #0
}
 8010758:	4618      	mov	r0, r3
 801075a:	3740      	adds	r7, #64	; 0x40
 801075c:	46bd      	mov	sp, r7
 801075e:	bdb0      	pop	{r4, r5, r7, pc}

08010760 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b086      	sub	sp, #24
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010768:	2300      	movs	r3, #0
 801076a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 801076c:	2300      	movs	r3, #0
 801076e:	617b      	str	r3, [r7, #20]
 8010770:	2300      	movs	r3, #0
 8010772:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4618      	mov	r0, r3
 801077a:	f002 fb6c 	bl	8012e56 <SDMMC_CmdGoIdleState>
 801077e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d001      	beq.n	801078a <SD_PowerON+0x2a>
  {
    return errorstate;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	e072      	b.n	8010870 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4618      	mov	r0, r3
 8010790:	f002 fb7f 	bl	8012e92 <SDMMC_CmdOperCond>
 8010794:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00d      	beq.n	80107b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2200      	movs	r2, #0
 80107a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f002 fb55 	bl	8012e56 <SDMMC_CmdGoIdleState>
 80107ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d004      	beq.n	80107be <SD_PowerON+0x5e>
    {
      return errorstate;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	e05b      	b.n	8010870 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2201      	movs	r2, #1
 80107bc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d137      	bne.n	8010836 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	2100      	movs	r1, #0
 80107cc:	4618      	mov	r0, r3
 80107ce:	f002 fb7f 	bl	8012ed0 <SDMMC_CmdAppCommand>
 80107d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d02d      	beq.n	8010836 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80107da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80107de:	e047      	b.n	8010870 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	2100      	movs	r1, #0
 80107e6:	4618      	mov	r0, r3
 80107e8:	f002 fb72 	bl	8012ed0 <SDMMC_CmdAppCommand>
 80107ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d001      	beq.n	80107f8 <SD_PowerON+0x98>
    {
      return errorstate;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	e03b      	b.n	8010870 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	491e      	ldr	r1, [pc, #120]	; (8010878 <SD_PowerON+0x118>)
 80107fe:	4618      	mov	r0, r3
 8010800:	f002 fb88 	bl	8012f14 <SDMMC_CmdAppOperCommand>
 8010804:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d002      	beq.n	8010812 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801080c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010810:	e02e      	b.n	8010870 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	2100      	movs	r1, #0
 8010818:	4618      	mov	r0, r3
 801081a:	f002 f9ee 	bl	8012bfa <SDMMC_GetResponse>
 801081e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	0fdb      	lsrs	r3, r3, #31
 8010824:	2b01      	cmp	r3, #1
 8010826:	d101      	bne.n	801082c <SD_PowerON+0xcc>
 8010828:	2301      	movs	r3, #1
 801082a:	e000      	b.n	801082e <SD_PowerON+0xce>
 801082c:	2300      	movs	r3, #0
 801082e:	613b      	str	r3, [r7, #16]

    count++;
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	3301      	adds	r3, #1
 8010834:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801083c:	4293      	cmp	r3, r2
 801083e:	d802      	bhi.n	8010846 <SD_PowerON+0xe6>
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d0cc      	beq.n	80107e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801084c:	4293      	cmp	r3, r2
 801084e:	d902      	bls.n	8010856 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010854:	e00c      	b.n	8010870 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801085c:	2b00      	cmp	r3, #0
 801085e:	d003      	beq.n	8010868 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2201      	movs	r2, #1
 8010864:	645a      	str	r2, [r3, #68]	; 0x44
 8010866:	e002      	b.n	801086e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3718      	adds	r7, #24
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}
 8010878:	c1100000 	.word	0xc1100000

0801087c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d102      	bne.n	8010892 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801088c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010890:	e018      	b.n	80108c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681a      	ldr	r2, [r3, #0]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801089a:	041b      	lsls	r3, r3, #16
 801089c:	4619      	mov	r1, r3
 801089e:	4610      	mov	r0, r2
 80108a0:	f002 fbfd 	bl	801309e <SDMMC_CmdSendStatus>
 80108a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	e009      	b.n	80108c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2100      	movs	r1, #0
 80108b6:	4618      	mov	r0, r3
 80108b8:	f002 f99f 	bl	8012bfa <SDMMC_GetResponse>
 80108bc:	4602      	mov	r2, r0
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3710      	adds	r7, #16
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b086      	sub	sp, #24
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80108d4:	2300      	movs	r3, #0
 80108d6:	60fb      	str	r3, [r7, #12]
 80108d8:	2300      	movs	r3, #0
 80108da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2100      	movs	r1, #0
 80108e2:	4618      	mov	r0, r3
 80108e4:	f002 f989 	bl	8012bfa <SDMMC_GetResponse>
 80108e8:	4603      	mov	r3, r0
 80108ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80108f2:	d102      	bne.n	80108fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80108f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108f8:	e02f      	b.n	801095a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80108fa:	f107 030c 	add.w	r3, r7, #12
 80108fe:	4619      	mov	r1, r3
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 f879 	bl	80109f8 <SD_FindSCR>
 8010906:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d001      	beq.n	8010912 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	e023      	b.n	801095a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010918:	2b00      	cmp	r3, #0
 801091a:	d01c      	beq.n	8010956 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010924:	041b      	lsls	r3, r3, #16
 8010926:	4619      	mov	r1, r3
 8010928:	4610      	mov	r0, r2
 801092a:	f002 fad1 	bl	8012ed0 <SDMMC_CmdAppCommand>
 801092e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d001      	beq.n	801093a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	e00f      	b.n	801095a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2102      	movs	r1, #2
 8010940:	4618      	mov	r0, r3
 8010942:	f002 fb0b 	bl	8012f5c <SDMMC_CmdBusWidth>
 8010946:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d001      	beq.n	8010952 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	e003      	b.n	801095a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010952:	2300      	movs	r3, #0
 8010954:	e001      	b.n	801095a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010956:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801095a:	4618      	mov	r0, r3
 801095c:	3718      	adds	r7, #24
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b086      	sub	sp, #24
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 801096a:	2300      	movs	r3, #0
 801096c:	60fb      	str	r3, [r7, #12]
 801096e:	2300      	movs	r3, #0
 8010970:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2100      	movs	r1, #0
 8010978:	4618      	mov	r0, r3
 801097a:	f002 f93e 	bl	8012bfa <SDMMC_GetResponse>
 801097e:	4603      	mov	r3, r0
 8010980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010984:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010988:	d102      	bne.n	8010990 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801098a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801098e:	e02f      	b.n	80109f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010990:	f107 030c 	add.w	r3, r7, #12
 8010994:	4619      	mov	r1, r3
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 f82e 	bl	80109f8 <SD_FindSCR>
 801099c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d001      	beq.n	80109a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	e023      	b.n	80109f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d01c      	beq.n	80109ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681a      	ldr	r2, [r3, #0]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109ba:	041b      	lsls	r3, r3, #16
 80109bc:	4619      	mov	r1, r3
 80109be:	4610      	mov	r0, r2
 80109c0:	f002 fa86 	bl	8012ed0 <SDMMC_CmdAppCommand>
 80109c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d001      	beq.n	80109d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	e00f      	b.n	80109f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2100      	movs	r1, #0
 80109d6:	4618      	mov	r0, r3
 80109d8:	f002 fac0 	bl	8012f5c <SDMMC_CmdBusWidth>
 80109dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d001      	beq.n	80109e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	e003      	b.n	80109f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80109e8:	2300      	movs	r3, #0
 80109ea:	e001      	b.n	80109f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80109ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3718      	adds	r7, #24
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80109f8:	b590      	push	{r4, r7, lr}
 80109fa:	b08f      	sub	sp, #60	; 0x3c
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010a02:	f7f6 ff3f 	bl	8007884 <HAL_GetTick>
 8010a06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	60bb      	str	r3, [r7, #8]
 8010a10:	2300      	movs	r3, #0
 8010a12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2108      	movs	r1, #8
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f002 f92a 	bl	8012c78 <SDMMC_CmdBlockLength>
 8010a24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d001      	beq.n	8010a30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2e:	e0b2      	b.n	8010b96 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a38:	041b      	lsls	r3, r3, #16
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	f002 fa47 	bl	8012ed0 <SDMMC_CmdAppCommand>
 8010a42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d001      	beq.n	8010a4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8010a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4c:	e0a3      	b.n	8010b96 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010a54:	2308      	movs	r3, #8
 8010a56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010a58:	2330      	movs	r3, #48	; 0x30
 8010a5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010a5c:	2302      	movs	r3, #2
 8010a5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010a60:	2300      	movs	r3, #0
 8010a62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010a64:	2301      	movs	r3, #1
 8010a66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f107 0210 	add.w	r2, r7, #16
 8010a70:	4611      	mov	r1, r2
 8010a72:	4618      	mov	r0, r3
 8010a74:	f002 f8d4 	bl	8012c20 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f002 fa8f 	bl	8012fa0 <SDMMC_CmdSendSCR>
 8010a82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d02a      	beq.n	8010ae0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8010a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8c:	e083      	b.n	8010b96 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00f      	beq.n	8010abc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6819      	ldr	r1, [r3, #0]
 8010aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	f107 0208 	add.w	r2, r7, #8
 8010aa8:	18d4      	adds	r4, r2, r3
 8010aaa:	4608      	mov	r0, r1
 8010aac:	f002 f844 	bl	8012b38 <SDMMC_ReadFIFO>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	6023      	str	r3, [r4, #0]
      index++;
 8010ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8010aba:	e006      	b.n	8010aca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d012      	beq.n	8010af0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010aca:	f7f6 fedb 	bl	8007884 <HAL_GetTick>
 8010ace:	4602      	mov	r2, r0
 8010ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ad8:	d102      	bne.n	8010ae0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010ada:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ade:	e05a      	b.n	8010b96 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d0cf      	beq.n	8010a8e <SD_FindSCR+0x96>
 8010aee:	e000      	b.n	8010af2 <SD_FindSCR+0xfa>
      break;
 8010af0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010af8:	f003 0308 	and.w	r3, r3, #8
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d005      	beq.n	8010b0c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2208      	movs	r2, #8
 8010b06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010b08:	2308      	movs	r3, #8
 8010b0a:	e044      	b.n	8010b96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b12:	f003 0302 	and.w	r3, r3, #2
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d005      	beq.n	8010b26 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	2202      	movs	r2, #2
 8010b20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010b22:	2302      	movs	r3, #2
 8010b24:	e037      	b.n	8010b96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b2c:	f003 0320 	and.w	r3, r3, #32
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d005      	beq.n	8010b40 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2220      	movs	r2, #32
 8010b3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010b3c:	2320      	movs	r3, #32
 8010b3e:	e02a      	b.n	8010b96 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	f240 523a 	movw	r2, #1338	; 0x53a
 8010b48:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	061a      	lsls	r2, r3, #24
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	021b      	lsls	r3, r3, #8
 8010b52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010b56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	0a1b      	lsrs	r3, r3, #8
 8010b5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010b60:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	0e1b      	lsrs	r3, r3, #24
 8010b66:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6a:	601a      	str	r2, [r3, #0]
    scr++;
 8010b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6e:	3304      	adds	r3, #4
 8010b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	061a      	lsls	r2, r3, #24
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	021b      	lsls	r3, r3, #8
 8010b7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010b7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	0a1b      	lsrs	r3, r3, #8
 8010b84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010b88:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	0e1b      	lsrs	r3, r3, #24
 8010b8e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b92:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010b94:	2300      	movs	r3, #0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	373c      	adds	r7, #60	; 0x3c
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd90      	pop	{r4, r7, pc}

08010b9e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b082      	sub	sp, #8
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
 8010ba6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d101      	bne.n	8010bb2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e025      	b.n	8010bfe <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d106      	bne.n	8010bcc <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f7f3 fb3e 	bl	8004248 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2202      	movs	r2, #2
 8010bd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	3304      	adds	r3, #4
 8010bdc:	4619      	mov	r1, r3
 8010bde:	4610      	mov	r0, r2
 8010be0:	f001 fe54 	bl	801288c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6818      	ldr	r0, [r3, #0]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	461a      	mov	r2, r3
 8010bee:	6839      	ldr	r1, [r7, #0]
 8010bf0:	f001 febe 	bl	8012970 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8010bfc:	2300      	movs	r3, #0
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010c06:	b580      	push	{r7, lr}
 8010c08:	b084      	sub	sp, #16
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	60f8      	str	r0, [r7, #12]
 8010c0e:	60b9      	str	r1, [r7, #8]
 8010c10:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d101      	bne.n	8010c22 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8010c1e:	2302      	movs	r3, #2
 8010c20:	e018      	b.n	8010c54 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	2202      	movs	r2, #2
 8010c26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	68b9      	ldr	r1, [r7, #8]
 8010c32:	4618      	mov	r0, r3
 8010c34:	f001 ff1c 	bl	8012a70 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2b02      	cmp	r3, #2
 8010c3e:	d104      	bne.n	8010c4a <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2205      	movs	r2, #5
 8010c44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8010c48:	e003      	b.n	8010c52 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	2b02      	cmp	r3, #2
 8010c70:	d101      	bne.n	8010c76 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8010c72:	2302      	movs	r3, #2
 8010c74:	e00e      	b.n	8010c94 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2202      	movs	r2, #2
 8010c7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	6839      	ldr	r1, [r7, #0]
 8010c84:	4618      	mov	r0, r3
 8010c86:	f001 ff17 	bl	8012ab8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8010c92:	2300      	movs	r3, #0
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d101      	bne.n	8010cae <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8010caa:	2301      	movs	r3, #1
 8010cac:	e04c      	b.n	8010d48 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d106      	bne.n	8010cc8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f7f2 fff4 	bl	8003cb0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2202      	movs	r2, #2
 8010ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f022 0203 	bic.w	r2, r2, #3
 8010cde:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8010ce8:	68fa      	ldr	r2, [r7, #12]
 8010cea:	4b19      	ldr	r3, [pc, #100]	; (8010d50 <HAL_SPDIFRX_Init+0xb4>)
 8010cec:	4013      	ands	r3, r2
 8010cee:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8010cf8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8010cfe:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8010d04:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8010d0a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8010d10:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8010d16:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8010d1c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8010d22:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8010d28:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8010d2a:	68fa      	ldr	r2, [r7, #12]
 8010d2c:	4313      	orrs	r3, r2
 8010d2e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	68fa      	ldr	r2, [r7, #12]
 8010d36:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2201      	movs	r2, #1
 8010d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8010d46:	2300      	movs	r3, #0
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3710      	adds	r7, #16
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	fff88407 	.word	0xfff88407

08010d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d101      	bne.n	8010d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010d62:	2301      	movs	r3, #1
 8010d64:	e049      	b.n	8010dfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2200      	movs	r2, #0
 8010d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f7f2 ffda 	bl	8003d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2202      	movs	r2, #2
 8010d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	3304      	adds	r3, #4
 8010d90:	4619      	mov	r1, r3
 8010d92:	4610      	mov	r0, r2
 8010d94:	f000 fc22 	bl	80115dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2201      	movs	r2, #1
 8010da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2201      	movs	r2, #1
 8010dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2201      	movs	r2, #1
 8010db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2201      	movs	r2, #1
 8010dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2201      	movs	r2, #1
 8010dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2201      	movs	r2, #1
 8010ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2201      	movs	r2, #1
 8010de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2201      	movs	r2, #1
 8010dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2201      	movs	r2, #1
 8010df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010df8:	2300      	movs	r3, #0
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3708      	adds	r7, #8
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
	...

08010e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010e04:	b480      	push	{r7}
 8010e06:	b085      	sub	sp, #20
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d001      	beq.n	8010e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010e18:	2301      	movs	r3, #1
 8010e1a:	e054      	b.n	8010ec6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2202      	movs	r2, #2
 8010e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	68da      	ldr	r2, [r3, #12]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f042 0201 	orr.w	r2, r2, #1
 8010e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	4a26      	ldr	r2, [pc, #152]	; (8010ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d022      	beq.n	8010e84 <HAL_TIM_Base_Start_IT+0x80>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e46:	d01d      	beq.n	8010e84 <HAL_TIM_Base_Start_IT+0x80>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a22      	ldr	r2, [pc, #136]	; (8010ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d018      	beq.n	8010e84 <HAL_TIM_Base_Start_IT+0x80>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4a21      	ldr	r2, [pc, #132]	; (8010edc <HAL_TIM_Base_Start_IT+0xd8>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d013      	beq.n	8010e84 <HAL_TIM_Base_Start_IT+0x80>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4a1f      	ldr	r2, [pc, #124]	; (8010ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d00e      	beq.n	8010e84 <HAL_TIM_Base_Start_IT+0x80>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	4a1e      	ldr	r2, [pc, #120]	; (8010ee4 <HAL_TIM_Base_Start_IT+0xe0>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d009      	beq.n	8010e84 <HAL_TIM_Base_Start_IT+0x80>
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4a1c      	ldr	r2, [pc, #112]	; (8010ee8 <HAL_TIM_Base_Start_IT+0xe4>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d004      	beq.n	8010e84 <HAL_TIM_Base_Start_IT+0x80>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4a1b      	ldr	r2, [pc, #108]	; (8010eec <HAL_TIM_Base_Start_IT+0xe8>)
 8010e80:	4293      	cmp	r3, r2
 8010e82:	d115      	bne.n	8010eb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	689a      	ldr	r2, [r3, #8]
 8010e8a:	4b19      	ldr	r3, [pc, #100]	; (8010ef0 <HAL_TIM_Base_Start_IT+0xec>)
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2b06      	cmp	r3, #6
 8010e94:	d015      	beq.n	8010ec2 <HAL_TIM_Base_Start_IT+0xbe>
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e9c:	d011      	beq.n	8010ec2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f042 0201 	orr.w	r2, r2, #1
 8010eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010eae:	e008      	b.n	8010ec2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f042 0201 	orr.w	r2, r2, #1
 8010ebe:	601a      	str	r2, [r3, #0]
 8010ec0:	e000      	b.n	8010ec4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010ec4:	2300      	movs	r3, #0
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3714      	adds	r7, #20
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop
 8010ed4:	40010000 	.word	0x40010000
 8010ed8:	40000400 	.word	0x40000400
 8010edc:	40000800 	.word	0x40000800
 8010ee0:	40000c00 	.word	0x40000c00
 8010ee4:	40010400 	.word	0x40010400
 8010ee8:	40014000 	.word	0x40014000
 8010eec:	40001800 	.word	0x40001800
 8010ef0:	00010007 	.word	0x00010007

08010ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d101      	bne.n	8010f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010f02:	2301      	movs	r3, #1
 8010f04:	e049      	b.n	8010f9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d106      	bne.n	8010f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2200      	movs	r2, #0
 8010f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f7f2 ff78 	bl	8003e10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2202      	movs	r2, #2
 8010f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	3304      	adds	r3, #4
 8010f30:	4619      	mov	r1, r3
 8010f32:	4610      	mov	r0, r2
 8010f34:	f000 fb52 	bl	80115dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2201      	movs	r2, #1
 8010f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2201      	movs	r2, #1
 8010f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2201      	movs	r2, #1
 8010f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2201      	movs	r2, #1
 8010f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2201      	movs	r2, #1
 8010f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2201      	movs	r2, #1
 8010f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010f98:	2300      	movs	r3, #0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3708      	adds	r7, #8
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b082      	sub	sp, #8
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	f003 0302 	and.w	r3, r3, #2
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d122      	bne.n	8010ffe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	f003 0302 	and.w	r3, r3, #2
 8010fc2:	2b02      	cmp	r3, #2
 8010fc4:	d11b      	bne.n	8010ffe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	f06f 0202 	mvn.w	r2, #2
 8010fce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	699b      	ldr	r3, [r3, #24]
 8010fdc:	f003 0303 	and.w	r3, r3, #3
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d003      	beq.n	8010fec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f000 fadb 	bl	80115a0 <HAL_TIM_IC_CaptureCallback>
 8010fea:	e005      	b.n	8010ff8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 facd 	bl	801158c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 fade 	bl	80115b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	691b      	ldr	r3, [r3, #16]
 8011004:	f003 0304 	and.w	r3, r3, #4
 8011008:	2b04      	cmp	r3, #4
 801100a:	d122      	bne.n	8011052 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	f003 0304 	and.w	r3, r3, #4
 8011016:	2b04      	cmp	r3, #4
 8011018:	d11b      	bne.n	8011052 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f06f 0204 	mvn.w	r2, #4
 8011022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2202      	movs	r2, #2
 8011028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	699b      	ldr	r3, [r3, #24]
 8011030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011034:	2b00      	cmp	r3, #0
 8011036:	d003      	beq.n	8011040 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 fab1 	bl	80115a0 <HAL_TIM_IC_CaptureCallback>
 801103e:	e005      	b.n	801104c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 faa3 	bl	801158c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 fab4 	bl	80115b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	691b      	ldr	r3, [r3, #16]
 8011058:	f003 0308 	and.w	r3, r3, #8
 801105c:	2b08      	cmp	r3, #8
 801105e:	d122      	bne.n	80110a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	f003 0308 	and.w	r3, r3, #8
 801106a:	2b08      	cmp	r3, #8
 801106c:	d11b      	bne.n	80110a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	f06f 0208 	mvn.w	r2, #8
 8011076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2204      	movs	r2, #4
 801107c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	69db      	ldr	r3, [r3, #28]
 8011084:	f003 0303 	and.w	r3, r3, #3
 8011088:	2b00      	cmp	r3, #0
 801108a:	d003      	beq.n	8011094 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f000 fa87 	bl	80115a0 <HAL_TIM_IC_CaptureCallback>
 8011092:	e005      	b.n	80110a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 fa79 	bl	801158c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 fa8a 	bl	80115b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2200      	movs	r2, #0
 80110a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	691b      	ldr	r3, [r3, #16]
 80110ac:	f003 0310 	and.w	r3, r3, #16
 80110b0:	2b10      	cmp	r3, #16
 80110b2:	d122      	bne.n	80110fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	68db      	ldr	r3, [r3, #12]
 80110ba:	f003 0310 	and.w	r3, r3, #16
 80110be:	2b10      	cmp	r3, #16
 80110c0:	d11b      	bne.n	80110fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f06f 0210 	mvn.w	r2, #16
 80110ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2208      	movs	r2, #8
 80110d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	69db      	ldr	r3, [r3, #28]
 80110d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d003      	beq.n	80110e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 fa5d 	bl	80115a0 <HAL_TIM_IC_CaptureCallback>
 80110e6:	e005      	b.n	80110f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 fa4f 	bl	801158c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 fa60 	bl	80115b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	691b      	ldr	r3, [r3, #16]
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	2b01      	cmp	r3, #1
 8011106:	d10e      	bne.n	8011126 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	f003 0301 	and.w	r3, r3, #1
 8011112:	2b01      	cmp	r3, #1
 8011114:	d107      	bne.n	8011126 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f06f 0201 	mvn.w	r2, #1
 801111e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f7f2 f961 	bl	80033e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	691b      	ldr	r3, [r3, #16]
 801112c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011130:	2b80      	cmp	r3, #128	; 0x80
 8011132:	d10e      	bne.n	8011152 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801113e:	2b80      	cmp	r3, #128	; 0x80
 8011140:	d107      	bne.n	8011152 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801114a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f000 fef3 	bl	8011f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801115c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011160:	d10e      	bne.n	8011180 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801116c:	2b80      	cmp	r3, #128	; 0x80
 801116e:	d107      	bne.n	8011180 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f000 fee6 	bl	8011f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801118a:	2b40      	cmp	r3, #64	; 0x40
 801118c:	d10e      	bne.n	80111ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011198:	2b40      	cmp	r3, #64	; 0x40
 801119a:	d107      	bne.n	80111ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80111a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 fa0e 	bl	80115c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	691b      	ldr	r3, [r3, #16]
 80111b2:	f003 0320 	and.w	r3, r3, #32
 80111b6:	2b20      	cmp	r3, #32
 80111b8:	d10e      	bne.n	80111d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	f003 0320 	and.w	r3, r3, #32
 80111c4:	2b20      	cmp	r3, #32
 80111c6:	d107      	bne.n	80111d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f06f 0220 	mvn.w	r2, #32
 80111d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 fea6 	bl	8011f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80111d8:	bf00      	nop
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d101      	bne.n	80111fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80111f6:	2302      	movs	r3, #2
 80111f8:	e0fd      	b.n	80113f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2201      	movs	r2, #1
 80111fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2b14      	cmp	r3, #20
 8011206:	f200 80f0 	bhi.w	80113ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 801120a:	a201      	add	r2, pc, #4	; (adr r2, 8011210 <HAL_TIM_PWM_ConfigChannel+0x30>)
 801120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011210:	08011265 	.word	0x08011265
 8011214:	080113eb 	.word	0x080113eb
 8011218:	080113eb 	.word	0x080113eb
 801121c:	080113eb 	.word	0x080113eb
 8011220:	080112a5 	.word	0x080112a5
 8011224:	080113eb 	.word	0x080113eb
 8011228:	080113eb 	.word	0x080113eb
 801122c:	080113eb 	.word	0x080113eb
 8011230:	080112e7 	.word	0x080112e7
 8011234:	080113eb 	.word	0x080113eb
 8011238:	080113eb 	.word	0x080113eb
 801123c:	080113eb 	.word	0x080113eb
 8011240:	08011327 	.word	0x08011327
 8011244:	080113eb 	.word	0x080113eb
 8011248:	080113eb 	.word	0x080113eb
 801124c:	080113eb 	.word	0x080113eb
 8011250:	08011369 	.word	0x08011369
 8011254:	080113eb 	.word	0x080113eb
 8011258:	080113eb 	.word	0x080113eb
 801125c:	080113eb 	.word	0x080113eb
 8011260:	080113a9 	.word	0x080113a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	68b9      	ldr	r1, [r7, #8]
 801126a:	4618      	mov	r0, r3
 801126c:	f000 fa56 	bl	801171c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	699a      	ldr	r2, [r3, #24]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f042 0208 	orr.w	r2, r2, #8
 801127e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	699a      	ldr	r2, [r3, #24]
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f022 0204 	bic.w	r2, r2, #4
 801128e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	6999      	ldr	r1, [r3, #24]
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	691a      	ldr	r2, [r3, #16]
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	430a      	orrs	r2, r1
 80112a0:	619a      	str	r2, [r3, #24]
      break;
 80112a2:	e0a3      	b.n	80113ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	68b9      	ldr	r1, [r7, #8]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f000 faa8 	bl	8011800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	699a      	ldr	r2, [r3, #24]
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80112be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	699a      	ldr	r2, [r3, #24]
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	6999      	ldr	r1, [r3, #24]
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	691b      	ldr	r3, [r3, #16]
 80112da:	021a      	lsls	r2, r3, #8
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	430a      	orrs	r2, r1
 80112e2:	619a      	str	r2, [r3, #24]
      break;
 80112e4:	e082      	b.n	80113ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	68b9      	ldr	r1, [r7, #8]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f000 faff 	bl	80118f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	69da      	ldr	r2, [r3, #28]
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f042 0208 	orr.w	r2, r2, #8
 8011300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	69da      	ldr	r2, [r3, #28]
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f022 0204 	bic.w	r2, r2, #4
 8011310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	69d9      	ldr	r1, [r3, #28]
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	691a      	ldr	r2, [r3, #16]
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	430a      	orrs	r2, r1
 8011322:	61da      	str	r2, [r3, #28]
      break;
 8011324:	e062      	b.n	80113ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	68b9      	ldr	r1, [r7, #8]
 801132c:	4618      	mov	r0, r3
 801132e:	f000 fb55 	bl	80119dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	69da      	ldr	r2, [r3, #28]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	69da      	ldr	r2, [r3, #28]
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	69d9      	ldr	r1, [r3, #28]
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	691b      	ldr	r3, [r3, #16]
 801135c:	021a      	lsls	r2, r3, #8
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	430a      	orrs	r2, r1
 8011364:	61da      	str	r2, [r3, #28]
      break;
 8011366:	e041      	b.n	80113ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	68b9      	ldr	r1, [r7, #8]
 801136e:	4618      	mov	r0, r3
 8011370:	f000 fb8c 	bl	8011a8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f042 0208 	orr.w	r2, r2, #8
 8011382:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f022 0204 	bic.w	r2, r2, #4
 8011392:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	691a      	ldr	r2, [r3, #16]
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	430a      	orrs	r2, r1
 80113a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80113a6:	e021      	b.n	80113ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	68b9      	ldr	r1, [r7, #8]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f000 fbbe 	bl	8011b30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80113c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	691b      	ldr	r3, [r3, #16]
 80113de:	021a      	lsls	r2, r3, #8
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	430a      	orrs	r2, r1
 80113e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80113e8:	e000      	b.n	80113ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80113ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2200      	movs	r2, #0
 80113f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80113f4:	2300      	movs	r3, #0
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3710      	adds	r7, #16
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop

08011400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b084      	sub	sp, #16
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011410:	2b01      	cmp	r3, #1
 8011412:	d101      	bne.n	8011418 <HAL_TIM_ConfigClockSource+0x18>
 8011414:	2302      	movs	r3, #2
 8011416:	e0b3      	b.n	8011580 <HAL_TIM_ConfigClockSource+0x180>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2201      	movs	r2, #1
 801141c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2202      	movs	r2, #2
 8011424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	4b55      	ldr	r3, [pc, #340]	; (8011588 <HAL_TIM_ConfigClockSource+0x188>)
 8011434:	4013      	ands	r3, r2
 8011436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801143e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011450:	d03e      	beq.n	80114d0 <HAL_TIM_ConfigClockSource+0xd0>
 8011452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011456:	f200 8087 	bhi.w	8011568 <HAL_TIM_ConfigClockSource+0x168>
 801145a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801145e:	f000 8085 	beq.w	801156c <HAL_TIM_ConfigClockSource+0x16c>
 8011462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011466:	d87f      	bhi.n	8011568 <HAL_TIM_ConfigClockSource+0x168>
 8011468:	2b70      	cmp	r3, #112	; 0x70
 801146a:	d01a      	beq.n	80114a2 <HAL_TIM_ConfigClockSource+0xa2>
 801146c:	2b70      	cmp	r3, #112	; 0x70
 801146e:	d87b      	bhi.n	8011568 <HAL_TIM_ConfigClockSource+0x168>
 8011470:	2b60      	cmp	r3, #96	; 0x60
 8011472:	d050      	beq.n	8011516 <HAL_TIM_ConfigClockSource+0x116>
 8011474:	2b60      	cmp	r3, #96	; 0x60
 8011476:	d877      	bhi.n	8011568 <HAL_TIM_ConfigClockSource+0x168>
 8011478:	2b50      	cmp	r3, #80	; 0x50
 801147a:	d03c      	beq.n	80114f6 <HAL_TIM_ConfigClockSource+0xf6>
 801147c:	2b50      	cmp	r3, #80	; 0x50
 801147e:	d873      	bhi.n	8011568 <HAL_TIM_ConfigClockSource+0x168>
 8011480:	2b40      	cmp	r3, #64	; 0x40
 8011482:	d058      	beq.n	8011536 <HAL_TIM_ConfigClockSource+0x136>
 8011484:	2b40      	cmp	r3, #64	; 0x40
 8011486:	d86f      	bhi.n	8011568 <HAL_TIM_ConfigClockSource+0x168>
 8011488:	2b30      	cmp	r3, #48	; 0x30
 801148a:	d064      	beq.n	8011556 <HAL_TIM_ConfigClockSource+0x156>
 801148c:	2b30      	cmp	r3, #48	; 0x30
 801148e:	d86b      	bhi.n	8011568 <HAL_TIM_ConfigClockSource+0x168>
 8011490:	2b20      	cmp	r3, #32
 8011492:	d060      	beq.n	8011556 <HAL_TIM_ConfigClockSource+0x156>
 8011494:	2b20      	cmp	r3, #32
 8011496:	d867      	bhi.n	8011568 <HAL_TIM_ConfigClockSource+0x168>
 8011498:	2b00      	cmp	r3, #0
 801149a:	d05c      	beq.n	8011556 <HAL_TIM_ConfigClockSource+0x156>
 801149c:	2b10      	cmp	r3, #16
 801149e:	d05a      	beq.n	8011556 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80114a0:	e062      	b.n	8011568 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6818      	ldr	r0, [r3, #0]
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	6899      	ldr	r1, [r3, #8]
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	685a      	ldr	r2, [r3, #4]
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	68db      	ldr	r3, [r3, #12]
 80114b2:	f000 fc0b 	bl	8011ccc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	689b      	ldr	r3, [r3, #8]
 80114bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80114c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	68fa      	ldr	r2, [r7, #12]
 80114cc:	609a      	str	r2, [r3, #8]
      break;
 80114ce:	e04e      	b.n	801156e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	6899      	ldr	r1, [r3, #8]
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	f000 fbf4 	bl	8011ccc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	689a      	ldr	r2, [r3, #8]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80114f2:	609a      	str	r2, [r3, #8]
      break;
 80114f4:	e03b      	b.n	801156e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6818      	ldr	r0, [r3, #0]
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	6859      	ldr	r1, [r3, #4]
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	461a      	mov	r2, r3
 8011504:	f000 fb68 	bl	8011bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2150      	movs	r1, #80	; 0x50
 801150e:	4618      	mov	r0, r3
 8011510:	f000 fbc1 	bl	8011c96 <TIM_ITRx_SetConfig>
      break;
 8011514:	e02b      	b.n	801156e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6818      	ldr	r0, [r3, #0]
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	6859      	ldr	r1, [r3, #4]
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	461a      	mov	r2, r3
 8011524:	f000 fb87 	bl	8011c36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2160      	movs	r1, #96	; 0x60
 801152e:	4618      	mov	r0, r3
 8011530:	f000 fbb1 	bl	8011c96 <TIM_ITRx_SetConfig>
      break;
 8011534:	e01b      	b.n	801156e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6818      	ldr	r0, [r3, #0]
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	6859      	ldr	r1, [r3, #4]
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	68db      	ldr	r3, [r3, #12]
 8011542:	461a      	mov	r2, r3
 8011544:	f000 fb48 	bl	8011bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2140      	movs	r1, #64	; 0x40
 801154e:	4618      	mov	r0, r3
 8011550:	f000 fba1 	bl	8011c96 <TIM_ITRx_SetConfig>
      break;
 8011554:	e00b      	b.n	801156e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681a      	ldr	r2, [r3, #0]
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	4619      	mov	r1, r3
 8011560:	4610      	mov	r0, r2
 8011562:	f000 fb98 	bl	8011c96 <TIM_ITRx_SetConfig>
        break;
 8011566:	e002      	b.n	801156e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8011568:	bf00      	nop
 801156a:	e000      	b.n	801156e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801156c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2201      	movs	r2, #1
 8011572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2200      	movs	r2, #0
 801157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801157e:	2300      	movs	r3, #0
}
 8011580:	4618      	mov	r0, r3
 8011582:	3710      	adds	r7, #16
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	fffeff88 	.word	0xfffeff88

0801158c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801158c:	b480      	push	{r7}
 801158e:	b083      	sub	sp, #12
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011594:	bf00      	nop
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80115a8:	bf00      	nop
 80115aa:	370c      	adds	r7, #12
 80115ac:	46bd      	mov	sp, r7
 80115ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b2:	4770      	bx	lr

080115b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80115bc:	bf00      	nop
 80115be:	370c      	adds	r7, #12
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr

080115c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b083      	sub	sp, #12
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80115d0:	bf00      	nop
 80115d2:	370c      	adds	r7, #12
 80115d4:	46bd      	mov	sp, r7
 80115d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115da:	4770      	bx	lr

080115dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80115dc:	b480      	push	{r7}
 80115de:	b085      	sub	sp, #20
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4a40      	ldr	r2, [pc, #256]	; (80116f0 <TIM_Base_SetConfig+0x114>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d013      	beq.n	801161c <TIM_Base_SetConfig+0x40>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115fa:	d00f      	beq.n	801161c <TIM_Base_SetConfig+0x40>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	4a3d      	ldr	r2, [pc, #244]	; (80116f4 <TIM_Base_SetConfig+0x118>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d00b      	beq.n	801161c <TIM_Base_SetConfig+0x40>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	4a3c      	ldr	r2, [pc, #240]	; (80116f8 <TIM_Base_SetConfig+0x11c>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d007      	beq.n	801161c <TIM_Base_SetConfig+0x40>
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	4a3b      	ldr	r2, [pc, #236]	; (80116fc <TIM_Base_SetConfig+0x120>)
 8011610:	4293      	cmp	r3, r2
 8011612:	d003      	beq.n	801161c <TIM_Base_SetConfig+0x40>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	4a3a      	ldr	r2, [pc, #232]	; (8011700 <TIM_Base_SetConfig+0x124>)
 8011618:	4293      	cmp	r3, r2
 801161a:	d108      	bne.n	801162e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	68fa      	ldr	r2, [r7, #12]
 801162a:	4313      	orrs	r3, r2
 801162c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	4a2f      	ldr	r2, [pc, #188]	; (80116f0 <TIM_Base_SetConfig+0x114>)
 8011632:	4293      	cmp	r3, r2
 8011634:	d02b      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801163c:	d027      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4a2c      	ldr	r2, [pc, #176]	; (80116f4 <TIM_Base_SetConfig+0x118>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d023      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	4a2b      	ldr	r2, [pc, #172]	; (80116f8 <TIM_Base_SetConfig+0x11c>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d01f      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4a2a      	ldr	r2, [pc, #168]	; (80116fc <TIM_Base_SetConfig+0x120>)
 8011652:	4293      	cmp	r3, r2
 8011654:	d01b      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4a29      	ldr	r2, [pc, #164]	; (8011700 <TIM_Base_SetConfig+0x124>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d017      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4a28      	ldr	r2, [pc, #160]	; (8011704 <TIM_Base_SetConfig+0x128>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d013      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4a27      	ldr	r2, [pc, #156]	; (8011708 <TIM_Base_SetConfig+0x12c>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d00f      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4a26      	ldr	r2, [pc, #152]	; (801170c <TIM_Base_SetConfig+0x130>)
 8011672:	4293      	cmp	r3, r2
 8011674:	d00b      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4a25      	ldr	r2, [pc, #148]	; (8011710 <TIM_Base_SetConfig+0x134>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d007      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4a24      	ldr	r2, [pc, #144]	; (8011714 <TIM_Base_SetConfig+0x138>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d003      	beq.n	801168e <TIM_Base_SetConfig+0xb2>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4a23      	ldr	r2, [pc, #140]	; (8011718 <TIM_Base_SetConfig+0x13c>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d108      	bne.n	80116a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	68fa      	ldr	r2, [r7, #12]
 801169c:	4313      	orrs	r3, r2
 801169e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	695b      	ldr	r3, [r3, #20]
 80116aa:	4313      	orrs	r3, r2
 80116ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	68fa      	ldr	r2, [r7, #12]
 80116b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	689a      	ldr	r2, [r3, #8]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4a0a      	ldr	r2, [pc, #40]	; (80116f0 <TIM_Base_SetConfig+0x114>)
 80116c8:	4293      	cmp	r3, r2
 80116ca:	d003      	beq.n	80116d4 <TIM_Base_SetConfig+0xf8>
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	4a0c      	ldr	r2, [pc, #48]	; (8011700 <TIM_Base_SetConfig+0x124>)
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d103      	bne.n	80116dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	691a      	ldr	r2, [r3, #16]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2201      	movs	r2, #1
 80116e0:	615a      	str	r2, [r3, #20]
}
 80116e2:	bf00      	nop
 80116e4:	3714      	adds	r7, #20
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop
 80116f0:	40010000 	.word	0x40010000
 80116f4:	40000400 	.word	0x40000400
 80116f8:	40000800 	.word	0x40000800
 80116fc:	40000c00 	.word	0x40000c00
 8011700:	40010400 	.word	0x40010400
 8011704:	40014000 	.word	0x40014000
 8011708:	40014400 	.word	0x40014400
 801170c:	40014800 	.word	0x40014800
 8011710:	40001800 	.word	0x40001800
 8011714:	40001c00 	.word	0x40001c00
 8011718:	40002000 	.word	0x40002000

0801171c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801171c:	b480      	push	{r7}
 801171e:	b087      	sub	sp, #28
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6a1b      	ldr	r3, [r3, #32]
 801172a:	f023 0201 	bic.w	r2, r3, #1
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6a1b      	ldr	r3, [r3, #32]
 8011736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	699b      	ldr	r3, [r3, #24]
 8011742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	4b2b      	ldr	r3, [pc, #172]	; (80117f4 <TIM_OC1_SetConfig+0xd8>)
 8011748:	4013      	ands	r3, r2
 801174a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f023 0303 	bic.w	r3, r3, #3
 8011752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	68fa      	ldr	r2, [r7, #12]
 801175a:	4313      	orrs	r3, r2
 801175c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	f023 0302 	bic.w	r3, r3, #2
 8011764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	689b      	ldr	r3, [r3, #8]
 801176a:	697a      	ldr	r2, [r7, #20]
 801176c:	4313      	orrs	r3, r2
 801176e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	4a21      	ldr	r2, [pc, #132]	; (80117f8 <TIM_OC1_SetConfig+0xdc>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d003      	beq.n	8011780 <TIM_OC1_SetConfig+0x64>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	4a20      	ldr	r2, [pc, #128]	; (80117fc <TIM_OC1_SetConfig+0xe0>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d10c      	bne.n	801179a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f023 0308 	bic.w	r3, r3, #8
 8011786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	697a      	ldr	r2, [r7, #20]
 801178e:	4313      	orrs	r3, r2
 8011790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	f023 0304 	bic.w	r3, r3, #4
 8011798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	4a16      	ldr	r2, [pc, #88]	; (80117f8 <TIM_OC1_SetConfig+0xdc>)
 801179e:	4293      	cmp	r3, r2
 80117a0:	d003      	beq.n	80117aa <TIM_OC1_SetConfig+0x8e>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4a15      	ldr	r2, [pc, #84]	; (80117fc <TIM_OC1_SetConfig+0xe0>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d111      	bne.n	80117ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80117b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80117b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	695b      	ldr	r3, [r3, #20]
 80117be:	693a      	ldr	r2, [r7, #16]
 80117c0:	4313      	orrs	r3, r2
 80117c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	699b      	ldr	r3, [r3, #24]
 80117c8:	693a      	ldr	r2, [r7, #16]
 80117ca:	4313      	orrs	r3, r2
 80117cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	693a      	ldr	r2, [r7, #16]
 80117d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	68fa      	ldr	r2, [r7, #12]
 80117d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	685a      	ldr	r2, [r3, #4]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	697a      	ldr	r2, [r7, #20]
 80117e6:	621a      	str	r2, [r3, #32]
}
 80117e8:	bf00      	nop
 80117ea:	371c      	adds	r7, #28
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr
 80117f4:	fffeff8f 	.word	0xfffeff8f
 80117f8:	40010000 	.word	0x40010000
 80117fc:	40010400 	.word	0x40010400

08011800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011800:	b480      	push	{r7}
 8011802:	b087      	sub	sp, #28
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6a1b      	ldr	r3, [r3, #32]
 801180e:	f023 0210 	bic.w	r2, r3, #16
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6a1b      	ldr	r3, [r3, #32]
 801181a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	699b      	ldr	r3, [r3, #24]
 8011826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011828:	68fa      	ldr	r2, [r7, #12]
 801182a:	4b2e      	ldr	r3, [pc, #184]	; (80118e4 <TIM_OC2_SetConfig+0xe4>)
 801182c:	4013      	ands	r3, r2
 801182e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	021b      	lsls	r3, r3, #8
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	4313      	orrs	r3, r2
 8011842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	f023 0320 	bic.w	r3, r3, #32
 801184a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	011b      	lsls	r3, r3, #4
 8011852:	697a      	ldr	r2, [r7, #20]
 8011854:	4313      	orrs	r3, r2
 8011856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	4a23      	ldr	r2, [pc, #140]	; (80118e8 <TIM_OC2_SetConfig+0xe8>)
 801185c:	4293      	cmp	r3, r2
 801185e:	d003      	beq.n	8011868 <TIM_OC2_SetConfig+0x68>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	4a22      	ldr	r2, [pc, #136]	; (80118ec <TIM_OC2_SetConfig+0xec>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d10d      	bne.n	8011884 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801186e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	011b      	lsls	r3, r3, #4
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	4313      	orrs	r3, r2
 801187a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011882:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	4a18      	ldr	r2, [pc, #96]	; (80118e8 <TIM_OC2_SetConfig+0xe8>)
 8011888:	4293      	cmp	r3, r2
 801188a:	d003      	beq.n	8011894 <TIM_OC2_SetConfig+0x94>
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	4a17      	ldr	r2, [pc, #92]	; (80118ec <TIM_OC2_SetConfig+0xec>)
 8011890:	4293      	cmp	r3, r2
 8011892:	d113      	bne.n	80118bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801189a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80118a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	695b      	ldr	r3, [r3, #20]
 80118a8:	009b      	lsls	r3, r3, #2
 80118aa:	693a      	ldr	r2, [r7, #16]
 80118ac:	4313      	orrs	r3, r2
 80118ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	699b      	ldr	r3, [r3, #24]
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	693a      	ldr	r2, [r7, #16]
 80118b8:	4313      	orrs	r3, r2
 80118ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	693a      	ldr	r2, [r7, #16]
 80118c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	685a      	ldr	r2, [r3, #4]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	621a      	str	r2, [r3, #32]
}
 80118d6:	bf00      	nop
 80118d8:	371c      	adds	r7, #28
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop
 80118e4:	feff8fff 	.word	0xfeff8fff
 80118e8:	40010000 	.word	0x40010000
 80118ec:	40010400 	.word	0x40010400

080118f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b087      	sub	sp, #28
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6a1b      	ldr	r3, [r3, #32]
 80118fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a1b      	ldr	r3, [r3, #32]
 801190a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	69db      	ldr	r3, [r3, #28]
 8011916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	4b2d      	ldr	r3, [pc, #180]	; (80119d0 <TIM_OC3_SetConfig+0xe0>)
 801191c:	4013      	ands	r3, r2
 801191e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	f023 0303 	bic.w	r3, r3, #3
 8011926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	68fa      	ldr	r2, [r7, #12]
 801192e:	4313      	orrs	r3, r2
 8011930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	689b      	ldr	r3, [r3, #8]
 801193e:	021b      	lsls	r3, r3, #8
 8011940:	697a      	ldr	r2, [r7, #20]
 8011942:	4313      	orrs	r3, r2
 8011944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	4a22      	ldr	r2, [pc, #136]	; (80119d4 <TIM_OC3_SetConfig+0xe4>)
 801194a:	4293      	cmp	r3, r2
 801194c:	d003      	beq.n	8011956 <TIM_OC3_SetConfig+0x66>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	4a21      	ldr	r2, [pc, #132]	; (80119d8 <TIM_OC3_SetConfig+0xe8>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d10d      	bne.n	8011972 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801195c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	68db      	ldr	r3, [r3, #12]
 8011962:	021b      	lsls	r3, r3, #8
 8011964:	697a      	ldr	r2, [r7, #20]
 8011966:	4313      	orrs	r3, r2
 8011968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	4a17      	ldr	r2, [pc, #92]	; (80119d4 <TIM_OC3_SetConfig+0xe4>)
 8011976:	4293      	cmp	r3, r2
 8011978:	d003      	beq.n	8011982 <TIM_OC3_SetConfig+0x92>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4a16      	ldr	r2, [pc, #88]	; (80119d8 <TIM_OC3_SetConfig+0xe8>)
 801197e:	4293      	cmp	r3, r2
 8011980:	d113      	bne.n	80119aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	695b      	ldr	r3, [r3, #20]
 8011996:	011b      	lsls	r3, r3, #4
 8011998:	693a      	ldr	r2, [r7, #16]
 801199a:	4313      	orrs	r3, r2
 801199c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	011b      	lsls	r3, r3, #4
 80119a4:	693a      	ldr	r2, [r7, #16]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	693a      	ldr	r2, [r7, #16]
 80119ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	68fa      	ldr	r2, [r7, #12]
 80119b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	685a      	ldr	r2, [r3, #4]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	697a      	ldr	r2, [r7, #20]
 80119c2:	621a      	str	r2, [r3, #32]
}
 80119c4:	bf00      	nop
 80119c6:	371c      	adds	r7, #28
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr
 80119d0:	fffeff8f 	.word	0xfffeff8f
 80119d4:	40010000 	.word	0x40010000
 80119d8:	40010400 	.word	0x40010400

080119dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80119dc:	b480      	push	{r7}
 80119de:	b087      	sub	sp, #28
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6a1b      	ldr	r3, [r3, #32]
 80119ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6a1b      	ldr	r3, [r3, #32]
 80119f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	69db      	ldr	r3, [r3, #28]
 8011a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011a04:	68fa      	ldr	r2, [r7, #12]
 8011a06:	4b1e      	ldr	r3, [pc, #120]	; (8011a80 <TIM_OC4_SetConfig+0xa4>)
 8011a08:	4013      	ands	r3, r2
 8011a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	021b      	lsls	r3, r3, #8
 8011a1a:	68fa      	ldr	r2, [r7, #12]
 8011a1c:	4313      	orrs	r3, r2
 8011a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	689b      	ldr	r3, [r3, #8]
 8011a2c:	031b      	lsls	r3, r3, #12
 8011a2e:	693a      	ldr	r2, [r7, #16]
 8011a30:	4313      	orrs	r3, r2
 8011a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	4a13      	ldr	r2, [pc, #76]	; (8011a84 <TIM_OC4_SetConfig+0xa8>)
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d003      	beq.n	8011a44 <TIM_OC4_SetConfig+0x68>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	4a12      	ldr	r2, [pc, #72]	; (8011a88 <TIM_OC4_SetConfig+0xac>)
 8011a40:	4293      	cmp	r3, r2
 8011a42:	d109      	bne.n	8011a58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	695b      	ldr	r3, [r3, #20]
 8011a50:	019b      	lsls	r3, r3, #6
 8011a52:	697a      	ldr	r2, [r7, #20]
 8011a54:	4313      	orrs	r3, r2
 8011a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	697a      	ldr	r2, [r7, #20]
 8011a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	68fa      	ldr	r2, [r7, #12]
 8011a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	685a      	ldr	r2, [r3, #4]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	693a      	ldr	r2, [r7, #16]
 8011a70:	621a      	str	r2, [r3, #32]
}
 8011a72:	bf00      	nop
 8011a74:	371c      	adds	r7, #28
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	feff8fff 	.word	0xfeff8fff
 8011a84:	40010000 	.word	0x40010000
 8011a88:	40010400 	.word	0x40010400

08011a8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b087      	sub	sp, #28
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6a1b      	ldr	r3, [r3, #32]
 8011a9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6a1b      	ldr	r3, [r3, #32]
 8011aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011ab4:	68fa      	ldr	r2, [r7, #12]
 8011ab6:	4b1b      	ldr	r3, [pc, #108]	; (8011b24 <TIM_OC5_SetConfig+0x98>)
 8011ab8:	4013      	ands	r3, r2
 8011aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	68fa      	ldr	r2, [r7, #12]
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011acc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	689b      	ldr	r3, [r3, #8]
 8011ad2:	041b      	lsls	r3, r3, #16
 8011ad4:	693a      	ldr	r2, [r7, #16]
 8011ad6:	4313      	orrs	r3, r2
 8011ad8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4a12      	ldr	r2, [pc, #72]	; (8011b28 <TIM_OC5_SetConfig+0x9c>)
 8011ade:	4293      	cmp	r3, r2
 8011ae0:	d003      	beq.n	8011aea <TIM_OC5_SetConfig+0x5e>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4a11      	ldr	r2, [pc, #68]	; (8011b2c <TIM_OC5_SetConfig+0xa0>)
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d109      	bne.n	8011afe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011af0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	695b      	ldr	r3, [r3, #20]
 8011af6:	021b      	lsls	r3, r3, #8
 8011af8:	697a      	ldr	r2, [r7, #20]
 8011afa:	4313      	orrs	r3, r2
 8011afc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	697a      	ldr	r2, [r7, #20]
 8011b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	68fa      	ldr	r2, [r7, #12]
 8011b08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	685a      	ldr	r2, [r3, #4]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	693a      	ldr	r2, [r7, #16]
 8011b16:	621a      	str	r2, [r3, #32]
}
 8011b18:	bf00      	nop
 8011b1a:	371c      	adds	r7, #28
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr
 8011b24:	fffeff8f 	.word	0xfffeff8f
 8011b28:	40010000 	.word	0x40010000
 8011b2c:	40010400 	.word	0x40010400

08011b30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b087      	sub	sp, #28
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6a1b      	ldr	r3, [r3, #32]
 8011b3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6a1b      	ldr	r3, [r3, #32]
 8011b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011b58:	68fa      	ldr	r2, [r7, #12]
 8011b5a:	4b1c      	ldr	r3, [pc, #112]	; (8011bcc <TIM_OC6_SetConfig+0x9c>)
 8011b5c:	4013      	ands	r3, r2
 8011b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	021b      	lsls	r3, r3, #8
 8011b66:	68fa      	ldr	r2, [r7, #12]
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	689b      	ldr	r3, [r3, #8]
 8011b78:	051b      	lsls	r3, r3, #20
 8011b7a:	693a      	ldr	r2, [r7, #16]
 8011b7c:	4313      	orrs	r3, r2
 8011b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	4a13      	ldr	r2, [pc, #76]	; (8011bd0 <TIM_OC6_SetConfig+0xa0>)
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d003      	beq.n	8011b90 <TIM_OC6_SetConfig+0x60>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	4a12      	ldr	r2, [pc, #72]	; (8011bd4 <TIM_OC6_SetConfig+0xa4>)
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d109      	bne.n	8011ba4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	695b      	ldr	r3, [r3, #20]
 8011b9c:	029b      	lsls	r3, r3, #10
 8011b9e:	697a      	ldr	r2, [r7, #20]
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	697a      	ldr	r2, [r7, #20]
 8011ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	68fa      	ldr	r2, [r7, #12]
 8011bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	685a      	ldr	r2, [r3, #4]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	693a      	ldr	r2, [r7, #16]
 8011bbc:	621a      	str	r2, [r3, #32]
}
 8011bbe:	bf00      	nop
 8011bc0:	371c      	adds	r7, #28
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc8:	4770      	bx	lr
 8011bca:	bf00      	nop
 8011bcc:	feff8fff 	.word	0xfeff8fff
 8011bd0:	40010000 	.word	0x40010000
 8011bd4:	40010400 	.word	0x40010400

08011bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b087      	sub	sp, #28
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	6a1b      	ldr	r3, [r3, #32]
 8011be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	6a1b      	ldr	r3, [r3, #32]
 8011bee:	f023 0201 	bic.w	r2, r3, #1
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	699b      	ldr	r3, [r3, #24]
 8011bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	011b      	lsls	r3, r3, #4
 8011c08:	693a      	ldr	r2, [r7, #16]
 8011c0a:	4313      	orrs	r3, r2
 8011c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	f023 030a 	bic.w	r3, r3, #10
 8011c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011c16:	697a      	ldr	r2, [r7, #20]
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	693a      	ldr	r2, [r7, #16]
 8011c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	697a      	ldr	r2, [r7, #20]
 8011c28:	621a      	str	r2, [r3, #32]
}
 8011c2a:	bf00      	nop
 8011c2c:	371c      	adds	r7, #28
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr

08011c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011c36:	b480      	push	{r7}
 8011c38:	b087      	sub	sp, #28
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	60f8      	str	r0, [r7, #12]
 8011c3e:	60b9      	str	r1, [r7, #8]
 8011c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	6a1b      	ldr	r3, [r3, #32]
 8011c46:	f023 0210 	bic.w	r2, r3, #16
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	699b      	ldr	r3, [r3, #24]
 8011c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	6a1b      	ldr	r3, [r3, #32]
 8011c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	031b      	lsls	r3, r3, #12
 8011c66:	697a      	ldr	r2, [r7, #20]
 8011c68:	4313      	orrs	r3, r2
 8011c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011c72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	011b      	lsls	r3, r3, #4
 8011c78:	693a      	ldr	r2, [r7, #16]
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	697a      	ldr	r2, [r7, #20]
 8011c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	693a      	ldr	r2, [r7, #16]
 8011c88:	621a      	str	r2, [r3, #32]
}
 8011c8a:	bf00      	nop
 8011c8c:	371c      	adds	r7, #28
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c94:	4770      	bx	lr

08011c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011c96:	b480      	push	{r7}
 8011c98:	b085      	sub	sp, #20
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	6078      	str	r0, [r7, #4]
 8011c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011cae:	683a      	ldr	r2, [r7, #0]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	4313      	orrs	r3, r2
 8011cb4:	f043 0307 	orr.w	r3, r3, #7
 8011cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	68fa      	ldr	r2, [r7, #12]
 8011cbe:	609a      	str	r2, [r3, #8]
}
 8011cc0:	bf00      	nop
 8011cc2:	3714      	adds	r7, #20
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cca:	4770      	bx	lr

08011ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b087      	sub	sp, #28
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]
 8011cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	021a      	lsls	r2, r3, #8
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	431a      	orrs	r2, r3
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	697a      	ldr	r2, [r7, #20]
 8011cf6:	4313      	orrs	r3, r2
 8011cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	697a      	ldr	r2, [r7, #20]
 8011cfe:	609a      	str	r2, [r3, #8]
}
 8011d00:	bf00      	nop
 8011d02:	371c      	adds	r7, #28
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr

08011d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b085      	sub	sp, #20
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d101      	bne.n	8011d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011d20:	2302      	movs	r3, #2
 8011d22:	e06d      	b.n	8011e00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2201      	movs	r2, #1
 8011d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2202      	movs	r2, #2
 8011d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	689b      	ldr	r3, [r3, #8]
 8011d42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4a30      	ldr	r2, [pc, #192]	; (8011e0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d004      	beq.n	8011d58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	4a2f      	ldr	r2, [pc, #188]	; (8011e10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011d54:	4293      	cmp	r3, r2
 8011d56:	d108      	bne.n	8011d6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011d5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	68fa      	ldr	r2, [r7, #12]
 8011d66:	4313      	orrs	r3, r2
 8011d68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	68fa      	ldr	r2, [r7, #12]
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	68fa      	ldr	r2, [r7, #12]
 8011d82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4a20      	ldr	r2, [pc, #128]	; (8011e0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	d022      	beq.n	8011dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d96:	d01d      	beq.n	8011dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4a1d      	ldr	r2, [pc, #116]	; (8011e14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d018      	beq.n	8011dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4a1c      	ldr	r2, [pc, #112]	; (8011e18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011da8:	4293      	cmp	r3, r2
 8011daa:	d013      	beq.n	8011dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	4a1a      	ldr	r2, [pc, #104]	; (8011e1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d00e      	beq.n	8011dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	4a15      	ldr	r2, [pc, #84]	; (8011e10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	d009      	beq.n	8011dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	4a16      	ldr	r2, [pc, #88]	; (8011e20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d004      	beq.n	8011dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	4a15      	ldr	r2, [pc, #84]	; (8011e24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d10c      	bne.n	8011dee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011dda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	689b      	ldr	r3, [r3, #8]
 8011de0:	68ba      	ldr	r2, [r7, #8]
 8011de2:	4313      	orrs	r3, r2
 8011de4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	68ba      	ldr	r2, [r7, #8]
 8011dec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2201      	movs	r2, #1
 8011df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011dfe:	2300      	movs	r3, #0
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	3714      	adds	r7, #20
 8011e04:	46bd      	mov	sp, r7
 8011e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0a:	4770      	bx	lr
 8011e0c:	40010000 	.word	0x40010000
 8011e10:	40010400 	.word	0x40010400
 8011e14:	40000400 	.word	0x40000400
 8011e18:	40000800 	.word	0x40000800
 8011e1c:	40000c00 	.word	0x40000c00
 8011e20:	40014000 	.word	0x40014000
 8011e24:	40001800 	.word	0x40001800

08011e28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b085      	sub	sp, #20
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011e32:	2300      	movs	r3, #0
 8011e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d101      	bne.n	8011e44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011e40:	2302      	movs	r3, #2
 8011e42:	e065      	b.n	8011f10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2201      	movs	r2, #1
 8011e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	4313      	orrs	r3, r2
 8011e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	689b      	ldr	r3, [r3, #8]
 8011e64:	4313      	orrs	r3, r2
 8011e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	4313      	orrs	r3, r2
 8011e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	4313      	orrs	r3, r2
 8011e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	691b      	ldr	r3, [r3, #16]
 8011e8e:	4313      	orrs	r3, r2
 8011e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	695b      	ldr	r3, [r3, #20]
 8011e9c:	4313      	orrs	r3, r2
 8011e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eaa:	4313      	orrs	r3, r2
 8011eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	699b      	ldr	r3, [r3, #24]
 8011eb8:	041b      	lsls	r3, r3, #16
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	4a16      	ldr	r2, [pc, #88]	; (8011f1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d004      	beq.n	8011ed2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	4a14      	ldr	r2, [pc, #80]	; (8011f20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011ece:	4293      	cmp	r3, r2
 8011ed0:	d115      	bne.n	8011efe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011edc:	051b      	lsls	r3, r3, #20
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	69db      	ldr	r3, [r3, #28]
 8011eec:	4313      	orrs	r3, r2
 8011eee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	6a1b      	ldr	r3, [r3, #32]
 8011efa:	4313      	orrs	r3, r2
 8011efc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2200      	movs	r2, #0
 8011f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011f0e:	2300      	movs	r3, #0
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3714      	adds	r7, #20
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr
 8011f1c:	40010000 	.word	0x40010000
 8011f20:	40010400 	.word	0x40010400

08011f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011f24:	b480      	push	{r7}
 8011f26:	b083      	sub	sp, #12
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011f2c:	bf00      	nop
 8011f2e:	370c      	adds	r7, #12
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011f40:	bf00      	nop
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr

08011f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b083      	sub	sp, #12
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011f54:	bf00      	nop
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d101      	bne.n	8011f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011f6e:	2301      	movs	r3, #1
 8011f70:	e040      	b.n	8011ff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d106      	bne.n	8011f88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f7f2 f832 	bl	8003fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2224      	movs	r2, #36	; 0x24
 8011f8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	681a      	ldr	r2, [r3, #0]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f022 0201 	bic.w	r2, r2, #1
 8011f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f000 f8c0 	bl	8012124 <UART_SetConfig>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d101      	bne.n	8011fae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011faa:	2301      	movs	r3, #1
 8011fac:	e022      	b.n	8011ff4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d002      	beq.n	8011fbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 fb16 	bl	80125e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	685a      	ldr	r2, [r3, #4]
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	689a      	ldr	r2, [r3, #8]
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	f042 0201 	orr.w	r2, r2, #1
 8011fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f000 fb9d 	bl	801272c <UART_CheckIdleState>
 8011ff2:	4603      	mov	r3, r0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3708      	adds	r7, #8
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b08a      	sub	sp, #40	; 0x28
 8012000:	af02      	add	r7, sp, #8
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	603b      	str	r3, [r7, #0]
 8012008:	4613      	mov	r3, r2
 801200a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012010:	2b20      	cmp	r3, #32
 8012012:	f040 8081 	bne.w	8012118 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d002      	beq.n	8012022 <HAL_UART_Transmit+0x26>
 801201c:	88fb      	ldrh	r3, [r7, #6]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d101      	bne.n	8012026 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012022:	2301      	movs	r3, #1
 8012024:	e079      	b.n	801211a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801202c:	2b01      	cmp	r3, #1
 801202e:	d101      	bne.n	8012034 <HAL_UART_Transmit+0x38>
 8012030:	2302      	movs	r3, #2
 8012032:	e072      	b.n	801211a <HAL_UART_Transmit+0x11e>
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	2201      	movs	r2, #1
 8012038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	2200      	movs	r2, #0
 8012040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	2221      	movs	r2, #33	; 0x21
 8012048:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801204a:	f7f5 fc1b 	bl	8007884 <HAL_GetTick>
 801204e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	88fa      	ldrh	r2, [r7, #6]
 8012054:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	88fa      	ldrh	r2, [r7, #6]
 801205c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	689b      	ldr	r3, [r3, #8]
 8012064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012068:	d108      	bne.n	801207c <HAL_UART_Transmit+0x80>
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d104      	bne.n	801207c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8012072:	2300      	movs	r3, #0
 8012074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	61bb      	str	r3, [r7, #24]
 801207a:	e003      	b.n	8012084 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012080:	2300      	movs	r3, #0
 8012082:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2200      	movs	r2, #0
 8012088:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 801208c:	e02c      	b.n	80120e8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	9300      	str	r3, [sp, #0]
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	2200      	movs	r2, #0
 8012096:	2180      	movs	r1, #128	; 0x80
 8012098:	68f8      	ldr	r0, [r7, #12]
 801209a:	f000 fb7a 	bl	8012792 <UART_WaitOnFlagUntilTimeout>
 801209e:	4603      	mov	r3, r0
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d001      	beq.n	80120a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80120a4:	2303      	movs	r3, #3
 80120a6:	e038      	b.n	801211a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d10b      	bne.n	80120c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	881b      	ldrh	r3, [r3, #0]
 80120b2:	461a      	mov	r2, r3
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80120bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	3302      	adds	r3, #2
 80120c2:	61bb      	str	r3, [r7, #24]
 80120c4:	e007      	b.n	80120d6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	781a      	ldrb	r2, [r3, #0]
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	3301      	adds	r3, #1
 80120d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80120dc:	b29b      	uxth	r3, r3
 80120de:	3b01      	subs	r3, #1
 80120e0:	b29a      	uxth	r2, r3
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80120ee:	b29b      	uxth	r3, r3
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d1cc      	bne.n	801208e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	9300      	str	r3, [sp, #0]
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	2200      	movs	r2, #0
 80120fc:	2140      	movs	r1, #64	; 0x40
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f000 fb47 	bl	8012792 <UART_WaitOnFlagUntilTimeout>
 8012104:	4603      	mov	r3, r0
 8012106:	2b00      	cmp	r3, #0
 8012108:	d001      	beq.n	801210e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 801210a:	2303      	movs	r3, #3
 801210c:	e005      	b.n	801211a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	2220      	movs	r2, #32
 8012112:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8012114:	2300      	movs	r3, #0
 8012116:	e000      	b.n	801211a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8012118:	2302      	movs	r3, #2
  }
}
 801211a:	4618      	mov	r0, r3
 801211c:	3720      	adds	r7, #32
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
	...

08012124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b088      	sub	sp, #32
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801212c:	2300      	movs	r3, #0
 801212e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	689a      	ldr	r2, [r3, #8]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	691b      	ldr	r3, [r3, #16]
 8012138:	431a      	orrs	r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	695b      	ldr	r3, [r3, #20]
 801213e:	431a      	orrs	r2, r3
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	69db      	ldr	r3, [r3, #28]
 8012144:	4313      	orrs	r3, r2
 8012146:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	4ba7      	ldr	r3, [pc, #668]	; (80123ec <UART_SetConfig+0x2c8>)
 8012150:	4013      	ands	r3, r2
 8012152:	687a      	ldr	r2, [r7, #4]
 8012154:	6812      	ldr	r2, [r2, #0]
 8012156:	6979      	ldr	r1, [r7, #20]
 8012158:	430b      	orrs	r3, r1
 801215a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	68da      	ldr	r2, [r3, #12]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	430a      	orrs	r2, r1
 8012170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	699b      	ldr	r3, [r3, #24]
 8012176:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a1b      	ldr	r3, [r3, #32]
 801217c:	697a      	ldr	r2, [r7, #20]
 801217e:	4313      	orrs	r3, r2
 8012180:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	689b      	ldr	r3, [r3, #8]
 8012188:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	697a      	ldr	r2, [r7, #20]
 8012192:	430a      	orrs	r2, r1
 8012194:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4a95      	ldr	r2, [pc, #596]	; (80123f0 <UART_SetConfig+0x2cc>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d120      	bne.n	80121e2 <UART_SetConfig+0xbe>
 80121a0:	4b94      	ldr	r3, [pc, #592]	; (80123f4 <UART_SetConfig+0x2d0>)
 80121a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121a6:	f003 0303 	and.w	r3, r3, #3
 80121aa:	2b03      	cmp	r3, #3
 80121ac:	d816      	bhi.n	80121dc <UART_SetConfig+0xb8>
 80121ae:	a201      	add	r2, pc, #4	; (adr r2, 80121b4 <UART_SetConfig+0x90>)
 80121b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121b4:	080121c5 	.word	0x080121c5
 80121b8:	080121d1 	.word	0x080121d1
 80121bc:	080121cb 	.word	0x080121cb
 80121c0:	080121d7 	.word	0x080121d7
 80121c4:	2301      	movs	r3, #1
 80121c6:	77fb      	strb	r3, [r7, #31]
 80121c8:	e14f      	b.n	801246a <UART_SetConfig+0x346>
 80121ca:	2302      	movs	r3, #2
 80121cc:	77fb      	strb	r3, [r7, #31]
 80121ce:	e14c      	b.n	801246a <UART_SetConfig+0x346>
 80121d0:	2304      	movs	r3, #4
 80121d2:	77fb      	strb	r3, [r7, #31]
 80121d4:	e149      	b.n	801246a <UART_SetConfig+0x346>
 80121d6:	2308      	movs	r3, #8
 80121d8:	77fb      	strb	r3, [r7, #31]
 80121da:	e146      	b.n	801246a <UART_SetConfig+0x346>
 80121dc:	2310      	movs	r3, #16
 80121de:	77fb      	strb	r3, [r7, #31]
 80121e0:	e143      	b.n	801246a <UART_SetConfig+0x346>
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4a84      	ldr	r2, [pc, #528]	; (80123f8 <UART_SetConfig+0x2d4>)
 80121e8:	4293      	cmp	r3, r2
 80121ea:	d132      	bne.n	8012252 <UART_SetConfig+0x12e>
 80121ec:	4b81      	ldr	r3, [pc, #516]	; (80123f4 <UART_SetConfig+0x2d0>)
 80121ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121f2:	f003 030c 	and.w	r3, r3, #12
 80121f6:	2b0c      	cmp	r3, #12
 80121f8:	d828      	bhi.n	801224c <UART_SetConfig+0x128>
 80121fa:	a201      	add	r2, pc, #4	; (adr r2, 8012200 <UART_SetConfig+0xdc>)
 80121fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012200:	08012235 	.word	0x08012235
 8012204:	0801224d 	.word	0x0801224d
 8012208:	0801224d 	.word	0x0801224d
 801220c:	0801224d 	.word	0x0801224d
 8012210:	08012241 	.word	0x08012241
 8012214:	0801224d 	.word	0x0801224d
 8012218:	0801224d 	.word	0x0801224d
 801221c:	0801224d 	.word	0x0801224d
 8012220:	0801223b 	.word	0x0801223b
 8012224:	0801224d 	.word	0x0801224d
 8012228:	0801224d 	.word	0x0801224d
 801222c:	0801224d 	.word	0x0801224d
 8012230:	08012247 	.word	0x08012247
 8012234:	2300      	movs	r3, #0
 8012236:	77fb      	strb	r3, [r7, #31]
 8012238:	e117      	b.n	801246a <UART_SetConfig+0x346>
 801223a:	2302      	movs	r3, #2
 801223c:	77fb      	strb	r3, [r7, #31]
 801223e:	e114      	b.n	801246a <UART_SetConfig+0x346>
 8012240:	2304      	movs	r3, #4
 8012242:	77fb      	strb	r3, [r7, #31]
 8012244:	e111      	b.n	801246a <UART_SetConfig+0x346>
 8012246:	2308      	movs	r3, #8
 8012248:	77fb      	strb	r3, [r7, #31]
 801224a:	e10e      	b.n	801246a <UART_SetConfig+0x346>
 801224c:	2310      	movs	r3, #16
 801224e:	77fb      	strb	r3, [r7, #31]
 8012250:	e10b      	b.n	801246a <UART_SetConfig+0x346>
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	4a69      	ldr	r2, [pc, #420]	; (80123fc <UART_SetConfig+0x2d8>)
 8012258:	4293      	cmp	r3, r2
 801225a:	d120      	bne.n	801229e <UART_SetConfig+0x17a>
 801225c:	4b65      	ldr	r3, [pc, #404]	; (80123f4 <UART_SetConfig+0x2d0>)
 801225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012266:	2b30      	cmp	r3, #48	; 0x30
 8012268:	d013      	beq.n	8012292 <UART_SetConfig+0x16e>
 801226a:	2b30      	cmp	r3, #48	; 0x30
 801226c:	d814      	bhi.n	8012298 <UART_SetConfig+0x174>
 801226e:	2b20      	cmp	r3, #32
 8012270:	d009      	beq.n	8012286 <UART_SetConfig+0x162>
 8012272:	2b20      	cmp	r3, #32
 8012274:	d810      	bhi.n	8012298 <UART_SetConfig+0x174>
 8012276:	2b00      	cmp	r3, #0
 8012278:	d002      	beq.n	8012280 <UART_SetConfig+0x15c>
 801227a:	2b10      	cmp	r3, #16
 801227c:	d006      	beq.n	801228c <UART_SetConfig+0x168>
 801227e:	e00b      	b.n	8012298 <UART_SetConfig+0x174>
 8012280:	2300      	movs	r3, #0
 8012282:	77fb      	strb	r3, [r7, #31]
 8012284:	e0f1      	b.n	801246a <UART_SetConfig+0x346>
 8012286:	2302      	movs	r3, #2
 8012288:	77fb      	strb	r3, [r7, #31]
 801228a:	e0ee      	b.n	801246a <UART_SetConfig+0x346>
 801228c:	2304      	movs	r3, #4
 801228e:	77fb      	strb	r3, [r7, #31]
 8012290:	e0eb      	b.n	801246a <UART_SetConfig+0x346>
 8012292:	2308      	movs	r3, #8
 8012294:	77fb      	strb	r3, [r7, #31]
 8012296:	e0e8      	b.n	801246a <UART_SetConfig+0x346>
 8012298:	2310      	movs	r3, #16
 801229a:	77fb      	strb	r3, [r7, #31]
 801229c:	e0e5      	b.n	801246a <UART_SetConfig+0x346>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	4a57      	ldr	r2, [pc, #348]	; (8012400 <UART_SetConfig+0x2dc>)
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d120      	bne.n	80122ea <UART_SetConfig+0x1c6>
 80122a8:	4b52      	ldr	r3, [pc, #328]	; (80123f4 <UART_SetConfig+0x2d0>)
 80122aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80122b2:	2bc0      	cmp	r3, #192	; 0xc0
 80122b4:	d013      	beq.n	80122de <UART_SetConfig+0x1ba>
 80122b6:	2bc0      	cmp	r3, #192	; 0xc0
 80122b8:	d814      	bhi.n	80122e4 <UART_SetConfig+0x1c0>
 80122ba:	2b80      	cmp	r3, #128	; 0x80
 80122bc:	d009      	beq.n	80122d2 <UART_SetConfig+0x1ae>
 80122be:	2b80      	cmp	r3, #128	; 0x80
 80122c0:	d810      	bhi.n	80122e4 <UART_SetConfig+0x1c0>
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d002      	beq.n	80122cc <UART_SetConfig+0x1a8>
 80122c6:	2b40      	cmp	r3, #64	; 0x40
 80122c8:	d006      	beq.n	80122d8 <UART_SetConfig+0x1b4>
 80122ca:	e00b      	b.n	80122e4 <UART_SetConfig+0x1c0>
 80122cc:	2300      	movs	r3, #0
 80122ce:	77fb      	strb	r3, [r7, #31]
 80122d0:	e0cb      	b.n	801246a <UART_SetConfig+0x346>
 80122d2:	2302      	movs	r3, #2
 80122d4:	77fb      	strb	r3, [r7, #31]
 80122d6:	e0c8      	b.n	801246a <UART_SetConfig+0x346>
 80122d8:	2304      	movs	r3, #4
 80122da:	77fb      	strb	r3, [r7, #31]
 80122dc:	e0c5      	b.n	801246a <UART_SetConfig+0x346>
 80122de:	2308      	movs	r3, #8
 80122e0:	77fb      	strb	r3, [r7, #31]
 80122e2:	e0c2      	b.n	801246a <UART_SetConfig+0x346>
 80122e4:	2310      	movs	r3, #16
 80122e6:	77fb      	strb	r3, [r7, #31]
 80122e8:	e0bf      	b.n	801246a <UART_SetConfig+0x346>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	4a45      	ldr	r2, [pc, #276]	; (8012404 <UART_SetConfig+0x2e0>)
 80122f0:	4293      	cmp	r3, r2
 80122f2:	d125      	bne.n	8012340 <UART_SetConfig+0x21c>
 80122f4:	4b3f      	ldr	r3, [pc, #252]	; (80123f4 <UART_SetConfig+0x2d0>)
 80122f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80122fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012302:	d017      	beq.n	8012334 <UART_SetConfig+0x210>
 8012304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012308:	d817      	bhi.n	801233a <UART_SetConfig+0x216>
 801230a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801230e:	d00b      	beq.n	8012328 <UART_SetConfig+0x204>
 8012310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012314:	d811      	bhi.n	801233a <UART_SetConfig+0x216>
 8012316:	2b00      	cmp	r3, #0
 8012318:	d003      	beq.n	8012322 <UART_SetConfig+0x1fe>
 801231a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801231e:	d006      	beq.n	801232e <UART_SetConfig+0x20a>
 8012320:	e00b      	b.n	801233a <UART_SetConfig+0x216>
 8012322:	2300      	movs	r3, #0
 8012324:	77fb      	strb	r3, [r7, #31]
 8012326:	e0a0      	b.n	801246a <UART_SetConfig+0x346>
 8012328:	2302      	movs	r3, #2
 801232a:	77fb      	strb	r3, [r7, #31]
 801232c:	e09d      	b.n	801246a <UART_SetConfig+0x346>
 801232e:	2304      	movs	r3, #4
 8012330:	77fb      	strb	r3, [r7, #31]
 8012332:	e09a      	b.n	801246a <UART_SetConfig+0x346>
 8012334:	2308      	movs	r3, #8
 8012336:	77fb      	strb	r3, [r7, #31]
 8012338:	e097      	b.n	801246a <UART_SetConfig+0x346>
 801233a:	2310      	movs	r3, #16
 801233c:	77fb      	strb	r3, [r7, #31]
 801233e:	e094      	b.n	801246a <UART_SetConfig+0x346>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	4a30      	ldr	r2, [pc, #192]	; (8012408 <UART_SetConfig+0x2e4>)
 8012346:	4293      	cmp	r3, r2
 8012348:	d125      	bne.n	8012396 <UART_SetConfig+0x272>
 801234a:	4b2a      	ldr	r3, [pc, #168]	; (80123f4 <UART_SetConfig+0x2d0>)
 801234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012358:	d017      	beq.n	801238a <UART_SetConfig+0x266>
 801235a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801235e:	d817      	bhi.n	8012390 <UART_SetConfig+0x26c>
 8012360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012364:	d00b      	beq.n	801237e <UART_SetConfig+0x25a>
 8012366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801236a:	d811      	bhi.n	8012390 <UART_SetConfig+0x26c>
 801236c:	2b00      	cmp	r3, #0
 801236e:	d003      	beq.n	8012378 <UART_SetConfig+0x254>
 8012370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012374:	d006      	beq.n	8012384 <UART_SetConfig+0x260>
 8012376:	e00b      	b.n	8012390 <UART_SetConfig+0x26c>
 8012378:	2301      	movs	r3, #1
 801237a:	77fb      	strb	r3, [r7, #31]
 801237c:	e075      	b.n	801246a <UART_SetConfig+0x346>
 801237e:	2302      	movs	r3, #2
 8012380:	77fb      	strb	r3, [r7, #31]
 8012382:	e072      	b.n	801246a <UART_SetConfig+0x346>
 8012384:	2304      	movs	r3, #4
 8012386:	77fb      	strb	r3, [r7, #31]
 8012388:	e06f      	b.n	801246a <UART_SetConfig+0x346>
 801238a:	2308      	movs	r3, #8
 801238c:	77fb      	strb	r3, [r7, #31]
 801238e:	e06c      	b.n	801246a <UART_SetConfig+0x346>
 8012390:	2310      	movs	r3, #16
 8012392:	77fb      	strb	r3, [r7, #31]
 8012394:	e069      	b.n	801246a <UART_SetConfig+0x346>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	4a1c      	ldr	r2, [pc, #112]	; (801240c <UART_SetConfig+0x2e8>)
 801239c:	4293      	cmp	r3, r2
 801239e:	d137      	bne.n	8012410 <UART_SetConfig+0x2ec>
 80123a0:	4b14      	ldr	r3, [pc, #80]	; (80123f4 <UART_SetConfig+0x2d0>)
 80123a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80123aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80123ae:	d017      	beq.n	80123e0 <UART_SetConfig+0x2bc>
 80123b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80123b4:	d817      	bhi.n	80123e6 <UART_SetConfig+0x2c2>
 80123b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123ba:	d00b      	beq.n	80123d4 <UART_SetConfig+0x2b0>
 80123bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123c0:	d811      	bhi.n	80123e6 <UART_SetConfig+0x2c2>
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d003      	beq.n	80123ce <UART_SetConfig+0x2aa>
 80123c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123ca:	d006      	beq.n	80123da <UART_SetConfig+0x2b6>
 80123cc:	e00b      	b.n	80123e6 <UART_SetConfig+0x2c2>
 80123ce:	2300      	movs	r3, #0
 80123d0:	77fb      	strb	r3, [r7, #31]
 80123d2:	e04a      	b.n	801246a <UART_SetConfig+0x346>
 80123d4:	2302      	movs	r3, #2
 80123d6:	77fb      	strb	r3, [r7, #31]
 80123d8:	e047      	b.n	801246a <UART_SetConfig+0x346>
 80123da:	2304      	movs	r3, #4
 80123dc:	77fb      	strb	r3, [r7, #31]
 80123de:	e044      	b.n	801246a <UART_SetConfig+0x346>
 80123e0:	2308      	movs	r3, #8
 80123e2:	77fb      	strb	r3, [r7, #31]
 80123e4:	e041      	b.n	801246a <UART_SetConfig+0x346>
 80123e6:	2310      	movs	r3, #16
 80123e8:	77fb      	strb	r3, [r7, #31]
 80123ea:	e03e      	b.n	801246a <UART_SetConfig+0x346>
 80123ec:	efff69f3 	.word	0xefff69f3
 80123f0:	40011000 	.word	0x40011000
 80123f4:	40023800 	.word	0x40023800
 80123f8:	40004400 	.word	0x40004400
 80123fc:	40004800 	.word	0x40004800
 8012400:	40004c00 	.word	0x40004c00
 8012404:	40005000 	.word	0x40005000
 8012408:	40011400 	.word	0x40011400
 801240c:	40007800 	.word	0x40007800
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	4a71      	ldr	r2, [pc, #452]	; (80125dc <UART_SetConfig+0x4b8>)
 8012416:	4293      	cmp	r3, r2
 8012418:	d125      	bne.n	8012466 <UART_SetConfig+0x342>
 801241a:	4b71      	ldr	r3, [pc, #452]	; (80125e0 <UART_SetConfig+0x4bc>)
 801241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012424:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012428:	d017      	beq.n	801245a <UART_SetConfig+0x336>
 801242a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801242e:	d817      	bhi.n	8012460 <UART_SetConfig+0x33c>
 8012430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012434:	d00b      	beq.n	801244e <UART_SetConfig+0x32a>
 8012436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801243a:	d811      	bhi.n	8012460 <UART_SetConfig+0x33c>
 801243c:	2b00      	cmp	r3, #0
 801243e:	d003      	beq.n	8012448 <UART_SetConfig+0x324>
 8012440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012444:	d006      	beq.n	8012454 <UART_SetConfig+0x330>
 8012446:	e00b      	b.n	8012460 <UART_SetConfig+0x33c>
 8012448:	2300      	movs	r3, #0
 801244a:	77fb      	strb	r3, [r7, #31]
 801244c:	e00d      	b.n	801246a <UART_SetConfig+0x346>
 801244e:	2302      	movs	r3, #2
 8012450:	77fb      	strb	r3, [r7, #31]
 8012452:	e00a      	b.n	801246a <UART_SetConfig+0x346>
 8012454:	2304      	movs	r3, #4
 8012456:	77fb      	strb	r3, [r7, #31]
 8012458:	e007      	b.n	801246a <UART_SetConfig+0x346>
 801245a:	2308      	movs	r3, #8
 801245c:	77fb      	strb	r3, [r7, #31]
 801245e:	e004      	b.n	801246a <UART_SetConfig+0x346>
 8012460:	2310      	movs	r3, #16
 8012462:	77fb      	strb	r3, [r7, #31]
 8012464:	e001      	b.n	801246a <UART_SetConfig+0x346>
 8012466:	2310      	movs	r3, #16
 8012468:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	69db      	ldr	r3, [r3, #28]
 801246e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012472:	d15b      	bne.n	801252c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8012474:	7ffb      	ldrb	r3, [r7, #31]
 8012476:	2b08      	cmp	r3, #8
 8012478:	d827      	bhi.n	80124ca <UART_SetConfig+0x3a6>
 801247a:	a201      	add	r2, pc, #4	; (adr r2, 8012480 <UART_SetConfig+0x35c>)
 801247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012480:	080124a5 	.word	0x080124a5
 8012484:	080124ad 	.word	0x080124ad
 8012488:	080124b5 	.word	0x080124b5
 801248c:	080124cb 	.word	0x080124cb
 8012490:	080124bb 	.word	0x080124bb
 8012494:	080124cb 	.word	0x080124cb
 8012498:	080124cb 	.word	0x080124cb
 801249c:	080124cb 	.word	0x080124cb
 80124a0:	080124c3 	.word	0x080124c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80124a4:	f7fb fd9e 	bl	800dfe4 <HAL_RCC_GetPCLK1Freq>
 80124a8:	61b8      	str	r0, [r7, #24]
        break;
 80124aa:	e013      	b.n	80124d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80124ac:	f7fb fdae 	bl	800e00c <HAL_RCC_GetPCLK2Freq>
 80124b0:	61b8      	str	r0, [r7, #24]
        break;
 80124b2:	e00f      	b.n	80124d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80124b4:	4b4b      	ldr	r3, [pc, #300]	; (80125e4 <UART_SetConfig+0x4c0>)
 80124b6:	61bb      	str	r3, [r7, #24]
        break;
 80124b8:	e00c      	b.n	80124d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80124ba:	f7fb fcd1 	bl	800de60 <HAL_RCC_GetSysClockFreq>
 80124be:	61b8      	str	r0, [r7, #24]
        break;
 80124c0:	e008      	b.n	80124d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80124c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124c6:	61bb      	str	r3, [r7, #24]
        break;
 80124c8:	e004      	b.n	80124d4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80124ca:	2300      	movs	r3, #0
 80124cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80124ce:	2301      	movs	r3, #1
 80124d0:	77bb      	strb	r3, [r7, #30]
        break;
 80124d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80124d4:	69bb      	ldr	r3, [r7, #24]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d074      	beq.n	80125c4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80124da:	69bb      	ldr	r3, [r7, #24]
 80124dc:	005a      	lsls	r2, r3, #1
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	085b      	lsrs	r3, r3, #1
 80124e4:	441a      	add	r2, r3
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	2b0f      	cmp	r3, #15
 80124f6:	d916      	bls.n	8012526 <UART_SetConfig+0x402>
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124fe:	d212      	bcs.n	8012526 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	b29b      	uxth	r3, r3
 8012504:	f023 030f 	bic.w	r3, r3, #15
 8012508:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	085b      	lsrs	r3, r3, #1
 801250e:	b29b      	uxth	r3, r3
 8012510:	f003 0307 	and.w	r3, r3, #7
 8012514:	b29a      	uxth	r2, r3
 8012516:	89fb      	ldrh	r3, [r7, #14]
 8012518:	4313      	orrs	r3, r2
 801251a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	89fa      	ldrh	r2, [r7, #14]
 8012522:	60da      	str	r2, [r3, #12]
 8012524:	e04e      	b.n	80125c4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8012526:	2301      	movs	r3, #1
 8012528:	77bb      	strb	r3, [r7, #30]
 801252a:	e04b      	b.n	80125c4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 801252c:	7ffb      	ldrb	r3, [r7, #31]
 801252e:	2b08      	cmp	r3, #8
 8012530:	d827      	bhi.n	8012582 <UART_SetConfig+0x45e>
 8012532:	a201      	add	r2, pc, #4	; (adr r2, 8012538 <UART_SetConfig+0x414>)
 8012534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012538:	0801255d 	.word	0x0801255d
 801253c:	08012565 	.word	0x08012565
 8012540:	0801256d 	.word	0x0801256d
 8012544:	08012583 	.word	0x08012583
 8012548:	08012573 	.word	0x08012573
 801254c:	08012583 	.word	0x08012583
 8012550:	08012583 	.word	0x08012583
 8012554:	08012583 	.word	0x08012583
 8012558:	0801257b 	.word	0x0801257b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801255c:	f7fb fd42 	bl	800dfe4 <HAL_RCC_GetPCLK1Freq>
 8012560:	61b8      	str	r0, [r7, #24]
        break;
 8012562:	e013      	b.n	801258c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012564:	f7fb fd52 	bl	800e00c <HAL_RCC_GetPCLK2Freq>
 8012568:	61b8      	str	r0, [r7, #24]
        break;
 801256a:	e00f      	b.n	801258c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801256c:	4b1d      	ldr	r3, [pc, #116]	; (80125e4 <UART_SetConfig+0x4c0>)
 801256e:	61bb      	str	r3, [r7, #24]
        break;
 8012570:	e00c      	b.n	801258c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012572:	f7fb fc75 	bl	800de60 <HAL_RCC_GetSysClockFreq>
 8012576:	61b8      	str	r0, [r7, #24]
        break;
 8012578:	e008      	b.n	801258c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801257a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801257e:	61bb      	str	r3, [r7, #24]
        break;
 8012580:	e004      	b.n	801258c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8012582:	2300      	movs	r3, #0
 8012584:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012586:	2301      	movs	r3, #1
 8012588:	77bb      	strb	r3, [r7, #30]
        break;
 801258a:	bf00      	nop
    }

    if (pclk != 0U)
 801258c:	69bb      	ldr	r3, [r7, #24]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d018      	beq.n	80125c4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	085a      	lsrs	r2, r3, #1
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	441a      	add	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	2b0f      	cmp	r3, #15
 80125ac:	d908      	bls.n	80125c0 <UART_SetConfig+0x49c>
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125b4:	d204      	bcs.n	80125c0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	693a      	ldr	r2, [r7, #16]
 80125bc:	60da      	str	r2, [r3, #12]
 80125be:	e001      	b.n	80125c4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80125c0:	2301      	movs	r3, #1
 80125c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2200      	movs	r2, #0
 80125ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80125d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3720      	adds	r7, #32
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	40007c00 	.word	0x40007c00
 80125e0:	40023800 	.word	0x40023800
 80125e4:	00f42400 	.word	0x00f42400

080125e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80125e8:	b480      	push	{r7}
 80125ea:	b083      	sub	sp, #12
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f4:	f003 0301 	and.w	r3, r3, #1
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d00a      	beq.n	8012612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	430a      	orrs	r2, r1
 8012610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012616:	f003 0302 	and.w	r3, r3, #2
 801261a:	2b00      	cmp	r3, #0
 801261c:	d00a      	beq.n	8012634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	430a      	orrs	r2, r1
 8012632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012638:	f003 0304 	and.w	r3, r3, #4
 801263c:	2b00      	cmp	r3, #0
 801263e:	d00a      	beq.n	8012656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	430a      	orrs	r2, r1
 8012654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265a:	f003 0308 	and.w	r3, r3, #8
 801265e:	2b00      	cmp	r3, #0
 8012660:	d00a      	beq.n	8012678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	430a      	orrs	r2, r1
 8012676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801267c:	f003 0310 	and.w	r3, r3, #16
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00a      	beq.n	801269a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	689b      	ldr	r3, [r3, #8]
 801268a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	430a      	orrs	r2, r1
 8012698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801269e:	f003 0320 	and.w	r3, r3, #32
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d00a      	beq.n	80126bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	689b      	ldr	r3, [r3, #8]
 80126ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	430a      	orrs	r2, r1
 80126ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d01a      	beq.n	80126fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	430a      	orrs	r2, r1
 80126dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80126e6:	d10a      	bne.n	80126fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	430a      	orrs	r2, r1
 80126fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012706:	2b00      	cmp	r3, #0
 8012708:	d00a      	beq.n	8012720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	430a      	orrs	r2, r1
 801271e:	605a      	str	r2, [r3, #4]
  }
}
 8012720:	bf00      	nop
 8012722:	370c      	adds	r7, #12
 8012724:	46bd      	mov	sp, r7
 8012726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272a:	4770      	bx	lr

0801272c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b086      	sub	sp, #24
 8012730:	af02      	add	r7, sp, #8
 8012732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2200      	movs	r2, #0
 8012738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801273c:	f7f5 f8a2 	bl	8007884 <HAL_GetTick>
 8012740:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f003 0308 	and.w	r3, r3, #8
 801274c:	2b08      	cmp	r3, #8
 801274e:	d10e      	bne.n	801276e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012754:	9300      	str	r3, [sp, #0]
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	2200      	movs	r2, #0
 801275a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f000 f817 	bl	8012792 <UART_WaitOnFlagUntilTimeout>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801276a:	2303      	movs	r3, #3
 801276c:	e00d      	b.n	801278a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2220      	movs	r2, #32
 8012772:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2220      	movs	r2, #32
 8012778:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2200      	movs	r2, #0
 801277e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2200      	movs	r2, #0
 8012784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8012788:	2300      	movs	r3, #0
}
 801278a:	4618      	mov	r0, r3
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}

08012792 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012792:	b580      	push	{r7, lr}
 8012794:	b084      	sub	sp, #16
 8012796:	af00      	add	r7, sp, #0
 8012798:	60f8      	str	r0, [r7, #12]
 801279a:	60b9      	str	r1, [r7, #8]
 801279c:	603b      	str	r3, [r7, #0]
 801279e:	4613      	mov	r3, r2
 80127a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80127a2:	e05e      	b.n	8012862 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80127a4:	69bb      	ldr	r3, [r7, #24]
 80127a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127aa:	d05a      	beq.n	8012862 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80127ac:	f7f5 f86a 	bl	8007884 <HAL_GetTick>
 80127b0:	4602      	mov	r2, r0
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	1ad3      	subs	r3, r2, r3
 80127b6:	69ba      	ldr	r2, [r7, #24]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d302      	bcc.n	80127c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80127bc:	69bb      	ldr	r3, [r7, #24]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d11b      	bne.n	80127fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	681a      	ldr	r2, [r3, #0]
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80127d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	689a      	ldr	r2, [r3, #8]
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	f022 0201 	bic.w	r2, r2, #1
 80127e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2220      	movs	r2, #32
 80127e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2220      	movs	r2, #32
 80127ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2200      	movs	r2, #0
 80127f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80127f6:	2303      	movs	r3, #3
 80127f8:	e043      	b.n	8012882 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	f003 0304 	and.w	r3, r3, #4
 8012804:	2b00      	cmp	r3, #0
 8012806:	d02c      	beq.n	8012862 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	69db      	ldr	r3, [r3, #28]
 801280e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012816:	d124      	bne.n	8012862 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012820:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	681a      	ldr	r2, [r3, #0]
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012830:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	689a      	ldr	r2, [r3, #8]
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	f022 0201 	bic.w	r2, r2, #1
 8012840:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2220      	movs	r2, #32
 8012846:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	2220      	movs	r2, #32
 801284c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2220      	movs	r2, #32
 8012852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	2200      	movs	r2, #0
 801285a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801285e:	2303      	movs	r3, #3
 8012860:	e00f      	b.n	8012882 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	69da      	ldr	r2, [r3, #28]
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	4013      	ands	r3, r2
 801286c:	68ba      	ldr	r2, [r7, #8]
 801286e:	429a      	cmp	r2, r3
 8012870:	bf0c      	ite	eq
 8012872:	2301      	moveq	r3, #1
 8012874:	2300      	movne	r3, #0
 8012876:	b2db      	uxtb	r3, r3
 8012878:	461a      	mov	r2, r3
 801287a:	79fb      	ldrb	r3, [r7, #7]
 801287c:	429a      	cmp	r2, r3
 801287e:	d091      	beq.n	80127a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3710      	adds	r7, #16
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
	...

0801288c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801288c:	b480      	push	{r7}
 801288e:	b085      	sub	sp, #20
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8012896:	2300      	movs	r3, #0
 8012898:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 801289a:	2300      	movs	r3, #0
 801289c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d027      	beq.n	80128f6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	4b2f      	ldr	r3, [pc, #188]	; (801296c <FMC_SDRAM_Init+0xe0>)
 80128b0:	4013      	ands	r3, r2
 80128b2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80128bc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80128c2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80128c8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80128ce:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80128d4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80128da:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80128e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80128e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80128e8:	68fa      	ldr	r2, [r7, #12]
 80128ea:	4313      	orrs	r3, r2
 80128ec:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	68fa      	ldr	r2, [r7, #12]
 80128f2:	601a      	str	r2, [r3, #0]
 80128f4:	e032      	b.n	801295c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012902:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801290c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8012912:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8012914:	68fa      	ldr	r2, [r7, #12]
 8012916:	4313      	orrs	r3, r2
 8012918:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8012920:	68ba      	ldr	r2, [r7, #8]
 8012922:	4b12      	ldr	r3, [pc, #72]	; (801296c <FMC_SDRAM_Init+0xe0>)
 8012924:	4013      	ands	r3, r2
 8012926:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012930:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8012936:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 801293c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8012942:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8012948:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801294a:	68ba      	ldr	r2, [r7, #8]
 801294c:	4313      	orrs	r3, r2
 801294e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	68fa      	ldr	r2, [r7, #12]
 8012954:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	68ba      	ldr	r2, [r7, #8]
 801295a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 801295c:	2300      	movs	r3, #0
}
 801295e:	4618      	mov	r0, r3
 8012960:	3714      	adds	r7, #20
 8012962:	46bd      	mov	sp, r7
 8012964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	ffff8000 	.word	0xffff8000

08012970 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012970:	b480      	push	{r7}
 8012972:	b087      	sub	sp, #28
 8012974:	af00      	add	r7, sp, #0
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 801297c:	2300      	movs	r3, #0
 801297e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8012980:	2300      	movs	r3, #0
 8012982:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2b01      	cmp	r3, #1
 8012988:	d02e      	beq.n	80129e8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012996:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	3b01      	subs	r3, #1
 80129a4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80129a6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	689b      	ldr	r3, [r3, #8]
 80129ac:	3b01      	subs	r3, #1
 80129ae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80129b0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	3b01      	subs	r3, #1
 80129b8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80129ba:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	691b      	ldr	r3, [r3, #16]
 80129c0:	3b01      	subs	r3, #1
 80129c2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80129c4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	695b      	ldr	r3, [r3, #20]
 80129ca:	3b01      	subs	r3, #1
 80129cc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80129ce:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	699b      	ldr	r3, [r3, #24]
 80129d4:	3b01      	subs	r3, #1
 80129d6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80129d8:	4313      	orrs	r3, r2
 80129da:	697a      	ldr	r2, [r7, #20]
 80129dc:	4313      	orrs	r3, r2
 80129de:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	697a      	ldr	r2, [r7, #20]
 80129e4:	609a      	str	r2, [r3, #8]
 80129e6:	e039      	b.n	8012a5c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	689b      	ldr	r3, [r3, #8]
 80129ec:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80129ee:	697a      	ldr	r2, [r7, #20]
 80129f0:	4b1e      	ldr	r3, [pc, #120]	; (8012a6c <FMC_SDRAM_Timing_Init+0xfc>)
 80129f2:	4013      	ands	r3, r2
 80129f4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	68db      	ldr	r3, [r3, #12]
 80129fa:	3b01      	subs	r3, #1
 80129fc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	695b      	ldr	r3, [r3, #20]
 8012a02:	3b01      	subs	r3, #1
 8012a04:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8012a06:	4313      	orrs	r3, r2
 8012a08:	697a      	ldr	r2, [r7, #20]
 8012a0a:	4313      	orrs	r3, r2
 8012a0c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012a1a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	3b01      	subs	r3, #1
 8012a28:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012a2a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	689b      	ldr	r3, [r3, #8]
 8012a30:	3b01      	subs	r3, #1
 8012a32:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8012a34:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	691b      	ldr	r3, [r3, #16]
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8012a3e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	699b      	ldr	r3, [r3, #24]
 8012a44:	3b01      	subs	r3, #1
 8012a46:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012a48:	4313      	orrs	r3, r2
 8012a4a:	693a      	ldr	r2, [r7, #16]
 8012a4c:	4313      	orrs	r3, r2
 8012a4e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	697a      	ldr	r2, [r7, #20]
 8012a54:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	693a      	ldr	r2, [r7, #16]
 8012a5a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8012a5c:	2300      	movs	r3, #0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	371c      	adds	r7, #28
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop
 8012a6c:	ff0f0fff 	.word	0xff0f0fff

08012a70 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8012a70:	b480      	push	{r7}
 8012a72:	b085      	sub	sp, #20
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	691a      	ldr	r2, [r3, #16]
 8012a80:	4b0c      	ldr	r3, [pc, #48]	; (8012ab4 <FMC_SDRAM_SendCommand+0x44>)
 8012a82:	4013      	ands	r3, r2
 8012a84:	68ba      	ldr	r2, [r7, #8]
 8012a86:	6811      	ldr	r1, [r2, #0]
 8012a88:	68ba      	ldr	r2, [r7, #8]
 8012a8a:	6852      	ldr	r2, [r2, #4]
 8012a8c:	4311      	orrs	r1, r2
 8012a8e:	68ba      	ldr	r2, [r7, #8]
 8012a90:	6892      	ldr	r2, [r2, #8]
 8012a92:	3a01      	subs	r2, #1
 8012a94:	0152      	lsls	r2, r2, #5
 8012a96:	4311      	orrs	r1, r2
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	68d2      	ldr	r2, [r2, #12]
 8012a9c:	0252      	lsls	r2, r2, #9
 8012a9e:	430a      	orrs	r2, r1
 8012aa0:	431a      	orrs	r2, r3
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8012aa6:	2300      	movs	r3, #0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3714      	adds	r7, #20
 8012aac:	46bd      	mov	sp, r7
 8012aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab2:	4770      	bx	lr
 8012ab4:	ffc00000 	.word	0xffc00000

08012ab8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b083      	sub	sp, #12
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	695a      	ldr	r2, [r3, #20]
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	005b      	lsls	r3, r3, #1
 8012aca:	431a      	orrs	r2, r3
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8012ad0:	2300      	movs	r3, #0
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	370c      	adds	r7, #12
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012adc:	4770      	bx	lr
	...

08012ae0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012ae0:	b084      	sub	sp, #16
 8012ae2:	b480      	push	{r7}
 8012ae4:	b085      	sub	sp, #20
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	6078      	str	r0, [r7, #4]
 8012aea:	f107 001c 	add.w	r0, r7, #28
 8012aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012af2:	2300      	movs	r3, #0
 8012af4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012af6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012af8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8012afa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8012afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8012afe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8012b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8012b02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8012b06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8012b0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012b0c:	68fa      	ldr	r2, [r7, #12]
 8012b0e:	4313      	orrs	r3, r2
 8012b10:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	685a      	ldr	r2, [r3, #4]
 8012b16:	4b07      	ldr	r3, [pc, #28]	; (8012b34 <SDMMC_Init+0x54>)
 8012b18:	4013      	ands	r3, r2
 8012b1a:	68fa      	ldr	r2, [r7, #12]
 8012b1c:	431a      	orrs	r2, r3
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012b22:	2300      	movs	r3, #0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3714      	adds	r7, #20
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2e:	b004      	add	sp, #16
 8012b30:	4770      	bx	lr
 8012b32:	bf00      	nop
 8012b34:	ffff8100 	.word	0xffff8100

08012b38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	370c      	adds	r7, #12
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr

08012b52 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b082      	sub	sp, #8
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2203      	movs	r2, #3
 8012b5e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8012b60:	2002      	movs	r0, #2
 8012b62:	f7f4 fe9b 	bl	800789c <HAL_Delay>
  
  return HAL_OK;
 8012b66:	2300      	movs	r3, #0
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	f003 0303 	and.w	r3, r3, #3
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	370c      	adds	r7, #12
 8012b84:	46bd      	mov	sp, r7
 8012b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8a:	4770      	bx	lr

08012b8c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b085      	sub	sp, #20
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012b96:	2300      	movs	r3, #0
 8012b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012baa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012bb0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012bb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012bb8:	68fa      	ldr	r2, [r7, #12]
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	68da      	ldr	r2, [r3, #12]
 8012bc2:	4b06      	ldr	r3, [pc, #24]	; (8012bdc <SDMMC_SendCommand+0x50>)
 8012bc4:	4013      	ands	r3, r2
 8012bc6:	68fa      	ldr	r2, [r7, #12]
 8012bc8:	431a      	orrs	r2, r3
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8012bce:	2300      	movs	r3, #0
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3714      	adds	r7, #20
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr
 8012bdc:	fffff000 	.word	0xfffff000

08012be0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012be0:	b480      	push	{r7}
 8012be2:	b083      	sub	sp, #12
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	691b      	ldr	r3, [r3, #16]
 8012bec:	b2db      	uxtb	r3, r3
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	370c      	adds	r7, #12
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf8:	4770      	bx	lr

08012bfa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012bfa:	b480      	push	{r7}
 8012bfc:	b085      	sub	sp, #20
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	6078      	str	r0, [r7, #4]
 8012c02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	3314      	adds	r3, #20
 8012c08:	461a      	mov	r2, r3
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	681b      	ldr	r3, [r3, #0]
}  
 8012c14:	4618      	mov	r0, r3
 8012c16:	3714      	adds	r7, #20
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1e:	4770      	bx	lr

08012c20 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b085      	sub	sp, #20
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	685a      	ldr	r2, [r3, #4]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012c46:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012c4c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8012c52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012c54:	68fa      	ldr	r2, [r7, #12]
 8012c56:	4313      	orrs	r3, r2
 8012c58:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c5e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	431a      	orrs	r2, r3
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012c6a:	2300      	movs	r3, #0

}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3714      	adds	r7, #20
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr

08012c78 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b088      	sub	sp, #32
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012c86:	2310      	movs	r3, #16
 8012c88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c8a:	2340      	movs	r3, #64	; 0x40
 8012c8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c98:	f107 0308 	add.w	r3, r7, #8
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7ff ff74 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ca8:	2110      	movs	r1, #16
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f000 fa46 	bl	801313c <SDMMC_GetCmdResp1>
 8012cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cb2:	69fb      	ldr	r3, [r7, #28]
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3720      	adds	r7, #32
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}

08012cbc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b088      	sub	sp, #32
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012cca:	2311      	movs	r3, #17
 8012ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cce:	2340      	movs	r3, #64	; 0x40
 8012cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cdc:	f107 0308 	add.w	r3, r7, #8
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f7ff ff52 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012cec:	2111      	movs	r1, #17
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f000 fa24 	bl	801313c <SDMMC_GetCmdResp1>
 8012cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cf6:	69fb      	ldr	r3, [r7, #28]
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3720      	adds	r7, #32
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b088      	sub	sp, #32
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012d0e:	2312      	movs	r3, #18
 8012d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d12:	2340      	movs	r3, #64	; 0x40
 8012d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d16:	2300      	movs	r3, #0
 8012d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d20:	f107 0308 	add.w	r3, r7, #8
 8012d24:	4619      	mov	r1, r3
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f7ff ff30 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d30:	2112      	movs	r1, #18
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f000 fa02 	bl	801313c <SDMMC_GetCmdResp1>
 8012d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d3a:	69fb      	ldr	r3, [r7, #28]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3720      	adds	r7, #32
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b088      	sub	sp, #32
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012d52:	2318      	movs	r3, #24
 8012d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d56:	2340      	movs	r3, #64	; 0x40
 8012d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d64:	f107 0308 	add.w	r3, r7, #8
 8012d68:	4619      	mov	r1, r3
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f7ff ff0e 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d74:	2118      	movs	r1, #24
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f000 f9e0 	bl	801313c <SDMMC_GetCmdResp1>
 8012d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d7e:	69fb      	ldr	r3, [r7, #28]
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3720      	adds	r7, #32
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b088      	sub	sp, #32
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012d96:	2319      	movs	r3, #25
 8012d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d9a:	2340      	movs	r3, #64	; 0x40
 8012d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012da6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012da8:	f107 0308 	add.w	r3, r7, #8
 8012dac:	4619      	mov	r1, r3
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f7ff feec 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012db8:	2119      	movs	r1, #25
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 f9be 	bl	801313c <SDMMC_GetCmdResp1>
 8012dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012dc2:	69fb      	ldr	r3, [r7, #28]
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3720      	adds	r7, #32
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b088      	sub	sp, #32
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012dd8:	230c      	movs	r3, #12
 8012dda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ddc:	2340      	movs	r3, #64	; 0x40
 8012dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012de0:	2300      	movs	r3, #0
 8012de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012de8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012dea:	f107 0308 	add.w	r3, r7, #8
 8012dee:	4619      	mov	r1, r3
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f7ff fecb 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012df6:	4a05      	ldr	r2, [pc, #20]	; (8012e0c <SDMMC_CmdStopTransfer+0x40>)
 8012df8:	210c      	movs	r1, #12
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 f99e 	bl	801313c <SDMMC_GetCmdResp1>
 8012e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e02:	69fb      	ldr	r3, [r7, #28]
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3720      	adds	r7, #32
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}
 8012e0c:	05f5e100 	.word	0x05f5e100

08012e10 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b08a      	sub	sp, #40	; 0x28
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	60f8      	str	r0, [r7, #12]
 8012e18:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012e20:	2307      	movs	r3, #7
 8012e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e24:	2340      	movs	r3, #64	; 0x40
 8012e26:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e30:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e32:	f107 0310 	add.w	r3, r7, #16
 8012e36:	4619      	mov	r1, r3
 8012e38:	68f8      	ldr	r0, [r7, #12]
 8012e3a:	f7ff fea7 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e42:	2107      	movs	r1, #7
 8012e44:	68f8      	ldr	r0, [r7, #12]
 8012e46:	f000 f979 	bl	801313c <SDMMC_GetCmdResp1>
 8012e4a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3728      	adds	r7, #40	; 0x28
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}

08012e56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012e56:	b580      	push	{r7, lr}
 8012e58:	b088      	sub	sp, #32
 8012e5a:	af00      	add	r7, sp, #0
 8012e5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012e62:	2300      	movs	r3, #0
 8012e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012e66:	2300      	movs	r3, #0
 8012e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e74:	f107 0308 	add.w	r3, r7, #8
 8012e78:	4619      	mov	r1, r3
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f7ff fe86 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f000 f92f 	bl	80130e4 <SDMMC_GetCmdError>
 8012e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e88:	69fb      	ldr	r3, [r7, #28]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3720      	adds	r7, #32
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012e92:	b580      	push	{r7, lr}
 8012e94:	b088      	sub	sp, #32
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012e9a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012e9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012ea0:	2308      	movs	r3, #8
 8012ea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ea4:	2340      	movs	r3, #64	; 0x40
 8012ea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012eb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012eb2:	f107 0308 	add.w	r3, r7, #8
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7ff fe67 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f000 fb26 	bl	8013510 <SDMMC_GetCmdResp7>
 8012ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ec6:	69fb      	ldr	r3, [r7, #28]
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3720      	adds	r7, #32
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b088      	sub	sp, #32
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012ede:	2337      	movs	r3, #55	; 0x37
 8012ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ee2:	2340      	movs	r3, #64	; 0x40
 8012ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012eee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ef0:	f107 0308 	add.w	r3, r7, #8
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7ff fe48 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f00:	2137      	movs	r1, #55	; 0x37
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f000 f91a 	bl	801313c <SDMMC_GetCmdResp1>
 8012f08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f0a:	69fb      	ldr	r3, [r7, #28]
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3720      	adds	r7, #32
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b088      	sub	sp, #32
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8012f1e:	683a      	ldr	r2, [r7, #0]
 8012f20:	4b0d      	ldr	r3, [pc, #52]	; (8012f58 <SDMMC_CmdAppOperCommand+0x44>)
 8012f22:	4313      	orrs	r3, r2
 8012f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012f26:	2329      	movs	r3, #41	; 0x29
 8012f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f2a:	2340      	movs	r3, #64	; 0x40
 8012f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f38:	f107 0308 	add.w	r3, r7, #8
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7ff fe24 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f000 fa2f 	bl	80133a8 <SDMMC_GetCmdResp3>
 8012f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f4c:	69fb      	ldr	r3, [r7, #28]
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3720      	adds	r7, #32
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	80100000 	.word	0x80100000

08012f5c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b088      	sub	sp, #32
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012f6a:	2306      	movs	r3, #6
 8012f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f6e:	2340      	movs	r3, #64	; 0x40
 8012f70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f72:	2300      	movs	r3, #0
 8012f74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f7c:	f107 0308 	add.w	r3, r7, #8
 8012f80:	4619      	mov	r1, r3
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f7ff fe02 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f8c:	2106      	movs	r1, #6
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f000 f8d4 	bl	801313c <SDMMC_GetCmdResp1>
 8012f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f96:	69fb      	ldr	r3, [r7, #28]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3720      	adds	r7, #32
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b088      	sub	sp, #32
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012fac:	2333      	movs	r3, #51	; 0x33
 8012fae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fb0:	2340      	movs	r3, #64	; 0x40
 8012fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fbe:	f107 0308 	add.w	r3, r7, #8
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f7ff fde1 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fce:	2133      	movs	r1, #51	; 0x33
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f000 f8b3 	bl	801313c <SDMMC_GetCmdResp1>
 8012fd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fd8:	69fb      	ldr	r3, [r7, #28]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3720      	adds	r7, #32
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012fe2:	b580      	push	{r7, lr}
 8012fe4:	b088      	sub	sp, #32
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012fea:	2300      	movs	r3, #0
 8012fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012fee:	2302      	movs	r3, #2
 8012ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012ff2:	23c0      	movs	r3, #192	; 0xc0
 8012ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ffe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013000:	f107 0308 	add.w	r3, r7, #8
 8013004:	4619      	mov	r1, r3
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f7ff fdc0 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f000 f983 	bl	8013318 <SDMMC_GetCmdResp2>
 8013012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013014:	69fb      	ldr	r3, [r7, #28]
}
 8013016:	4618      	mov	r0, r3
 8013018:	3720      	adds	r7, #32
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801301e:	b580      	push	{r7, lr}
 8013020:	b088      	sub	sp, #32
 8013022:	af00      	add	r7, sp, #0
 8013024:	6078      	str	r0, [r7, #4]
 8013026:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801302c:	2309      	movs	r3, #9
 801302e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013030:	23c0      	movs	r3, #192	; 0xc0
 8013032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013034:	2300      	movs	r3, #0
 8013036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801303c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801303e:	f107 0308 	add.w	r3, r7, #8
 8013042:	4619      	mov	r1, r3
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7ff fda1 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f000 f964 	bl	8013318 <SDMMC_GetCmdResp2>
 8013050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013052:	69fb      	ldr	r3, [r7, #28]
}
 8013054:	4618      	mov	r0, r3
 8013056:	3720      	adds	r7, #32
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b088      	sub	sp, #32
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013066:	2300      	movs	r3, #0
 8013068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801306a:	2303      	movs	r3, #3
 801306c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801306e:	2340      	movs	r3, #64	; 0x40
 8013070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013072:	2300      	movs	r3, #0
 8013074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801307a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801307c:	f107 0308 	add.w	r3, r7, #8
 8013080:	4619      	mov	r1, r3
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f7ff fd82 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013088:	683a      	ldr	r2, [r7, #0]
 801308a:	2103      	movs	r1, #3
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f000 f9c9 	bl	8013424 <SDMMC_GetCmdResp6>
 8013092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013094:	69fb      	ldr	r3, [r7, #28]
}
 8013096:	4618      	mov	r0, r3
 8013098:	3720      	adds	r7, #32
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}

0801309e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801309e:	b580      	push	{r7, lr}
 80130a0:	b088      	sub	sp, #32
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
 80130a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80130ac:	230d      	movs	r3, #13
 80130ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130b0:	2340      	movs	r3, #64	; 0x40
 80130b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130b4:	2300      	movs	r3, #0
 80130b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130be:	f107 0308 	add.w	r3, r7, #8
 80130c2:	4619      	mov	r1, r3
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f7ff fd61 	bl	8012b8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80130ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80130ce:	210d      	movs	r1, #13
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f000 f833 	bl	801313c <SDMMC_GetCmdResp1>
 80130d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130d8:	69fb      	ldr	r3, [r7, #28]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3720      	adds	r7, #32
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
	...

080130e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b085      	sub	sp, #20
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80130ec:	4b11      	ldr	r3, [pc, #68]	; (8013134 <SDMMC_GetCmdError+0x50>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	4a11      	ldr	r2, [pc, #68]	; (8013138 <SDMMC_GetCmdError+0x54>)
 80130f2:	fba2 2303 	umull	r2, r3, r2, r3
 80130f6:	0a5b      	lsrs	r3, r3, #9
 80130f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80130fc:	fb02 f303 	mul.w	r3, r2, r3
 8013100:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	1e5a      	subs	r2, r3, #1
 8013106:	60fa      	str	r2, [r7, #12]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d102      	bne.n	8013112 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801310c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013110:	e009      	b.n	8013126 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801311a:	2b00      	cmp	r3, #0
 801311c:	d0f1      	beq.n	8013102 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	22c5      	movs	r2, #197	; 0xc5
 8013122:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8013124:	2300      	movs	r3, #0
}
 8013126:	4618      	mov	r0, r3
 8013128:	3714      	adds	r7, #20
 801312a:	46bd      	mov	sp, r7
 801312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013130:	4770      	bx	lr
 8013132:	bf00      	nop
 8013134:	20000008 	.word	0x20000008
 8013138:	10624dd3 	.word	0x10624dd3

0801313c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b088      	sub	sp, #32
 8013140:	af00      	add	r7, sp, #0
 8013142:	60f8      	str	r0, [r7, #12]
 8013144:	460b      	mov	r3, r1
 8013146:	607a      	str	r2, [r7, #4]
 8013148:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801314a:	4b70      	ldr	r3, [pc, #448]	; (801330c <SDMMC_GetCmdResp1+0x1d0>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	4a70      	ldr	r2, [pc, #448]	; (8013310 <SDMMC_GetCmdResp1+0x1d4>)
 8013150:	fba2 2303 	umull	r2, r3, r2, r3
 8013154:	0a5a      	lsrs	r2, r3, #9
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	fb02 f303 	mul.w	r3, r2, r3
 801315c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801315e:	69fb      	ldr	r3, [r7, #28]
 8013160:	1e5a      	subs	r2, r3, #1
 8013162:	61fa      	str	r2, [r7, #28]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d102      	bne.n	801316e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013168:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801316c:	e0c9      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013172:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013174:	69bb      	ldr	r3, [r7, #24]
 8013176:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801317a:	2b00      	cmp	r3, #0
 801317c:	d0ef      	beq.n	801315e <SDMMC_GetCmdResp1+0x22>
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013184:	2b00      	cmp	r3, #0
 8013186:	d1ea      	bne.n	801315e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801318c:	f003 0304 	and.w	r3, r3, #4
 8013190:	2b00      	cmp	r3, #0
 8013192:	d004      	beq.n	801319e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2204      	movs	r2, #4
 8013198:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801319a:	2304      	movs	r3, #4
 801319c:	e0b1      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131a2:	f003 0301 	and.w	r3, r3, #1
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d004      	beq.n	80131b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2201      	movs	r2, #1
 80131ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80131b0:	2301      	movs	r3, #1
 80131b2:	e0a6      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	22c5      	movs	r2, #197	; 0xc5
 80131b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80131ba:	68f8      	ldr	r0, [r7, #12]
 80131bc:	f7ff fd10 	bl	8012be0 <SDMMC_GetCommandResponse>
 80131c0:	4603      	mov	r3, r0
 80131c2:	461a      	mov	r2, r3
 80131c4:	7afb      	ldrb	r3, [r7, #11]
 80131c6:	4293      	cmp	r3, r2
 80131c8:	d001      	beq.n	80131ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80131ca:	2301      	movs	r3, #1
 80131cc:	e099      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80131ce:	2100      	movs	r1, #0
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f7ff fd12 	bl	8012bfa <SDMMC_GetResponse>
 80131d6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80131d8:	697a      	ldr	r2, [r7, #20]
 80131da:	4b4e      	ldr	r3, [pc, #312]	; (8013314 <SDMMC_GetCmdResp1+0x1d8>)
 80131dc:	4013      	ands	r3, r2
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d101      	bne.n	80131e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80131e2:	2300      	movs	r3, #0
 80131e4:	e08d      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	da02      	bge.n	80131f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80131ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80131f0:	e087      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d001      	beq.n	8013200 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80131fc:	2340      	movs	r3, #64	; 0x40
 80131fe:	e080      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013206:	2b00      	cmp	r3, #0
 8013208:	d001      	beq.n	801320e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801320a:	2380      	movs	r3, #128	; 0x80
 801320c:	e079      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013214:	2b00      	cmp	r3, #0
 8013216:	d002      	beq.n	801321e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013218:	f44f 7380 	mov.w	r3, #256	; 0x100
 801321c:	e071      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013224:	2b00      	cmp	r3, #0
 8013226:	d002      	beq.n	801322e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013228:	f44f 7300 	mov.w	r3, #512	; 0x200
 801322c:	e069      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013234:	2b00      	cmp	r3, #0
 8013236:	d002      	beq.n	801323e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801323c:	e061      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013244:	2b00      	cmp	r3, #0
 8013246:	d002      	beq.n	801324e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801324c:	e059      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013254:	2b00      	cmp	r3, #0
 8013256:	d002      	beq.n	801325e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801325c:	e051      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013264:	2b00      	cmp	r3, #0
 8013266:	d002      	beq.n	801326e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801326c:	e049      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013274:	2b00      	cmp	r3, #0
 8013276:	d002      	beq.n	801327e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013278:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801327c:	e041      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013284:	2b00      	cmp	r3, #0
 8013286:	d002      	beq.n	801328e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801328c:	e039      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013294:	2b00      	cmp	r3, #0
 8013296:	d002      	beq.n	801329e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801329c:	e031      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80132a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80132ac:	e029      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d002      	beq.n	80132be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80132b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80132bc:	e021      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d002      	beq.n	80132ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80132c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80132cc:	e019      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d002      	beq.n	80132de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80132d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80132dc:	e011      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d002      	beq.n	80132ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80132e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80132ec:	e009      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	f003 0308 	and.w	r3, r3, #8
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d002      	beq.n	80132fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80132f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80132fc:	e001      	b.n	8013302 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80132fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013302:	4618      	mov	r0, r3
 8013304:	3720      	adds	r7, #32
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}
 801330a:	bf00      	nop
 801330c:	20000008 	.word	0x20000008
 8013310:	10624dd3 	.word	0x10624dd3
 8013314:	fdffe008 	.word	0xfdffe008

08013318 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013320:	4b1f      	ldr	r3, [pc, #124]	; (80133a0 <SDMMC_GetCmdResp2+0x88>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4a1f      	ldr	r2, [pc, #124]	; (80133a4 <SDMMC_GetCmdResp2+0x8c>)
 8013326:	fba2 2303 	umull	r2, r3, r2, r3
 801332a:	0a5b      	lsrs	r3, r3, #9
 801332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013330:	fb02 f303 	mul.w	r3, r2, r3
 8013334:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	1e5a      	subs	r2, r3, #1
 801333a:	60fa      	str	r2, [r7, #12]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d102      	bne.n	8013346 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013344:	e026      	b.n	8013394 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801334a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013352:	2b00      	cmp	r3, #0
 8013354:	d0ef      	beq.n	8013336 <SDMMC_GetCmdResp2+0x1e>
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801335c:	2b00      	cmp	r3, #0
 801335e:	d1ea      	bne.n	8013336 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013364:	f003 0304 	and.w	r3, r3, #4
 8013368:	2b00      	cmp	r3, #0
 801336a:	d004      	beq.n	8013376 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2204      	movs	r2, #4
 8013370:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013372:	2304      	movs	r3, #4
 8013374:	e00e      	b.n	8013394 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801337a:	f003 0301 	and.w	r3, r3, #1
 801337e:	2b00      	cmp	r3, #0
 8013380:	d004      	beq.n	801338c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2201      	movs	r2, #1
 8013386:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013388:	2301      	movs	r3, #1
 801338a:	e003      	b.n	8013394 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	22c5      	movs	r2, #197	; 0xc5
 8013390:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013392:	2300      	movs	r3, #0
}
 8013394:	4618      	mov	r0, r3
 8013396:	3714      	adds	r7, #20
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr
 80133a0:	20000008 	.word	0x20000008
 80133a4:	10624dd3 	.word	0x10624dd3

080133a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80133a8:	b480      	push	{r7}
 80133aa:	b085      	sub	sp, #20
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80133b0:	4b1a      	ldr	r3, [pc, #104]	; (801341c <SDMMC_GetCmdResp3+0x74>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	4a1a      	ldr	r2, [pc, #104]	; (8013420 <SDMMC_GetCmdResp3+0x78>)
 80133b6:	fba2 2303 	umull	r2, r3, r2, r3
 80133ba:	0a5b      	lsrs	r3, r3, #9
 80133bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80133c0:	fb02 f303 	mul.w	r3, r2, r3
 80133c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	1e5a      	subs	r2, r3, #1
 80133ca:	60fa      	str	r2, [r7, #12]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d102      	bne.n	80133d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80133d4:	e01b      	b.n	801340e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d0ef      	beq.n	80133c6 <SDMMC_GetCmdResp3+0x1e>
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d1ea      	bne.n	80133c6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133f4:	f003 0304 	and.w	r3, r3, #4
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d004      	beq.n	8013406 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2204      	movs	r2, #4
 8013400:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013402:	2304      	movs	r3, #4
 8013404:	e003      	b.n	801340e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	22c5      	movs	r2, #197	; 0xc5
 801340a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801340c:	2300      	movs	r3, #0
}
 801340e:	4618      	mov	r0, r3
 8013410:	3714      	adds	r7, #20
 8013412:	46bd      	mov	sp, r7
 8013414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop
 801341c:	20000008 	.word	0x20000008
 8013420:	10624dd3 	.word	0x10624dd3

08013424 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b088      	sub	sp, #32
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	460b      	mov	r3, r1
 801342e:	607a      	str	r2, [r7, #4]
 8013430:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013432:	4b35      	ldr	r3, [pc, #212]	; (8013508 <SDMMC_GetCmdResp6+0xe4>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4a35      	ldr	r2, [pc, #212]	; (801350c <SDMMC_GetCmdResp6+0xe8>)
 8013438:	fba2 2303 	umull	r2, r3, r2, r3
 801343c:	0a5b      	lsrs	r3, r3, #9
 801343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013442:	fb02 f303 	mul.w	r3, r2, r3
 8013446:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	1e5a      	subs	r2, r3, #1
 801344c:	61fa      	str	r2, [r7, #28]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d102      	bne.n	8013458 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013452:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013456:	e052      	b.n	80134fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801345c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801345e:	69bb      	ldr	r3, [r7, #24]
 8013460:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013464:	2b00      	cmp	r3, #0
 8013466:	d0ef      	beq.n	8013448 <SDMMC_GetCmdResp6+0x24>
 8013468:	69bb      	ldr	r3, [r7, #24]
 801346a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801346e:	2b00      	cmp	r3, #0
 8013470:	d1ea      	bne.n	8013448 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013476:	f003 0304 	and.w	r3, r3, #4
 801347a:	2b00      	cmp	r3, #0
 801347c:	d004      	beq.n	8013488 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2204      	movs	r2, #4
 8013482:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013484:	2304      	movs	r3, #4
 8013486:	e03a      	b.n	80134fe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801348c:	f003 0301 	and.w	r3, r3, #1
 8013490:	2b00      	cmp	r3, #0
 8013492:	d004      	beq.n	801349e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2201      	movs	r2, #1
 8013498:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801349a:	2301      	movs	r3, #1
 801349c:	e02f      	b.n	80134fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801349e:	68f8      	ldr	r0, [r7, #12]
 80134a0:	f7ff fb9e 	bl	8012be0 <SDMMC_GetCommandResponse>
 80134a4:	4603      	mov	r3, r0
 80134a6:	461a      	mov	r2, r3
 80134a8:	7afb      	ldrb	r3, [r7, #11]
 80134aa:	4293      	cmp	r3, r2
 80134ac:	d001      	beq.n	80134b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80134ae:	2301      	movs	r3, #1
 80134b0:	e025      	b.n	80134fe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	22c5      	movs	r2, #197	; 0xc5
 80134b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80134b8:	2100      	movs	r1, #0
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f7ff fb9d 	bl	8012bfa <SDMMC_GetResponse>
 80134c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d106      	bne.n	80134da <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	0c1b      	lsrs	r3, r3, #16
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80134d6:	2300      	movs	r3, #0
 80134d8:	e011      	b.n	80134fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80134da:	697b      	ldr	r3, [r7, #20]
 80134dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d002      	beq.n	80134ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80134e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80134e8:	e009      	b.n	80134fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d002      	beq.n	80134fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80134f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134f8:	e001      	b.n	80134fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80134fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3720      	adds	r7, #32
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	20000008 	.word	0x20000008
 801350c:	10624dd3 	.word	0x10624dd3

08013510 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013510:	b480      	push	{r7}
 8013512:	b085      	sub	sp, #20
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013518:	4b22      	ldr	r3, [pc, #136]	; (80135a4 <SDMMC_GetCmdResp7+0x94>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	4a22      	ldr	r2, [pc, #136]	; (80135a8 <SDMMC_GetCmdResp7+0x98>)
 801351e:	fba2 2303 	umull	r2, r3, r2, r3
 8013522:	0a5b      	lsrs	r3, r3, #9
 8013524:	f241 3288 	movw	r2, #5000	; 0x1388
 8013528:	fb02 f303 	mul.w	r3, r2, r3
 801352c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	1e5a      	subs	r2, r3, #1
 8013532:	60fa      	str	r2, [r7, #12]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d102      	bne.n	801353e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801353c:	e02c      	b.n	8013598 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013542:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801354a:	2b00      	cmp	r3, #0
 801354c:	d0ef      	beq.n	801352e <SDMMC_GetCmdResp7+0x1e>
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013554:	2b00      	cmp	r3, #0
 8013556:	d1ea      	bne.n	801352e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801355c:	f003 0304 	and.w	r3, r3, #4
 8013560:	2b00      	cmp	r3, #0
 8013562:	d004      	beq.n	801356e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2204      	movs	r2, #4
 8013568:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801356a:	2304      	movs	r3, #4
 801356c:	e014      	b.n	8013598 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013572:	f003 0301 	and.w	r3, r3, #1
 8013576:	2b00      	cmp	r3, #0
 8013578:	d004      	beq.n	8013584 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2201      	movs	r2, #1
 801357e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013580:	2301      	movs	r3, #1
 8013582:	e009      	b.n	8013598 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801358c:	2b00      	cmp	r3, #0
 801358e:	d002      	beq.n	8013596 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2240      	movs	r2, #64	; 0x40
 8013594:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8013596:	2300      	movs	r3, #0
  
}
 8013598:	4618      	mov	r0, r3
 801359a:	3714      	adds	r7, #20
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr
 80135a4:	20000008 	.word	0x20000008
 80135a8:	10624dd3 	.word	0x10624dd3

080135ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80135ac:	b084      	sub	sp, #16
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b084      	sub	sp, #16
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
 80135b6:	f107 001c 	add.w	r0, r7, #28
 80135ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80135be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c0:	2b01      	cmp	r3, #1
 80135c2:	d120      	bne.n	8013606 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	68da      	ldr	r2, [r3, #12]
 80135d4:	4b20      	ldr	r3, [pc, #128]	; (8013658 <USB_CoreInit+0xac>)
 80135d6:	4013      	ands	r3, r2
 80135d8:	687a      	ldr	r2, [r7, #4]
 80135da:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80135e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	d105      	bne.n	80135fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f000 f942 	bl	8013884 <USB_CoreReset>
 8013600:	4603      	mov	r3, r0
 8013602:	73fb      	strb	r3, [r7, #15]
 8013604:	e010      	b.n	8013628 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	68db      	ldr	r3, [r3, #12]
 801360a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f000 f936 	bl	8013884 <USB_CoreReset>
 8013618:	4603      	mov	r3, r0
 801361a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013620:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8013628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362a:	2b01      	cmp	r3, #1
 801362c:	d10b      	bne.n	8013646 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	689b      	ldr	r3, [r3, #8]
 8013632:	f043 0206 	orr.w	r2, r3, #6
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	f043 0220 	orr.w	r2, r3, #32
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013646:	7bfb      	ldrb	r3, [r7, #15]
}
 8013648:	4618      	mov	r0, r3
 801364a:	3710      	adds	r7, #16
 801364c:	46bd      	mov	sp, r7
 801364e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013652:	b004      	add	sp, #16
 8013654:	4770      	bx	lr
 8013656:	bf00      	nop
 8013658:	ffbdffbf 	.word	0xffbdffbf

0801365c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801365c:	b480      	push	{r7}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	689b      	ldr	r3, [r3, #8]
 8013668:	f043 0201 	orr.w	r2, r3, #1
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013670:	2300      	movs	r3, #0
}
 8013672:	4618      	mov	r0, r3
 8013674:	370c      	adds	r7, #12
 8013676:	46bd      	mov	sp, r7
 8013678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367c:	4770      	bx	lr

0801367e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801367e:	b480      	push	{r7}
 8013680:	b083      	sub	sp, #12
 8013682:	af00      	add	r7, sp, #0
 8013684:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	689b      	ldr	r3, [r3, #8]
 801368a:	f023 0201 	bic.w	r2, r3, #1
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013692:	2300      	movs	r3, #0
}
 8013694:	4618      	mov	r0, r3
 8013696:	370c      	adds	r7, #12
 8013698:	46bd      	mov	sp, r7
 801369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369e:	4770      	bx	lr

080136a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	460b      	mov	r3, r1
 80136aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	68db      	ldr	r3, [r3, #12]
 80136b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80136b8:	78fb      	ldrb	r3, [r7, #3]
 80136ba:	2b01      	cmp	r3, #1
 80136bc:	d106      	bne.n	80136cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	68db      	ldr	r3, [r3, #12]
 80136c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	60da      	str	r2, [r3, #12]
 80136ca:	e00b      	b.n	80136e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80136cc:	78fb      	ldrb	r3, [r7, #3]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d106      	bne.n	80136e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	68db      	ldr	r3, [r3, #12]
 80136d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	60da      	str	r2, [r3, #12]
 80136de:	e001      	b.n	80136e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80136e0:	2301      	movs	r3, #1
 80136e2:	e003      	b.n	80136ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80136e4:	2032      	movs	r0, #50	; 0x32
 80136e6:	f7f4 f8d9 	bl	800789c <HAL_Delay>

  return HAL_OK;
 80136ea:	2300      	movs	r3, #0
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3708      	adds	r7, #8
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80136f4:	b480      	push	{r7}
 80136f6:	b085      	sub	sp, #20
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80136fe:	2300      	movs	r3, #0
 8013700:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	019b      	lsls	r3, r3, #6
 8013706:	f043 0220 	orr.w	r2, r3, #32
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	3301      	adds	r3, #1
 8013712:	60fb      	str	r3, [r7, #12]
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	4a09      	ldr	r2, [pc, #36]	; (801373c <USB_FlushTxFifo+0x48>)
 8013718:	4293      	cmp	r3, r2
 801371a:	d901      	bls.n	8013720 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801371c:	2303      	movs	r3, #3
 801371e:	e006      	b.n	801372e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	691b      	ldr	r3, [r3, #16]
 8013724:	f003 0320 	and.w	r3, r3, #32
 8013728:	2b20      	cmp	r3, #32
 801372a:	d0f0      	beq.n	801370e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801372c:	2300      	movs	r3, #0
}
 801372e:	4618      	mov	r0, r3
 8013730:	3714      	adds	r7, #20
 8013732:	46bd      	mov	sp, r7
 8013734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013738:	4770      	bx	lr
 801373a:	bf00      	nop
 801373c:	00030d40 	.word	0x00030d40

08013740 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013740:	b480      	push	{r7}
 8013742:	b085      	sub	sp, #20
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8013748:	2300      	movs	r3, #0
 801374a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2210      	movs	r2, #16
 8013750:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	3301      	adds	r3, #1
 8013756:	60fb      	str	r3, [r7, #12]
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	4a09      	ldr	r2, [pc, #36]	; (8013780 <USB_FlushRxFifo+0x40>)
 801375c:	4293      	cmp	r3, r2
 801375e:	d901      	bls.n	8013764 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8013760:	2303      	movs	r3, #3
 8013762:	e006      	b.n	8013772 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	691b      	ldr	r3, [r3, #16]
 8013768:	f003 0310 	and.w	r3, r3, #16
 801376c:	2b10      	cmp	r3, #16
 801376e:	d0f0      	beq.n	8013752 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8013770:	2300      	movs	r3, #0
}
 8013772:	4618      	mov	r0, r3
 8013774:	3714      	adds	r7, #20
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr
 801377e:	bf00      	nop
 8013780:	00030d40 	.word	0x00030d40

08013784 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013784:	b480      	push	{r7}
 8013786:	b089      	sub	sp, #36	; 0x24
 8013788:	af00      	add	r7, sp, #0
 801378a:	60f8      	str	r0, [r7, #12]
 801378c:	60b9      	str	r1, [r7, #8]
 801378e:	4611      	mov	r1, r2
 8013790:	461a      	mov	r2, r3
 8013792:	460b      	mov	r3, r1
 8013794:	71fb      	strb	r3, [r7, #7]
 8013796:	4613      	mov	r3, r2
 8013798:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80137a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d11a      	bne.n	80137e0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80137aa:	88bb      	ldrh	r3, [r7, #4]
 80137ac:	3303      	adds	r3, #3
 80137ae:	089b      	lsrs	r3, r3, #2
 80137b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80137b2:	2300      	movs	r3, #0
 80137b4:	61bb      	str	r3, [r7, #24]
 80137b6:	e00f      	b.n	80137d8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80137b8:	79fb      	ldrb	r3, [r7, #7]
 80137ba:	031a      	lsls	r2, r3, #12
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	4413      	add	r3, r2
 80137c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137c4:	461a      	mov	r2, r3
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	3304      	adds	r3, #4
 80137d0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	3301      	adds	r3, #1
 80137d6:	61bb      	str	r3, [r7, #24]
 80137d8:	69ba      	ldr	r2, [r7, #24]
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	429a      	cmp	r2, r3
 80137de:	d3eb      	bcc.n	80137b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80137e0:	2300      	movs	r3, #0
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3724      	adds	r7, #36	; 0x24
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr

080137ee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80137ee:	b480      	push	{r7}
 80137f0:	b089      	sub	sp, #36	; 0x24
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	60f8      	str	r0, [r7, #12]
 80137f6:	60b9      	str	r1, [r7, #8]
 80137f8:	4613      	mov	r3, r2
 80137fa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8013804:	88fb      	ldrh	r3, [r7, #6]
 8013806:	3303      	adds	r3, #3
 8013808:	089b      	lsrs	r3, r3, #2
 801380a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801380c:	2300      	movs	r3, #0
 801380e:	61bb      	str	r3, [r7, #24]
 8013810:	e00b      	b.n	801382a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013818:	681a      	ldr	r2, [r3, #0]
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	601a      	str	r2, [r3, #0]
    pDest++;
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	3304      	adds	r3, #4
 8013822:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	3301      	adds	r3, #1
 8013828:	61bb      	str	r3, [r7, #24]
 801382a:	69ba      	ldr	r2, [r7, #24]
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	429a      	cmp	r2, r3
 8013830:	d3ef      	bcc.n	8013812 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8013832:	69fb      	ldr	r3, [r7, #28]
}
 8013834:	4618      	mov	r0, r3
 8013836:	3724      	adds	r7, #36	; 0x24
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr

08013840 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013840:	b480      	push	{r7}
 8013842:	b085      	sub	sp, #20
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	695b      	ldr	r3, [r3, #20]
 801384c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	699b      	ldr	r3, [r3, #24]
 8013852:	68fa      	ldr	r2, [r7, #12]
 8013854:	4013      	ands	r3, r2
 8013856:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013858:	68fb      	ldr	r3, [r7, #12]
}
 801385a:	4618      	mov	r0, r3
 801385c:	3714      	adds	r7, #20
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr

08013866 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013866:	b480      	push	{r7}
 8013868:	b083      	sub	sp, #12
 801386a:	af00      	add	r7, sp, #0
 801386c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	695b      	ldr	r3, [r3, #20]
 8013872:	f003 0301 	and.w	r3, r3, #1
}
 8013876:	4618      	mov	r0, r3
 8013878:	370c      	adds	r7, #12
 801387a:	46bd      	mov	sp, r7
 801387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013880:	4770      	bx	lr
	...

08013884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013884:	b480      	push	{r7}
 8013886:	b085      	sub	sp, #20
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801388c:	2300      	movs	r3, #0
 801388e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	3301      	adds	r3, #1
 8013894:	60fb      	str	r3, [r7, #12]
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	4a13      	ldr	r2, [pc, #76]	; (80138e8 <USB_CoreReset+0x64>)
 801389a:	4293      	cmp	r3, r2
 801389c:	d901      	bls.n	80138a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801389e:	2303      	movs	r3, #3
 80138a0:	e01b      	b.n	80138da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	691b      	ldr	r3, [r3, #16]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	daf2      	bge.n	8013890 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80138aa:	2300      	movs	r3, #0
 80138ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	691b      	ldr	r3, [r3, #16]
 80138b2:	f043 0201 	orr.w	r2, r3, #1
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	3301      	adds	r3, #1
 80138be:	60fb      	str	r3, [r7, #12]
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	4a09      	ldr	r2, [pc, #36]	; (80138e8 <USB_CoreReset+0x64>)
 80138c4:	4293      	cmp	r3, r2
 80138c6:	d901      	bls.n	80138cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80138c8:	2303      	movs	r3, #3
 80138ca:	e006      	b.n	80138da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	691b      	ldr	r3, [r3, #16]
 80138d0:	f003 0301 	and.w	r3, r3, #1
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d0f0      	beq.n	80138ba <USB_CoreReset+0x36>

  return HAL_OK;
 80138d8:	2300      	movs	r3, #0
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3714      	adds	r7, #20
 80138de:	46bd      	mov	sp, r7
 80138e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e4:	4770      	bx	lr
 80138e6:	bf00      	nop
 80138e8:	00030d40 	.word	0x00030d40

080138ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80138ec:	b084      	sub	sp, #16
 80138ee:	b580      	push	{r7, lr}
 80138f0:	b084      	sub	sp, #16
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	6078      	str	r0, [r7, #4]
 80138f6:	f107 001c 	add.w	r0, r7, #28
 80138fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013908:	461a      	mov	r2, r3
 801390a:	2300      	movs	r3, #0
 801390c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013912:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013922:	2b00      	cmp	r3, #0
 8013924:	d018      	beq.n	8013958 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8013926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013928:	2b01      	cmp	r3, #1
 801392a:	d10a      	bne.n	8013942 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	68ba      	ldr	r2, [r7, #8]
 8013936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801393a:	f043 0304 	orr.w	r3, r3, #4
 801393e:	6013      	str	r3, [r2, #0]
 8013940:	e014      	b.n	801396c <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	68ba      	ldr	r2, [r7, #8]
 801394c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013950:	f023 0304 	bic.w	r3, r3, #4
 8013954:	6013      	str	r3, [r2, #0]
 8013956:	e009      	b.n	801396c <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	68ba      	ldr	r2, [r7, #8]
 8013962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013966:	f023 0304 	bic.w	r3, r3, #4
 801396a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 801396c:	2110      	movs	r1, #16
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7ff fec0 	bl	80136f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f7ff fee3 	bl	8013740 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801397a:	2300      	movs	r3, #0
 801397c:	60fb      	str	r3, [r7, #12]
 801397e:	e015      	b.n	80139ac <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	015a      	lsls	r2, r3, #5
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	4413      	add	r3, r2
 8013988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801398c:	461a      	mov	r2, r3
 801398e:	f04f 33ff 	mov.w	r3, #4294967295
 8013992:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	015a      	lsls	r2, r3, #5
 8013998:	68bb      	ldr	r3, [r7, #8]
 801399a:	4413      	add	r3, r2
 801399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139a0:	461a      	mov	r2, r3
 80139a2:	2300      	movs	r3, #0
 80139a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	3301      	adds	r3, #1
 80139aa:	60fb      	str	r3, [r7, #12]
 80139ac:	6a3b      	ldr	r3, [r7, #32]
 80139ae:	68fa      	ldr	r2, [r7, #12]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d3e5      	bcc.n	8013980 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80139b4:	2101      	movs	r1, #1
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f000 f8ac 	bl	8013b14 <USB_DriveVbus>

  HAL_Delay(200U);
 80139bc:	20c8      	movs	r0, #200	; 0xc8
 80139be:	f7f3 ff6d 	bl	800789c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2200      	movs	r2, #0
 80139c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f04f 32ff 	mov.w	r2, #4294967295
 80139ce:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d00b      	beq.n	80139f4 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80139e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	4a14      	ldr	r2, [pc, #80]	; (8013a38 <USB_HostInit+0x14c>)
 80139e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4a13      	ldr	r2, [pc, #76]	; (8013a3c <USB_HostInit+0x150>)
 80139ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80139f2:	e009      	b.n	8013a08 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2280      	movs	r2, #128	; 0x80
 80139f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4a10      	ldr	r2, [pc, #64]	; (8013a40 <USB_HostInit+0x154>)
 80139fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	4a10      	ldr	r2, [pc, #64]	; (8013a44 <USB_HostInit+0x158>)
 8013a04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d105      	bne.n	8013a1a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	699b      	ldr	r3, [r3, #24]
 8013a12:	f043 0210 	orr.w	r2, r3, #16
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	699a      	ldr	r2, [r3, #24]
 8013a1e:	4b0a      	ldr	r3, [pc, #40]	; (8013a48 <USB_HostInit+0x15c>)
 8013a20:	4313      	orrs	r3, r2
 8013a22:	687a      	ldr	r2, [r7, #4]
 8013a24:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8013a26:	2300      	movs	r3, #0
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3710      	adds	r7, #16
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013a32:	b004      	add	sp, #16
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop
 8013a38:	01000200 	.word	0x01000200
 8013a3c:	00e00300 	.word	0x00e00300
 8013a40:	00600080 	.word	0x00600080
 8013a44:	004000e0 	.word	0x004000e0
 8013a48:	a3200008 	.word	0xa3200008

08013a4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	460b      	mov	r3, r1
 8013a56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	68fa      	ldr	r2, [r7, #12]
 8013a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013a6a:	f023 0303 	bic.w	r3, r3, #3
 8013a6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	78fb      	ldrb	r3, [r7, #3]
 8013a7a:	f003 0303 	and.w	r3, r3, #3
 8013a7e:	68f9      	ldr	r1, [r7, #12]
 8013a80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013a84:	4313      	orrs	r3, r2
 8013a86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8013a88:	78fb      	ldrb	r3, [r7, #3]
 8013a8a:	2b01      	cmp	r3, #1
 8013a8c:	d107      	bne.n	8013a9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013a94:	461a      	mov	r2, r3
 8013a96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8013a9a:	6053      	str	r3, [r2, #4]
 8013a9c:	e009      	b.n	8013ab2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8013a9e:	78fb      	ldrb	r3, [r7, #3]
 8013aa0:	2b02      	cmp	r3, #2
 8013aa2:	d106      	bne.n	8013ab2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013aaa:	461a      	mov	r2, r3
 8013aac:	f241 7370 	movw	r3, #6000	; 0x1770
 8013ab0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8013ab2:	2300      	movs	r3, #0
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3714      	adds	r7, #20
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abe:	4770      	bx	lr

08013ac0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8013acc:	2300      	movs	r3, #0
 8013ace:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8013ae0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	68fa      	ldr	r2, [r7, #12]
 8013ae6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8013aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013aee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8013af0:	2064      	movs	r0, #100	; 0x64
 8013af2:	f7f3 fed3 	bl	800789c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8013afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b02:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8013b04:	200a      	movs	r0, #10
 8013b06:	f7f3 fec9 	bl	800789c <HAL_Delay>

  return HAL_OK;
 8013b0a:	2300      	movs	r3, #0
}
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3710      	adds	r7, #16
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}

08013b14 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8013b14:	b480      	push	{r7}
 8013b16:	b085      	sub	sp, #20
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8013b24:	2300      	movs	r3, #0
 8013b26:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8013b38:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d109      	bne.n	8013b58 <USB_DriveVbus+0x44>
 8013b44:	78fb      	ldrb	r3, [r7, #3]
 8013b46:	2b01      	cmp	r3, #1
 8013b48:	d106      	bne.n	8013b58 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8013b52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013b56:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b62:	d109      	bne.n	8013b78 <USB_DriveVbus+0x64>
 8013b64:	78fb      	ldrb	r3, [r7, #3]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d106      	bne.n	8013b78 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	68fa      	ldr	r2, [r7, #12]
 8013b6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8013b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b76:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8013b78:	2300      	movs	r3, #0
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3714      	adds	r7, #20
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr

08013b86 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013b86:	b480      	push	{r7}
 8013b88:	b085      	sub	sp, #20
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8013b92:	2300      	movs	r3, #0
 8013b94:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	0c5b      	lsrs	r3, r3, #17
 8013ba4:	f003 0303 	and.w	r3, r3, #3
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3714      	adds	r7, #20
 8013bac:	46bd      	mov	sp, r7
 8013bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb2:	4770      	bx	lr

08013bb4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b085      	sub	sp, #20
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013bc6:	689b      	ldr	r3, [r3, #8]
 8013bc8:	b29b      	uxth	r3, r3
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3714      	adds	r7, #20
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd4:	4770      	bx	lr
	...

08013bd8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b088      	sub	sp, #32
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	4608      	mov	r0, r1
 8013be2:	4611      	mov	r1, r2
 8013be4:	461a      	mov	r2, r3
 8013be6:	4603      	mov	r3, r0
 8013be8:	70fb      	strb	r3, [r7, #3]
 8013bea:	460b      	mov	r3, r1
 8013bec:	70bb      	strb	r3, [r7, #2]
 8013bee:	4613      	mov	r3, r2
 8013bf0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8013bfa:	78fb      	ldrb	r3, [r7, #3]
 8013bfc:	015a      	lsls	r2, r3, #5
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	4413      	add	r3, r2
 8013c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013c06:	461a      	mov	r2, r3
 8013c08:	f04f 33ff 	mov.w	r3, #4294967295
 8013c0c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8013c0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013c12:	2b03      	cmp	r3, #3
 8013c14:	d87e      	bhi.n	8013d14 <USB_HC_Init+0x13c>
 8013c16:	a201      	add	r2, pc, #4	; (adr r2, 8013c1c <USB_HC_Init+0x44>)
 8013c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c1c:	08013c2d 	.word	0x08013c2d
 8013c20:	08013cd7 	.word	0x08013cd7
 8013c24:	08013c2d 	.word	0x08013c2d
 8013c28:	08013c99 	.word	0x08013c99
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013c2c:	78fb      	ldrb	r3, [r7, #3]
 8013c2e:	015a      	lsls	r2, r3, #5
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	4413      	add	r3, r2
 8013c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013c38:	461a      	mov	r2, r3
 8013c3a:	f240 439d 	movw	r3, #1181	; 0x49d
 8013c3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8013c40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	da10      	bge.n	8013c6a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013c48:	78fb      	ldrb	r3, [r7, #3]
 8013c4a:	015a      	lsls	r2, r3, #5
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	4413      	add	r3, r2
 8013c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013c54:	68db      	ldr	r3, [r3, #12]
 8013c56:	78fa      	ldrb	r2, [r7, #3]
 8013c58:	0151      	lsls	r1, r2, #5
 8013c5a:	693a      	ldr	r2, [r7, #16]
 8013c5c:	440a      	add	r2, r1
 8013c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013c66:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8013c68:	e057      	b.n	8013d1a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d051      	beq.n	8013d1a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8013c76:	78fb      	ldrb	r3, [r7, #3]
 8013c78:	015a      	lsls	r2, r3, #5
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	4413      	add	r3, r2
 8013c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	78fa      	ldrb	r2, [r7, #3]
 8013c86:	0151      	lsls	r1, r2, #5
 8013c88:	693a      	ldr	r2, [r7, #16]
 8013c8a:	440a      	add	r2, r1
 8013c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013c90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013c94:	60d3      	str	r3, [r2, #12]
      break;
 8013c96:	e040      	b.n	8013d1a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013c98:	78fb      	ldrb	r3, [r7, #3]
 8013c9a:	015a      	lsls	r2, r3, #5
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	4413      	add	r3, r2
 8013ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	f240 639d 	movw	r3, #1693	; 0x69d
 8013caa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8013cac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	da34      	bge.n	8013d1e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013cb4:	78fb      	ldrb	r3, [r7, #3]
 8013cb6:	015a      	lsls	r2, r3, #5
 8013cb8:	693b      	ldr	r3, [r7, #16]
 8013cba:	4413      	add	r3, r2
 8013cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013cc0:	68db      	ldr	r3, [r3, #12]
 8013cc2:	78fa      	ldrb	r2, [r7, #3]
 8013cc4:	0151      	lsls	r1, r2, #5
 8013cc6:	693a      	ldr	r2, [r7, #16]
 8013cc8:	440a      	add	r2, r1
 8013cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013cd2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8013cd4:	e023      	b.n	8013d1e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013cd6:	78fb      	ldrb	r3, [r7, #3]
 8013cd8:	015a      	lsls	r2, r3, #5
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	4413      	add	r3, r2
 8013cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	f240 2325 	movw	r3, #549	; 0x225
 8013ce8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8013cea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	da17      	bge.n	8013d22 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8013cf2:	78fb      	ldrb	r3, [r7, #3]
 8013cf4:	015a      	lsls	r2, r3, #5
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013cfe:	68db      	ldr	r3, [r3, #12]
 8013d00:	78fa      	ldrb	r2, [r7, #3]
 8013d02:	0151      	lsls	r1, r2, #5
 8013d04:	693a      	ldr	r2, [r7, #16]
 8013d06:	440a      	add	r2, r1
 8013d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013d0c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8013d10:	60d3      	str	r3, [r2, #12]
      }
      break;
 8013d12:	e006      	b.n	8013d22 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8013d14:	2301      	movs	r3, #1
 8013d16:	77fb      	strb	r3, [r7, #31]
      break;
 8013d18:	e004      	b.n	8013d24 <USB_HC_Init+0x14c>
      break;
 8013d1a:	bf00      	nop
 8013d1c:	e002      	b.n	8013d24 <USB_HC_Init+0x14c>
      break;
 8013d1e:	bf00      	nop
 8013d20:	e000      	b.n	8013d24 <USB_HC_Init+0x14c>
      break;
 8013d22:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013d2a:	699a      	ldr	r2, [r3, #24]
 8013d2c:	78fb      	ldrb	r3, [r7, #3]
 8013d2e:	f003 030f 	and.w	r3, r3, #15
 8013d32:	2101      	movs	r1, #1
 8013d34:	fa01 f303 	lsl.w	r3, r1, r3
 8013d38:	6939      	ldr	r1, [r7, #16]
 8013d3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	699b      	ldr	r3, [r3, #24]
 8013d46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8013d4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	da03      	bge.n	8013d5e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8013d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013d5a:	61bb      	str	r3, [r7, #24]
 8013d5c:	e001      	b.n	8013d62 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f7ff ff0f 	bl	8013b86 <USB_GetHostSpeed>
 8013d68:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8013d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d6e:	2b02      	cmp	r3, #2
 8013d70:	d106      	bne.n	8013d80 <USB_HC_Init+0x1a8>
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	2b02      	cmp	r3, #2
 8013d76:	d003      	beq.n	8013d80 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8013d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013d7c:	617b      	str	r3, [r7, #20]
 8013d7e:	e001      	b.n	8013d84 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8013d80:	2300      	movs	r3, #0
 8013d82:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013d84:	787b      	ldrb	r3, [r7, #1]
 8013d86:	059b      	lsls	r3, r3, #22
 8013d88:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8013d8c:	78bb      	ldrb	r3, [r7, #2]
 8013d8e:	02db      	lsls	r3, r3, #11
 8013d90:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013d94:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8013d96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013d9a:	049b      	lsls	r3, r3, #18
 8013d9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8013da0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013da2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8013da8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013dae:	78fb      	ldrb	r3, [r7, #3]
 8013db0:	0159      	lsls	r1, r3, #5
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	440b      	add	r3, r1
 8013db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013dba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013dbc:	697b      	ldr	r3, [r7, #20]
 8013dbe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013dc0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8013dc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013dc6:	2b03      	cmp	r3, #3
 8013dc8:	d10f      	bne.n	8013dea <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8013dca:	78fb      	ldrb	r3, [r7, #3]
 8013dcc:	015a      	lsls	r2, r3, #5
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	4413      	add	r3, r2
 8013dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	78fa      	ldrb	r2, [r7, #3]
 8013dda:	0151      	lsls	r1, r2, #5
 8013ddc:	693a      	ldr	r2, [r7, #16]
 8013dde:	440a      	add	r2, r1
 8013de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013de4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013de8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8013dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3720      	adds	r7, #32
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b08c      	sub	sp, #48	; 0x30
 8013df8:	af02      	add	r7, sp, #8
 8013dfa:	60f8      	str	r0, [r7, #12]
 8013dfc:	60b9      	str	r1, [r7, #8]
 8013dfe:	4613      	mov	r3, r2
 8013e00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	785b      	ldrb	r3, [r3, #1]
 8013e0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8013e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013e10:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d02d      	beq.n	8013e7a <USB_HC_StartXfer+0x86>
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	791b      	ldrb	r3, [r3, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d129      	bne.n	8013e7a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8013e26:	79fb      	ldrb	r3, [r7, #7]
 8013e28:	2b01      	cmp	r3, #1
 8013e2a:	d117      	bne.n	8013e5c <USB_HC_StartXfer+0x68>
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	79db      	ldrb	r3, [r3, #7]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d003      	beq.n	8013e3c <USB_HC_StartXfer+0x48>
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	79db      	ldrb	r3, [r3, #7]
 8013e38:	2b02      	cmp	r3, #2
 8013e3a:	d10f      	bne.n	8013e5c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	015a      	lsls	r2, r3, #5
 8013e40:	6a3b      	ldr	r3, [r7, #32]
 8013e42:	4413      	add	r3, r2
 8013e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013e48:	68db      	ldr	r3, [r3, #12]
 8013e4a:	69fa      	ldr	r2, [r7, #28]
 8013e4c:	0151      	lsls	r1, r2, #5
 8013e4e:	6a3a      	ldr	r2, [r7, #32]
 8013e50:	440a      	add	r2, r1
 8013e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013e5a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8013e5c:	79fb      	ldrb	r3, [r7, #7]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d10b      	bne.n	8013e7a <USB_HC_StartXfer+0x86>
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	795b      	ldrb	r3, [r3, #5]
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d107      	bne.n	8013e7a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	785b      	ldrb	r3, [r3, #1]
 8013e6e:	4619      	mov	r1, r3
 8013e70:	68f8      	ldr	r0, [r7, #12]
 8013e72:	f000 fa2f 	bl	80142d4 <USB_DoPing>
      return HAL_OK;
 8013e76:	2300      	movs	r3, #0
 8013e78:	e0f8      	b.n	801406c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	695b      	ldr	r3, [r3, #20]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d018      	beq.n	8013eb4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	695b      	ldr	r3, [r3, #20]
 8013e86:	68ba      	ldr	r2, [r7, #8]
 8013e88:	8912      	ldrh	r2, [r2, #8]
 8013e8a:	4413      	add	r3, r2
 8013e8c:	3b01      	subs	r3, #1
 8013e8e:	68ba      	ldr	r2, [r7, #8]
 8013e90:	8912      	ldrh	r2, [r2, #8]
 8013e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e96:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8013e98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013e9a:	8b7b      	ldrh	r3, [r7, #26]
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d90b      	bls.n	8013eb8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8013ea0:	8b7b      	ldrh	r3, [r7, #26]
 8013ea2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8013ea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013ea6:	68ba      	ldr	r2, [r7, #8]
 8013ea8:	8912      	ldrh	r2, [r2, #8]
 8013eaa:	fb02 f203 	mul.w	r2, r2, r3
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	611a      	str	r2, [r3, #16]
 8013eb2:	e001      	b.n	8013eb8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	78db      	ldrb	r3, [r3, #3]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d007      	beq.n	8013ed0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8013ec0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013ec2:	68ba      	ldr	r2, [r7, #8]
 8013ec4:	8912      	ldrh	r2, [r2, #8]
 8013ec6:	fb02 f203 	mul.w	r2, r2, r3
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	611a      	str	r2, [r3, #16]
 8013ece:	e003      	b.n	8013ed8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	695a      	ldr	r2, [r3, #20]
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	691b      	ldr	r3, [r3, #16]
 8013edc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013ee0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013ee2:	04d9      	lsls	r1, r3, #19
 8013ee4:	4b63      	ldr	r3, [pc, #396]	; (8014074 <USB_HC_StartXfer+0x280>)
 8013ee6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8013ee8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	7a9b      	ldrb	r3, [r3, #10]
 8013eee:	075b      	lsls	r3, r3, #29
 8013ef0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8013ef4:	69f9      	ldr	r1, [r7, #28]
 8013ef6:	0148      	lsls	r0, r1, #5
 8013ef8:	6a39      	ldr	r1, [r7, #32]
 8013efa:	4401      	add	r1, r0
 8013efc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013f00:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8013f02:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8013f04:	79fb      	ldrb	r3, [r7, #7]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d009      	beq.n	8013f1e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	68d9      	ldr	r1, [r3, #12]
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	015a      	lsls	r2, r3, #5
 8013f12:	6a3b      	ldr	r3, [r7, #32]
 8013f14:	4413      	add	r3, r2
 8013f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013f1a:	460a      	mov	r2, r1
 8013f1c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8013f1e:	6a3b      	ldr	r3, [r7, #32]
 8013f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013f24:	689b      	ldr	r3, [r3, #8]
 8013f26:	f003 0301 	and.w	r3, r3, #1
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	bf0c      	ite	eq
 8013f2e:	2301      	moveq	r3, #1
 8013f30:	2300      	movne	r3, #0
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	015a      	lsls	r2, r3, #5
 8013f3a:	6a3b      	ldr	r3, [r7, #32]
 8013f3c:	4413      	add	r3, r2
 8013f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	69fa      	ldr	r2, [r7, #28]
 8013f46:	0151      	lsls	r1, r2, #5
 8013f48:	6a3a      	ldr	r2, [r7, #32]
 8013f4a:	440a      	add	r2, r1
 8013f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013f50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013f54:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8013f56:	69fb      	ldr	r3, [r7, #28]
 8013f58:	015a      	lsls	r2, r3, #5
 8013f5a:	6a3b      	ldr	r3, [r7, #32]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013f62:	681a      	ldr	r2, [r3, #0]
 8013f64:	7e7b      	ldrb	r3, [r7, #25]
 8013f66:	075b      	lsls	r3, r3, #29
 8013f68:	69f9      	ldr	r1, [r7, #28]
 8013f6a:	0148      	lsls	r0, r1, #5
 8013f6c:	6a39      	ldr	r1, [r7, #32]
 8013f6e:	4401      	add	r1, r0
 8013f70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8013f74:	4313      	orrs	r3, r2
 8013f76:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8013f78:	69fb      	ldr	r3, [r7, #28]
 8013f7a:	015a      	lsls	r2, r3, #5
 8013f7c:	6a3b      	ldr	r3, [r7, #32]
 8013f7e:	4413      	add	r3, r2
 8013f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013f8e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	78db      	ldrb	r3, [r3, #3]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d004      	beq.n	8013fa2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013f9e:	613b      	str	r3, [r7, #16]
 8013fa0:	e003      	b.n	8013faa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013fa8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8013faa:	693b      	ldr	r3, [r7, #16]
 8013fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013fb0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8013fb2:	69fb      	ldr	r3, [r7, #28]
 8013fb4:	015a      	lsls	r2, r3, #5
 8013fb6:	6a3b      	ldr	r3, [r7, #32]
 8013fb8:	4413      	add	r3, r2
 8013fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8013fc4:	79fb      	ldrb	r3, [r7, #7]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d001      	beq.n	8013fce <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	e04e      	b.n	801406c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	78db      	ldrb	r3, [r3, #3]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d149      	bne.n	801406a <USB_HC_StartXfer+0x276>
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	695b      	ldr	r3, [r3, #20]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d045      	beq.n	801406a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	79db      	ldrb	r3, [r3, #7]
 8013fe2:	2b03      	cmp	r3, #3
 8013fe4:	d830      	bhi.n	8014048 <USB_HC_StartXfer+0x254>
 8013fe6:	a201      	add	r2, pc, #4	; (adr r2, 8013fec <USB_HC_StartXfer+0x1f8>)
 8013fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fec:	08013ffd 	.word	0x08013ffd
 8013ff0:	08014021 	.word	0x08014021
 8013ff4:	08013ffd 	.word	0x08013ffd
 8013ff8:	08014021 	.word	0x08014021
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	695b      	ldr	r3, [r3, #20]
 8014000:	3303      	adds	r3, #3
 8014002:	089b      	lsrs	r3, r3, #2
 8014004:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8014006:	8afa      	ldrh	r2, [r7, #22]
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801400c:	b29b      	uxth	r3, r3
 801400e:	429a      	cmp	r2, r3
 8014010:	d91c      	bls.n	801404c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	699b      	ldr	r3, [r3, #24]
 8014016:	f043 0220 	orr.w	r2, r3, #32
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	619a      	str	r2, [r3, #24]
        }
        break;
 801401e:	e015      	b.n	801404c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	695b      	ldr	r3, [r3, #20]
 8014024:	3303      	adds	r3, #3
 8014026:	089b      	lsrs	r3, r3, #2
 8014028:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801402a:	8afa      	ldrh	r2, [r7, #22]
 801402c:	6a3b      	ldr	r3, [r7, #32]
 801402e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014032:	691b      	ldr	r3, [r3, #16]
 8014034:	b29b      	uxth	r3, r3
 8014036:	429a      	cmp	r2, r3
 8014038:	d90a      	bls.n	8014050 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	699b      	ldr	r3, [r3, #24]
 801403e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	619a      	str	r2, [r3, #24]
        }
        break;
 8014046:	e003      	b.n	8014050 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8014048:	bf00      	nop
 801404a:	e002      	b.n	8014052 <USB_HC_StartXfer+0x25e>
        break;
 801404c:	bf00      	nop
 801404e:	e000      	b.n	8014052 <USB_HC_StartXfer+0x25e>
        break;
 8014050:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	68d9      	ldr	r1, [r3, #12]
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	785a      	ldrb	r2, [r3, #1]
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	695b      	ldr	r3, [r3, #20]
 801405e:	b29b      	uxth	r3, r3
 8014060:	2000      	movs	r0, #0
 8014062:	9000      	str	r0, [sp, #0]
 8014064:	68f8      	ldr	r0, [r7, #12]
 8014066:	f7ff fb8d 	bl	8013784 <USB_WritePacket>
  }

  return HAL_OK;
 801406a:	2300      	movs	r3, #0
}
 801406c:	4618      	mov	r0, r3
 801406e:	3728      	adds	r7, #40	; 0x28
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}
 8014074:	1ff80000 	.word	0x1ff80000

08014078 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014078:	b480      	push	{r7}
 801407a:	b085      	sub	sp, #20
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801408a:	695b      	ldr	r3, [r3, #20]
 801408c:	b29b      	uxth	r3, r3
}
 801408e:	4618      	mov	r0, r3
 8014090:	3714      	adds	r7, #20
 8014092:	46bd      	mov	sp, r7
 8014094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014098:	4770      	bx	lr

0801409a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801409a:	b480      	push	{r7}
 801409c:	b089      	sub	sp, #36	; 0x24
 801409e:	af00      	add	r7, sp, #0
 80140a0:	6078      	str	r0, [r7, #4]
 80140a2:	460b      	mov	r3, r1
 80140a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80140aa:	78fb      	ldrb	r3, [r7, #3]
 80140ac:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80140ae:	2300      	movs	r3, #0
 80140b0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	015a      	lsls	r2, r3, #5
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	4413      	add	r3, r2
 80140ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	0c9b      	lsrs	r3, r3, #18
 80140c2:	f003 0303 	and.w	r3, r3, #3
 80140c6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	015a      	lsls	r2, r3, #5
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	4413      	add	r3, r2
 80140d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	0fdb      	lsrs	r3, r3, #31
 80140d8:	f003 0301 	and.w	r3, r3, #1
 80140dc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	689b      	ldr	r3, [r3, #8]
 80140e2:	f003 0320 	and.w	r3, r3, #32
 80140e6:	2b20      	cmp	r3, #32
 80140e8:	d104      	bne.n	80140f4 <USB_HC_Halt+0x5a>
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d101      	bne.n	80140f4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80140f0:	2300      	movs	r3, #0
 80140f2:	e0e8      	b.n	80142c6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d002      	beq.n	8014100 <USB_HC_Halt+0x66>
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	2b02      	cmp	r3, #2
 80140fe:	d173      	bne.n	80141e8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	015a      	lsls	r2, r3, #5
 8014104:	69bb      	ldr	r3, [r7, #24]
 8014106:	4413      	add	r3, r2
 8014108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	697a      	ldr	r2, [r7, #20]
 8014110:	0151      	lsls	r1, r2, #5
 8014112:	69ba      	ldr	r2, [r7, #24]
 8014114:	440a      	add	r2, r1
 8014116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801411a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801411e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	689b      	ldr	r3, [r3, #8]
 8014124:	f003 0320 	and.w	r3, r3, #32
 8014128:	2b00      	cmp	r3, #0
 801412a:	f040 80cb 	bne.w	80142c4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014132:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014136:	2b00      	cmp	r3, #0
 8014138:	d143      	bne.n	80141c2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	015a      	lsls	r2, r3, #5
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	4413      	add	r3, r2
 8014142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	697a      	ldr	r2, [r7, #20]
 801414a:	0151      	lsls	r1, r2, #5
 801414c:	69ba      	ldr	r2, [r7, #24]
 801414e:	440a      	add	r2, r1
 8014150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014158:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	015a      	lsls	r2, r3, #5
 801415e:	69bb      	ldr	r3, [r7, #24]
 8014160:	4413      	add	r3, r2
 8014162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	697a      	ldr	r2, [r7, #20]
 801416a:	0151      	lsls	r1, r2, #5
 801416c:	69ba      	ldr	r2, [r7, #24]
 801416e:	440a      	add	r2, r1
 8014170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014178:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801417a:	697b      	ldr	r3, [r7, #20]
 801417c:	015a      	lsls	r2, r3, #5
 801417e:	69bb      	ldr	r3, [r7, #24]
 8014180:	4413      	add	r3, r2
 8014182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	697a      	ldr	r2, [r7, #20]
 801418a:	0151      	lsls	r1, r2, #5
 801418c:	69ba      	ldr	r2, [r7, #24]
 801418e:	440a      	add	r2, r1
 8014190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014198:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 801419a:	69fb      	ldr	r3, [r7, #28]
 801419c:	3301      	adds	r3, #1
 801419e:	61fb      	str	r3, [r7, #28]
 80141a0:	69fb      	ldr	r3, [r7, #28]
 80141a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80141a6:	d81d      	bhi.n	80141e4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	015a      	lsls	r2, r3, #5
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	4413      	add	r3, r2
 80141b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80141ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80141be:	d0ec      	beq.n	801419a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80141c0:	e080      	b.n	80142c4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	015a      	lsls	r2, r3, #5
 80141c6:	69bb      	ldr	r3, [r7, #24]
 80141c8:	4413      	add	r3, r2
 80141ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	697a      	ldr	r2, [r7, #20]
 80141d2:	0151      	lsls	r1, r2, #5
 80141d4:	69ba      	ldr	r2, [r7, #24]
 80141d6:	440a      	add	r2, r1
 80141d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80141dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80141e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80141e2:	e06f      	b.n	80142c4 <USB_HC_Halt+0x22a>
            break;
 80141e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80141e6:	e06d      	b.n	80142c4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80141e8:	697b      	ldr	r3, [r7, #20]
 80141ea:	015a      	lsls	r2, r3, #5
 80141ec:	69bb      	ldr	r3, [r7, #24]
 80141ee:	4413      	add	r3, r2
 80141f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	697a      	ldr	r2, [r7, #20]
 80141f8:	0151      	lsls	r1, r2, #5
 80141fa:	69ba      	ldr	r2, [r7, #24]
 80141fc:	440a      	add	r2, r1
 80141fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014206:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8014208:	69bb      	ldr	r3, [r7, #24]
 801420a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801420e:	691b      	ldr	r3, [r3, #16]
 8014210:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014214:	2b00      	cmp	r3, #0
 8014216:	d143      	bne.n	80142a0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	015a      	lsls	r2, r3, #5
 801421c:	69bb      	ldr	r3, [r7, #24]
 801421e:	4413      	add	r3, r2
 8014220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	697a      	ldr	r2, [r7, #20]
 8014228:	0151      	lsls	r1, r2, #5
 801422a:	69ba      	ldr	r2, [r7, #24]
 801422c:	440a      	add	r2, r1
 801422e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014236:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	015a      	lsls	r2, r3, #5
 801423c:	69bb      	ldr	r3, [r7, #24]
 801423e:	4413      	add	r3, r2
 8014240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	697a      	ldr	r2, [r7, #20]
 8014248:	0151      	lsls	r1, r2, #5
 801424a:	69ba      	ldr	r2, [r7, #24]
 801424c:	440a      	add	r2, r1
 801424e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014256:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	015a      	lsls	r2, r3, #5
 801425c:	69bb      	ldr	r3, [r7, #24]
 801425e:	4413      	add	r3, r2
 8014260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	697a      	ldr	r2, [r7, #20]
 8014268:	0151      	lsls	r1, r2, #5
 801426a:	69ba      	ldr	r2, [r7, #24]
 801426c:	440a      	add	r2, r1
 801426e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014276:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8014278:	69fb      	ldr	r3, [r7, #28]
 801427a:	3301      	adds	r3, #1
 801427c:	61fb      	str	r3, [r7, #28]
 801427e:	69fb      	ldr	r3, [r7, #28]
 8014280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014284:	d81d      	bhi.n	80142c2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	015a      	lsls	r2, r3, #5
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	4413      	add	r3, r2
 801428e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801429c:	d0ec      	beq.n	8014278 <USB_HC_Halt+0x1de>
 801429e:	e011      	b.n	80142c4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	015a      	lsls	r2, r3, #5
 80142a4:	69bb      	ldr	r3, [r7, #24]
 80142a6:	4413      	add	r3, r2
 80142a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	697a      	ldr	r2, [r7, #20]
 80142b0:	0151      	lsls	r1, r2, #5
 80142b2:	69ba      	ldr	r2, [r7, #24]
 80142b4:	440a      	add	r2, r1
 80142b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80142ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80142be:	6013      	str	r3, [r2, #0]
 80142c0:	e000      	b.n	80142c4 <USB_HC_Halt+0x22a>
          break;
 80142c2:	bf00      	nop
    }
  }

  return HAL_OK;
 80142c4:	2300      	movs	r3, #0
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3724      	adds	r7, #36	; 0x24
 80142ca:	46bd      	mov	sp, r7
 80142cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d0:	4770      	bx	lr
	...

080142d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80142d4:	b480      	push	{r7}
 80142d6:	b087      	sub	sp, #28
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	460b      	mov	r3, r1
 80142de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80142e4:	78fb      	ldrb	r3, [r7, #3]
 80142e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80142e8:	2301      	movs	r3, #1
 80142ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	04da      	lsls	r2, r3, #19
 80142f0:	4b15      	ldr	r3, [pc, #84]	; (8014348 <USB_DoPing+0x74>)
 80142f2:	4013      	ands	r3, r2
 80142f4:	693a      	ldr	r2, [r7, #16]
 80142f6:	0151      	lsls	r1, r2, #5
 80142f8:	697a      	ldr	r2, [r7, #20]
 80142fa:	440a      	add	r2, r1
 80142fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014304:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	015a      	lsls	r2, r3, #5
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	4413      	add	r3, r2
 801430e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801431c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014324:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	015a      	lsls	r2, r3, #5
 801432a:	697b      	ldr	r3, [r7, #20]
 801432c:	4413      	add	r3, r2
 801432e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014332:	461a      	mov	r2, r3
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8014338:	2300      	movs	r3, #0
}
 801433a:	4618      	mov	r0, r3
 801433c:	371c      	adds	r7, #28
 801433e:	46bd      	mov	sp, r7
 8014340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014344:	4770      	bx	lr
 8014346:	bf00      	nop
 8014348:	1ff80000 	.word	0x1ff80000

0801434c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b086      	sub	sp, #24
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8014358:	2300      	movs	r3, #0
 801435a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f7ff f98e 	bl	801367e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8014362:	2110      	movs	r1, #16
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7ff f9c5 	bl	80136f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f7ff f9e8 	bl	8013740 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8014370:	2300      	movs	r3, #0
 8014372:	613b      	str	r3, [r7, #16]
 8014374:	e01f      	b.n	80143b6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8014376:	693b      	ldr	r3, [r7, #16]
 8014378:	015a      	lsls	r2, r3, #5
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	4413      	add	r3, r2
 801437e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801438c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014394:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801439c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801439e:	693b      	ldr	r3, [r7, #16]
 80143a0:	015a      	lsls	r2, r3, #5
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	4413      	add	r3, r2
 80143a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80143aa:	461a      	mov	r2, r3
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	3301      	adds	r3, #1
 80143b4:	613b      	str	r3, [r7, #16]
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	2b0f      	cmp	r3, #15
 80143ba:	d9dc      	bls.n	8014376 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80143bc:	2300      	movs	r3, #0
 80143be:	613b      	str	r3, [r7, #16]
 80143c0:	e034      	b.n	801442c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	015a      	lsls	r2, r3, #5
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	4413      	add	r3, r2
 80143ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80143d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80143e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80143e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80143ea:	693b      	ldr	r3, [r7, #16]
 80143ec:	015a      	lsls	r2, r3, #5
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	4413      	add	r3, r2
 80143f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80143f6:	461a      	mov	r2, r3
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	3301      	adds	r3, #1
 8014400:	617b      	str	r3, [r7, #20]
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014408:	d80c      	bhi.n	8014424 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801440a:	693b      	ldr	r3, [r7, #16]
 801440c:	015a      	lsls	r2, r3, #5
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	4413      	add	r3, r2
 8014412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801441c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014420:	d0ec      	beq.n	80143fc <USB_StopHost+0xb0>
 8014422:	e000      	b.n	8014426 <USB_StopHost+0xda>
        break;
 8014424:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	3301      	adds	r3, #1
 801442a:	613b      	str	r3, [r7, #16]
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	2b0f      	cmp	r3, #15
 8014430:	d9c7      	bls.n	80143c2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014438:	461a      	mov	r2, r3
 801443a:	f04f 33ff 	mov.w	r3, #4294967295
 801443e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f04f 32ff 	mov.w	r2, #4294967295
 8014446:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7ff f907 	bl	801365c <USB_EnableGlobalInt>

  return HAL_OK;
 801444e:	2300      	movs	r3, #0
}
 8014450:	4618      	mov	r0, r3
 8014452:	3718      	adds	r7, #24
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}

08014458 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801445c:	4904      	ldr	r1, [pc, #16]	; (8014470 <MX_FATFS_Init+0x18>)
 801445e:	4805      	ldr	r0, [pc, #20]	; (8014474 <MX_FATFS_Init+0x1c>)
 8014460:	f002 fbf0 	bl	8016c44 <FATFS_LinkDriver>
 8014464:	4603      	mov	r3, r0
 8014466:	461a      	mov	r2, r3
 8014468:	4b03      	ldr	r3, [pc, #12]	; (8014478 <MX_FATFS_Init+0x20>)
 801446a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801446c:	bf00      	nop
 801446e:	bd80      	pop	{r7, pc}
 8014470:	2004a4c4 	.word	0x2004a4c4
 8014474:	0801f14c 	.word	0x0801f14c
 8014478:	2004a4c0 	.word	0x2004a4c0

0801447c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014482:	2300      	movs	r3, #0
 8014484:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014486:	f000 f87b 	bl	8014580 <BSP_SD_IsDetected>
 801448a:	4603      	mov	r3, r0
 801448c:	2b01      	cmp	r3, #1
 801448e:	d001      	beq.n	8014494 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014490:	2302      	movs	r3, #2
 8014492:	e012      	b.n	80144ba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8014494:	480b      	ldr	r0, [pc, #44]	; (80144c4 <BSP_SD_Init+0x48>)
 8014496:	f7fb fae4 	bl	800fa62 <HAL_SD_Init>
 801449a:	4603      	mov	r3, r0
 801449c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801449e:	79fb      	ldrb	r3, [r7, #7]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d109      	bne.n	80144b8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80144a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80144a8:	4806      	ldr	r0, [pc, #24]	; (80144c4 <BSP_SD_Init+0x48>)
 80144aa:	f7fb ff33 	bl	8010314 <HAL_SD_ConfigWideBusOperation>
 80144ae:	4603      	mov	r3, r0
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d001      	beq.n	80144b8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80144b4:	2301      	movs	r3, #1
 80144b6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80144b8:	79fb      	ldrb	r3, [r7, #7]
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3708      	adds	r7, #8
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	2000a2e4 	.word	0x2000a2e4

080144c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b086      	sub	sp, #24
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	60f8      	str	r0, [r7, #12]
 80144d0:	60b9      	str	r1, [r7, #8]
 80144d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80144d4:	2300      	movs	r3, #0
 80144d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	68ba      	ldr	r2, [r7, #8]
 80144dc:	68f9      	ldr	r1, [r7, #12]
 80144de:	4806      	ldr	r0, [pc, #24]	; (80144f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80144e0:	f7fb fb76 	bl	800fbd0 <HAL_SD_ReadBlocks_DMA>
 80144e4:	4603      	mov	r3, r0
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d001      	beq.n	80144ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80144ea:	2301      	movs	r3, #1
 80144ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80144ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3718      	adds	r7, #24
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	2000a2e4 	.word	0x2000a2e4

080144fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b086      	sub	sp, #24
 8014500:	af00      	add	r7, sp, #0
 8014502:	60f8      	str	r0, [r7, #12]
 8014504:	60b9      	str	r1, [r7, #8]
 8014506:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014508:	2300      	movs	r3, #0
 801450a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	68ba      	ldr	r2, [r7, #8]
 8014510:	68f9      	ldr	r1, [r7, #12]
 8014512:	4806      	ldr	r0, [pc, #24]	; (801452c <BSP_SD_WriteBlocks_DMA+0x30>)
 8014514:	f7fb fc3e 	bl	800fd94 <HAL_SD_WriteBlocks_DMA>
 8014518:	4603      	mov	r3, r0
 801451a:	2b00      	cmp	r3, #0
 801451c:	d001      	beq.n	8014522 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801451e:	2301      	movs	r3, #1
 8014520:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014522:	7dfb      	ldrb	r3, [r7, #23]
}
 8014524:	4618      	mov	r0, r3
 8014526:	3718      	adds	r7, #24
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}
 801452c:	2000a2e4 	.word	0x2000a2e4

08014530 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014534:	4805      	ldr	r0, [pc, #20]	; (801454c <BSP_SD_GetCardState+0x1c>)
 8014536:	f7fb ff87 	bl	8010448 <HAL_SD_GetCardState>
 801453a:	4603      	mov	r3, r0
 801453c:	2b04      	cmp	r3, #4
 801453e:	bf14      	ite	ne
 8014540:	2301      	movne	r3, #1
 8014542:	2300      	moveq	r3, #0
 8014544:	b2db      	uxtb	r3, r3
}
 8014546:	4618      	mov	r0, r3
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	2000a2e4 	.word	0x2000a2e4

08014550 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8014558:	6879      	ldr	r1, [r7, #4]
 801455a:	4803      	ldr	r0, [pc, #12]	; (8014568 <BSP_SD_GetCardInfo+0x18>)
 801455c:	f7fb feae 	bl	80102bc <HAL_SD_GetCardInfo>
}
 8014560:	bf00      	nop
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	2000a2e4 	.word	0x2000a2e4

0801456c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014574:	f000 f9b2 	bl	80148dc <BSP_SD_ReadCpltCallback>
}
 8014578:	bf00      	nop
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014586:	2301      	movs	r3, #1
 8014588:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801458a:	f000 f80b 	bl	80145a4 <BSP_PlatformIsDetected>
 801458e:	4603      	mov	r3, r0
 8014590:	2b00      	cmp	r3, #0
 8014592:	d101      	bne.n	8014598 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014594:	2300      	movs	r3, #0
 8014596:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014598:	79fb      	ldrb	r3, [r7, #7]
 801459a:	b2db      	uxtb	r3, r3
}
 801459c:	4618      	mov	r0, r3
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80145aa:	2301      	movs	r3, #1
 80145ac:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80145ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80145b2:	4806      	ldr	r0, [pc, #24]	; (80145cc <BSP_PlatformIsDetected+0x28>)
 80145b4:	f7f5 fa4c 	bl	8009a50 <HAL_GPIO_ReadPin>
 80145b8:	4603      	mov	r3, r0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d001      	beq.n	80145c2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80145be:	2300      	movs	r3, #0
 80145c0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80145c2:	79fb      	ldrb	r3, [r7, #7]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3708      	adds	r7, #8
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	40020800 	.word	0x40020800

080145d0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80145d8:	f002 fb80 	bl	8016cdc <osKernelSysTick>
 80145dc:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80145de:	e006      	b.n	80145ee <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80145e0:	f7ff ffa6 	bl	8014530 <BSP_SD_GetCardState>
 80145e4:	4603      	mov	r3, r0
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d101      	bne.n	80145ee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80145ea:	2300      	movs	r3, #0
 80145ec:	e009      	b.n	8014602 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80145ee:	f002 fb75 	bl	8016cdc <osKernelSysTick>
 80145f2:	4602      	mov	r2, r0
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	1ad3      	subs	r3, r2, r3
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d8f0      	bhi.n	80145e0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80145fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014602:	4618      	mov	r0, r3
 8014604:	3710      	adds	r7, #16
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
	...

0801460c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	4603      	mov	r3, r0
 8014614:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014616:	4b0b      	ldr	r3, [pc, #44]	; (8014644 <SD_CheckStatus+0x38>)
 8014618:	2201      	movs	r2, #1
 801461a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801461c:	f7ff ff88 	bl	8014530 <BSP_SD_GetCardState>
 8014620:	4603      	mov	r3, r0
 8014622:	2b00      	cmp	r3, #0
 8014624:	d107      	bne.n	8014636 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014626:	4b07      	ldr	r3, [pc, #28]	; (8014644 <SD_CheckStatus+0x38>)
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	b2db      	uxtb	r3, r3
 801462c:	f023 0301 	bic.w	r3, r3, #1
 8014630:	b2da      	uxtb	r2, r3
 8014632:	4b04      	ldr	r3, [pc, #16]	; (8014644 <SD_CheckStatus+0x38>)
 8014634:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014636:	4b03      	ldr	r3, [pc, #12]	; (8014644 <SD_CheckStatus+0x38>)
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	b2db      	uxtb	r3, r3
}
 801463c:	4618      	mov	r0, r3
 801463e:	3708      	adds	r7, #8
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}
 8014644:	20000039 	.word	0x20000039

08014648 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014648:	b590      	push	{r4, r7, lr}
 801464a:	b087      	sub	sp, #28
 801464c:	af00      	add	r7, sp, #0
 801464e:	4603      	mov	r3, r0
 8014650:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8014652:	4b20      	ldr	r3, [pc, #128]	; (80146d4 <SD_initialize+0x8c>)
 8014654:	2201      	movs	r2, #1
 8014656:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8014658:	f002 fb34 	bl	8016cc4 <osKernelRunning>
 801465c:	4603      	mov	r3, r0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d030      	beq.n	80146c4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8014662:	f7ff ff0b 	bl	801447c <BSP_SD_Init>
 8014666:	4603      	mov	r3, r0
 8014668:	2b00      	cmp	r3, #0
 801466a:	d107      	bne.n	801467c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 801466c:	79fb      	ldrb	r3, [r7, #7]
 801466e:	4618      	mov	r0, r3
 8014670:	f7ff ffcc 	bl	801460c <SD_CheckStatus>
 8014674:	4603      	mov	r3, r0
 8014676:	461a      	mov	r2, r3
 8014678:	4b16      	ldr	r3, [pc, #88]	; (80146d4 <SD_initialize+0x8c>)
 801467a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801467c:	4b15      	ldr	r3, [pc, #84]	; (80146d4 <SD_initialize+0x8c>)
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	b2db      	uxtb	r3, r3
 8014682:	2b01      	cmp	r3, #1
 8014684:	d01e      	beq.n	80146c4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8014686:	4b14      	ldr	r3, [pc, #80]	; (80146d8 <SD_initialize+0x90>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d10e      	bne.n	80146ac <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 801468e:	4b13      	ldr	r3, [pc, #76]	; (80146dc <SD_initialize+0x94>)
 8014690:	f107 0408 	add.w	r4, r7, #8
 8014694:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 801469a:	f107 0308 	add.w	r3, r7, #8
 801469e:	2100      	movs	r1, #0
 80146a0:	4618      	mov	r0, r3
 80146a2:	f002 fc17 	bl	8016ed4 <osMessageCreate>
 80146a6:	4603      	mov	r3, r0
 80146a8:	4a0b      	ldr	r2, [pc, #44]	; (80146d8 <SD_initialize+0x90>)
 80146aa:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80146ac:	4b0a      	ldr	r3, [pc, #40]	; (80146d8 <SD_initialize+0x90>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d107      	bne.n	80146c4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80146b4:	4b07      	ldr	r3, [pc, #28]	; (80146d4 <SD_initialize+0x8c>)
 80146b6:	781b      	ldrb	r3, [r3, #0]
 80146b8:	b2db      	uxtb	r3, r3
 80146ba:	f043 0301 	orr.w	r3, r3, #1
 80146be:	b2da      	uxtb	r2, r3
 80146c0:	4b04      	ldr	r3, [pc, #16]	; (80146d4 <SD_initialize+0x8c>)
 80146c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80146c4:	4b03      	ldr	r3, [pc, #12]	; (80146d4 <SD_initialize+0x8c>)
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	b2db      	uxtb	r3, r3
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	371c      	adds	r7, #28
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd90      	pop	{r4, r7, pc}
 80146d2:	bf00      	nop
 80146d4:	20000039 	.word	0x20000039
 80146d8:	200003d0 	.word	0x200003d0
 80146dc:	0801c5cc 	.word	0x0801c5cc

080146e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	4603      	mov	r3, r0
 80146e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80146ea:	79fb      	ldrb	r3, [r7, #7]
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7ff ff8d 	bl	801460c <SD_CheckStatus>
 80146f2:	4603      	mov	r3, r0
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3708      	adds	r7, #8
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b08a      	sub	sp, #40	; 0x28
 8014700:	af00      	add	r7, sp, #0
 8014702:	60b9      	str	r1, [r7, #8]
 8014704:	607a      	str	r2, [r7, #4]
 8014706:	603b      	str	r3, [r7, #0]
 8014708:	4603      	mov	r3, r0
 801470a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801470c:	2301      	movs	r3, #1
 801470e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014712:	f247 5030 	movw	r0, #30000	; 0x7530
 8014716:	f7ff ff5b 	bl	80145d0 <SD_CheckStatusWithTimeout>
 801471a:	4603      	mov	r3, r0
 801471c:	2b00      	cmp	r3, #0
 801471e:	da02      	bge.n	8014726 <SD_read+0x2a>
  {
    return res;
 8014720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014724:	e032      	b.n	801478c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8014726:	683a      	ldr	r2, [r7, #0]
 8014728:	6879      	ldr	r1, [r7, #4]
 801472a:	68b8      	ldr	r0, [r7, #8]
 801472c:	f7ff fecc 	bl	80144c8 <BSP_SD_ReadBlocks_DMA>
 8014730:	4603      	mov	r3, r0
 8014732:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8014736:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801473a:	2b00      	cmp	r3, #0
 801473c:	d124      	bne.n	8014788 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801473e:	4b15      	ldr	r3, [pc, #84]	; (8014794 <SD_read+0x98>)
 8014740:	6819      	ldr	r1, [r3, #0]
 8014742:	f107 0314 	add.w	r3, r7, #20
 8014746:	f247 5230 	movw	r2, #30000	; 0x7530
 801474a:	4618      	mov	r0, r3
 801474c:	f002 fc2a 	bl	8016fa4 <osMessageGet>

    if (event.status == osEventMessage)
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	2b10      	cmp	r3, #16
 8014754:	d118      	bne.n	8014788 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	2b01      	cmp	r3, #1
 801475a:	d115      	bne.n	8014788 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 801475c:	f002 fabe 	bl	8016cdc <osKernelSysTick>
 8014760:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8014762:	e008      	b.n	8014776 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014764:	f7ff fee4 	bl	8014530 <BSP_SD_GetCardState>
 8014768:	4603      	mov	r3, r0
 801476a:	2b00      	cmp	r3, #0
 801476c:	d103      	bne.n	8014776 <SD_read+0x7a>
              {
                res = RES_OK;
 801476e:	2300      	movs	r3, #0
 8014770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8014774:	e008      	b.n	8014788 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8014776:	f002 fab1 	bl	8016cdc <osKernelSysTick>
 801477a:	4602      	mov	r2, r0
 801477c:	6a3b      	ldr	r3, [r7, #32]
 801477e:	1ad3      	subs	r3, r2, r3
 8014780:	f247 522f 	movw	r2, #29999	; 0x752f
 8014784:	4293      	cmp	r3, r2
 8014786:	d9ed      	bls.n	8014764 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8014788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801478c:	4618      	mov	r0, r3
 801478e:	3728      	adds	r7, #40	; 0x28
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	200003d0 	.word	0x200003d0

08014798 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b08a      	sub	sp, #40	; 0x28
 801479c:	af00      	add	r7, sp, #0
 801479e:	60b9      	str	r1, [r7, #8]
 80147a0:	607a      	str	r2, [r7, #4]
 80147a2:	603b      	str	r3, [r7, #0]
 80147a4:	4603      	mov	r3, r0
 80147a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80147a8:	2301      	movs	r3, #1
 80147aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80147ae:	f247 5030 	movw	r0, #30000	; 0x7530
 80147b2:	f7ff ff0d 	bl	80145d0 <SD_CheckStatusWithTimeout>
 80147b6:	4603      	mov	r3, r0
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	da02      	bge.n	80147c2 <SD_write+0x2a>
  {
    return res;
 80147bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147c0:	e02e      	b.n	8014820 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80147c2:	683a      	ldr	r2, [r7, #0]
 80147c4:	6879      	ldr	r1, [r7, #4]
 80147c6:	68b8      	ldr	r0, [r7, #8]
 80147c8:	f7ff fe98 	bl	80144fc <BSP_SD_WriteBlocks_DMA>
 80147cc:	4603      	mov	r3, r0
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d124      	bne.n	801481c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80147d2:	4b15      	ldr	r3, [pc, #84]	; (8014828 <SD_write+0x90>)
 80147d4:	6819      	ldr	r1, [r3, #0]
 80147d6:	f107 0314 	add.w	r3, r7, #20
 80147da:	f247 5230 	movw	r2, #30000	; 0x7530
 80147de:	4618      	mov	r0, r3
 80147e0:	f002 fbe0 	bl	8016fa4 <osMessageGet>

    if (event.status == osEventMessage)
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	2b10      	cmp	r3, #16
 80147e8:	d118      	bne.n	801481c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80147ea:	69bb      	ldr	r3, [r7, #24]
 80147ec:	2b02      	cmp	r3, #2
 80147ee:	d115      	bne.n	801481c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80147f0:	f002 fa74 	bl	8016cdc <osKernelSysTick>
 80147f4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80147f6:	e008      	b.n	801480a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80147f8:	f7ff fe9a 	bl	8014530 <BSP_SD_GetCardState>
 80147fc:	4603      	mov	r3, r0
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d103      	bne.n	801480a <SD_write+0x72>
          {
            res = RES_OK;
 8014802:	2300      	movs	r3, #0
 8014804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8014808:	e008      	b.n	801481c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801480a:	f002 fa67 	bl	8016cdc <osKernelSysTick>
 801480e:	4602      	mov	r2, r0
 8014810:	6a3b      	ldr	r3, [r7, #32]
 8014812:	1ad3      	subs	r3, r2, r3
 8014814:	f247 522f 	movw	r2, #29999	; 0x752f
 8014818:	4293      	cmp	r3, r2
 801481a:	d9ed      	bls.n	80147f8 <SD_write+0x60>
    }

  }
#endif

  return res;
 801481c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014820:	4618      	mov	r0, r3
 8014822:	3728      	adds	r7, #40	; 0x28
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	200003d0 	.word	0x200003d0

0801482c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b08c      	sub	sp, #48	; 0x30
 8014830:	af00      	add	r7, sp, #0
 8014832:	4603      	mov	r3, r0
 8014834:	603a      	str	r2, [r7, #0]
 8014836:	71fb      	strb	r3, [r7, #7]
 8014838:	460b      	mov	r3, r1
 801483a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801483c:	2301      	movs	r3, #1
 801483e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014842:	4b25      	ldr	r3, [pc, #148]	; (80148d8 <SD_ioctl+0xac>)
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	b2db      	uxtb	r3, r3
 8014848:	f003 0301 	and.w	r3, r3, #1
 801484c:	2b00      	cmp	r3, #0
 801484e:	d001      	beq.n	8014854 <SD_ioctl+0x28>
 8014850:	2303      	movs	r3, #3
 8014852:	e03c      	b.n	80148ce <SD_ioctl+0xa2>

  switch (cmd)
 8014854:	79bb      	ldrb	r3, [r7, #6]
 8014856:	2b03      	cmp	r3, #3
 8014858:	d834      	bhi.n	80148c4 <SD_ioctl+0x98>
 801485a:	a201      	add	r2, pc, #4	; (adr r2, 8014860 <SD_ioctl+0x34>)
 801485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014860:	08014871 	.word	0x08014871
 8014864:	08014879 	.word	0x08014879
 8014868:	08014891 	.word	0x08014891
 801486c:	080148ab 	.word	0x080148ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014870:	2300      	movs	r3, #0
 8014872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014876:	e028      	b.n	80148ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014878:	f107 030c 	add.w	r3, r7, #12
 801487c:	4618      	mov	r0, r3
 801487e:	f7ff fe67 	bl	8014550 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014888:	2300      	movs	r3, #0
 801488a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801488e:	e01c      	b.n	80148ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014890:	f107 030c 	add.w	r3, r7, #12
 8014894:	4618      	mov	r0, r3
 8014896:	f7ff fe5b 	bl	8014550 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801489c:	b29a      	uxth	r2, r3
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80148a2:	2300      	movs	r3, #0
 80148a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148a8:	e00f      	b.n	80148ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80148aa:	f107 030c 	add.w	r3, r7, #12
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7ff fe4e 	bl	8014550 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80148b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b6:	0a5a      	lsrs	r2, r3, #9
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80148bc:	2300      	movs	r3, #0
 80148be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148c2:	e002      	b.n	80148ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80148c4:	2304      	movs	r3, #4
 80148c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80148ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	3730      	adds	r7, #48	; 0x30
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
 80148d6:	bf00      	nop
 80148d8:	20000039 	.word	0x20000039

080148dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80148e0:	4b04      	ldr	r3, [pc, #16]	; (80148f4 <BSP_SD_ReadCpltCallback+0x18>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2200      	movs	r2, #0
 80148e6:	2101      	movs	r1, #1
 80148e8:	4618      	mov	r0, r3
 80148ea:	f002 fb1b 	bl	8016f24 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80148ee:	bf00      	nop
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	200003d0 	.word	0x200003d0

080148f8 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80148f8:	b480      	push	{r7}
 80148fa:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80148fc:	bf00      	nop
 80148fe:	46bd      	mov	sp, r7
 8014900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014904:	4770      	bx	lr

08014906 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8014906:	b590      	push	{r4, r7, lr}
 8014908:	b089      	sub	sp, #36	; 0x24
 801490a:	af04      	add	r7, sp, #16
 801490c:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 801490e:	2301      	movs	r3, #1
 8014910:	2202      	movs	r2, #2
 8014912:	2102      	movs	r1, #2
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f000 fcb9 	bl	801528c <USBH_FindInterface>
 801491a:	4603      	mov	r3, r0
 801491c:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801491e:	7bfb      	ldrb	r3, [r7, #15]
 8014920:	2bff      	cmp	r3, #255	; 0xff
 8014922:	d002      	beq.n	801492a <USBH_CDC_InterfaceInit+0x24>
 8014924:	7bfb      	ldrb	r3, [r7, #15]
 8014926:	2b01      	cmp	r3, #1
 8014928:	d901      	bls.n	801492e <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801492a:	2302      	movs	r3, #2
 801492c:	e13d      	b.n	8014baa <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 801492e:	7bfb      	ldrb	r3, [r7, #15]
 8014930:	4619      	mov	r1, r3
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f000 fc8e 	bl	8015254 <USBH_SelectInterface>
 8014938:	4603      	mov	r3, r0
 801493a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801493c:	7bbb      	ldrb	r3, [r7, #14]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d001      	beq.n	8014946 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8014942:	2302      	movs	r3, #2
 8014944:	e131      	b.n	8014baa <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 801494c:	2050      	movs	r0, #80	; 0x50
 801494e:	f006 fb35 	bl	801afbc <malloc>
 8014952:	4603      	mov	r3, r0
 8014954:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801495c:	69db      	ldr	r3, [r3, #28]
 801495e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d101      	bne.n	801496a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8014966:	2302      	movs	r3, #2
 8014968:	e11f      	b.n	8014baa <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 801496a:	2250      	movs	r2, #80	; 0x50
 801496c:	2100      	movs	r1, #0
 801496e:	68b8      	ldr	r0, [r7, #8]
 8014970:	f006 fb42 	bl	801aff8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8014974:	7bfb      	ldrb	r3, [r7, #15]
 8014976:	687a      	ldr	r2, [r7, #4]
 8014978:	211a      	movs	r1, #26
 801497a:	fb01 f303 	mul.w	r3, r1, r3
 801497e:	4413      	add	r3, r2
 8014980:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	b25b      	sxtb	r3, r3
 8014988:	2b00      	cmp	r3, #0
 801498a:	da15      	bge.n	80149b8 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801498c:	7bfb      	ldrb	r3, [r7, #15]
 801498e:	687a      	ldr	r2, [r7, #4]
 8014990:	211a      	movs	r1, #26
 8014992:	fb01 f303 	mul.w	r3, r1, r3
 8014996:	4413      	add	r3, r2
 8014998:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801499c:	781a      	ldrb	r2, [r3, #0]
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80149a2:	7bfb      	ldrb	r3, [r7, #15]
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	211a      	movs	r1, #26
 80149a8:	fb01 f303 	mul.w	r3, r1, r3
 80149ac:	4413      	add	r3, r2
 80149ae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80149b2:	881a      	ldrh	r2, [r3, #0]
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	785b      	ldrb	r3, [r3, #1]
 80149bc:	4619      	mov	r1, r3
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f002 f891 	bl	8016ae6 <USBH_AllocPipe>
 80149c4:	4603      	mov	r3, r0
 80149c6:	461a      	mov	r2, r3
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	7819      	ldrb	r1, [r3, #0]
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	7858      	ldrb	r0, [r3, #1]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80149e0:	68ba      	ldr	r2, [r7, #8]
 80149e2:	8952      	ldrh	r2, [r2, #10]
 80149e4:	9202      	str	r2, [sp, #8]
 80149e6:	2203      	movs	r2, #3
 80149e8:	9201      	str	r2, [sp, #4]
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	4623      	mov	r3, r4
 80149ee:	4602      	mov	r2, r0
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f002 f849 	bl	8016a88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	2200      	movs	r2, #0
 80149fc:	4619      	mov	r1, r3
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f005 f93c 	bl	8019c7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8014a04:	2300      	movs	r3, #0
 8014a06:	2200      	movs	r2, #0
 8014a08:	210a      	movs	r1, #10
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f000 fc3e 	bl	801528c <USBH_FindInterface>
 8014a10:	4603      	mov	r3, r0
 8014a12:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8014a14:	7bfb      	ldrb	r3, [r7, #15]
 8014a16:	2bff      	cmp	r3, #255	; 0xff
 8014a18:	d002      	beq.n	8014a20 <USBH_CDC_InterfaceInit+0x11a>
 8014a1a:	7bfb      	ldrb	r3, [r7, #15]
 8014a1c:	2b01      	cmp	r3, #1
 8014a1e:	d901      	bls.n	8014a24 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8014a20:	2302      	movs	r3, #2
 8014a22:	e0c2      	b.n	8014baa <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8014a24:	7bfb      	ldrb	r3, [r7, #15]
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	211a      	movs	r1, #26
 8014a2a:	fb01 f303 	mul.w	r3, r1, r3
 8014a2e:	4413      	add	r3, r2
 8014a30:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	b25b      	sxtb	r3, r3
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	da16      	bge.n	8014a6a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014a3c:	7bfb      	ldrb	r3, [r7, #15]
 8014a3e:	687a      	ldr	r2, [r7, #4]
 8014a40:	211a      	movs	r1, #26
 8014a42:	fb01 f303 	mul.w	r3, r1, r3
 8014a46:	4413      	add	r3, r2
 8014a48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014a4c:	781a      	ldrb	r2, [r3, #0]
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014a52:	7bfb      	ldrb	r3, [r7, #15]
 8014a54:	687a      	ldr	r2, [r7, #4]
 8014a56:	211a      	movs	r1, #26
 8014a58:	fb01 f303 	mul.w	r3, r1, r3
 8014a5c:	4413      	add	r3, r2
 8014a5e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8014a62:	881a      	ldrh	r2, [r3, #0]
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	835a      	strh	r2, [r3, #26]
 8014a68:	e015      	b.n	8014a96 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014a6a:	7bfb      	ldrb	r3, [r7, #15]
 8014a6c:	687a      	ldr	r2, [r7, #4]
 8014a6e:	211a      	movs	r1, #26
 8014a70:	fb01 f303 	mul.w	r3, r1, r3
 8014a74:	4413      	add	r3, r2
 8014a76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014a7a:	781a      	ldrb	r2, [r3, #0]
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014a80:	7bfb      	ldrb	r3, [r7, #15]
 8014a82:	687a      	ldr	r2, [r7, #4]
 8014a84:	211a      	movs	r1, #26
 8014a86:	fb01 f303 	mul.w	r3, r1, r3
 8014a8a:	4413      	add	r3, r2
 8014a8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8014a90:	881a      	ldrh	r2, [r3, #0]
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8014a96:	7bfb      	ldrb	r3, [r7, #15]
 8014a98:	687a      	ldr	r2, [r7, #4]
 8014a9a:	211a      	movs	r1, #26
 8014a9c:	fb01 f303 	mul.w	r3, r1, r3
 8014aa0:	4413      	add	r3, r2
 8014aa2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	b25b      	sxtb	r3, r3
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	da16      	bge.n	8014adc <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8014aae:	7bfb      	ldrb	r3, [r7, #15]
 8014ab0:	687a      	ldr	r2, [r7, #4]
 8014ab2:	211a      	movs	r1, #26
 8014ab4:	fb01 f303 	mul.w	r3, r1, r3
 8014ab8:	4413      	add	r3, r2
 8014aba:	f203 3356 	addw	r3, r3, #854	; 0x356
 8014abe:	781a      	ldrb	r2, [r3, #0]
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8014ac4:	7bfb      	ldrb	r3, [r7, #15]
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	211a      	movs	r1, #26
 8014aca:	fb01 f303 	mul.w	r3, r1, r3
 8014ace:	4413      	add	r3, r2
 8014ad0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8014ad4:	881a      	ldrh	r2, [r3, #0]
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	835a      	strh	r2, [r3, #26]
 8014ada:	e015      	b.n	8014b08 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8014adc:	7bfb      	ldrb	r3, [r7, #15]
 8014ade:	687a      	ldr	r2, [r7, #4]
 8014ae0:	211a      	movs	r1, #26
 8014ae2:	fb01 f303 	mul.w	r3, r1, r3
 8014ae6:	4413      	add	r3, r2
 8014ae8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8014aec:	781a      	ldrb	r2, [r3, #0]
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8014af2:	7bfb      	ldrb	r3, [r7, #15]
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	211a      	movs	r1, #26
 8014af8:	fb01 f303 	mul.w	r3, r1, r3
 8014afc:	4413      	add	r3, r2
 8014afe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8014b02:	881a      	ldrh	r2, [r3, #0]
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	7b9b      	ldrb	r3, [r3, #14]
 8014b0c:	4619      	mov	r1, r3
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f001 ffe9 	bl	8016ae6 <USBH_AllocPipe>
 8014b14:	4603      	mov	r3, r0
 8014b16:	461a      	mov	r2, r3
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8014b1c:	68bb      	ldr	r3, [r7, #8]
 8014b1e:	7bdb      	ldrb	r3, [r3, #15]
 8014b20:	4619      	mov	r1, r3
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f001 ffdf 	bl	8016ae6 <USBH_AllocPipe>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	7b59      	ldrb	r1, [r3, #13]
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	7b98      	ldrb	r0, [r3, #14]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014b44:	68ba      	ldr	r2, [r7, #8]
 8014b46:	8b12      	ldrh	r2, [r2, #24]
 8014b48:	9202      	str	r2, [sp, #8]
 8014b4a:	2202      	movs	r2, #2
 8014b4c:	9201      	str	r2, [sp, #4]
 8014b4e:	9300      	str	r3, [sp, #0]
 8014b50:	4623      	mov	r3, r4
 8014b52:	4602      	mov	r2, r0
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f001 ff97 	bl	8016a88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	7b19      	ldrb	r1, [r3, #12]
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	7bd8      	ldrb	r0, [r3, #15]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014b6e:	68ba      	ldr	r2, [r7, #8]
 8014b70:	8b52      	ldrh	r2, [r2, #26]
 8014b72:	9202      	str	r2, [sp, #8]
 8014b74:	2202      	movs	r2, #2
 8014b76:	9201      	str	r2, [sp, #4]
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	4623      	mov	r3, r4
 8014b7c:	4602      	mov	r2, r0
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f001 ff82 	bl	8016a88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	2200      	movs	r2, #0
 8014b88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	7b5b      	ldrb	r3, [r3, #13]
 8014b90:	2200      	movs	r2, #0
 8014b92:	4619      	mov	r1, r3
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f005 f871 	bl	8019c7c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	7b1b      	ldrb	r3, [r3, #12]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	4619      	mov	r1, r3
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f005 f86a 	bl	8019c7c <USBH_LL_SetToggle>

  return USBH_OK;
 8014ba8:	2300      	movs	r3, #0
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3714      	adds	r7, #20
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd90      	pop	{r4, r7, pc}

08014bb2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8014bb2:	b580      	push	{r7, lr}
 8014bb4:	b084      	sub	sp, #16
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014bc0:	69db      	ldr	r3, [r3, #28]
 8014bc2:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	781b      	ldrb	r3, [r3, #0]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d00e      	beq.n	8014bea <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	781b      	ldrb	r3, [r3, #0]
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	6878      	ldr	r0, [r7, #4]
 8014bd4:	f001 ff77 	bl	8016ac6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	4619      	mov	r1, r3
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f001 ffa2 	bl	8016b28 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	2200      	movs	r2, #0
 8014be8:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	7b1b      	ldrb	r3, [r3, #12]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d00e      	beq.n	8014c10 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	7b1b      	ldrb	r3, [r3, #12]
 8014bf6:	4619      	mov	r1, r3
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f001 ff64 	bl	8016ac6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	7b1b      	ldrb	r3, [r3, #12]
 8014c02:	4619      	mov	r1, r3
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f001 ff8f 	bl	8016b28 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	7b5b      	ldrb	r3, [r3, #13]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d00e      	beq.n	8014c36 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	7b5b      	ldrb	r3, [r3, #13]
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f001 ff51 	bl	8016ac6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	7b5b      	ldrb	r3, [r3, #13]
 8014c28:	4619      	mov	r1, r3
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f001 ff7c 	bl	8016b28 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	2200      	movs	r2, #0
 8014c34:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014c3c:	69db      	ldr	r3, [r3, #28]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d00b      	beq.n	8014c5a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014c48:	69db      	ldr	r3, [r3, #28]
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f006 f9be 	bl	801afcc <free>
    phost->pActiveClass->pData = 0U;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014c56:	2200      	movs	r2, #0
 8014c58:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8014c5a:	2300      	movs	r3, #0
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3710      	adds	r7, #16
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}

08014c64 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014c72:	69db      	ldr	r3, [r3, #28]
 8014c74:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	3340      	adds	r3, #64	; 0x40
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f000 f8b2 	bl	8014de6 <GetLineCoding>
 8014c82:	4603      	mov	r3, r0
 8014c84:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8014c86:	7afb      	ldrb	r3, [r7, #11]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d105      	bne.n	8014c98 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014c92:	2102      	movs	r1, #2
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8014c98:	7afb      	ldrb	r3, [r7, #11]
}
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	3710      	adds	r7, #16
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}
	...

08014ca4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8014cac:	2301      	movs	r3, #1
 8014cae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014cba:	69db      	ldr	r3, [r3, #28]
 8014cbc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8014cc4:	2b04      	cmp	r3, #4
 8014cc6:	d877      	bhi.n	8014db8 <USBH_CDC_Process+0x114>
 8014cc8:	a201      	add	r2, pc, #4	; (adr r2, 8014cd0 <USBH_CDC_Process+0x2c>)
 8014cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cce:	bf00      	nop
 8014cd0:	08014ce5 	.word	0x08014ce5
 8014cd4:	08014ceb 	.word	0x08014ceb
 8014cd8:	08014d1b 	.word	0x08014d1b
 8014cdc:	08014d8f 	.word	0x08014d8f
 8014ce0:	08014d9d 	.word	0x08014d9d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8014ce8:	e06d      	b.n	8014dc6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014cee:	4619      	mov	r1, r3
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f000 f897 	bl	8014e24 <SetLineCoding>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014cfa:	7bbb      	ldrb	r3, [r7, #14]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d104      	bne.n	8014d0a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	2202      	movs	r2, #2
 8014d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8014d08:	e058      	b.n	8014dbc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8014d0a:	7bbb      	ldrb	r3, [r7, #14]
 8014d0c:	2b01      	cmp	r3, #1
 8014d0e:	d055      	beq.n	8014dbc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	2204      	movs	r2, #4
 8014d14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8014d18:	e050      	b.n	8014dbc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	3340      	adds	r3, #64	; 0x40
 8014d1e:	4619      	mov	r1, r3
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f000 f860 	bl	8014de6 <GetLineCoding>
 8014d26:	4603      	mov	r3, r0
 8014d28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014d2a:	7bbb      	ldrb	r3, [r7, #14]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d126      	bne.n	8014d7e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	2200      	movs	r2, #0
 8014d34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d42:	791b      	ldrb	r3, [r3, #4]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d13b      	bne.n	8014dc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d52:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d133      	bne.n	8014dc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d62:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d12b      	bne.n	8014dc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014d6c:	68bb      	ldr	r3, [r7, #8]
 8014d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d70:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d124      	bne.n	8014dc0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f000 f982 	bl	8015080 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8014d7c:	e020      	b.n	8014dc0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8014d7e:	7bbb      	ldrb	r3, [r7, #14]
 8014d80:	2b01      	cmp	r3, #1
 8014d82:	d01d      	beq.n	8014dc0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	2204      	movs	r2, #4
 8014d88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8014d8c:	e018      	b.n	8014dc0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f000 f867 	bl	8014e62 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f000 f8f6 	bl	8014f86 <CDC_ProcessReception>
      break;
 8014d9a:	e014      	b.n	8014dc6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f001 f951 	bl	8016046 <USBH_ClrFeature>
 8014da4:	4603      	mov	r3, r0
 8014da6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014da8:	7bbb      	ldrb	r3, [r7, #14]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d10a      	bne.n	8014dc4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	2200      	movs	r2, #0
 8014db2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8014db6:	e005      	b.n	8014dc4 <USBH_CDC_Process+0x120>

    default:
      break;
 8014db8:	bf00      	nop
 8014dba:	e004      	b.n	8014dc6 <USBH_CDC_Process+0x122>
      break;
 8014dbc:	bf00      	nop
 8014dbe:	e002      	b.n	8014dc6 <USBH_CDC_Process+0x122>
      break;
 8014dc0:	bf00      	nop
 8014dc2:	e000      	b.n	8014dc6 <USBH_CDC_Process+0x122>
      break;
 8014dc4:	bf00      	nop

  }

  return status;
 8014dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3710      	adds	r7, #16
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b083      	sub	sp, #12
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8014dd8:	2300      	movs	r3, #0
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	370c      	adds	r7, #12
 8014dde:	46bd      	mov	sp, r7
 8014de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de4:	4770      	bx	lr

08014de6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8014de6:	b580      	push	{r7, lr}
 8014de8:	b082      	sub	sp, #8
 8014dea:	af00      	add	r7, sp, #0
 8014dec:	6078      	str	r0, [r7, #4]
 8014dee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	22a1      	movs	r2, #161	; 0xa1
 8014df4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	2221      	movs	r2, #33	; 0x21
 8014dfa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2200      	movs	r2, #0
 8014e06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2207      	movs	r2, #7
 8014e0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	2207      	movs	r2, #7
 8014e12:	4619      	mov	r1, r3
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f001 faf6 	bl	8016406 <USBH_CtlReq>
 8014e1a:	4603      	mov	r3, r0
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3708      	adds	r7, #8
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2221      	movs	r2, #33	; 0x21
 8014e32:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2220      	movs	r2, #32
 8014e38:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2200      	movs	r2, #0
 8014e44:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2207      	movs	r2, #7
 8014e4a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	2207      	movs	r2, #7
 8014e50:	4619      	mov	r1, r3
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f001 fad7 	bl	8016406 <USBH_CtlReq>
 8014e58:	4603      	mov	r3, r0
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3708      	adds	r7, #8
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}

08014e62 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8014e62:	b580      	push	{r7, lr}
 8014e64:	b086      	sub	sp, #24
 8014e66:	af02      	add	r7, sp, #8
 8014e68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e70:	69db      	ldr	r3, [r3, #28]
 8014e72:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014e74:	2300      	movs	r3, #0
 8014e76:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8014e7e:	2b01      	cmp	r3, #1
 8014e80:	d002      	beq.n	8014e88 <CDC_ProcessTransmission+0x26>
 8014e82:	2b02      	cmp	r3, #2
 8014e84:	d023      	beq.n	8014ece <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8014e86:	e07a      	b.n	8014f7e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e8c:	68fa      	ldr	r2, [r7, #12]
 8014e8e:	8b12      	ldrh	r2, [r2, #24]
 8014e90:	4293      	cmp	r3, r2
 8014e92:	d90b      	bls.n	8014eac <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	69d9      	ldr	r1, [r3, #28]
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	8b1a      	ldrh	r2, [r3, #24]
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	7b5b      	ldrb	r3, [r3, #13]
 8014ea0:	2001      	movs	r0, #1
 8014ea2:	9000      	str	r0, [sp, #0]
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	f001 fdac 	bl	8016a02 <USBH_BulkSendData>
 8014eaa:	e00b      	b.n	8014ec4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8014eb4:	b29a      	uxth	r2, r3
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	7b5b      	ldrb	r3, [r3, #13]
 8014eba:	2001      	movs	r0, #1
 8014ebc:	9000      	str	r0, [sp, #0]
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f001 fd9f 	bl	8016a02 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	2202      	movs	r2, #2
 8014ec8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8014ecc:	e057      	b.n	8014f7e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	7b5b      	ldrb	r3, [r3, #13]
 8014ed2:	4619      	mov	r1, r3
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f004 fea7 	bl	8019c28 <USBH_LL_GetURBState>
 8014eda:	4603      	mov	r3, r0
 8014edc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8014ede:	7afb      	ldrb	r3, [r7, #11]
 8014ee0:	2b01      	cmp	r3, #1
 8014ee2:	d136      	bne.n	8014f52 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee8:	68fa      	ldr	r2, [r7, #12]
 8014eea:	8b12      	ldrh	r2, [r2, #24]
 8014eec:	4293      	cmp	r3, r2
 8014eee:	d90e      	bls.n	8014f0e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef4:	68fa      	ldr	r2, [r7, #12]
 8014ef6:	8b12      	ldrh	r2, [r2, #24]
 8014ef8:	1a9a      	subs	r2, r3, r2
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	69db      	ldr	r3, [r3, #28]
 8014f02:	68fa      	ldr	r2, [r7, #12]
 8014f04:	8b12      	ldrh	r2, [r2, #24]
 8014f06:	441a      	add	r2, r3
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	61da      	str	r2, [r3, #28]
 8014f0c:	e002      	b.n	8014f14 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	2200      	movs	r2, #0
 8014f12:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d004      	beq.n	8014f26 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2201      	movs	r2, #1
 8014f20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8014f24:	e006      	b.n	8014f34 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f000 f892 	bl	8015058 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2204      	movs	r2, #4
 8014f38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014f48:	2200      	movs	r2, #0
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	f001 ffea 	bl	8016f24 <osMessagePut>
      break;
 8014f50:	e014      	b.n	8014f7c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8014f52:	7afb      	ldrb	r3, [r7, #11]
 8014f54:	2b02      	cmp	r3, #2
 8014f56:	d111      	bne.n	8014f7c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2204      	movs	r2, #4
 8014f64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014f74:	2200      	movs	r2, #0
 8014f76:	4619      	mov	r1, r3
 8014f78:	f001 ffd4 	bl	8016f24 <osMessagePut>
      break;
 8014f7c:	bf00      	nop
  }
}
 8014f7e:	bf00      	nop
 8014f80:	3710      	adds	r7, #16
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}

08014f86 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8014f86:	b580      	push	{r7, lr}
 8014f88:	b086      	sub	sp, #24
 8014f8a:	af00      	add	r7, sp, #0
 8014f8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014f94:	69db      	ldr	r3, [r3, #28]
 8014f96:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8014fa2:	2b03      	cmp	r3, #3
 8014fa4:	d002      	beq.n	8014fac <CDC_ProcessReception+0x26>
 8014fa6:	2b04      	cmp	r3, #4
 8014fa8:	d00e      	beq.n	8014fc8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8014faa:	e051      	b.n	8015050 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	6a19      	ldr	r1, [r3, #32]
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	8b5a      	ldrh	r2, [r3, #26]
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	7b1b      	ldrb	r3, [r3, #12]
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f001 fd47 	bl	8016a4c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	2204      	movs	r2, #4
 8014fc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8014fc6:	e043      	b.n	8015050 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	7b1b      	ldrb	r3, [r3, #12]
 8014fcc:	4619      	mov	r1, r3
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	f004 fe2a 	bl	8019c28 <USBH_LL_GetURBState>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8014fd8:	7cfb      	ldrb	r3, [r7, #19]
 8014fda:	2b01      	cmp	r3, #1
 8014fdc:	d137      	bne.n	801504e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	7b1b      	ldrb	r3, [r3, #12]
 8014fe2:	4619      	mov	r1, r3
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f004 fd8d 	bl	8019b04 <USBH_LL_GetLastXferSize>
 8014fea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ff0:	68fa      	ldr	r2, [r7, #12]
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d016      	beq.n	8015024 <CDC_ProcessReception+0x9e>
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	8b5b      	ldrh	r3, [r3, #26]
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	4293      	cmp	r3, r2
 8015000:	d910      	bls.n	8015024 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8015002:	697b      	ldr	r3, [r7, #20]
 8015004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	1ad2      	subs	r2, r2, r3
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	6a1a      	ldr	r2, [r3, #32]
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	441a      	add	r2, r3
 8015016:	697b      	ldr	r3, [r7, #20]
 8015018:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	2203      	movs	r2, #3
 801501e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8015022:	e006      	b.n	8015032 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8015024:	697b      	ldr	r3, [r7, #20]
 8015026:	2200      	movs	r2, #0
 8015028:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f000 f81d 	bl	801506c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2204      	movs	r2, #4
 8015036:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015046:	2200      	movs	r2, #0
 8015048:	4619      	mov	r1, r3
 801504a:	f001 ff6b 	bl	8016f24 <osMessagePut>
      break;
 801504e:	bf00      	nop
  }
}
 8015050:	bf00      	nop
 8015052:	3718      	adds	r7, #24
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}

08015058 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8015058:	b480      	push	{r7}
 801505a:	b083      	sub	sp, #12
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8015060:	bf00      	nop
 8015062:	370c      	adds	r7, #12
 8015064:	46bd      	mov	sp, r7
 8015066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506a:	4770      	bx	lr

0801506c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 801506c:	b480      	push	{r7}
 801506e:	b083      	sub	sp, #12
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8015074:	bf00      	nop
 8015076:	370c      	adds	r7, #12
 8015078:	46bd      	mov	sp, r7
 801507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507e:	4770      	bx	lr

08015080 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8015080:	b480      	push	{r7}
 8015082:	b083      	sub	sp, #12
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8015088:	bf00      	nop
 801508a:	370c      	adds	r7, #12
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr

08015094 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8015094:	b5b0      	push	{r4, r5, r7, lr}
 8015096:	b090      	sub	sp, #64	; 0x40
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	4613      	mov	r3, r2
 80150a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d101      	bne.n	80150ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80150a8:	2302      	movs	r3, #2
 80150aa:	e04d      	b.n	8015148 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	79fa      	ldrb	r2, [r7, #7]
 80150b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	2200      	movs	r2, #0
 80150b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	2200      	movs	r2, #0
 80150c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80150c4:	68f8      	ldr	r0, [r7, #12]
 80150c6:	f000 f847 	bl	8015158 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	2200      	movs	r2, #0
 80150ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	2200      	movs	r2, #0
 80150d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2200      	movs	r2, #0
 80150de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	2200      	movs	r2, #0
 80150e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d003      	beq.n	80150f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	68ba      	ldr	r2, [r7, #8]
 80150f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80150f8:	4b15      	ldr	r3, [pc, #84]	; (8015150 <USBH_Init+0xbc>)
 80150fa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80150fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8015104:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015108:	2100      	movs	r1, #0
 801510a:	4618      	mov	r0, r3
 801510c:	f001 fee2 	bl	8016ed4 <osMessageCreate>
 8015110:	4602      	mov	r2, r0
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8015118:	4b0e      	ldr	r3, [pc, #56]	; (8015154 <USBH_Init+0xc0>)
 801511a:	f107 0414 	add.w	r4, r7, #20
 801511e:	461d      	mov	r5, r3
 8015120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015124:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 801512c:	f107 0314 	add.w	r3, r7, #20
 8015130:	68f9      	ldr	r1, [r7, #12]
 8015132:	4618      	mov	r0, r3
 8015134:	f001 fde2 	bl	8016cfc <osThreadCreate>
 8015138:	4602      	mov	r2, r0
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8015140:	68f8      	ldr	r0, [r7, #12]
 8015142:	f004 fc2b 	bl	801999c <USBH_LL_Init>

  return USBH_OK;
 8015146:	2300      	movs	r3, #0
}
 8015148:	4618      	mov	r0, r3
 801514a:	3740      	adds	r7, #64	; 0x40
 801514c:	46bd      	mov	sp, r7
 801514e:	bdb0      	pop	{r4, r5, r7, pc}
 8015150:	0801c5ec 	.word	0x0801c5ec
 8015154:	0801c5fc 	.word	0x0801c5fc

08015158 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8015158:	b480      	push	{r7}
 801515a:	b085      	sub	sp, #20
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015160:	2300      	movs	r3, #0
 8015162:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015164:	2300      	movs	r3, #0
 8015166:	60fb      	str	r3, [r7, #12]
 8015168:	e009      	b.n	801517e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	33e0      	adds	r3, #224	; 0xe0
 8015170:	009b      	lsls	r3, r3, #2
 8015172:	4413      	add	r3, r2
 8015174:	2200      	movs	r2, #0
 8015176:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	3301      	adds	r3, #1
 801517c:	60fb      	str	r3, [r7, #12]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2b0e      	cmp	r3, #14
 8015182:	d9f2      	bls.n	801516a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015184:	2300      	movs	r3, #0
 8015186:	60fb      	str	r3, [r7, #12]
 8015188:	e009      	b.n	801519e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801518a:	687a      	ldr	r2, [r7, #4]
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	4413      	add	r3, r2
 8015190:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015194:	2200      	movs	r2, #0
 8015196:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	3301      	adds	r3, #1
 801519c:	60fb      	str	r3, [r7, #12]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151a4:	d3f1      	bcc.n	801518a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2200      	movs	r2, #0
 80151aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2200      	movs	r2, #0
 80151b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	2201      	movs	r2, #1
 80151b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2200      	movs	r2, #0
 80151bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2201      	movs	r2, #1
 80151c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2240      	movs	r2, #64	; 0x40
 80151ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2200      	movs	r2, #0
 80151d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2200      	movs	r2, #0
 80151d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2201      	movs	r2, #1
 80151de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2200      	movs	r2, #0
 80151e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2200      	movs	r2, #0
 80151ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80151f2:	2300      	movs	r3, #0
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3714      	adds	r7, #20
 80151f8:	46bd      	mov	sp, r7
 80151fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fe:	4770      	bx	lr

08015200 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8015200:	b480      	push	{r7}
 8015202:	b085      	sub	sp, #20
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801520a:	2300      	movs	r3, #0
 801520c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d016      	beq.n	8015242 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801521a:	2b00      	cmp	r3, #0
 801521c:	d10e      	bne.n	801523c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8015224:	1c59      	adds	r1, r3, #1
 8015226:	687a      	ldr	r2, [r7, #4]
 8015228:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 801522c:	687a      	ldr	r2, [r7, #4]
 801522e:	33de      	adds	r3, #222	; 0xde
 8015230:	6839      	ldr	r1, [r7, #0]
 8015232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015236:	2300      	movs	r3, #0
 8015238:	73fb      	strb	r3, [r7, #15]
 801523a:	e004      	b.n	8015246 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801523c:	2302      	movs	r3, #2
 801523e:	73fb      	strb	r3, [r7, #15]
 8015240:	e001      	b.n	8015246 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015242:	2302      	movs	r3, #2
 8015244:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015246:	7bfb      	ldrb	r3, [r7, #15]
}
 8015248:	4618      	mov	r0, r3
 801524a:	3714      	adds	r7, #20
 801524c:	46bd      	mov	sp, r7
 801524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015252:	4770      	bx	lr

08015254 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015254:	b480      	push	{r7}
 8015256:	b085      	sub	sp, #20
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	460b      	mov	r3, r1
 801525e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015260:	2300      	movs	r3, #0
 8015262:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 801526a:	78fa      	ldrb	r2, [r7, #3]
 801526c:	429a      	cmp	r2, r3
 801526e:	d204      	bcs.n	801527a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	78fa      	ldrb	r2, [r7, #3]
 8015274:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015278:	e001      	b.n	801527e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801527a:	2302      	movs	r3, #2
 801527c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801527e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015280:	4618      	mov	r0, r3
 8015282:	3714      	adds	r7, #20
 8015284:	46bd      	mov	sp, r7
 8015286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528a:	4770      	bx	lr

0801528c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801528c:	b480      	push	{r7}
 801528e:	b087      	sub	sp, #28
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
 8015294:	4608      	mov	r0, r1
 8015296:	4611      	mov	r1, r2
 8015298:	461a      	mov	r2, r3
 801529a:	4603      	mov	r3, r0
 801529c:	70fb      	strb	r3, [r7, #3]
 801529e:	460b      	mov	r3, r1
 80152a0:	70bb      	strb	r3, [r7, #2]
 80152a2:	4613      	mov	r3, r2
 80152a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80152a6:	2300      	movs	r3, #0
 80152a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80152aa:	2300      	movs	r3, #0
 80152ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80152b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80152b6:	e025      	b.n	8015304 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80152b8:	7dfb      	ldrb	r3, [r7, #23]
 80152ba:	221a      	movs	r2, #26
 80152bc:	fb02 f303 	mul.w	r3, r2, r3
 80152c0:	3308      	adds	r3, #8
 80152c2:	68fa      	ldr	r2, [r7, #12]
 80152c4:	4413      	add	r3, r2
 80152c6:	3302      	adds	r3, #2
 80152c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	795b      	ldrb	r3, [r3, #5]
 80152ce:	78fa      	ldrb	r2, [r7, #3]
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d002      	beq.n	80152da <USBH_FindInterface+0x4e>
 80152d4:	78fb      	ldrb	r3, [r7, #3]
 80152d6:	2bff      	cmp	r3, #255	; 0xff
 80152d8:	d111      	bne.n	80152fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80152de:	78ba      	ldrb	r2, [r7, #2]
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d002      	beq.n	80152ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80152e4:	78bb      	ldrb	r3, [r7, #2]
 80152e6:	2bff      	cmp	r3, #255	; 0xff
 80152e8:	d109      	bne.n	80152fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80152ea:	693b      	ldr	r3, [r7, #16]
 80152ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80152ee:	787a      	ldrb	r2, [r7, #1]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d002      	beq.n	80152fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80152f4:	787b      	ldrb	r3, [r7, #1]
 80152f6:	2bff      	cmp	r3, #255	; 0xff
 80152f8:	d101      	bne.n	80152fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80152fa:	7dfb      	ldrb	r3, [r7, #23]
 80152fc:	e006      	b.n	801530c <USBH_FindInterface+0x80>
    }
    if_ix++;
 80152fe:	7dfb      	ldrb	r3, [r7, #23]
 8015300:	3301      	adds	r3, #1
 8015302:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015304:	7dfb      	ldrb	r3, [r7, #23]
 8015306:	2b01      	cmp	r3, #1
 8015308:	d9d6      	bls.n	80152b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801530a:	23ff      	movs	r3, #255	; 0xff
}
 801530c:	4618      	mov	r0, r3
 801530e:	371c      	adds	r7, #28
 8015310:	46bd      	mov	sp, r7
 8015312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015316:	4770      	bx	lr

08015318 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f004 fb77 	bl	8019a14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8015326:	2101      	movs	r1, #1
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f004 fc90 	bl	8019c4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 801532e:	2300      	movs	r3, #0
}
 8015330:	4618      	mov	r0, r3
 8015332:	3708      	adds	r7, #8
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b088      	sub	sp, #32
 801533c:	af04      	add	r7, sp, #16
 801533e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015340:	2302      	movs	r3, #2
 8015342:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015344:	2300      	movs	r3, #0
 8015346:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 801534e:	b2db      	uxtb	r3, r3
 8015350:	2b01      	cmp	r3, #1
 8015352:	d102      	bne.n	801535a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2203      	movs	r2, #3
 8015358:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	781b      	ldrb	r3, [r3, #0]
 801535e:	b2db      	uxtb	r3, r3
 8015360:	2b0b      	cmp	r3, #11
 8015362:	f200 823c 	bhi.w	80157de <USBH_Process+0x4a6>
 8015366:	a201      	add	r2, pc, #4	; (adr r2, 801536c <USBH_Process+0x34>)
 8015368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801536c:	0801539d 	.word	0x0801539d
 8015370:	080153eb 	.word	0x080153eb
 8015374:	0801546f 	.word	0x0801546f
 8015378:	0801575d 	.word	0x0801575d
 801537c:	080157df 	.word	0x080157df
 8015380:	0801552f 	.word	0x0801552f
 8015384:	080156e7 	.word	0x080156e7
 8015388:	08015581 	.word	0x08015581
 801538c:	080155bd 	.word	0x080155bd
 8015390:	080155f7 	.word	0x080155f7
 8015394:	0801563f 	.word	0x0801563f
 8015398:	08015745 	.word	0x08015745
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80153a2:	b2db      	uxtb	r3, r3
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	f000 821c 	beq.w	80157e2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2201      	movs	r2, #1
 80153ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80153b0:	20c8      	movs	r0, #200	; 0xc8
 80153b2:	f004 fc93 	bl	8019cdc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f004 fb89 	bl	8019ace <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2200      	movs	r2, #0
 80153c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2200      	movs	r2, #0
 80153c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2201      	movs	r2, #1
 80153d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80153e0:	2200      	movs	r2, #0
 80153e2:	4619      	mov	r1, r3
 80153e4:	f001 fd9e 	bl	8016f24 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80153e8:	e1fb      	b.n	80157e2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	d107      	bne.n	8015404 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2200      	movs	r2, #0
 80153f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2202      	movs	r2, #2
 8015400:	701a      	strb	r2, [r3, #0]
 8015402:	e025      	b.n	8015450 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801540a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801540e:	d914      	bls.n	801543a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015416:	3301      	adds	r3, #1
 8015418:	b2da      	uxtb	r2, r3
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015426:	2b03      	cmp	r3, #3
 8015428:	d903      	bls.n	8015432 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	220d      	movs	r2, #13
 801542e:	701a      	strb	r2, [r3, #0]
 8015430:	e00e      	b.n	8015450 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2200      	movs	r2, #0
 8015436:	701a      	strb	r2, [r3, #0]
 8015438:	e00a      	b.n	8015450 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015440:	f103 020a 	add.w	r2, r3, #10
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 801544a:	200a      	movs	r0, #10
 801544c:	f004 fc46 	bl	8019cdc <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2201      	movs	r2, #1
 8015454:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015464:	2200      	movs	r2, #0
 8015466:	4619      	mov	r1, r3
 8015468:	f001 fd5c 	bl	8016f24 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801546c:	e1c0      	b.n	80157f0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015474:	2b00      	cmp	r3, #0
 8015476:	d005      	beq.n	8015484 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801547e:	2104      	movs	r1, #4
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8015484:	2064      	movs	r0, #100	; 0x64
 8015486:	f004 fc29 	bl	8019cdc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f004 faf8 	bl	8019a80 <USBH_LL_GetSpeed>
 8015490:	4603      	mov	r3, r0
 8015492:	461a      	mov	r2, r3
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	2205      	movs	r2, #5
 801549e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80154a0:	2100      	movs	r1, #0
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f001 fb1f 	bl	8016ae6 <USBH_AllocPipe>
 80154a8:	4603      	mov	r3, r0
 80154aa:	461a      	mov	r2, r3
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80154b0:	2180      	movs	r1, #128	; 0x80
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f001 fb17 	bl	8016ae6 <USBH_AllocPipe>
 80154b8:	4603      	mov	r3, r0
 80154ba:	461a      	mov	r2, r3
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	7919      	ldrb	r1, [r3, #4]
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80154d0:	687a      	ldr	r2, [r7, #4]
 80154d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80154d4:	b292      	uxth	r2, r2
 80154d6:	9202      	str	r2, [sp, #8]
 80154d8:	2200      	movs	r2, #0
 80154da:	9201      	str	r2, [sp, #4]
 80154dc:	9300      	str	r3, [sp, #0]
 80154de:	4603      	mov	r3, r0
 80154e0:	2280      	movs	r2, #128	; 0x80
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f001 fad0 	bl	8016a88 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	7959      	ldrb	r1, [r3, #5]
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80154f8:	687a      	ldr	r2, [r7, #4]
 80154fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80154fc:	b292      	uxth	r2, r2
 80154fe:	9202      	str	r2, [sp, #8]
 8015500:	2200      	movs	r2, #0
 8015502:	9201      	str	r2, [sp, #4]
 8015504:	9300      	str	r3, [sp, #0]
 8015506:	4603      	mov	r3, r0
 8015508:	2200      	movs	r2, #0
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	f001 fabc 	bl	8016a88 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2201      	movs	r2, #1
 8015514:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015524:	2200      	movs	r2, #0
 8015526:	4619      	mov	r1, r3
 8015528:	f001 fcfc 	bl	8016f24 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801552c:	e160      	b.n	80157f0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f000 f964 	bl	80157fc <USBH_HandleEnum>
 8015534:	4603      	mov	r3, r0
 8015536:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8015538:	7bbb      	ldrb	r3, [r7, #14]
 801553a:	b2db      	uxtb	r3, r3
 801553c:	2b00      	cmp	r3, #0
 801553e:	f040 8152 	bne.w	80157e6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2200      	movs	r2, #0
 8015546:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8015550:	2b01      	cmp	r3, #1
 8015552:	d103      	bne.n	801555c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2208      	movs	r2, #8
 8015558:	701a      	strb	r2, [r3, #0]
 801555a:	e002      	b.n	8015562 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2207      	movs	r2, #7
 8015560:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	2205      	movs	r2, #5
 8015566:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015576:	2200      	movs	r2, #0
 8015578:	4619      	mov	r1, r3
 801557a:	f001 fcd3 	bl	8016f24 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 801557e:	e132      	b.n	80157e6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015586:	2b00      	cmp	r3, #0
 8015588:	f000 812f 	beq.w	80157ea <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015592:	2101      	movs	r1, #1
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	2208      	movs	r2, #8
 801559c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2205      	movs	r2, #5
 80155a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80155b2:	2200      	movs	r2, #0
 80155b4:	4619      	mov	r1, r3
 80155b6:	f001 fcb5 	bl	8016f24 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80155ba:	e116      	b.n	80157ea <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	4619      	mov	r1, r3
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f000 fcf6 	bl	8015fb8 <USBH_SetCfg>
 80155cc:	4603      	mov	r3, r0
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d102      	bne.n	80155d8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	2209      	movs	r2, #9
 80155d6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2201      	movs	r2, #1
 80155dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80155ec:	2200      	movs	r2, #0
 80155ee:	4619      	mov	r1, r3
 80155f0:	f001 fc98 	bl	8016f24 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80155f4:	e0fc      	b.n	80157f0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80155fc:	f003 0320 	and.w	r3, r3, #32
 8015600:	2b00      	cmp	r3, #0
 8015602:	d00a      	beq.n	801561a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8015604:	2101      	movs	r1, #1
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f000 fcf9 	bl	8015ffe <USBH_SetFeature>
 801560c:	4603      	mov	r3, r0
 801560e:	2b00      	cmp	r3, #0
 8015610:	d106      	bne.n	8015620 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	220a      	movs	r2, #10
 8015616:	701a      	strb	r2, [r3, #0]
 8015618:	e002      	b.n	8015620 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	220a      	movs	r2, #10
 801561e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2201      	movs	r2, #1
 8015624:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015634:	2200      	movs	r2, #0
 8015636:	4619      	mov	r1, r3
 8015638:	f001 fc74 	bl	8016f24 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801563c:	e0d8      	b.n	80157f0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8015644:	2b00      	cmp	r3, #0
 8015646:	d03f      	beq.n	80156c8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2200      	movs	r2, #0
 801564c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015650:	2300      	movs	r3, #0
 8015652:	73fb      	strb	r3, [r7, #15]
 8015654:	e016      	b.n	8015684 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8015656:	7bfa      	ldrb	r2, [r7, #15]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	32de      	adds	r2, #222	; 0xde
 801565c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015660:	791a      	ldrb	r2, [r3, #4]
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8015668:	429a      	cmp	r2, r3
 801566a:	d108      	bne.n	801567e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 801566c:	7bfa      	ldrb	r2, [r7, #15]
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	32de      	adds	r2, #222	; 0xde
 8015672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 801567c:	e005      	b.n	801568a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801567e:	7bfb      	ldrb	r3, [r7, #15]
 8015680:	3301      	adds	r3, #1
 8015682:	73fb      	strb	r3, [r7, #15]
 8015684:	7bfb      	ldrb	r3, [r7, #15]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d0e5      	beq.n	8015656 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015690:	2b00      	cmp	r3, #0
 8015692:	d016      	beq.n	80156c2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801569a:	689b      	ldr	r3, [r3, #8]
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	4798      	blx	r3
 80156a0:	4603      	mov	r3, r0
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d109      	bne.n	80156ba <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2206      	movs	r2, #6
 80156aa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80156b2:	2103      	movs	r1, #3
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	4798      	blx	r3
 80156b8:	e006      	b.n	80156c8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	220d      	movs	r2, #13
 80156be:	701a      	strb	r2, [r3, #0]
 80156c0:	e002      	b.n	80156c8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	220d      	movs	r2, #13
 80156c6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2205      	movs	r2, #5
 80156cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80156dc:	2200      	movs	r2, #0
 80156de:	4619      	mov	r1, r3
 80156e0:	f001 fc20 	bl	8016f24 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80156e4:	e084      	b.n	80157f0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d017      	beq.n	8015720 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80156f6:	691b      	ldr	r3, [r3, #16]
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	4798      	blx	r3
 80156fc:	4603      	mov	r3, r0
 80156fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8015700:	7bbb      	ldrb	r3, [r7, #14]
 8015702:	b2db      	uxtb	r3, r3
 8015704:	2b00      	cmp	r3, #0
 8015706:	d103      	bne.n	8015710 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	220b      	movs	r2, #11
 801570c:	701a      	strb	r2, [r3, #0]
 801570e:	e00a      	b.n	8015726 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8015710:	7bbb      	ldrb	r3, [r7, #14]
 8015712:	b2db      	uxtb	r3, r3
 8015714:	2b02      	cmp	r3, #2
 8015716:	d106      	bne.n	8015726 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	220d      	movs	r2, #13
 801571c:	701a      	strb	r2, [r3, #0]
 801571e:	e002      	b.n	8015726 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	220d      	movs	r2, #13
 8015724:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2205      	movs	r2, #5
 801572a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801573a:	2200      	movs	r2, #0
 801573c:	4619      	mov	r1, r3
 801573e:	f001 fbf1 	bl	8016f24 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015742:	e055      	b.n	80157f0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801574a:	2b00      	cmp	r3, #0
 801574c:	d04f      	beq.n	80157ee <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015754:	695b      	ldr	r3, [r3, #20]
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	4798      	blx	r3
      }
      break;
 801575a:	e048      	b.n	80157ee <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2200      	movs	r2, #0
 8015760:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f7ff fcf7 	bl	8015158 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015770:	2b00      	cmp	r3, #0
 8015772:	d009      	beq.n	8015788 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801577a:	68db      	ldr	r3, [r3, #12]
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2200      	movs	r2, #0
 8015784:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801578e:	2b00      	cmp	r3, #0
 8015790:	d005      	beq.n	801579e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015798:	2105      	movs	r1, #5
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80157a4:	b2db      	uxtb	r3, r3
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d107      	bne.n	80157ba <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2200      	movs	r2, #0
 80157ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7ff fdb0 	bl	8015318 <USBH_Start>
 80157b8:	e002      	b.n	80157c0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f004 f92a 	bl	8019a14 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2201      	movs	r2, #1
 80157c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80157d4:	2200      	movs	r2, #0
 80157d6:	4619      	mov	r1, r3
 80157d8:	f001 fba4 	bl	8016f24 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80157dc:	e008      	b.n	80157f0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80157de:	bf00      	nop
 80157e0:	e006      	b.n	80157f0 <USBH_Process+0x4b8>
      break;
 80157e2:	bf00      	nop
 80157e4:	e004      	b.n	80157f0 <USBH_Process+0x4b8>
      break;
 80157e6:	bf00      	nop
 80157e8:	e002      	b.n	80157f0 <USBH_Process+0x4b8>
    break;
 80157ea:	bf00      	nop
 80157ec:	e000      	b.n	80157f0 <USBH_Process+0x4b8>
      break;
 80157ee:	bf00      	nop
  }
  return USBH_OK;
 80157f0:	2300      	movs	r3, #0
}
 80157f2:	4618      	mov	r0, r3
 80157f4:	3710      	adds	r7, #16
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}
 80157fa:	bf00      	nop

080157fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b088      	sub	sp, #32
 8015800:	af04      	add	r7, sp, #16
 8015802:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8015804:	2301      	movs	r3, #1
 8015806:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8015808:	2301      	movs	r3, #1
 801580a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	785b      	ldrb	r3, [r3, #1]
 8015810:	2b07      	cmp	r3, #7
 8015812:	f200 8208 	bhi.w	8015c26 <USBH_HandleEnum+0x42a>
 8015816:	a201      	add	r2, pc, #4	; (adr r2, 801581c <USBH_HandleEnum+0x20>)
 8015818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801581c:	0801583d 	.word	0x0801583d
 8015820:	080158fb 	.word	0x080158fb
 8015824:	08015965 	.word	0x08015965
 8015828:	080159f3 	.word	0x080159f3
 801582c:	08015a5d 	.word	0x08015a5d
 8015830:	08015acd 	.word	0x08015acd
 8015834:	08015b69 	.word	0x08015b69
 8015838:	08015be7 	.word	0x08015be7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 801583c:	2108      	movs	r1, #8
 801583e:	6878      	ldr	r0, [r7, #4]
 8015840:	f000 faea 	bl	8015e18 <USBH_Get_DevDesc>
 8015844:	4603      	mov	r3, r0
 8015846:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015848:	7bbb      	ldrb	r3, [r7, #14]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d130      	bne.n	80158b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	2201      	movs	r2, #1
 801585c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	7919      	ldrb	r1, [r3, #4]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801586e:	687a      	ldr	r2, [r7, #4]
 8015870:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015872:	b292      	uxth	r2, r2
 8015874:	9202      	str	r2, [sp, #8]
 8015876:	2200      	movs	r2, #0
 8015878:	9201      	str	r2, [sp, #4]
 801587a:	9300      	str	r3, [sp, #0]
 801587c:	4603      	mov	r3, r0
 801587e:	2280      	movs	r2, #128	; 0x80
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f001 f901 	bl	8016a88 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	7959      	ldrb	r1, [r3, #5]
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8015896:	687a      	ldr	r2, [r7, #4]
 8015898:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801589a:	b292      	uxth	r2, r2
 801589c:	9202      	str	r2, [sp, #8]
 801589e:	2200      	movs	r2, #0
 80158a0:	9201      	str	r2, [sp, #4]
 80158a2:	9300      	str	r3, [sp, #0]
 80158a4:	4603      	mov	r3, r0
 80158a6:	2200      	movs	r2, #0
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f001 f8ed 	bl	8016a88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80158ae:	e1bc      	b.n	8015c2a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80158b0:	7bbb      	ldrb	r3, [r7, #14]
 80158b2:	2b03      	cmp	r3, #3
 80158b4:	f040 81b9 	bne.w	8015c2a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80158be:	3301      	adds	r3, #1
 80158c0:	b2da      	uxtb	r2, r3
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80158ce:	2b03      	cmp	r3, #3
 80158d0:	d903      	bls.n	80158da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	220d      	movs	r2, #13
 80158d6:	701a      	strb	r2, [r3, #0]
      break;
 80158d8:	e1a7      	b.n	8015c2a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	795b      	ldrb	r3, [r3, #5]
 80158de:	4619      	mov	r1, r3
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f001 f921 	bl	8016b28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	791b      	ldrb	r3, [r3, #4]
 80158ea:	4619      	mov	r1, r3
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f001 f91b 	bl	8016b28 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2200      	movs	r2, #0
 80158f6:	701a      	strb	r2, [r3, #0]
      break;
 80158f8:	e197      	b.n	8015c2a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80158fa:	2112      	movs	r1, #18
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 fa8b 	bl	8015e18 <USBH_Get_DevDesc>
 8015902:	4603      	mov	r3, r0
 8015904:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015906:	7bbb      	ldrb	r3, [r7, #14]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d103      	bne.n	8015914 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2202      	movs	r2, #2
 8015910:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015912:	e18c      	b.n	8015c2e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015914:	7bbb      	ldrb	r3, [r7, #14]
 8015916:	2b03      	cmp	r3, #3
 8015918:	f040 8189 	bne.w	8015c2e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015922:	3301      	adds	r3, #1
 8015924:	b2da      	uxtb	r2, r3
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015932:	2b03      	cmp	r3, #3
 8015934:	d903      	bls.n	801593e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	220d      	movs	r2, #13
 801593a:	701a      	strb	r2, [r3, #0]
      break;
 801593c:	e177      	b.n	8015c2e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	795b      	ldrb	r3, [r3, #5]
 8015942:	4619      	mov	r1, r3
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f001 f8ef 	bl	8016b28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	791b      	ldrb	r3, [r3, #4]
 801594e:	4619      	mov	r1, r3
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f001 f8e9 	bl	8016b28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	2200      	movs	r2, #0
 801595a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2200      	movs	r2, #0
 8015960:	701a      	strb	r2, [r3, #0]
      break;
 8015962:	e164      	b.n	8015c2e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8015964:	2101      	movs	r1, #1
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	f000 fb02 	bl	8015f70 <USBH_SetAddress>
 801596c:	4603      	mov	r3, r0
 801596e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015970:	7bbb      	ldrb	r3, [r7, #14]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d132      	bne.n	80159dc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8015976:	2002      	movs	r0, #2
 8015978:	f004 f9b0 	bl	8019cdc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2201      	movs	r2, #1
 8015980:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2203      	movs	r2, #3
 8015988:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	7919      	ldrb	r1, [r3, #4]
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801599a:	687a      	ldr	r2, [r7, #4]
 801599c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801599e:	b292      	uxth	r2, r2
 80159a0:	9202      	str	r2, [sp, #8]
 80159a2:	2200      	movs	r2, #0
 80159a4:	9201      	str	r2, [sp, #4]
 80159a6:	9300      	str	r3, [sp, #0]
 80159a8:	4603      	mov	r3, r0
 80159aa:	2280      	movs	r2, #128	; 0x80
 80159ac:	6878      	ldr	r0, [r7, #4]
 80159ae:	f001 f86b 	bl	8016a88 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	7959      	ldrb	r1, [r3, #5]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80159c2:	687a      	ldr	r2, [r7, #4]
 80159c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80159c6:	b292      	uxth	r2, r2
 80159c8:	9202      	str	r2, [sp, #8]
 80159ca:	2200      	movs	r2, #0
 80159cc:	9201      	str	r2, [sp, #4]
 80159ce:	9300      	str	r3, [sp, #0]
 80159d0:	4603      	mov	r3, r0
 80159d2:	2200      	movs	r2, #0
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f001 f857 	bl	8016a88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80159da:	e12a      	b.n	8015c32 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80159dc:	7bbb      	ldrb	r3, [r7, #14]
 80159de:	2b03      	cmp	r3, #3
 80159e0:	f040 8127 	bne.w	8015c32 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	220d      	movs	r2, #13
 80159e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	2200      	movs	r2, #0
 80159ee:	705a      	strb	r2, [r3, #1]
      break;
 80159f0:	e11f      	b.n	8015c32 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80159f2:	2109      	movs	r1, #9
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f000 fa37 	bl	8015e68 <USBH_Get_CfgDesc>
 80159fa:	4603      	mov	r3, r0
 80159fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80159fe:	7bbb      	ldrb	r3, [r7, #14]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d103      	bne.n	8015a0c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2204      	movs	r2, #4
 8015a08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015a0a:	e114      	b.n	8015c36 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015a0c:	7bbb      	ldrb	r3, [r7, #14]
 8015a0e:	2b03      	cmp	r3, #3
 8015a10:	f040 8111 	bne.w	8015c36 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	b2da      	uxtb	r2, r3
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015a2a:	2b03      	cmp	r3, #3
 8015a2c:	d903      	bls.n	8015a36 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	220d      	movs	r2, #13
 8015a32:	701a      	strb	r2, [r3, #0]
      break;
 8015a34:	e0ff      	b.n	8015c36 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	795b      	ldrb	r3, [r3, #5]
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f001 f873 	bl	8016b28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	791b      	ldrb	r3, [r3, #4]
 8015a46:	4619      	mov	r1, r3
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f001 f86d 	bl	8016b28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2200      	movs	r2, #0
 8015a52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2200      	movs	r2, #0
 8015a58:	701a      	strb	r2, [r3, #0]
      break;
 8015a5a:	e0ec      	b.n	8015c36 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8015a62:	4619      	mov	r1, r3
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	f000 f9ff 	bl	8015e68 <USBH_Get_CfgDesc>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015a6e:	7bbb      	ldrb	r3, [r7, #14]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d103      	bne.n	8015a7c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2205      	movs	r2, #5
 8015a78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015a7a:	e0de      	b.n	8015c3a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015a7c:	7bbb      	ldrb	r3, [r7, #14]
 8015a7e:	2b03      	cmp	r3, #3
 8015a80:	f040 80db 	bne.w	8015c3a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	b2da      	uxtb	r2, r3
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015a9a:	2b03      	cmp	r3, #3
 8015a9c:	d903      	bls.n	8015aa6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	220d      	movs	r2, #13
 8015aa2:	701a      	strb	r2, [r3, #0]
      break;
 8015aa4:	e0c9      	b.n	8015c3a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	795b      	ldrb	r3, [r3, #5]
 8015aaa:	4619      	mov	r1, r3
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f001 f83b 	bl	8016b28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	791b      	ldrb	r3, [r3, #4]
 8015ab6:	4619      	mov	r1, r3
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f001 f835 	bl	8016b28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	701a      	strb	r2, [r3, #0]
      break;
 8015aca:	e0b6      	b.n	8015c3a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d036      	beq.n	8015b44 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8015ae2:	23ff      	movs	r3, #255	; 0xff
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f000 f9e3 	bl	8015eb0 <USBH_Get_StringDesc>
 8015aea:	4603      	mov	r3, r0
 8015aec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015aee:	7bbb      	ldrb	r3, [r7, #14]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d111      	bne.n	8015b18 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2206      	movs	r2, #6
 8015af8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2205      	movs	r2, #5
 8015afe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015b0e:	2200      	movs	r2, #0
 8015b10:	4619      	mov	r1, r3
 8015b12:	f001 fa07 	bl	8016f24 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8015b16:	e092      	b.n	8015c3e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015b18:	7bbb      	ldrb	r3, [r7, #14]
 8015b1a:	2b03      	cmp	r3, #3
 8015b1c:	f040 808f 	bne.w	8015c3e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	2206      	movs	r2, #6
 8015b24:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2205      	movs	r2, #5
 8015b2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	4619      	mov	r1, r3
 8015b3e:	f001 f9f1 	bl	8016f24 <osMessagePut>
      break;
 8015b42:	e07c      	b.n	8015c3e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2206      	movs	r2, #6
 8015b48:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2205      	movs	r2, #5
 8015b4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015b5e:	2200      	movs	r2, #0
 8015b60:	4619      	mov	r1, r3
 8015b62:	f001 f9df 	bl	8016f24 <osMessagePut>
      break;
 8015b66:	e06a      	b.n	8015c3e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d027      	beq.n	8015bc2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8015b7e:	23ff      	movs	r3, #255	; 0xff
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	f000 f995 	bl	8015eb0 <USBH_Get_StringDesc>
 8015b86:	4603      	mov	r3, r0
 8015b88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015b8a:	7bbb      	ldrb	r3, [r7, #14]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d103      	bne.n	8015b98 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2207      	movs	r2, #7
 8015b94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8015b96:	e054      	b.n	8015c42 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015b98:	7bbb      	ldrb	r3, [r7, #14]
 8015b9a:	2b03      	cmp	r3, #3
 8015b9c:	d151      	bne.n	8015c42 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	2207      	movs	r2, #7
 8015ba2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2205      	movs	r2, #5
 8015ba8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015bb8:	2200      	movs	r2, #0
 8015bba:	4619      	mov	r1, r3
 8015bbc:	f001 f9b2 	bl	8016f24 <osMessagePut>
      break;
 8015bc0:	e03f      	b.n	8015c42 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2207      	movs	r2, #7
 8015bc6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	2205      	movs	r2, #5
 8015bcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015bdc:	2200      	movs	r2, #0
 8015bde:	4619      	mov	r1, r3
 8015be0:	f001 f9a0 	bl	8016f24 <osMessagePut>
      break;
 8015be4:	e02d      	b.n	8015c42 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d017      	beq.n	8015c20 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8015bfc:	23ff      	movs	r3, #255	; 0xff
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f000 f956 	bl	8015eb0 <USBH_Get_StringDesc>
 8015c04:	4603      	mov	r3, r0
 8015c06:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015c08:	7bbb      	ldrb	r3, [r7, #14]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d102      	bne.n	8015c14 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8015c12:	e018      	b.n	8015c46 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015c14:	7bbb      	ldrb	r3, [r7, #14]
 8015c16:	2b03      	cmp	r3, #3
 8015c18:	d115      	bne.n	8015c46 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8015c1e:	e012      	b.n	8015c46 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8015c20:	2300      	movs	r3, #0
 8015c22:	73fb      	strb	r3, [r7, #15]
      break;
 8015c24:	e00f      	b.n	8015c46 <USBH_HandleEnum+0x44a>

    default:
      break;
 8015c26:	bf00      	nop
 8015c28:	e00e      	b.n	8015c48 <USBH_HandleEnum+0x44c>
      break;
 8015c2a:	bf00      	nop
 8015c2c:	e00c      	b.n	8015c48 <USBH_HandleEnum+0x44c>
      break;
 8015c2e:	bf00      	nop
 8015c30:	e00a      	b.n	8015c48 <USBH_HandleEnum+0x44c>
      break;
 8015c32:	bf00      	nop
 8015c34:	e008      	b.n	8015c48 <USBH_HandleEnum+0x44c>
      break;
 8015c36:	bf00      	nop
 8015c38:	e006      	b.n	8015c48 <USBH_HandleEnum+0x44c>
      break;
 8015c3a:	bf00      	nop
 8015c3c:	e004      	b.n	8015c48 <USBH_HandleEnum+0x44c>
      break;
 8015c3e:	bf00      	nop
 8015c40:	e002      	b.n	8015c48 <USBH_HandleEnum+0x44c>
      break;
 8015c42:	bf00      	nop
 8015c44:	e000      	b.n	8015c48 <USBH_HandleEnum+0x44c>
      break;
 8015c46:	bf00      	nop
  }
  return Status;
 8015c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	3710      	adds	r7, #16
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	bf00      	nop

08015c54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	683a      	ldr	r2, [r7, #0]
 8015c62:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8015c66:	bf00      	nop
 8015c68:	370c      	adds	r7, #12
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c70:	4770      	bx	lr

08015c72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8015c72:	b580      	push	{r7, lr}
 8015c74:	b082      	sub	sp, #8
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015c80:	1c5a      	adds	r2, r3, #1
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f000 f804 	bl	8015c96 <USBH_HandleSof>
}
 8015c8e:	bf00      	nop
 8015c90:	3708      	adds	r7, #8
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}

08015c96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8015c96:	b580      	push	{r7, lr}
 8015c98:	b082      	sub	sp, #8
 8015c9a:	af00      	add	r7, sp, #0
 8015c9c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	781b      	ldrb	r3, [r3, #0]
 8015ca2:	b2db      	uxtb	r3, r3
 8015ca4:	2b0b      	cmp	r3, #11
 8015ca6:	d10a      	bne.n	8015cbe <USBH_HandleSof+0x28>
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d005      	beq.n	8015cbe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015cb8:	699b      	ldr	r3, [r3, #24]
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	4798      	blx	r3
  }
}
 8015cbe:	bf00      	nop
 8015cc0:	3708      	adds	r7, #8
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}

08015cc6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8015cc6:	b580      	push	{r7, lr}
 8015cc8:	b082      	sub	sp, #8
 8015cca:	af00      	add	r7, sp, #0
 8015ccc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2201      	movs	r2, #1
 8015cd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2201      	movs	r2, #1
 8015cda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015cea:	2200      	movs	r2, #0
 8015cec:	4619      	mov	r1, r3
 8015cee:	f001 f919 	bl	8016f24 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8015cf2:	bf00      	nop
}
 8015cf4:	3708      	adds	r7, #8
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}

08015cfa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8015cfa:	b480      	push	{r7}
 8015cfc:	b083      	sub	sp, #12
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2200      	movs	r2, #0
 8015d06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8015d0a:	bf00      	nop
}
 8015d0c:	370c      	adds	r7, #12
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d14:	4770      	bx	lr

08015d16 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8015d16:	b580      	push	{r7, lr}
 8015d18:	b082      	sub	sp, #8
 8015d1a:	af00      	add	r7, sp, #0
 8015d1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2201      	movs	r2, #1
 8015d22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2200      	movs	r2, #0
 8015d32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2201      	movs	r2, #1
 8015d3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	4619      	mov	r1, r3
 8015d4e:	f001 f8e9 	bl	8016f24 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8015d52:	2300      	movs	r3, #0
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	3708      	adds	r7, #8
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}

08015d5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2201      	movs	r2, #1
 8015d68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2200      	movs	r2, #0
 8015d70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2200      	movs	r2, #0
 8015d78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f003 fe64 	bl	8019a4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	791b      	ldrb	r3, [r3, #4]
 8015d86:	4619      	mov	r1, r3
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	f000 fecd 	bl	8016b28 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	795b      	ldrb	r3, [r3, #5]
 8015d92:	4619      	mov	r1, r3
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f000 fec7 	bl	8016b28 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2201      	movs	r2, #1
 8015d9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015dae:	2200      	movs	r2, #0
 8015db0:	4619      	mov	r1, r3
 8015db2:	f001 f8b7 	bl	8016f24 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8015db6:	2300      	movs	r3, #0
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3708      	adds	r7, #8
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}

08015dc0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b086      	sub	sp, #24
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8015dce:	f107 030c 	add.w	r3, r7, #12
 8015dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f001 f8e4 	bl	8016fa4 <osMessageGet>
    if (event.status == osEventMessage)
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	2b10      	cmp	r3, #16
 8015de0:	d1f2      	bne.n	8015dc8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f7ff faa8 	bl	8015338 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8015de8:	e7ee      	b.n	8015dc8 <USBH_Process_OS+0x8>

08015dea <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8015dea:	b580      	push	{r7, lr}
 8015dec:	b082      	sub	sp, #8
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	2201      	movs	r2, #1
 8015df6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015e06:	2200      	movs	r2, #0
 8015e08:	4619      	mov	r1, r3
 8015e0a:	f001 f88b 	bl	8016f24 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8015e0e:	2300      	movs	r3, #0
}
 8015e10:	4618      	mov	r0, r3
 8015e12:	3708      	adds	r7, #8
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}

08015e18 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b086      	sub	sp, #24
 8015e1c:	af02      	add	r7, sp, #8
 8015e1e:	6078      	str	r0, [r7, #4]
 8015e20:	460b      	mov	r3, r1
 8015e22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8015e2a:	78fb      	ldrb	r3, [r7, #3]
 8015e2c:	b29b      	uxth	r3, r3
 8015e2e:	9300      	str	r3, [sp, #0]
 8015e30:	4613      	mov	r3, r2
 8015e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015e36:	2100      	movs	r1, #0
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f000 f864 	bl	8015f06 <USBH_GetDescriptor>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	73fb      	strb	r3, [r7, #15]
 8015e42:	7bfb      	ldrb	r3, [r7, #15]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d10a      	bne.n	8015e5e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015e54:	78fa      	ldrb	r2, [r7, #3]
 8015e56:	b292      	uxth	r2, r2
 8015e58:	4619      	mov	r1, r3
 8015e5a:	f000 f918 	bl	801608e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8015e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3710      	adds	r7, #16
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}

08015e68 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b086      	sub	sp, #24
 8015e6c:	af02      	add	r7, sp, #8
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	460b      	mov	r3, r1
 8015e72:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	331c      	adds	r3, #28
 8015e78:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8015e7a:	887b      	ldrh	r3, [r7, #2]
 8015e7c:	9300      	str	r3, [sp, #0]
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015e84:	2100      	movs	r1, #0
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 f83d 	bl	8015f06 <USBH_GetDescriptor>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	72fb      	strb	r3, [r7, #11]
 8015e90:	7afb      	ldrb	r3, [r7, #11]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d107      	bne.n	8015ea6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015e9c:	887a      	ldrh	r2, [r7, #2]
 8015e9e:	68f9      	ldr	r1, [r7, #12]
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f000 f964 	bl	801616e <USBH_ParseCfgDesc>
  }

  return status;
 8015ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3710      	adds	r7, #16
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}

08015eb0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b088      	sub	sp, #32
 8015eb4:	af02      	add	r7, sp, #8
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	607a      	str	r2, [r7, #4]
 8015eba:	461a      	mov	r2, r3
 8015ebc:	460b      	mov	r3, r1
 8015ebe:	72fb      	strb	r3, [r7, #11]
 8015ec0:	4613      	mov	r3, r2
 8015ec2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8015ec4:	7afb      	ldrb	r3, [r7, #11]
 8015ec6:	b29b      	uxth	r3, r3
 8015ec8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8015ecc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8015ed4:	893b      	ldrh	r3, [r7, #8]
 8015ed6:	9300      	str	r3, [sp, #0]
 8015ed8:	460b      	mov	r3, r1
 8015eda:	2100      	movs	r1, #0
 8015edc:	68f8      	ldr	r0, [r7, #12]
 8015ede:	f000 f812 	bl	8015f06 <USBH_GetDescriptor>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	75fb      	strb	r3, [r7, #23]
 8015ee6:	7dfb      	ldrb	r3, [r7, #23]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d107      	bne.n	8015efc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015ef2:	893a      	ldrh	r2, [r7, #8]
 8015ef4:	6879      	ldr	r1, [r7, #4]
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f000 fa37 	bl	801636a <USBH_ParseStringDesc>
  }

  return status;
 8015efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3718      	adds	r7, #24
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}

08015f06 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8015f06:	b580      	push	{r7, lr}
 8015f08:	b084      	sub	sp, #16
 8015f0a:	af00      	add	r7, sp, #0
 8015f0c:	60f8      	str	r0, [r7, #12]
 8015f0e:	607b      	str	r3, [r7, #4]
 8015f10:	460b      	mov	r3, r1
 8015f12:	72fb      	strb	r3, [r7, #11]
 8015f14:	4613      	mov	r3, r2
 8015f16:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	789b      	ldrb	r3, [r3, #2]
 8015f1c:	2b01      	cmp	r3, #1
 8015f1e:	d11c      	bne.n	8015f5a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8015f20:	7afb      	ldrb	r3, [r7, #11]
 8015f22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015f26:	b2da      	uxtb	r2, r3
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	2206      	movs	r2, #6
 8015f30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	893a      	ldrh	r2, [r7, #8]
 8015f36:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8015f38:	893b      	ldrh	r3, [r7, #8]
 8015f3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015f42:	d104      	bne.n	8015f4e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	f240 4209 	movw	r2, #1033	; 0x409
 8015f4a:	829a      	strh	r2, [r3, #20]
 8015f4c:	e002      	b.n	8015f54 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	2200      	movs	r2, #0
 8015f52:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	8b3a      	ldrh	r2, [r7, #24]
 8015f58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8015f5a:	8b3b      	ldrh	r3, [r7, #24]
 8015f5c:	461a      	mov	r2, r3
 8015f5e:	6879      	ldr	r1, [r7, #4]
 8015f60:	68f8      	ldr	r0, [r7, #12]
 8015f62:	f000 fa50 	bl	8016406 <USBH_CtlReq>
 8015f66:	4603      	mov	r3, r0
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3710      	adds	r7, #16
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}

08015f70 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
 8015f78:	460b      	mov	r3, r1
 8015f7a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	789b      	ldrb	r3, [r3, #2]
 8015f80:	2b01      	cmp	r3, #1
 8015f82:	d10f      	bne.n	8015fa4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2200      	movs	r2, #0
 8015f88:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2205      	movs	r2, #5
 8015f8e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8015f90:	78fb      	ldrb	r3, [r7, #3]
 8015f92:	b29a      	uxth	r2, r3
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	2100      	movs	r1, #0
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f000 fa2c 	bl	8016406 <USBH_CtlReq>
 8015fae:	4603      	mov	r3, r0
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3708      	adds	r7, #8
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}

08015fb8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b082      	sub	sp, #8
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	460b      	mov	r3, r1
 8015fc2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	789b      	ldrb	r3, [r3, #2]
 8015fc8:	2b01      	cmp	r3, #1
 8015fca:	d10e      	bne.n	8015fea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2200      	movs	r2, #0
 8015fd0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2209      	movs	r2, #9
 8015fd6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	887a      	ldrh	r2, [r7, #2]
 8015fdc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8015fea:	2200      	movs	r2, #0
 8015fec:	2100      	movs	r1, #0
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f000 fa09 	bl	8016406 <USBH_CtlReq>
 8015ff4:	4603      	mov	r3, r0
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3708      	adds	r7, #8
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}

08015ffe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8015ffe:	b580      	push	{r7, lr}
 8016000:	b082      	sub	sp, #8
 8016002:	af00      	add	r7, sp, #0
 8016004:	6078      	str	r0, [r7, #4]
 8016006:	460b      	mov	r3, r1
 8016008:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	789b      	ldrb	r3, [r3, #2]
 801600e:	2b01      	cmp	r3, #1
 8016010:	d10f      	bne.n	8016032 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2200      	movs	r2, #0
 8016016:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2203      	movs	r2, #3
 801601c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801601e:	78fb      	ldrb	r3, [r7, #3]
 8016020:	b29a      	uxth	r2, r3
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2200      	movs	r2, #0
 801602a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2200      	movs	r2, #0
 8016030:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8016032:	2200      	movs	r2, #0
 8016034:	2100      	movs	r1, #0
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 f9e5 	bl	8016406 <USBH_CtlReq>
 801603c:	4603      	mov	r3, r0
}
 801603e:	4618      	mov	r0, r3
 8016040:	3708      	adds	r7, #8
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}

08016046 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8016046:	b580      	push	{r7, lr}
 8016048:	b082      	sub	sp, #8
 801604a:	af00      	add	r7, sp, #0
 801604c:	6078      	str	r0, [r7, #4]
 801604e:	460b      	mov	r3, r1
 8016050:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	789b      	ldrb	r3, [r3, #2]
 8016056:	2b01      	cmp	r3, #1
 8016058:	d10f      	bne.n	801607a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2202      	movs	r2, #2
 801605e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	2201      	movs	r2, #1
 8016064:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	2200      	movs	r2, #0
 801606a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801606c:	78fb      	ldrb	r3, [r7, #3]
 801606e:	b29a      	uxth	r2, r3
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2200      	movs	r2, #0
 8016078:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 801607a:	2200      	movs	r2, #0
 801607c:	2100      	movs	r1, #0
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f000 f9c1 	bl	8016406 <USBH_CtlReq>
 8016084:	4603      	mov	r3, r0
}
 8016086:	4618      	mov	r0, r3
 8016088:	3708      	adds	r7, #8
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 801608e:	b480      	push	{r7}
 8016090:	b085      	sub	sp, #20
 8016092:	af00      	add	r7, sp, #0
 8016094:	60f8      	str	r0, [r7, #12]
 8016096:	60b9      	str	r1, [r7, #8]
 8016098:	4613      	mov	r3, r2
 801609a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	781a      	ldrb	r2, [r3, #0]
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	785a      	ldrb	r2, [r3, #1]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	3302      	adds	r3, #2
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	b29a      	uxth	r2, r3
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	3303      	adds	r3, #3
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	b29b      	uxth	r3, r3
 80160bc:	021b      	lsls	r3, r3, #8
 80160be:	b29b      	uxth	r3, r3
 80160c0:	4313      	orrs	r3, r2
 80160c2:	b29a      	uxth	r2, r3
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	791a      	ldrb	r2, [r3, #4]
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80160d0:	68bb      	ldr	r3, [r7, #8]
 80160d2:	795a      	ldrb	r2, [r3, #5]
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80160d8:	68bb      	ldr	r3, [r7, #8]
 80160da:	799a      	ldrb	r2, [r3, #6]
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	79da      	ldrb	r2, [r3, #7]
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80160e8:	88fb      	ldrh	r3, [r7, #6]
 80160ea:	2b08      	cmp	r3, #8
 80160ec:	d939      	bls.n	8016162 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	3308      	adds	r3, #8
 80160f2:	781b      	ldrb	r3, [r3, #0]
 80160f4:	b29a      	uxth	r2, r3
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	3309      	adds	r3, #9
 80160fa:	781b      	ldrb	r3, [r3, #0]
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	021b      	lsls	r3, r3, #8
 8016100:	b29b      	uxth	r3, r3
 8016102:	4313      	orrs	r3, r2
 8016104:	b29a      	uxth	r2, r3
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	330a      	adds	r3, #10
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	b29a      	uxth	r2, r3
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	330b      	adds	r3, #11
 8016116:	781b      	ldrb	r3, [r3, #0]
 8016118:	b29b      	uxth	r3, r3
 801611a:	021b      	lsls	r3, r3, #8
 801611c:	b29b      	uxth	r3, r3
 801611e:	4313      	orrs	r3, r2
 8016120:	b29a      	uxth	r2, r3
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	330c      	adds	r3, #12
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	b29a      	uxth	r2, r3
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	330d      	adds	r3, #13
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	b29b      	uxth	r3, r3
 8016136:	021b      	lsls	r3, r3, #8
 8016138:	b29b      	uxth	r3, r3
 801613a:	4313      	orrs	r3, r2
 801613c:	b29a      	uxth	r2, r3
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8016142:	68bb      	ldr	r3, [r7, #8]
 8016144:	7b9a      	ldrb	r2, [r3, #14]
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	7bda      	ldrb	r2, [r3, #15]
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	7c1a      	ldrb	r2, [r3, #16]
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	7c5a      	ldrb	r2, [r3, #17]
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	745a      	strb	r2, [r3, #17]
  }
}
 8016162:	bf00      	nop
 8016164:	3714      	adds	r7, #20
 8016166:	46bd      	mov	sp, r7
 8016168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616c:	4770      	bx	lr

0801616e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 801616e:	b580      	push	{r7, lr}
 8016170:	b08a      	sub	sp, #40	; 0x28
 8016172:	af00      	add	r7, sp, #0
 8016174:	60f8      	str	r0, [r7, #12]
 8016176:	60b9      	str	r1, [r7, #8]
 8016178:	4613      	mov	r3, r2
 801617a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8016180:	2300      	movs	r3, #0
 8016182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8016186:	2300      	movs	r3, #0
 8016188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 801618c:	68bb      	ldr	r3, [r7, #8]
 801618e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8016190:	68bb      	ldr	r3, [r7, #8]
 8016192:	781a      	ldrb	r2, [r3, #0]
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	785a      	ldrb	r2, [r3, #1]
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	3302      	adds	r3, #2
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	b29a      	uxth	r2, r3
 80161a8:	68bb      	ldr	r3, [r7, #8]
 80161aa:	3303      	adds	r3, #3
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	021b      	lsls	r3, r3, #8
 80161b2:	b29b      	uxth	r3, r3
 80161b4:	4313      	orrs	r3, r2
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	791a      	ldrb	r2, [r3, #4]
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	795a      	ldrb	r2, [r3, #5]
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	799a      	ldrb	r2, [r3, #6]
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	79da      	ldrb	r2, [r3, #7]
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	7a1a      	ldrb	r2, [r3, #8]
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80161e4:	88fb      	ldrh	r3, [r7, #6]
 80161e6:	2b09      	cmp	r3, #9
 80161e8:	d95f      	bls.n	80162aa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80161ea:	2309      	movs	r3, #9
 80161ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80161ee:	2300      	movs	r3, #0
 80161f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80161f2:	e051      	b.n	8016298 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80161f4:	f107 0316 	add.w	r3, r7, #22
 80161f8:	4619      	mov	r1, r3
 80161fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161fc:	f000 f8e8 	bl	80163d0 <USBH_GetNextDesc>
 8016200:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8016202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016204:	785b      	ldrb	r3, [r3, #1]
 8016206:	2b04      	cmp	r3, #4
 8016208:	d146      	bne.n	8016298 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801620a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801620e:	221a      	movs	r2, #26
 8016210:	fb02 f303 	mul.w	r3, r2, r3
 8016214:	3308      	adds	r3, #8
 8016216:	68fa      	ldr	r2, [r7, #12]
 8016218:	4413      	add	r3, r2
 801621a:	3302      	adds	r3, #2
 801621c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801621e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016220:	69f8      	ldr	r0, [r7, #28]
 8016222:	f000 f846 	bl	80162b2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8016226:	2300      	movs	r3, #0
 8016228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 801622c:	2300      	movs	r3, #0
 801622e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016230:	e022      	b.n	8016278 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016232:	f107 0316 	add.w	r3, r7, #22
 8016236:	4619      	mov	r1, r3
 8016238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801623a:	f000 f8c9 	bl	80163d0 <USBH_GetNextDesc>
 801623e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8016240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016242:	785b      	ldrb	r3, [r3, #1]
 8016244:	2b05      	cmp	r3, #5
 8016246:	d117      	bne.n	8016278 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801624c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016250:	3201      	adds	r2, #1
 8016252:	00d2      	lsls	r2, r2, #3
 8016254:	211a      	movs	r1, #26
 8016256:	fb01 f303 	mul.w	r3, r1, r3
 801625a:	4413      	add	r3, r2
 801625c:	3308      	adds	r3, #8
 801625e:	68fa      	ldr	r2, [r7, #12]
 8016260:	4413      	add	r3, r2
 8016262:	3304      	adds	r3, #4
 8016264:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8016266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016268:	69b8      	ldr	r0, [r7, #24]
 801626a:	f000 f851 	bl	8016310 <USBH_ParseEPDesc>
            ep_ix++;
 801626e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016272:	3301      	adds	r3, #1
 8016274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016278:	69fb      	ldr	r3, [r7, #28]
 801627a:	791b      	ldrb	r3, [r3, #4]
 801627c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016280:	429a      	cmp	r2, r3
 8016282:	d204      	bcs.n	801628e <USBH_ParseCfgDesc+0x120>
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	885a      	ldrh	r2, [r3, #2]
 8016288:	8afb      	ldrh	r3, [r7, #22]
 801628a:	429a      	cmp	r2, r3
 801628c:	d8d1      	bhi.n	8016232 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 801628e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016292:	3301      	adds	r3, #1
 8016294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801629c:	2b01      	cmp	r3, #1
 801629e:	d804      	bhi.n	80162aa <USBH_ParseCfgDesc+0x13c>
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	885a      	ldrh	r2, [r3, #2]
 80162a4:	8afb      	ldrh	r3, [r7, #22]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d8a4      	bhi.n	80161f4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80162aa:	bf00      	nop
 80162ac:	3728      	adds	r7, #40	; 0x28
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}

080162b2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80162b2:	b480      	push	{r7}
 80162b4:	b083      	sub	sp, #12
 80162b6:	af00      	add	r7, sp, #0
 80162b8:	6078      	str	r0, [r7, #4]
 80162ba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	781a      	ldrb	r2, [r3, #0]
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	785a      	ldrb	r2, [r3, #1]
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	789a      	ldrb	r2, [r3, #2]
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	78da      	ldrb	r2, [r3, #3]
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80162dc:	683b      	ldr	r3, [r7, #0]
 80162de:	791a      	ldrb	r2, [r3, #4]
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	795a      	ldrb	r2, [r3, #5]
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80162ec:	683b      	ldr	r3, [r7, #0]
 80162ee:	799a      	ldrb	r2, [r3, #6]
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	79da      	ldrb	r2, [r3, #7]
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	7a1a      	ldrb	r2, [r3, #8]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	721a      	strb	r2, [r3, #8]
}
 8016304:	bf00      	nop
 8016306:	370c      	adds	r7, #12
 8016308:	46bd      	mov	sp, r7
 801630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630e:	4770      	bx	lr

08016310 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8016310:	b480      	push	{r7}
 8016312:	b083      	sub	sp, #12
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
 8016318:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	781a      	ldrb	r2, [r3, #0]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	785a      	ldrb	r2, [r3, #1]
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	789a      	ldrb	r2, [r3, #2]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	78da      	ldrb	r2, [r3, #3]
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	3304      	adds	r3, #4
 801633e:	781b      	ldrb	r3, [r3, #0]
 8016340:	b29a      	uxth	r2, r3
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	3305      	adds	r3, #5
 8016346:	781b      	ldrb	r3, [r3, #0]
 8016348:	b29b      	uxth	r3, r3
 801634a:	021b      	lsls	r3, r3, #8
 801634c:	b29b      	uxth	r3, r3
 801634e:	4313      	orrs	r3, r2
 8016350:	b29a      	uxth	r2, r3
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	799a      	ldrb	r2, [r3, #6]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	719a      	strb	r2, [r3, #6]
}
 801635e:	bf00      	nop
 8016360:	370c      	adds	r7, #12
 8016362:	46bd      	mov	sp, r7
 8016364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016368:	4770      	bx	lr

0801636a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801636a:	b480      	push	{r7}
 801636c:	b087      	sub	sp, #28
 801636e:	af00      	add	r7, sp, #0
 8016370:	60f8      	str	r0, [r7, #12]
 8016372:	60b9      	str	r1, [r7, #8]
 8016374:	4613      	mov	r3, r2
 8016376:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	3301      	adds	r3, #1
 801637c:	781b      	ldrb	r3, [r3, #0]
 801637e:	2b03      	cmp	r3, #3
 8016380:	d120      	bne.n	80163c4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	781b      	ldrb	r3, [r3, #0]
 8016386:	1e9a      	subs	r2, r3, #2
 8016388:	88fb      	ldrh	r3, [r7, #6]
 801638a:	4293      	cmp	r3, r2
 801638c:	bf28      	it	cs
 801638e:	4613      	movcs	r3, r2
 8016390:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	3302      	adds	r3, #2
 8016396:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8016398:	2300      	movs	r3, #0
 801639a:	82fb      	strh	r3, [r7, #22]
 801639c:	e00b      	b.n	80163b6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801639e:	8afb      	ldrh	r3, [r7, #22]
 80163a0:	68fa      	ldr	r2, [r7, #12]
 80163a2:	4413      	add	r3, r2
 80163a4:	781a      	ldrb	r2, [r3, #0]
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	3301      	adds	r3, #1
 80163ae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80163b0:	8afb      	ldrh	r3, [r7, #22]
 80163b2:	3302      	adds	r3, #2
 80163b4:	82fb      	strh	r3, [r7, #22]
 80163b6:	8afa      	ldrh	r2, [r7, #22]
 80163b8:	8abb      	ldrh	r3, [r7, #20]
 80163ba:	429a      	cmp	r2, r3
 80163bc:	d3ef      	bcc.n	801639e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	2200      	movs	r2, #0
 80163c2:	701a      	strb	r2, [r3, #0]
  }
}
 80163c4:	bf00      	nop
 80163c6:	371c      	adds	r7, #28
 80163c8:	46bd      	mov	sp, r7
 80163ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ce:	4770      	bx	lr

080163d0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80163d0:	b480      	push	{r7}
 80163d2:	b085      	sub	sp, #20
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	881a      	ldrh	r2, [r3, #0]
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	781b      	ldrb	r3, [r3, #0]
 80163e2:	b29b      	uxth	r3, r3
 80163e4:	4413      	add	r3, r2
 80163e6:	b29a      	uxth	r2, r3
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	4413      	add	r3, r2
 80163f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80163f8:	68fb      	ldr	r3, [r7, #12]
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3714      	adds	r7, #20
 80163fe:	46bd      	mov	sp, r7
 8016400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016404:	4770      	bx	lr

08016406 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8016406:	b580      	push	{r7, lr}
 8016408:	b086      	sub	sp, #24
 801640a:	af00      	add	r7, sp, #0
 801640c:	60f8      	str	r0, [r7, #12]
 801640e:	60b9      	str	r1, [r7, #8]
 8016410:	4613      	mov	r3, r2
 8016412:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8016414:	2301      	movs	r3, #1
 8016416:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	789b      	ldrb	r3, [r3, #2]
 801641c:	2b01      	cmp	r3, #1
 801641e:	d002      	beq.n	8016426 <USBH_CtlReq+0x20>
 8016420:	2b02      	cmp	r3, #2
 8016422:	d01d      	beq.n	8016460 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8016424:	e043      	b.n	80164ae <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	68ba      	ldr	r2, [r7, #8]
 801642a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	88fa      	ldrh	r2, [r7, #6]
 8016430:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2201      	movs	r2, #1
 8016436:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	2202      	movs	r2, #2
 801643c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801643e:	2301      	movs	r3, #1
 8016440:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	2203      	movs	r2, #3
 8016446:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016456:	2200      	movs	r2, #0
 8016458:	4619      	mov	r1, r3
 801645a:	f000 fd63 	bl	8016f24 <osMessagePut>
      break;
 801645e:	e026      	b.n	80164ae <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8016460:	68f8      	ldr	r0, [r7, #12]
 8016462:	f000 f829 	bl	80164b8 <USBH_HandleControl>
 8016466:	4603      	mov	r3, r0
 8016468:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801646a:	7dfb      	ldrb	r3, [r7, #23]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d002      	beq.n	8016476 <USBH_CtlReq+0x70>
 8016470:	7dfb      	ldrb	r3, [r7, #23]
 8016472:	2b03      	cmp	r3, #3
 8016474:	d106      	bne.n	8016484 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	2201      	movs	r2, #1
 801647a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2200      	movs	r2, #0
 8016480:	761a      	strb	r2, [r3, #24]
 8016482:	e005      	b.n	8016490 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8016484:	7dfb      	ldrb	r3, [r7, #23]
 8016486:	2b02      	cmp	r3, #2
 8016488:	d102      	bne.n	8016490 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	2201      	movs	r2, #1
 801648e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2203      	movs	r2, #3
 8016494:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80164a4:	2200      	movs	r2, #0
 80164a6:	4619      	mov	r1, r3
 80164a8:	f000 fd3c 	bl	8016f24 <osMessagePut>
      break;
 80164ac:	bf00      	nop
  }
  return status;
 80164ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3718      	adds	r7, #24
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b086      	sub	sp, #24
 80164bc:	af02      	add	r7, sp, #8
 80164be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80164c0:	2301      	movs	r3, #1
 80164c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80164c4:	2300      	movs	r3, #0
 80164c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	7e1b      	ldrb	r3, [r3, #24]
 80164cc:	3b01      	subs	r3, #1
 80164ce:	2b0a      	cmp	r3, #10
 80164d0:	f200 8229 	bhi.w	8016926 <USBH_HandleControl+0x46e>
 80164d4:	a201      	add	r2, pc, #4	; (adr r2, 80164dc <USBH_HandleControl+0x24>)
 80164d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164da:	bf00      	nop
 80164dc:	08016509 	.word	0x08016509
 80164e0:	08016523 	.word	0x08016523
 80164e4:	080165c5 	.word	0x080165c5
 80164e8:	080165eb 	.word	0x080165eb
 80164ec:	08016677 	.word	0x08016677
 80164f0:	080166a1 	.word	0x080166a1
 80164f4:	08016763 	.word	0x08016763
 80164f8:	08016785 	.word	0x08016785
 80164fc:	08016817 	.word	0x08016817
 8016500:	0801683d 	.word	0x0801683d
 8016504:	080168cf 	.word	0x080168cf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f103 0110 	add.w	r1, r3, #16
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	795b      	ldrb	r3, [r3, #5]
 8016512:	461a      	mov	r2, r3
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f000 fa17 	bl	8016948 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2202      	movs	r2, #2
 801651e:	761a      	strb	r2, [r3, #24]
      break;
 8016520:	e20c      	b.n	801693c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	795b      	ldrb	r3, [r3, #5]
 8016526:	4619      	mov	r1, r3
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f003 fb7d 	bl	8019c28 <USBH_LL_GetURBState>
 801652e:	4603      	mov	r3, r0
 8016530:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8016532:	7bbb      	ldrb	r3, [r7, #14]
 8016534:	2b01      	cmp	r3, #1
 8016536:	d12c      	bne.n	8016592 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	7c1b      	ldrb	r3, [r3, #16]
 801653c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016540:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	8adb      	ldrh	r3, [r3, #22]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d00a      	beq.n	8016560 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801654a:	7b7b      	ldrb	r3, [r7, #13]
 801654c:	2b80      	cmp	r3, #128	; 0x80
 801654e:	d103      	bne.n	8016558 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	2203      	movs	r2, #3
 8016554:	761a      	strb	r2, [r3, #24]
 8016556:	e00d      	b.n	8016574 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	2205      	movs	r2, #5
 801655c:	761a      	strb	r2, [r3, #24]
 801655e:	e009      	b.n	8016574 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8016560:	7b7b      	ldrb	r3, [r7, #13]
 8016562:	2b80      	cmp	r3, #128	; 0x80
 8016564:	d103      	bne.n	801656e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2209      	movs	r2, #9
 801656a:	761a      	strb	r2, [r3, #24]
 801656c:	e002      	b.n	8016574 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2207      	movs	r2, #7
 8016572:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2203      	movs	r2, #3
 8016578:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016588:	2200      	movs	r2, #0
 801658a:	4619      	mov	r1, r3
 801658c:	f000 fcca 	bl	8016f24 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016590:	e1cb      	b.n	801692a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8016592:	7bbb      	ldrb	r3, [r7, #14]
 8016594:	2b04      	cmp	r3, #4
 8016596:	d003      	beq.n	80165a0 <USBH_HandleControl+0xe8>
 8016598:	7bbb      	ldrb	r3, [r7, #14]
 801659a:	2b02      	cmp	r3, #2
 801659c:	f040 81c5 	bne.w	801692a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	220b      	movs	r2, #11
 80165a4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2203      	movs	r2, #3
 80165aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80165ba:	2200      	movs	r2, #0
 80165bc:	4619      	mov	r1, r3
 80165be:	f000 fcb1 	bl	8016f24 <osMessagePut>
      break;
 80165c2:	e1b2      	b.n	801692a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80165ca:	b29a      	uxth	r2, r3
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6899      	ldr	r1, [r3, #8]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	899a      	ldrh	r2, [r3, #12]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	791b      	ldrb	r3, [r3, #4]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f000 f9f2 	bl	80169c6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2204      	movs	r2, #4
 80165e6:	761a      	strb	r2, [r3, #24]
      break;
 80165e8:	e1a8      	b.n	801693c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	791b      	ldrb	r3, [r3, #4]
 80165ee:	4619      	mov	r1, r3
 80165f0:	6878      	ldr	r0, [r7, #4]
 80165f2:	f003 fb19 	bl	8019c28 <USBH_LL_GetURBState>
 80165f6:	4603      	mov	r3, r0
 80165f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80165fa:	7bbb      	ldrb	r3, [r7, #14]
 80165fc:	2b01      	cmp	r3, #1
 80165fe:	d110      	bne.n	8016622 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2209      	movs	r2, #9
 8016604:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2203      	movs	r2, #3
 801660a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801661a:	2200      	movs	r2, #0
 801661c:	4619      	mov	r1, r3
 801661e:	f000 fc81 	bl	8016f24 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8016622:	7bbb      	ldrb	r3, [r7, #14]
 8016624:	2b05      	cmp	r3, #5
 8016626:	d110      	bne.n	801664a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8016628:	2303      	movs	r3, #3
 801662a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2203      	movs	r2, #3
 8016630:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016640:	2200      	movs	r2, #0
 8016642:	4619      	mov	r1, r3
 8016644:	f000 fc6e 	bl	8016f24 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016648:	e171      	b.n	801692e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 801664a:	7bbb      	ldrb	r3, [r7, #14]
 801664c:	2b04      	cmp	r3, #4
 801664e:	f040 816e 	bne.w	801692e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	220b      	movs	r2, #11
 8016656:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2203      	movs	r2, #3
 801665c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801666c:	2200      	movs	r2, #0
 801666e:	4619      	mov	r1, r3
 8016670:	f000 fc58 	bl	8016f24 <osMessagePut>
      break;
 8016674:	e15b      	b.n	801692e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	6899      	ldr	r1, [r3, #8]
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	899a      	ldrh	r2, [r3, #12]
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	795b      	ldrb	r3, [r3, #5]
 8016682:	2001      	movs	r0, #1
 8016684:	9000      	str	r0, [sp, #0]
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f000 f978 	bl	801697c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016692:	b29a      	uxth	r2, r3
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2206      	movs	r2, #6
 801669c:	761a      	strb	r2, [r3, #24]
      break;
 801669e:	e14d      	b.n	801693c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	795b      	ldrb	r3, [r3, #5]
 80166a4:	4619      	mov	r1, r3
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	f003 fabe 	bl	8019c28 <USBH_LL_GetURBState>
 80166ac:	4603      	mov	r3, r0
 80166ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80166b0:	7bbb      	ldrb	r3, [r7, #14]
 80166b2:	2b01      	cmp	r3, #1
 80166b4:	d111      	bne.n	80166da <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	2207      	movs	r2, #7
 80166ba:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2203      	movs	r2, #3
 80166c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80166d0:	2200      	movs	r2, #0
 80166d2:	4619      	mov	r1, r3
 80166d4:	f000 fc26 	bl	8016f24 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80166d8:	e12b      	b.n	8016932 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80166da:	7bbb      	ldrb	r3, [r7, #14]
 80166dc:	2b05      	cmp	r3, #5
 80166de:	d113      	bne.n	8016708 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	220c      	movs	r2, #12
 80166e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80166e6:	2303      	movs	r3, #3
 80166e8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2203      	movs	r2, #3
 80166ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80166fe:	2200      	movs	r2, #0
 8016700:	4619      	mov	r1, r3
 8016702:	f000 fc0f 	bl	8016f24 <osMessagePut>
      break;
 8016706:	e114      	b.n	8016932 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016708:	7bbb      	ldrb	r3, [r7, #14]
 801670a:	2b02      	cmp	r3, #2
 801670c:	d111      	bne.n	8016732 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	2205      	movs	r2, #5
 8016712:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2203      	movs	r2, #3
 8016718:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016728:	2200      	movs	r2, #0
 801672a:	4619      	mov	r1, r3
 801672c:	f000 fbfa 	bl	8016f24 <osMessagePut>
      break;
 8016730:	e0ff      	b.n	8016932 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8016732:	7bbb      	ldrb	r3, [r7, #14]
 8016734:	2b04      	cmp	r3, #4
 8016736:	f040 80fc 	bne.w	8016932 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	220b      	movs	r2, #11
 801673e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8016740:	2302      	movs	r3, #2
 8016742:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2203      	movs	r2, #3
 8016748:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016758:	2200      	movs	r2, #0
 801675a:	4619      	mov	r1, r3
 801675c:	f000 fbe2 	bl	8016f24 <osMessagePut>
      break;
 8016760:	e0e7      	b.n	8016932 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	791b      	ldrb	r3, [r3, #4]
 8016766:	2200      	movs	r2, #0
 8016768:	2100      	movs	r1, #0
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f000 f92b 	bl	80169c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016776:	b29a      	uxth	r2, r3
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2208      	movs	r2, #8
 8016780:	761a      	strb	r2, [r3, #24]

      break;
 8016782:	e0db      	b.n	801693c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	791b      	ldrb	r3, [r3, #4]
 8016788:	4619      	mov	r1, r3
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	f003 fa4c 	bl	8019c28 <USBH_LL_GetURBState>
 8016790:	4603      	mov	r3, r0
 8016792:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016794:	7bbb      	ldrb	r3, [r7, #14]
 8016796:	2b01      	cmp	r3, #1
 8016798:	d113      	bne.n	80167c2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	220d      	movs	r2, #13
 801679e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80167a0:	2300      	movs	r3, #0
 80167a2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2203      	movs	r2, #3
 80167a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80167b8:	2200      	movs	r2, #0
 80167ba:	4619      	mov	r1, r3
 80167bc:	f000 fbb2 	bl	8016f24 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80167c0:	e0b9      	b.n	8016936 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80167c2:	7bbb      	ldrb	r3, [r7, #14]
 80167c4:	2b04      	cmp	r3, #4
 80167c6:	d111      	bne.n	80167ec <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	220b      	movs	r2, #11
 80167cc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	2203      	movs	r2, #3
 80167d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80167e2:	2200      	movs	r2, #0
 80167e4:	4619      	mov	r1, r3
 80167e6:	f000 fb9d 	bl	8016f24 <osMessagePut>
      break;
 80167ea:	e0a4      	b.n	8016936 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80167ec:	7bbb      	ldrb	r3, [r7, #14]
 80167ee:	2b05      	cmp	r3, #5
 80167f0:	f040 80a1 	bne.w	8016936 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80167f4:	2303      	movs	r3, #3
 80167f6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	2203      	movs	r2, #3
 80167fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801680c:	2200      	movs	r2, #0
 801680e:	4619      	mov	r1, r3
 8016810:	f000 fb88 	bl	8016f24 <osMessagePut>
      break;
 8016814:	e08f      	b.n	8016936 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	795b      	ldrb	r3, [r3, #5]
 801681a:	2201      	movs	r2, #1
 801681c:	9200      	str	r2, [sp, #0]
 801681e:	2200      	movs	r2, #0
 8016820:	2100      	movs	r1, #0
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f000 f8aa 	bl	801697c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801682e:	b29a      	uxth	r2, r3
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	220a      	movs	r2, #10
 8016838:	761a      	strb	r2, [r3, #24]
      break;
 801683a:	e07f      	b.n	801693c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	795b      	ldrb	r3, [r3, #5]
 8016840:	4619      	mov	r1, r3
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f003 f9f0 	bl	8019c28 <USBH_LL_GetURBState>
 8016848:	4603      	mov	r3, r0
 801684a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801684c:	7bbb      	ldrb	r3, [r7, #14]
 801684e:	2b01      	cmp	r3, #1
 8016850:	d113      	bne.n	801687a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8016852:	2300      	movs	r3, #0
 8016854:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	220d      	movs	r2, #13
 801685a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	2203      	movs	r2, #3
 8016860:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016870:	2200      	movs	r2, #0
 8016872:	4619      	mov	r1, r3
 8016874:	f000 fb56 	bl	8016f24 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016878:	e05f      	b.n	801693a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 801687a:	7bbb      	ldrb	r3, [r7, #14]
 801687c:	2b02      	cmp	r3, #2
 801687e:	d111      	bne.n	80168a4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2209      	movs	r2, #9
 8016884:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2203      	movs	r2, #3
 801688a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801689a:	2200      	movs	r2, #0
 801689c:	4619      	mov	r1, r3
 801689e:	f000 fb41 	bl	8016f24 <osMessagePut>
      break;
 80168a2:	e04a      	b.n	801693a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80168a4:	7bbb      	ldrb	r3, [r7, #14]
 80168a6:	2b04      	cmp	r3, #4
 80168a8:	d147      	bne.n	801693a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	220b      	movs	r2, #11
 80168ae:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	2203      	movs	r2, #3
 80168b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80168c4:	2200      	movs	r2, #0
 80168c6:	4619      	mov	r1, r3
 80168c8:	f000 fb2c 	bl	8016f24 <osMessagePut>
      break;
 80168cc:	e035      	b.n	801693a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	7e5b      	ldrb	r3, [r3, #25]
 80168d2:	3301      	adds	r3, #1
 80168d4:	b2da      	uxtb	r2, r3
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	765a      	strb	r2, [r3, #25]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	7e5b      	ldrb	r3, [r3, #25]
 80168de:	2b02      	cmp	r3, #2
 80168e0:	d806      	bhi.n	80168f0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2201      	movs	r2, #1
 80168e6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2201      	movs	r2, #1
 80168ec:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80168ee:	e025      	b.n	801693c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80168f6:	2106      	movs	r1, #6
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2200      	movs	r2, #0
 8016900:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	795b      	ldrb	r3, [r3, #5]
 8016906:	4619      	mov	r1, r3
 8016908:	6878      	ldr	r0, [r7, #4]
 801690a:	f000 f90d 	bl	8016b28 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	791b      	ldrb	r3, [r3, #4]
 8016912:	4619      	mov	r1, r3
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f000 f907 	bl	8016b28 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2200      	movs	r2, #0
 801691e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8016920:	2302      	movs	r3, #2
 8016922:	73fb      	strb	r3, [r7, #15]
      break;
 8016924:	e00a      	b.n	801693c <USBH_HandleControl+0x484>

    default:
      break;
 8016926:	bf00      	nop
 8016928:	e008      	b.n	801693c <USBH_HandleControl+0x484>
      break;
 801692a:	bf00      	nop
 801692c:	e006      	b.n	801693c <USBH_HandleControl+0x484>
      break;
 801692e:	bf00      	nop
 8016930:	e004      	b.n	801693c <USBH_HandleControl+0x484>
      break;
 8016932:	bf00      	nop
 8016934:	e002      	b.n	801693c <USBH_HandleControl+0x484>
      break;
 8016936:	bf00      	nop
 8016938:	e000      	b.n	801693c <USBH_HandleControl+0x484>
      break;
 801693a:	bf00      	nop
  }

  return status;
 801693c:	7bfb      	ldrb	r3, [r7, #15]
}
 801693e:	4618      	mov	r0, r3
 8016940:	3710      	adds	r7, #16
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
 8016946:	bf00      	nop

08016948 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b088      	sub	sp, #32
 801694c:	af04      	add	r7, sp, #16
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	60b9      	str	r1, [r7, #8]
 8016952:	4613      	mov	r3, r2
 8016954:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016956:	79f9      	ldrb	r1, [r7, #7]
 8016958:	2300      	movs	r3, #0
 801695a:	9303      	str	r3, [sp, #12]
 801695c:	2308      	movs	r3, #8
 801695e:	9302      	str	r3, [sp, #8]
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	9301      	str	r3, [sp, #4]
 8016964:	2300      	movs	r3, #0
 8016966:	9300      	str	r3, [sp, #0]
 8016968:	2300      	movs	r3, #0
 801696a:	2200      	movs	r2, #0
 801696c:	68f8      	ldr	r0, [r7, #12]
 801696e:	f003 f92a 	bl	8019bc6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8016972:	2300      	movs	r3, #0
}
 8016974:	4618      	mov	r0, r3
 8016976:	3710      	adds	r7, #16
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}

0801697c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b088      	sub	sp, #32
 8016980:	af04      	add	r7, sp, #16
 8016982:	60f8      	str	r0, [r7, #12]
 8016984:	60b9      	str	r1, [r7, #8]
 8016986:	4611      	mov	r1, r2
 8016988:	461a      	mov	r2, r3
 801698a:	460b      	mov	r3, r1
 801698c:	80fb      	strh	r3, [r7, #6]
 801698e:	4613      	mov	r3, r2
 8016990:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016998:	2b00      	cmp	r3, #0
 801699a:	d001      	beq.n	80169a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801699c:	2300      	movs	r3, #0
 801699e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80169a0:	7979      	ldrb	r1, [r7, #5]
 80169a2:	7e3b      	ldrb	r3, [r7, #24]
 80169a4:	9303      	str	r3, [sp, #12]
 80169a6:	88fb      	ldrh	r3, [r7, #6]
 80169a8:	9302      	str	r3, [sp, #8]
 80169aa:	68bb      	ldr	r3, [r7, #8]
 80169ac:	9301      	str	r3, [sp, #4]
 80169ae:	2301      	movs	r3, #1
 80169b0:	9300      	str	r3, [sp, #0]
 80169b2:	2300      	movs	r3, #0
 80169b4:	2200      	movs	r2, #0
 80169b6:	68f8      	ldr	r0, [r7, #12]
 80169b8:	f003 f905 	bl	8019bc6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80169bc:	2300      	movs	r3, #0
}
 80169be:	4618      	mov	r0, r3
 80169c0:	3710      	adds	r7, #16
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}

080169c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80169c6:	b580      	push	{r7, lr}
 80169c8:	b088      	sub	sp, #32
 80169ca:	af04      	add	r7, sp, #16
 80169cc:	60f8      	str	r0, [r7, #12]
 80169ce:	60b9      	str	r1, [r7, #8]
 80169d0:	4611      	mov	r1, r2
 80169d2:	461a      	mov	r2, r3
 80169d4:	460b      	mov	r3, r1
 80169d6:	80fb      	strh	r3, [r7, #6]
 80169d8:	4613      	mov	r3, r2
 80169da:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80169dc:	7979      	ldrb	r1, [r7, #5]
 80169de:	2300      	movs	r3, #0
 80169e0:	9303      	str	r3, [sp, #12]
 80169e2:	88fb      	ldrh	r3, [r7, #6]
 80169e4:	9302      	str	r3, [sp, #8]
 80169e6:	68bb      	ldr	r3, [r7, #8]
 80169e8:	9301      	str	r3, [sp, #4]
 80169ea:	2301      	movs	r3, #1
 80169ec:	9300      	str	r3, [sp, #0]
 80169ee:	2300      	movs	r3, #0
 80169f0:	2201      	movs	r2, #1
 80169f2:	68f8      	ldr	r0, [r7, #12]
 80169f4:	f003 f8e7 	bl	8019bc6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80169f8:	2300      	movs	r3, #0

}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3710      	adds	r7, #16
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}

08016a02 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8016a02:	b580      	push	{r7, lr}
 8016a04:	b088      	sub	sp, #32
 8016a06:	af04      	add	r7, sp, #16
 8016a08:	60f8      	str	r0, [r7, #12]
 8016a0a:	60b9      	str	r1, [r7, #8]
 8016a0c:	4611      	mov	r1, r2
 8016a0e:	461a      	mov	r2, r3
 8016a10:	460b      	mov	r3, r1
 8016a12:	80fb      	strh	r3, [r7, #6]
 8016a14:	4613      	mov	r3, r2
 8016a16:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d001      	beq.n	8016a26 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8016a22:	2300      	movs	r3, #0
 8016a24:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016a26:	7979      	ldrb	r1, [r7, #5]
 8016a28:	7e3b      	ldrb	r3, [r7, #24]
 8016a2a:	9303      	str	r3, [sp, #12]
 8016a2c:	88fb      	ldrh	r3, [r7, #6]
 8016a2e:	9302      	str	r3, [sp, #8]
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	9301      	str	r3, [sp, #4]
 8016a34:	2301      	movs	r3, #1
 8016a36:	9300      	str	r3, [sp, #0]
 8016a38:	2302      	movs	r3, #2
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	68f8      	ldr	r0, [r7, #12]
 8016a3e:	f003 f8c2 	bl	8019bc6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8016a42:	2300      	movs	r3, #0
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	3710      	adds	r7, #16
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}

08016a4c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b088      	sub	sp, #32
 8016a50:	af04      	add	r7, sp, #16
 8016a52:	60f8      	str	r0, [r7, #12]
 8016a54:	60b9      	str	r1, [r7, #8]
 8016a56:	4611      	mov	r1, r2
 8016a58:	461a      	mov	r2, r3
 8016a5a:	460b      	mov	r3, r1
 8016a5c:	80fb      	strh	r3, [r7, #6]
 8016a5e:	4613      	mov	r3, r2
 8016a60:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016a62:	7979      	ldrb	r1, [r7, #5]
 8016a64:	2300      	movs	r3, #0
 8016a66:	9303      	str	r3, [sp, #12]
 8016a68:	88fb      	ldrh	r3, [r7, #6]
 8016a6a:	9302      	str	r3, [sp, #8]
 8016a6c:	68bb      	ldr	r3, [r7, #8]
 8016a6e:	9301      	str	r3, [sp, #4]
 8016a70:	2301      	movs	r3, #1
 8016a72:	9300      	str	r3, [sp, #0]
 8016a74:	2302      	movs	r3, #2
 8016a76:	2201      	movs	r2, #1
 8016a78:	68f8      	ldr	r0, [r7, #12]
 8016a7a:	f003 f8a4 	bl	8019bc6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8016a7e:	2300      	movs	r3, #0
}
 8016a80:	4618      	mov	r0, r3
 8016a82:	3710      	adds	r7, #16
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b086      	sub	sp, #24
 8016a8c:	af04      	add	r7, sp, #16
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	4608      	mov	r0, r1
 8016a92:	4611      	mov	r1, r2
 8016a94:	461a      	mov	r2, r3
 8016a96:	4603      	mov	r3, r0
 8016a98:	70fb      	strb	r3, [r7, #3]
 8016a9a:	460b      	mov	r3, r1
 8016a9c:	70bb      	strb	r3, [r7, #2]
 8016a9e:	4613      	mov	r3, r2
 8016aa0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8016aa2:	7878      	ldrb	r0, [r7, #1]
 8016aa4:	78ba      	ldrb	r2, [r7, #2]
 8016aa6:	78f9      	ldrb	r1, [r7, #3]
 8016aa8:	8b3b      	ldrh	r3, [r7, #24]
 8016aaa:	9302      	str	r3, [sp, #8]
 8016aac:	7d3b      	ldrb	r3, [r7, #20]
 8016aae:	9301      	str	r3, [sp, #4]
 8016ab0:	7c3b      	ldrb	r3, [r7, #16]
 8016ab2:	9300      	str	r3, [sp, #0]
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f003 f837 	bl	8019b2a <USBH_LL_OpenPipe>

  return USBH_OK;
 8016abc:	2300      	movs	r3, #0
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}

08016ac6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8016ac6:	b580      	push	{r7, lr}
 8016ac8:	b082      	sub	sp, #8
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	6078      	str	r0, [r7, #4]
 8016ace:	460b      	mov	r3, r1
 8016ad0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8016ad2:	78fb      	ldrb	r3, [r7, #3]
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f003 f856 	bl	8019b88 <USBH_LL_ClosePipe>

  return USBH_OK;
 8016adc:	2300      	movs	r3, #0
}
 8016ade:	4618      	mov	r0, r3
 8016ae0:	3708      	adds	r7, #8
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}

08016ae6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8016ae6:	b580      	push	{r7, lr}
 8016ae8:	b084      	sub	sp, #16
 8016aea:	af00      	add	r7, sp, #0
 8016aec:	6078      	str	r0, [r7, #4]
 8016aee:	460b      	mov	r3, r1
 8016af0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8016af2:	6878      	ldr	r0, [r7, #4]
 8016af4:	f000 f836 	bl	8016b64 <USBH_GetFreePipe>
 8016af8:	4603      	mov	r3, r0
 8016afa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8016afc:	89fb      	ldrh	r3, [r7, #14]
 8016afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b02:	4293      	cmp	r3, r2
 8016b04:	d00a      	beq.n	8016b1c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8016b06:	78fa      	ldrb	r2, [r7, #3]
 8016b08:	89fb      	ldrh	r3, [r7, #14]
 8016b0a:	f003 030f 	and.w	r3, r3, #15
 8016b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016b12:	6879      	ldr	r1, [r7, #4]
 8016b14:	33e0      	adds	r3, #224	; 0xe0
 8016b16:	009b      	lsls	r3, r3, #2
 8016b18:	440b      	add	r3, r1
 8016b1a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8016b1c:	89fb      	ldrh	r3, [r7, #14]
 8016b1e:	b2db      	uxtb	r3, r3
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	3710      	adds	r7, #16
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}

08016b28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8016b28:	b480      	push	{r7}
 8016b2a:	b083      	sub	sp, #12
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	460b      	mov	r3, r1
 8016b32:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8016b34:	78fb      	ldrb	r3, [r7, #3]
 8016b36:	2b0a      	cmp	r3, #10
 8016b38:	d80d      	bhi.n	8016b56 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8016b3a:	78fb      	ldrb	r3, [r7, #3]
 8016b3c:	687a      	ldr	r2, [r7, #4]
 8016b3e:	33e0      	adds	r3, #224	; 0xe0
 8016b40:	009b      	lsls	r3, r3, #2
 8016b42:	4413      	add	r3, r2
 8016b44:	685a      	ldr	r2, [r3, #4]
 8016b46:	78fb      	ldrb	r3, [r7, #3]
 8016b48:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8016b4c:	6879      	ldr	r1, [r7, #4]
 8016b4e:	33e0      	adds	r3, #224	; 0xe0
 8016b50:	009b      	lsls	r3, r3, #2
 8016b52:	440b      	add	r3, r1
 8016b54:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8016b56:	2300      	movs	r3, #0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	370c      	adds	r7, #12
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b62:	4770      	bx	lr

08016b64 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8016b64:	b480      	push	{r7}
 8016b66:	b085      	sub	sp, #20
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8016b70:	2300      	movs	r3, #0
 8016b72:	73fb      	strb	r3, [r7, #15]
 8016b74:	e00f      	b.n	8016b96 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	687a      	ldr	r2, [r7, #4]
 8016b7a:	33e0      	adds	r3, #224	; 0xe0
 8016b7c:	009b      	lsls	r3, r3, #2
 8016b7e:	4413      	add	r3, r2
 8016b80:	685b      	ldr	r3, [r3, #4]
 8016b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d102      	bne.n	8016b90 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8016b8a:	7bfb      	ldrb	r3, [r7, #15]
 8016b8c:	b29b      	uxth	r3, r3
 8016b8e:	e007      	b.n	8016ba0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8016b90:	7bfb      	ldrb	r3, [r7, #15]
 8016b92:	3301      	adds	r3, #1
 8016b94:	73fb      	strb	r3, [r7, #15]
 8016b96:	7bfb      	ldrb	r3, [r7, #15]
 8016b98:	2b0a      	cmp	r3, #10
 8016b9a:	d9ec      	bls.n	8016b76 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8016b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3714      	adds	r7, #20
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016baa:	4770      	bx	lr

08016bac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016bac:	b480      	push	{r7}
 8016bae:	b087      	sub	sp, #28
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60f8      	str	r0, [r7, #12]
 8016bb4:	60b9      	str	r1, [r7, #8]
 8016bb6:	4613      	mov	r3, r2
 8016bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016bba:	2301      	movs	r3, #1
 8016bbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016bc2:	4b1f      	ldr	r3, [pc, #124]	; (8016c40 <FATFS_LinkDriverEx+0x94>)
 8016bc4:	7a5b      	ldrb	r3, [r3, #9]
 8016bc6:	b2db      	uxtb	r3, r3
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d131      	bne.n	8016c30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016bcc:	4b1c      	ldr	r3, [pc, #112]	; (8016c40 <FATFS_LinkDriverEx+0x94>)
 8016bce:	7a5b      	ldrb	r3, [r3, #9]
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	461a      	mov	r2, r3
 8016bd4:	4b1a      	ldr	r3, [pc, #104]	; (8016c40 <FATFS_LinkDriverEx+0x94>)
 8016bd6:	2100      	movs	r1, #0
 8016bd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016bda:	4b19      	ldr	r3, [pc, #100]	; (8016c40 <FATFS_LinkDriverEx+0x94>)
 8016bdc:	7a5b      	ldrb	r3, [r3, #9]
 8016bde:	b2db      	uxtb	r3, r3
 8016be0:	4a17      	ldr	r2, [pc, #92]	; (8016c40 <FATFS_LinkDriverEx+0x94>)
 8016be2:	009b      	lsls	r3, r3, #2
 8016be4:	4413      	add	r3, r2
 8016be6:	68fa      	ldr	r2, [r7, #12]
 8016be8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016bea:	4b15      	ldr	r3, [pc, #84]	; (8016c40 <FATFS_LinkDriverEx+0x94>)
 8016bec:	7a5b      	ldrb	r3, [r3, #9]
 8016bee:	b2db      	uxtb	r3, r3
 8016bf0:	461a      	mov	r2, r3
 8016bf2:	4b13      	ldr	r3, [pc, #76]	; (8016c40 <FATFS_LinkDriverEx+0x94>)
 8016bf4:	4413      	add	r3, r2
 8016bf6:	79fa      	ldrb	r2, [r7, #7]
 8016bf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016bfa:	4b11      	ldr	r3, [pc, #68]	; (8016c40 <FATFS_LinkDriverEx+0x94>)
 8016bfc:	7a5b      	ldrb	r3, [r3, #9]
 8016bfe:	b2db      	uxtb	r3, r3
 8016c00:	1c5a      	adds	r2, r3, #1
 8016c02:	b2d1      	uxtb	r1, r2
 8016c04:	4a0e      	ldr	r2, [pc, #56]	; (8016c40 <FATFS_LinkDriverEx+0x94>)
 8016c06:	7251      	strb	r1, [r2, #9]
 8016c08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016c0a:	7dbb      	ldrb	r3, [r7, #22]
 8016c0c:	3330      	adds	r3, #48	; 0x30
 8016c0e:	b2da      	uxtb	r2, r3
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	3301      	adds	r3, #1
 8016c18:	223a      	movs	r2, #58	; 0x3a
 8016c1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016c1c:	68bb      	ldr	r3, [r7, #8]
 8016c1e:	3302      	adds	r3, #2
 8016c20:	222f      	movs	r2, #47	; 0x2f
 8016c22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	3303      	adds	r3, #3
 8016c28:	2200      	movs	r2, #0
 8016c2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c32:	4618      	mov	r0, r3
 8016c34:	371c      	adds	r7, #28
 8016c36:	46bd      	mov	sp, r7
 8016c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3c:	4770      	bx	lr
 8016c3e:	bf00      	nop
 8016c40:	200003d4 	.word	0x200003d4

08016c44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b082      	sub	sp, #8
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
 8016c4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016c4e:	2200      	movs	r2, #0
 8016c50:	6839      	ldr	r1, [r7, #0]
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f7ff ffaa 	bl	8016bac <FATFS_LinkDriverEx>
 8016c58:	4603      	mov	r3, r0
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3708      	adds	r7, #8
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}

08016c62 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8016c62:	b480      	push	{r7}
 8016c64:	b085      	sub	sp, #20
 8016c66:	af00      	add	r7, sp, #0
 8016c68:	4603      	mov	r3, r0
 8016c6a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8016c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c74:	2b84      	cmp	r3, #132	; 0x84
 8016c76:	d005      	beq.n	8016c84 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8016c78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	4413      	add	r3, r2
 8016c80:	3303      	adds	r3, #3
 8016c82:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8016c84:	68fb      	ldr	r3, [r7, #12]
}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3714      	adds	r7, #20
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c90:	4770      	bx	lr

08016c92 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8016c92:	b480      	push	{r7}
 8016c94:	b083      	sub	sp, #12
 8016c96:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c98:	f3ef 8305 	mrs	r3, IPSR
 8016c9c:	607b      	str	r3, [r7, #4]
  return(result);
 8016c9e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	bf14      	ite	ne
 8016ca4:	2301      	movne	r3, #1
 8016ca6:	2300      	moveq	r3, #0
 8016ca8:	b2db      	uxtb	r3, r3
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	370c      	adds	r7, #12
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr

08016cb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8016cb6:	b580      	push	{r7, lr}
 8016cb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8016cba:	f001 f9e7 	bl	801808c <vTaskStartScheduler>
  
  return osOK;
 8016cbe:	2300      	movs	r3, #0
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	bd80      	pop	{r7, pc}

08016cc4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8016cc8:	f001 fe3a 	bl	8018940 <xTaskGetSchedulerState>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	2b01      	cmp	r3, #1
 8016cd0:	d101      	bne.n	8016cd6 <osKernelRunning+0x12>
    return 0;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	e000      	b.n	8016cd8 <osKernelRunning+0x14>
  else
    return 1;
 8016cd6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8016cd8:	4618      	mov	r0, r3
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8016ce0:	f7ff ffd7 	bl	8016c92 <inHandlerMode>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d003      	beq.n	8016cf2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8016cea:	f001 faef 	bl	80182cc <xTaskGetTickCountFromISR>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	e002      	b.n	8016cf8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8016cf2:	f001 fadb 	bl	80182ac <xTaskGetTickCount>
 8016cf6:	4603      	mov	r3, r0
  }
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cfe:	b089      	sub	sp, #36	; 0x24
 8016d00:	af04      	add	r7, sp, #16
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	695b      	ldr	r3, [r3, #20]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d020      	beq.n	8016d50 <osThreadCreate+0x54>
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	699b      	ldr	r3, [r3, #24]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d01c      	beq.n	8016d50 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	685c      	ldr	r4, [r3, #4]
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	681d      	ldr	r5, [r3, #0]
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	691e      	ldr	r6, [r3, #16]
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f7ff ff9a 	bl	8016c62 <makeFreeRtosPriority>
 8016d2e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	695b      	ldr	r3, [r3, #20]
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016d38:	9202      	str	r2, [sp, #8]
 8016d3a:	9301      	str	r3, [sp, #4]
 8016d3c:	9100      	str	r1, [sp, #0]
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	4632      	mov	r2, r6
 8016d42:	4629      	mov	r1, r5
 8016d44:	4620      	mov	r0, r4
 8016d46:	f000 ffc5 	bl	8017cd4 <xTaskCreateStatic>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	60fb      	str	r3, [r7, #12]
 8016d4e:	e01c      	b.n	8016d8a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	685c      	ldr	r4, [r3, #4]
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016d5c:	b29e      	uxth	r6, r3
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016d64:	4618      	mov	r0, r3
 8016d66:	f7ff ff7c 	bl	8016c62 <makeFreeRtosPriority>
 8016d6a:	4602      	mov	r2, r0
 8016d6c:	f107 030c 	add.w	r3, r7, #12
 8016d70:	9301      	str	r3, [sp, #4]
 8016d72:	9200      	str	r2, [sp, #0]
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	4632      	mov	r2, r6
 8016d78:	4629      	mov	r1, r5
 8016d7a:	4620      	mov	r0, r4
 8016d7c:	f001 f80d 	bl	8017d9a <xTaskCreate>
 8016d80:	4603      	mov	r3, r0
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	d001      	beq.n	8016d8a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8016d86:	2300      	movs	r3, #0
 8016d88:	e000      	b.n	8016d8c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8016d8a:	68fb      	ldr	r3, [r7, #12]
}
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	3714      	adds	r7, #20
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b084      	sub	sp, #16
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d001      	beq.n	8016daa <osDelay+0x16>
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	e000      	b.n	8016dac <osDelay+0x18>
 8016daa:	2301      	movs	r3, #1
 8016dac:	4618      	mov	r0, r3
 8016dae:	f001 f937 	bl	8018020 <vTaskDelay>
  
  return osOK;
 8016db2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3710      	adds	r7, #16
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b086      	sub	sp, #24
 8016dc0:	af02      	add	r7, sp, #8
 8016dc2:	6078      	str	r0, [r7, #4]
 8016dc4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8016dca:	2300      	movs	r3, #0
 8016dcc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8016dce:	f7ff ff60 	bl	8016c92 <inHandlerMode>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d01c      	beq.n	8016e12 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8016dd8:	6839      	ldr	r1, [r7, #0]
 8016dda:	f107 0208 	add.w	r2, r7, #8
 8016dde:	f107 030c 	add.w	r3, r7, #12
 8016de2:	9300      	str	r3, [sp, #0]
 8016de4:	4613      	mov	r3, r2
 8016de6:	2201      	movs	r2, #1
 8016de8:	6878      	ldr	r0, [r7, #4]
 8016dea:	f001 ff67 	bl	8018cbc <xTaskGenericNotifyFromISR>
 8016dee:	4603      	mov	r3, r0
 8016df0:	2b01      	cmp	r3, #1
 8016df2:	d002      	beq.n	8016dfa <osSignalSet+0x3e>
      return 0x80000000;
 8016df4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016df8:	e019      	b.n	8016e2e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d015      	beq.n	8016e2c <osSignalSet+0x70>
 8016e00:	4b0d      	ldr	r3, [pc, #52]	; (8016e38 <osSignalSet+0x7c>)
 8016e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e06:	601a      	str	r2, [r3, #0]
 8016e08:	f3bf 8f4f 	dsb	sy
 8016e0c:	f3bf 8f6f 	isb	sy
 8016e10:	e00c      	b.n	8016e2c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8016e12:	6839      	ldr	r1, [r7, #0]
 8016e14:	f107 0308 	add.w	r3, r7, #8
 8016e18:	2201      	movs	r2, #1
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	f001 fe92 	bl	8018b44 <xTaskGenericNotify>
 8016e20:	4603      	mov	r3, r0
 8016e22:	2b01      	cmp	r3, #1
 8016e24:	d002      	beq.n	8016e2c <osSignalSet+0x70>
    return 0x80000000;
 8016e26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016e2a:	e000      	b.n	8016e2e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8016e2c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	e000ed04 	.word	0xe000ed04

08016e3c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8016e3c:	b590      	push	{r4, r7, lr}
 8016e3e:	b089      	sub	sp, #36	; 0x24
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	60f8      	str	r0, [r7, #12]
 8016e44:	60b9      	str	r1, [r7, #8]
 8016e46:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8016e48:	2300      	movs	r3, #0
 8016e4a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e56:	d103      	bne.n	8016e60 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8016e58:	f04f 33ff 	mov.w	r3, #4294967295
 8016e5c:	61fb      	str	r3, [r7, #28]
 8016e5e:	e009      	b.n	8016e74 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d006      	beq.n	8016e74 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8016e6a:	69fb      	ldr	r3, [r7, #28]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d101      	bne.n	8016e74 <osSignalWait+0x38>
      ticks = 1;
 8016e70:	2301      	movs	r3, #1
 8016e72:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8016e74:	f7ff ff0d 	bl	8016c92 <inHandlerMode>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d002      	beq.n	8016e84 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8016e7e:	2382      	movs	r3, #130	; 0x82
 8016e80:	613b      	str	r3, [r7, #16]
 8016e82:	e01b      	b.n	8016ebc <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8016e84:	68b9      	ldr	r1, [r7, #8]
 8016e86:	f107 0310 	add.w	r3, r7, #16
 8016e8a:	1d1a      	adds	r2, r3, #4
 8016e8c:	69fb      	ldr	r3, [r7, #28]
 8016e8e:	2000      	movs	r0, #0
 8016e90:	f001 fdfe 	bl	8018a90 <xTaskNotifyWait>
 8016e94:	4603      	mov	r3, r0
 8016e96:	2b01      	cmp	r3, #1
 8016e98:	d008      	beq.n	8016eac <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8016e9a:	69fb      	ldr	r3, [r7, #28]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d102      	bne.n	8016ea6 <osSignalWait+0x6a>
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	613b      	str	r3, [r7, #16]
 8016ea4:	e00a      	b.n	8016ebc <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8016ea6:	2340      	movs	r3, #64	; 0x40
 8016ea8:	613b      	str	r3, [r7, #16]
 8016eaa:	e007      	b.n	8016ebc <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8016eac:	697b      	ldr	r3, [r7, #20]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	da02      	bge.n	8016eb8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8016eb2:	2386      	movs	r3, #134	; 0x86
 8016eb4:	613b      	str	r3, [r7, #16]
 8016eb6:	e001      	b.n	8016ebc <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8016eb8:	2308      	movs	r3, #8
 8016eba:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	461c      	mov	r4, r3
 8016ec0:	f107 0310 	add.w	r3, r7, #16
 8016ec4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ec8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016ecc:	68f8      	ldr	r0, [r7, #12]
 8016ece:	3724      	adds	r7, #36	; 0x24
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd90      	pop	{r4, r7, pc}

08016ed4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8016ed4:	b590      	push	{r4, r7, lr}
 8016ed6:	b085      	sub	sp, #20
 8016ed8:	af02      	add	r7, sp, #8
 8016eda:	6078      	str	r0, [r7, #4]
 8016edc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	689b      	ldr	r3, [r3, #8]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d011      	beq.n	8016f0a <osMessageCreate+0x36>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	68db      	ldr	r3, [r3, #12]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d00d      	beq.n	8016f0a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	6818      	ldr	r0, [r3, #0]
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	6859      	ldr	r1, [r3, #4]
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	689a      	ldr	r2, [r3, #8]
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	68db      	ldr	r3, [r3, #12]
 8016efe:	2400      	movs	r4, #0
 8016f00:	9400      	str	r4, [sp, #0]
 8016f02:	f000 f9e1 	bl	80172c8 <xQueueGenericCreateStatic>
 8016f06:	4603      	mov	r3, r0
 8016f08:	e008      	b.n	8016f1c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6818      	ldr	r0, [r3, #0]
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	685b      	ldr	r3, [r3, #4]
 8016f12:	2200      	movs	r2, #0
 8016f14:	4619      	mov	r1, r3
 8016f16:	f000 fa59 	bl	80173cc <xQueueGenericCreate>
 8016f1a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	370c      	adds	r7, #12
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd90      	pop	{r4, r7, pc}

08016f24 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b086      	sub	sp, #24
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	60f8      	str	r0, [r7, #12]
 8016f2c:	60b9      	str	r1, [r7, #8]
 8016f2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8016f30:	2300      	movs	r3, #0
 8016f32:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8016f38:	697b      	ldr	r3, [r7, #20]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d101      	bne.n	8016f42 <osMessagePut+0x1e>
    ticks = 1;
 8016f3e:	2301      	movs	r3, #1
 8016f40:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8016f42:	f7ff fea6 	bl	8016c92 <inHandlerMode>
 8016f46:	4603      	mov	r3, r0
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d018      	beq.n	8016f7e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016f4c:	f107 0210 	add.w	r2, r7, #16
 8016f50:	f107 0108 	add.w	r1, r7, #8
 8016f54:	2300      	movs	r3, #0
 8016f56:	68f8      	ldr	r0, [r7, #12]
 8016f58:	f000 fba0 	bl	801769c <xQueueGenericSendFromISR>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	2b01      	cmp	r3, #1
 8016f60:	d001      	beq.n	8016f66 <osMessagePut+0x42>
      return osErrorOS;
 8016f62:	23ff      	movs	r3, #255	; 0xff
 8016f64:	e018      	b.n	8016f98 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016f66:	693b      	ldr	r3, [r7, #16]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d014      	beq.n	8016f96 <osMessagePut+0x72>
 8016f6c:	4b0c      	ldr	r3, [pc, #48]	; (8016fa0 <osMessagePut+0x7c>)
 8016f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f72:	601a      	str	r2, [r3, #0]
 8016f74:	f3bf 8f4f 	dsb	sy
 8016f78:	f3bf 8f6f 	isb	sy
 8016f7c:	e00b      	b.n	8016f96 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8016f7e:	f107 0108 	add.w	r1, r7, #8
 8016f82:	2300      	movs	r3, #0
 8016f84:	697a      	ldr	r2, [r7, #20]
 8016f86:	68f8      	ldr	r0, [r7, #12]
 8016f88:	f000 fa82 	bl	8017490 <xQueueGenericSend>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	2b01      	cmp	r3, #1
 8016f90:	d001      	beq.n	8016f96 <osMessagePut+0x72>
      return osErrorOS;
 8016f92:	23ff      	movs	r3, #255	; 0xff
 8016f94:	e000      	b.n	8016f98 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8016f96:	2300      	movs	r3, #0
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	3718      	adds	r7, #24
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}
 8016fa0:	e000ed04 	.word	0xe000ed04

08016fa4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016fa4:	b590      	push	{r4, r7, lr}
 8016fa6:	b08b      	sub	sp, #44	; 0x2c
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	60b9      	str	r1, [r7, #8]
 8016fae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8016fb0:	68bb      	ldr	r3, [r7, #8]
 8016fb2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8016fb8:	68bb      	ldr	r3, [r7, #8]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d10a      	bne.n	8016fd4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8016fbe:	2380      	movs	r3, #128	; 0x80
 8016fc0:	617b      	str	r3, [r7, #20]
    return event;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	461c      	mov	r4, r3
 8016fc6:	f107 0314 	add.w	r3, r7, #20
 8016fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016fd2:	e054      	b.n	801707e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8016fd8:	2300      	movs	r3, #0
 8016fda:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fe2:	d103      	bne.n	8016fec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8016fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8016fea:	e009      	b.n	8017000 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d006      	beq.n	8017000 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8016ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d101      	bne.n	8017000 <osMessageGet+0x5c>
      ticks = 1;
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8017000:	f7ff fe47 	bl	8016c92 <inHandlerMode>
 8017004:	4603      	mov	r3, r0
 8017006:	2b00      	cmp	r3, #0
 8017008:	d01c      	beq.n	8017044 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801700a:	f107 0220 	add.w	r2, r7, #32
 801700e:	f107 0314 	add.w	r3, r7, #20
 8017012:	3304      	adds	r3, #4
 8017014:	4619      	mov	r1, r3
 8017016:	68b8      	ldr	r0, [r7, #8]
 8017018:	f000 fcc6 	bl	80179a8 <xQueueReceiveFromISR>
 801701c:	4603      	mov	r3, r0
 801701e:	2b01      	cmp	r3, #1
 8017020:	d102      	bne.n	8017028 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8017022:	2310      	movs	r3, #16
 8017024:	617b      	str	r3, [r7, #20]
 8017026:	e001      	b.n	801702c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8017028:	2300      	movs	r3, #0
 801702a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801702c:	6a3b      	ldr	r3, [r7, #32]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d01d      	beq.n	801706e <osMessageGet+0xca>
 8017032:	4b15      	ldr	r3, [pc, #84]	; (8017088 <osMessageGet+0xe4>)
 8017034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017038:	601a      	str	r2, [r3, #0]
 801703a:	f3bf 8f4f 	dsb	sy
 801703e:	f3bf 8f6f 	isb	sy
 8017042:	e014      	b.n	801706e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8017044:	f107 0314 	add.w	r3, r7, #20
 8017048:	3304      	adds	r3, #4
 801704a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801704c:	4619      	mov	r1, r3
 801704e:	68b8      	ldr	r0, [r7, #8]
 8017050:	f000 fbc4 	bl	80177dc <xQueueReceive>
 8017054:	4603      	mov	r3, r0
 8017056:	2b01      	cmp	r3, #1
 8017058:	d102      	bne.n	8017060 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801705a:	2310      	movs	r3, #16
 801705c:	617b      	str	r3, [r7, #20]
 801705e:	e006      	b.n	801706e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8017060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017062:	2b00      	cmp	r3, #0
 8017064:	d101      	bne.n	801706a <osMessageGet+0xc6>
 8017066:	2300      	movs	r3, #0
 8017068:	e000      	b.n	801706c <osMessageGet+0xc8>
 801706a:	2340      	movs	r3, #64	; 0x40
 801706c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	461c      	mov	r4, r3
 8017072:	f107 0314 	add.w	r3, r7, #20
 8017076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801707a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801707e:	68f8      	ldr	r0, [r7, #12]
 8017080:	372c      	adds	r7, #44	; 0x2c
 8017082:	46bd      	mov	sp, r7
 8017084:	bd90      	pop	{r4, r7, pc}
 8017086:	bf00      	nop
 8017088:	e000ed04 	.word	0xe000ed04

0801708c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801708c:	b480      	push	{r7}
 801708e:	b083      	sub	sp, #12
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	f103 0208 	add.w	r2, r3, #8
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	f04f 32ff 	mov.w	r2, #4294967295
 80170a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	f103 0208 	add.w	r2, r3, #8
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	f103 0208 	add.w	r2, r3, #8
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	2200      	movs	r2, #0
 80170be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80170c0:	bf00      	nop
 80170c2:	370c      	adds	r7, #12
 80170c4:	46bd      	mov	sp, r7
 80170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ca:	4770      	bx	lr

080170cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80170cc:	b480      	push	{r7}
 80170ce:	b083      	sub	sp, #12
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2200      	movs	r2, #0
 80170d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80170da:	bf00      	nop
 80170dc:	370c      	adds	r7, #12
 80170de:	46bd      	mov	sp, r7
 80170e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e4:	4770      	bx	lr

080170e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80170e6:	b480      	push	{r7}
 80170e8:	b085      	sub	sp, #20
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	6078      	str	r0, [r7, #4]
 80170ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	68fa      	ldr	r2, [r7, #12]
 80170fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	689a      	ldr	r2, [r3, #8]
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	689b      	ldr	r3, [r3, #8]
 8017108:	683a      	ldr	r2, [r7, #0]
 801710a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	683a      	ldr	r2, [r7, #0]
 8017110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	687a      	ldr	r2, [r7, #4]
 8017116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	1c5a      	adds	r2, r3, #1
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	601a      	str	r2, [r3, #0]
}
 8017122:	bf00      	nop
 8017124:	3714      	adds	r7, #20
 8017126:	46bd      	mov	sp, r7
 8017128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712c:	4770      	bx	lr

0801712e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801712e:	b480      	push	{r7}
 8017130:	b085      	sub	sp, #20
 8017132:	af00      	add	r7, sp, #0
 8017134:	6078      	str	r0, [r7, #4]
 8017136:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801713e:	68bb      	ldr	r3, [r7, #8]
 8017140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017144:	d103      	bne.n	801714e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	691b      	ldr	r3, [r3, #16]
 801714a:	60fb      	str	r3, [r7, #12]
 801714c:	e00c      	b.n	8017168 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	3308      	adds	r3, #8
 8017152:	60fb      	str	r3, [r7, #12]
 8017154:	e002      	b.n	801715c <vListInsert+0x2e>
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	60fb      	str	r3, [r7, #12]
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	685b      	ldr	r3, [r3, #4]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	68ba      	ldr	r2, [r7, #8]
 8017164:	429a      	cmp	r2, r3
 8017166:	d2f6      	bcs.n	8017156 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	685a      	ldr	r2, [r3, #4]
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017170:	683b      	ldr	r3, [r7, #0]
 8017172:	685b      	ldr	r3, [r3, #4]
 8017174:	683a      	ldr	r2, [r7, #0]
 8017176:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	68fa      	ldr	r2, [r7, #12]
 801717c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	683a      	ldr	r2, [r7, #0]
 8017182:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	687a      	ldr	r2, [r7, #4]
 8017188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	1c5a      	adds	r2, r3, #1
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	601a      	str	r2, [r3, #0]
}
 8017194:	bf00      	nop
 8017196:	3714      	adds	r7, #20
 8017198:	46bd      	mov	sp, r7
 801719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719e:	4770      	bx	lr

080171a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80171a0:	b480      	push	{r7}
 80171a2:	b085      	sub	sp, #20
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	691b      	ldr	r3, [r3, #16]
 80171ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	685b      	ldr	r3, [r3, #4]
 80171b2:	687a      	ldr	r2, [r7, #4]
 80171b4:	6892      	ldr	r2, [r2, #8]
 80171b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	689b      	ldr	r3, [r3, #8]
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	6852      	ldr	r2, [r2, #4]
 80171c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	685b      	ldr	r3, [r3, #4]
 80171c6:	687a      	ldr	r2, [r7, #4]
 80171c8:	429a      	cmp	r2, r3
 80171ca:	d103      	bne.n	80171d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	689a      	ldr	r2, [r3, #8]
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	2200      	movs	r2, #0
 80171d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	1e5a      	subs	r2, r3, #1
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681b      	ldr	r3, [r3, #0]
}
 80171e8:	4618      	mov	r0, r3
 80171ea:	3714      	adds	r7, #20
 80171ec:	46bd      	mov	sp, r7
 80171ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f2:	4770      	bx	lr

080171f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b084      	sub	sp, #16
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
 80171fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d10c      	bne.n	8017222 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801720c:	b672      	cpsid	i
 801720e:	f383 8811 	msr	BASEPRI, r3
 8017212:	f3bf 8f6f 	isb	sy
 8017216:	f3bf 8f4f 	dsb	sy
 801721a:	b662      	cpsie	i
 801721c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801721e:	bf00      	nop
 8017220:	e7fe      	b.n	8017220 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8017222:	f001 ffa3 	bl	801916c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801722e:	68f9      	ldr	r1, [r7, #12]
 8017230:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017232:	fb01 f303 	mul.w	r3, r1, r3
 8017236:	441a      	add	r2, r3
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	2200      	movs	r2, #0
 8017240:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	681a      	ldr	r2, [r3, #0]
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	681a      	ldr	r2, [r3, #0]
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017252:	3b01      	subs	r3, #1
 8017254:	68f9      	ldr	r1, [r7, #12]
 8017256:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017258:	fb01 f303 	mul.w	r3, r1, r3
 801725c:	441a      	add	r2, r3
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	22ff      	movs	r2, #255	; 0xff
 8017266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	22ff      	movs	r2, #255	; 0xff
 801726e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d114      	bne.n	80172a2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	691b      	ldr	r3, [r3, #16]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d01a      	beq.n	80172b6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	3310      	adds	r3, #16
 8017284:	4618      	mov	r0, r3
 8017286:	f001 f995 	bl	80185b4 <xTaskRemoveFromEventList>
 801728a:	4603      	mov	r3, r0
 801728c:	2b00      	cmp	r3, #0
 801728e:	d012      	beq.n	80172b6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017290:	4b0c      	ldr	r3, [pc, #48]	; (80172c4 <xQueueGenericReset+0xd0>)
 8017292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017296:	601a      	str	r2, [r3, #0]
 8017298:	f3bf 8f4f 	dsb	sy
 801729c:	f3bf 8f6f 	isb	sy
 80172a0:	e009      	b.n	80172b6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	3310      	adds	r3, #16
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7ff fef0 	bl	801708c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	3324      	adds	r3, #36	; 0x24
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7ff feeb 	bl	801708c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80172b6:	f001 ff8d 	bl	80191d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80172ba:	2301      	movs	r3, #1
}
 80172bc:	4618      	mov	r0, r3
 80172be:	3710      	adds	r7, #16
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd80      	pop	{r7, pc}
 80172c4:	e000ed04 	.word	0xe000ed04

080172c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b08e      	sub	sp, #56	; 0x38
 80172cc:	af02      	add	r7, sp, #8
 80172ce:	60f8      	str	r0, [r7, #12]
 80172d0:	60b9      	str	r1, [r7, #8]
 80172d2:	607a      	str	r2, [r7, #4]
 80172d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d10c      	bne.n	80172f6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80172dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172e0:	b672      	cpsid	i
 80172e2:	f383 8811 	msr	BASEPRI, r3
 80172e6:	f3bf 8f6f 	isb	sy
 80172ea:	f3bf 8f4f 	dsb	sy
 80172ee:	b662      	cpsie	i
 80172f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80172f2:	bf00      	nop
 80172f4:	e7fe      	b.n	80172f4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80172f6:	683b      	ldr	r3, [r7, #0]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d10c      	bne.n	8017316 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80172fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017300:	b672      	cpsid	i
 8017302:	f383 8811 	msr	BASEPRI, r3
 8017306:	f3bf 8f6f 	isb	sy
 801730a:	f3bf 8f4f 	dsb	sy
 801730e:	b662      	cpsie	i
 8017310:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017312:	bf00      	nop
 8017314:	e7fe      	b.n	8017314 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d002      	beq.n	8017322 <xQueueGenericCreateStatic+0x5a>
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d001      	beq.n	8017326 <xQueueGenericCreateStatic+0x5e>
 8017322:	2301      	movs	r3, #1
 8017324:	e000      	b.n	8017328 <xQueueGenericCreateStatic+0x60>
 8017326:	2300      	movs	r3, #0
 8017328:	2b00      	cmp	r3, #0
 801732a:	d10c      	bne.n	8017346 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 801732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017330:	b672      	cpsid	i
 8017332:	f383 8811 	msr	BASEPRI, r3
 8017336:	f3bf 8f6f 	isb	sy
 801733a:	f3bf 8f4f 	dsb	sy
 801733e:	b662      	cpsie	i
 8017340:	623b      	str	r3, [r7, #32]
}
 8017342:	bf00      	nop
 8017344:	e7fe      	b.n	8017344 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d102      	bne.n	8017352 <xQueueGenericCreateStatic+0x8a>
 801734c:	68bb      	ldr	r3, [r7, #8]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d101      	bne.n	8017356 <xQueueGenericCreateStatic+0x8e>
 8017352:	2301      	movs	r3, #1
 8017354:	e000      	b.n	8017358 <xQueueGenericCreateStatic+0x90>
 8017356:	2300      	movs	r3, #0
 8017358:	2b00      	cmp	r3, #0
 801735a:	d10c      	bne.n	8017376 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017360:	b672      	cpsid	i
 8017362:	f383 8811 	msr	BASEPRI, r3
 8017366:	f3bf 8f6f 	isb	sy
 801736a:	f3bf 8f4f 	dsb	sy
 801736e:	b662      	cpsie	i
 8017370:	61fb      	str	r3, [r7, #28]
}
 8017372:	bf00      	nop
 8017374:	e7fe      	b.n	8017374 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017376:	2348      	movs	r3, #72	; 0x48
 8017378:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801737a:	697b      	ldr	r3, [r7, #20]
 801737c:	2b48      	cmp	r3, #72	; 0x48
 801737e:	d00c      	beq.n	801739a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8017380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017384:	b672      	cpsid	i
 8017386:	f383 8811 	msr	BASEPRI, r3
 801738a:	f3bf 8f6f 	isb	sy
 801738e:	f3bf 8f4f 	dsb	sy
 8017392:	b662      	cpsie	i
 8017394:	61bb      	str	r3, [r7, #24]
}
 8017396:	bf00      	nop
 8017398:	e7fe      	b.n	8017398 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801739a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80173a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d00d      	beq.n	80173c2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80173a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a8:	2201      	movs	r2, #1
 80173aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80173ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80173b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b4:	9300      	str	r3, [sp, #0]
 80173b6:	4613      	mov	r3, r2
 80173b8:	687a      	ldr	r2, [r7, #4]
 80173ba:	68b9      	ldr	r1, [r7, #8]
 80173bc:	68f8      	ldr	r0, [r7, #12]
 80173be:	f000 f847 	bl	8017450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80173c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3730      	adds	r7, #48	; 0x30
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b08a      	sub	sp, #40	; 0x28
 80173d0:	af02      	add	r7, sp, #8
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	4613      	mov	r3, r2
 80173d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d10c      	bne.n	80173fa <xQueueGenericCreate+0x2e>
	__asm volatile
 80173e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173e4:	b672      	cpsid	i
 80173e6:	f383 8811 	msr	BASEPRI, r3
 80173ea:	f3bf 8f6f 	isb	sy
 80173ee:	f3bf 8f4f 	dsb	sy
 80173f2:	b662      	cpsie	i
 80173f4:	613b      	str	r3, [r7, #16]
}
 80173f6:	bf00      	nop
 80173f8:	e7fe      	b.n	80173f8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d102      	bne.n	8017406 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8017400:	2300      	movs	r3, #0
 8017402:	61fb      	str	r3, [r7, #28]
 8017404:	e004      	b.n	8017410 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	68ba      	ldr	r2, [r7, #8]
 801740a:	fb02 f303 	mul.w	r3, r2, r3
 801740e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017410:	69fb      	ldr	r3, [r7, #28]
 8017412:	3348      	adds	r3, #72	; 0x48
 8017414:	4618      	mov	r0, r3
 8017416:	f001 ffd5 	bl	80193c4 <pvPortMalloc>
 801741a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801741c:	69bb      	ldr	r3, [r7, #24]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d011      	beq.n	8017446 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017422:	69bb      	ldr	r3, [r7, #24]
 8017424:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017426:	697b      	ldr	r3, [r7, #20]
 8017428:	3348      	adds	r3, #72	; 0x48
 801742a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801742c:	69bb      	ldr	r3, [r7, #24]
 801742e:	2200      	movs	r2, #0
 8017430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017434:	79fa      	ldrb	r2, [r7, #7]
 8017436:	69bb      	ldr	r3, [r7, #24]
 8017438:	9300      	str	r3, [sp, #0]
 801743a:	4613      	mov	r3, r2
 801743c:	697a      	ldr	r2, [r7, #20]
 801743e:	68b9      	ldr	r1, [r7, #8]
 8017440:	68f8      	ldr	r0, [r7, #12]
 8017442:	f000 f805 	bl	8017450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017446:	69bb      	ldr	r3, [r7, #24]
	}
 8017448:	4618      	mov	r0, r3
 801744a:	3720      	adds	r7, #32
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}

08017450 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b084      	sub	sp, #16
 8017454:	af00      	add	r7, sp, #0
 8017456:	60f8      	str	r0, [r7, #12]
 8017458:	60b9      	str	r1, [r7, #8]
 801745a:	607a      	str	r2, [r7, #4]
 801745c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801745e:	68bb      	ldr	r3, [r7, #8]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d103      	bne.n	801746c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017464:	69bb      	ldr	r3, [r7, #24]
 8017466:	69ba      	ldr	r2, [r7, #24]
 8017468:	601a      	str	r2, [r3, #0]
 801746a:	e002      	b.n	8017472 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801746c:	69bb      	ldr	r3, [r7, #24]
 801746e:	687a      	ldr	r2, [r7, #4]
 8017470:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017472:	69bb      	ldr	r3, [r7, #24]
 8017474:	68fa      	ldr	r2, [r7, #12]
 8017476:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017478:	69bb      	ldr	r3, [r7, #24]
 801747a:	68ba      	ldr	r2, [r7, #8]
 801747c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801747e:	2101      	movs	r1, #1
 8017480:	69b8      	ldr	r0, [r7, #24]
 8017482:	f7ff feb7 	bl	80171f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017486:	bf00      	nop
 8017488:	3710      	adds	r7, #16
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
	...

08017490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b08e      	sub	sp, #56	; 0x38
 8017494:	af00      	add	r7, sp, #0
 8017496:	60f8      	str	r0, [r7, #12]
 8017498:	60b9      	str	r1, [r7, #8]
 801749a:	607a      	str	r2, [r7, #4]
 801749c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801749e:	2300      	movs	r3, #0
 80174a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80174a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d10c      	bne.n	80174c6 <xQueueGenericSend+0x36>
	__asm volatile
 80174ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b0:	b672      	cpsid	i
 80174b2:	f383 8811 	msr	BASEPRI, r3
 80174b6:	f3bf 8f6f 	isb	sy
 80174ba:	f3bf 8f4f 	dsb	sy
 80174be:	b662      	cpsie	i
 80174c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80174c2:	bf00      	nop
 80174c4:	e7fe      	b.n	80174c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d103      	bne.n	80174d4 <xQueueGenericSend+0x44>
 80174cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d101      	bne.n	80174d8 <xQueueGenericSend+0x48>
 80174d4:	2301      	movs	r3, #1
 80174d6:	e000      	b.n	80174da <xQueueGenericSend+0x4a>
 80174d8:	2300      	movs	r3, #0
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d10c      	bne.n	80174f8 <xQueueGenericSend+0x68>
	__asm volatile
 80174de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174e2:	b672      	cpsid	i
 80174e4:	f383 8811 	msr	BASEPRI, r3
 80174e8:	f3bf 8f6f 	isb	sy
 80174ec:	f3bf 8f4f 	dsb	sy
 80174f0:	b662      	cpsie	i
 80174f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80174f4:	bf00      	nop
 80174f6:	e7fe      	b.n	80174f6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	2b02      	cmp	r3, #2
 80174fc:	d103      	bne.n	8017506 <xQueueGenericSend+0x76>
 80174fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017502:	2b01      	cmp	r3, #1
 8017504:	d101      	bne.n	801750a <xQueueGenericSend+0x7a>
 8017506:	2301      	movs	r3, #1
 8017508:	e000      	b.n	801750c <xQueueGenericSend+0x7c>
 801750a:	2300      	movs	r3, #0
 801750c:	2b00      	cmp	r3, #0
 801750e:	d10c      	bne.n	801752a <xQueueGenericSend+0x9a>
	__asm volatile
 8017510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017514:	b672      	cpsid	i
 8017516:	f383 8811 	msr	BASEPRI, r3
 801751a:	f3bf 8f6f 	isb	sy
 801751e:	f3bf 8f4f 	dsb	sy
 8017522:	b662      	cpsie	i
 8017524:	623b      	str	r3, [r7, #32]
}
 8017526:	bf00      	nop
 8017528:	e7fe      	b.n	8017528 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801752a:	f001 fa09 	bl	8018940 <xTaskGetSchedulerState>
 801752e:	4603      	mov	r3, r0
 8017530:	2b00      	cmp	r3, #0
 8017532:	d102      	bne.n	801753a <xQueueGenericSend+0xaa>
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d101      	bne.n	801753e <xQueueGenericSend+0xae>
 801753a:	2301      	movs	r3, #1
 801753c:	e000      	b.n	8017540 <xQueueGenericSend+0xb0>
 801753e:	2300      	movs	r3, #0
 8017540:	2b00      	cmp	r3, #0
 8017542:	d10c      	bne.n	801755e <xQueueGenericSend+0xce>
	__asm volatile
 8017544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017548:	b672      	cpsid	i
 801754a:	f383 8811 	msr	BASEPRI, r3
 801754e:	f3bf 8f6f 	isb	sy
 8017552:	f3bf 8f4f 	dsb	sy
 8017556:	b662      	cpsie	i
 8017558:	61fb      	str	r3, [r7, #28]
}
 801755a:	bf00      	nop
 801755c:	e7fe      	b.n	801755c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801755e:	f001 fe05 	bl	801916c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801756a:	429a      	cmp	r2, r3
 801756c:	d302      	bcc.n	8017574 <xQueueGenericSend+0xe4>
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	2b02      	cmp	r3, #2
 8017572:	d129      	bne.n	80175c8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017574:	683a      	ldr	r2, [r7, #0]
 8017576:	68b9      	ldr	r1, [r7, #8]
 8017578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801757a:	f000 fa9b 	bl	8017ab4 <prvCopyDataToQueue>
 801757e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017584:	2b00      	cmp	r3, #0
 8017586:	d010      	beq.n	80175aa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758a:	3324      	adds	r3, #36	; 0x24
 801758c:	4618      	mov	r0, r3
 801758e:	f001 f811 	bl	80185b4 <xTaskRemoveFromEventList>
 8017592:	4603      	mov	r3, r0
 8017594:	2b00      	cmp	r3, #0
 8017596:	d013      	beq.n	80175c0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017598:	4b3f      	ldr	r3, [pc, #252]	; (8017698 <xQueueGenericSend+0x208>)
 801759a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801759e:	601a      	str	r2, [r3, #0]
 80175a0:	f3bf 8f4f 	dsb	sy
 80175a4:	f3bf 8f6f 	isb	sy
 80175a8:	e00a      	b.n	80175c0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80175aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d007      	beq.n	80175c0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80175b0:	4b39      	ldr	r3, [pc, #228]	; (8017698 <xQueueGenericSend+0x208>)
 80175b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175b6:	601a      	str	r2, [r3, #0]
 80175b8:	f3bf 8f4f 	dsb	sy
 80175bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80175c0:	f001 fe08 	bl	80191d4 <vPortExitCritical>
				return pdPASS;
 80175c4:	2301      	movs	r3, #1
 80175c6:	e063      	b.n	8017690 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d103      	bne.n	80175d6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80175ce:	f001 fe01 	bl	80191d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80175d2:	2300      	movs	r3, #0
 80175d4:	e05c      	b.n	8017690 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80175d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d106      	bne.n	80175ea <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80175dc:	f107 0314 	add.w	r3, r7, #20
 80175e0:	4618      	mov	r0, r3
 80175e2:	f001 f84b 	bl	801867c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80175e6:	2301      	movs	r3, #1
 80175e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80175ea:	f001 fdf3 	bl	80191d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80175ee:	f000 fdb1 	bl	8018154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80175f2:	f001 fdbb 	bl	801916c <vPortEnterCritical>
 80175f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80175fc:	b25b      	sxtb	r3, r3
 80175fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017602:	d103      	bne.n	801760c <xQueueGenericSend+0x17c>
 8017604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017606:	2200      	movs	r2, #0
 8017608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801760e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017612:	b25b      	sxtb	r3, r3
 8017614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017618:	d103      	bne.n	8017622 <xQueueGenericSend+0x192>
 801761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801761c:	2200      	movs	r2, #0
 801761e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017622:	f001 fdd7 	bl	80191d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017626:	1d3a      	adds	r2, r7, #4
 8017628:	f107 0314 	add.w	r3, r7, #20
 801762c:	4611      	mov	r1, r2
 801762e:	4618      	mov	r0, r3
 8017630:	f001 f83a 	bl	80186a8 <xTaskCheckForTimeOut>
 8017634:	4603      	mov	r3, r0
 8017636:	2b00      	cmp	r3, #0
 8017638:	d124      	bne.n	8017684 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801763a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801763c:	f000 fb32 	bl	8017ca4 <prvIsQueueFull>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	d018      	beq.n	8017678 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017648:	3310      	adds	r3, #16
 801764a:	687a      	ldr	r2, [r7, #4]
 801764c:	4611      	mov	r1, r2
 801764e:	4618      	mov	r0, r3
 8017650:	f000 ff8a 	bl	8018568 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017656:	f000 fabd 	bl	8017bd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801765a:	f000 fd89 	bl	8018170 <xTaskResumeAll>
 801765e:	4603      	mov	r3, r0
 8017660:	2b00      	cmp	r3, #0
 8017662:	f47f af7c 	bne.w	801755e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8017666:	4b0c      	ldr	r3, [pc, #48]	; (8017698 <xQueueGenericSend+0x208>)
 8017668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801766c:	601a      	str	r2, [r3, #0]
 801766e:	f3bf 8f4f 	dsb	sy
 8017672:	f3bf 8f6f 	isb	sy
 8017676:	e772      	b.n	801755e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801767a:	f000 faab 	bl	8017bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801767e:	f000 fd77 	bl	8018170 <xTaskResumeAll>
 8017682:	e76c      	b.n	801755e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017686:	f000 faa5 	bl	8017bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801768a:	f000 fd71 	bl	8018170 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801768e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017690:	4618      	mov	r0, r3
 8017692:	3738      	adds	r7, #56	; 0x38
 8017694:	46bd      	mov	sp, r7
 8017696:	bd80      	pop	{r7, pc}
 8017698:	e000ed04 	.word	0xe000ed04

0801769c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b08e      	sub	sp, #56	; 0x38
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	60f8      	str	r0, [r7, #12]
 80176a4:	60b9      	str	r1, [r7, #8]
 80176a6:	607a      	str	r2, [r7, #4]
 80176a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80176ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d10c      	bne.n	80176ce <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80176b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176b8:	b672      	cpsid	i
 80176ba:	f383 8811 	msr	BASEPRI, r3
 80176be:	f3bf 8f6f 	isb	sy
 80176c2:	f3bf 8f4f 	dsb	sy
 80176c6:	b662      	cpsie	i
 80176c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80176ca:	bf00      	nop
 80176cc:	e7fe      	b.n	80176cc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d103      	bne.n	80176dc <xQueueGenericSendFromISR+0x40>
 80176d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d101      	bne.n	80176e0 <xQueueGenericSendFromISR+0x44>
 80176dc:	2301      	movs	r3, #1
 80176de:	e000      	b.n	80176e2 <xQueueGenericSendFromISR+0x46>
 80176e0:	2300      	movs	r3, #0
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d10c      	bne.n	8017700 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80176e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176ea:	b672      	cpsid	i
 80176ec:	f383 8811 	msr	BASEPRI, r3
 80176f0:	f3bf 8f6f 	isb	sy
 80176f4:	f3bf 8f4f 	dsb	sy
 80176f8:	b662      	cpsie	i
 80176fa:	623b      	str	r3, [r7, #32]
}
 80176fc:	bf00      	nop
 80176fe:	e7fe      	b.n	80176fe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017700:	683b      	ldr	r3, [r7, #0]
 8017702:	2b02      	cmp	r3, #2
 8017704:	d103      	bne.n	801770e <xQueueGenericSendFromISR+0x72>
 8017706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801770a:	2b01      	cmp	r3, #1
 801770c:	d101      	bne.n	8017712 <xQueueGenericSendFromISR+0x76>
 801770e:	2301      	movs	r3, #1
 8017710:	e000      	b.n	8017714 <xQueueGenericSendFromISR+0x78>
 8017712:	2300      	movs	r3, #0
 8017714:	2b00      	cmp	r3, #0
 8017716:	d10c      	bne.n	8017732 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8017718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801771c:	b672      	cpsid	i
 801771e:	f383 8811 	msr	BASEPRI, r3
 8017722:	f3bf 8f6f 	isb	sy
 8017726:	f3bf 8f4f 	dsb	sy
 801772a:	b662      	cpsie	i
 801772c:	61fb      	str	r3, [r7, #28]
}
 801772e:	bf00      	nop
 8017730:	e7fe      	b.n	8017730 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017732:	f001 fe03 	bl	801933c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017736:	f3ef 8211 	mrs	r2, BASEPRI
 801773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801773e:	b672      	cpsid	i
 8017740:	f383 8811 	msr	BASEPRI, r3
 8017744:	f3bf 8f6f 	isb	sy
 8017748:	f3bf 8f4f 	dsb	sy
 801774c:	b662      	cpsie	i
 801774e:	61ba      	str	r2, [r7, #24]
 8017750:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017752:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017754:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801775e:	429a      	cmp	r2, r3
 8017760:	d302      	bcc.n	8017768 <xQueueGenericSendFromISR+0xcc>
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	2b02      	cmp	r3, #2
 8017766:	d12c      	bne.n	80177c2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801776a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801776e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017772:	683a      	ldr	r2, [r7, #0]
 8017774:	68b9      	ldr	r1, [r7, #8]
 8017776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017778:	f000 f99c 	bl	8017ab4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801777c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017784:	d112      	bne.n	80177ac <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801778a:	2b00      	cmp	r3, #0
 801778c:	d016      	beq.n	80177bc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017790:	3324      	adds	r3, #36	; 0x24
 8017792:	4618      	mov	r0, r3
 8017794:	f000 ff0e 	bl	80185b4 <xTaskRemoveFromEventList>
 8017798:	4603      	mov	r3, r0
 801779a:	2b00      	cmp	r3, #0
 801779c:	d00e      	beq.n	80177bc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d00b      	beq.n	80177bc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2201      	movs	r2, #1
 80177a8:	601a      	str	r2, [r3, #0]
 80177aa:	e007      	b.n	80177bc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80177ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80177b0:	3301      	adds	r3, #1
 80177b2:	b2db      	uxtb	r3, r3
 80177b4:	b25a      	sxtb	r2, r3
 80177b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80177bc:	2301      	movs	r3, #1
 80177be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80177c0:	e001      	b.n	80177c6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80177c2:	2300      	movs	r3, #0
 80177c4:	637b      	str	r3, [r7, #52]	; 0x34
 80177c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80177ca:	693b      	ldr	r3, [r7, #16]
 80177cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80177d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80177d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3738      	adds	r7, #56	; 0x38
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}

080177dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b08c      	sub	sp, #48	; 0x30
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	60f8      	str	r0, [r7, #12]
 80177e4:	60b9      	str	r1, [r7, #8]
 80177e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80177e8:	2300      	movs	r3, #0
 80177ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80177f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d10c      	bne.n	8017810 <xQueueReceive+0x34>
	__asm volatile
 80177f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177fa:	b672      	cpsid	i
 80177fc:	f383 8811 	msr	BASEPRI, r3
 8017800:	f3bf 8f6f 	isb	sy
 8017804:	f3bf 8f4f 	dsb	sy
 8017808:	b662      	cpsie	i
 801780a:	623b      	str	r3, [r7, #32]
}
 801780c:	bf00      	nop
 801780e:	e7fe      	b.n	801780e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d103      	bne.n	801781e <xQueueReceive+0x42>
 8017816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801781a:	2b00      	cmp	r3, #0
 801781c:	d101      	bne.n	8017822 <xQueueReceive+0x46>
 801781e:	2301      	movs	r3, #1
 8017820:	e000      	b.n	8017824 <xQueueReceive+0x48>
 8017822:	2300      	movs	r3, #0
 8017824:	2b00      	cmp	r3, #0
 8017826:	d10c      	bne.n	8017842 <xQueueReceive+0x66>
	__asm volatile
 8017828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801782c:	b672      	cpsid	i
 801782e:	f383 8811 	msr	BASEPRI, r3
 8017832:	f3bf 8f6f 	isb	sy
 8017836:	f3bf 8f4f 	dsb	sy
 801783a:	b662      	cpsie	i
 801783c:	61fb      	str	r3, [r7, #28]
}
 801783e:	bf00      	nop
 8017840:	e7fe      	b.n	8017840 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017842:	f001 f87d 	bl	8018940 <xTaskGetSchedulerState>
 8017846:	4603      	mov	r3, r0
 8017848:	2b00      	cmp	r3, #0
 801784a:	d102      	bne.n	8017852 <xQueueReceive+0x76>
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d101      	bne.n	8017856 <xQueueReceive+0x7a>
 8017852:	2301      	movs	r3, #1
 8017854:	e000      	b.n	8017858 <xQueueReceive+0x7c>
 8017856:	2300      	movs	r3, #0
 8017858:	2b00      	cmp	r3, #0
 801785a:	d10c      	bne.n	8017876 <xQueueReceive+0x9a>
	__asm volatile
 801785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017860:	b672      	cpsid	i
 8017862:	f383 8811 	msr	BASEPRI, r3
 8017866:	f3bf 8f6f 	isb	sy
 801786a:	f3bf 8f4f 	dsb	sy
 801786e:	b662      	cpsie	i
 8017870:	61bb      	str	r3, [r7, #24]
}
 8017872:	bf00      	nop
 8017874:	e7fe      	b.n	8017874 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017876:	f001 fc79 	bl	801916c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801787e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017882:	2b00      	cmp	r3, #0
 8017884:	d01f      	beq.n	80178c6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017886:	68b9      	ldr	r1, [r7, #8]
 8017888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801788a:	f000 f97d 	bl	8017b88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017890:	1e5a      	subs	r2, r3, #1
 8017892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017894:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017898:	691b      	ldr	r3, [r3, #16]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d00f      	beq.n	80178be <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178a0:	3310      	adds	r3, #16
 80178a2:	4618      	mov	r0, r3
 80178a4:	f000 fe86 	bl	80185b4 <xTaskRemoveFromEventList>
 80178a8:	4603      	mov	r3, r0
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d007      	beq.n	80178be <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80178ae:	4b3d      	ldr	r3, [pc, #244]	; (80179a4 <xQueueReceive+0x1c8>)
 80178b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178b4:	601a      	str	r2, [r3, #0]
 80178b6:	f3bf 8f4f 	dsb	sy
 80178ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80178be:	f001 fc89 	bl	80191d4 <vPortExitCritical>
				return pdPASS;
 80178c2:	2301      	movs	r3, #1
 80178c4:	e069      	b.n	801799a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d103      	bne.n	80178d4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80178cc:	f001 fc82 	bl	80191d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80178d0:	2300      	movs	r3, #0
 80178d2:	e062      	b.n	801799a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80178d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d106      	bne.n	80178e8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80178da:	f107 0310 	add.w	r3, r7, #16
 80178de:	4618      	mov	r0, r3
 80178e0:	f000 fecc 	bl	801867c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80178e4:	2301      	movs	r3, #1
 80178e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80178e8:	f001 fc74 	bl	80191d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80178ec:	f000 fc32 	bl	8018154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80178f0:	f001 fc3c 	bl	801916c <vPortEnterCritical>
 80178f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80178fa:	b25b      	sxtb	r3, r3
 80178fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017900:	d103      	bne.n	801790a <xQueueReceive+0x12e>
 8017902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017904:	2200      	movs	r2, #0
 8017906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801790c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017910:	b25b      	sxtb	r3, r3
 8017912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017916:	d103      	bne.n	8017920 <xQueueReceive+0x144>
 8017918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801791a:	2200      	movs	r2, #0
 801791c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017920:	f001 fc58 	bl	80191d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017924:	1d3a      	adds	r2, r7, #4
 8017926:	f107 0310 	add.w	r3, r7, #16
 801792a:	4611      	mov	r1, r2
 801792c:	4618      	mov	r0, r3
 801792e:	f000 febb 	bl	80186a8 <xTaskCheckForTimeOut>
 8017932:	4603      	mov	r3, r0
 8017934:	2b00      	cmp	r3, #0
 8017936:	d123      	bne.n	8017980 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801793a:	f000 f99d 	bl	8017c78 <prvIsQueueEmpty>
 801793e:	4603      	mov	r3, r0
 8017940:	2b00      	cmp	r3, #0
 8017942:	d017      	beq.n	8017974 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017946:	3324      	adds	r3, #36	; 0x24
 8017948:	687a      	ldr	r2, [r7, #4]
 801794a:	4611      	mov	r1, r2
 801794c:	4618      	mov	r0, r3
 801794e:	f000 fe0b 	bl	8018568 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017954:	f000 f93e 	bl	8017bd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017958:	f000 fc0a 	bl	8018170 <xTaskResumeAll>
 801795c:	4603      	mov	r3, r0
 801795e:	2b00      	cmp	r3, #0
 8017960:	d189      	bne.n	8017876 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8017962:	4b10      	ldr	r3, [pc, #64]	; (80179a4 <xQueueReceive+0x1c8>)
 8017964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017968:	601a      	str	r2, [r3, #0]
 801796a:	f3bf 8f4f 	dsb	sy
 801796e:	f3bf 8f6f 	isb	sy
 8017972:	e780      	b.n	8017876 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017976:	f000 f92d 	bl	8017bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801797a:	f000 fbf9 	bl	8018170 <xTaskResumeAll>
 801797e:	e77a      	b.n	8017876 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017982:	f000 f927 	bl	8017bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017986:	f000 fbf3 	bl	8018170 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801798a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801798c:	f000 f974 	bl	8017c78 <prvIsQueueEmpty>
 8017990:	4603      	mov	r3, r0
 8017992:	2b00      	cmp	r3, #0
 8017994:	f43f af6f 	beq.w	8017876 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801799a:	4618      	mov	r0, r3
 801799c:	3730      	adds	r7, #48	; 0x30
 801799e:	46bd      	mov	sp, r7
 80179a0:	bd80      	pop	{r7, pc}
 80179a2:	bf00      	nop
 80179a4:	e000ed04 	.word	0xe000ed04

080179a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b08e      	sub	sp, #56	; 0x38
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80179b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d10c      	bne.n	80179d8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80179be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179c2:	b672      	cpsid	i
 80179c4:	f383 8811 	msr	BASEPRI, r3
 80179c8:	f3bf 8f6f 	isb	sy
 80179cc:	f3bf 8f4f 	dsb	sy
 80179d0:	b662      	cpsie	i
 80179d2:	623b      	str	r3, [r7, #32]
}
 80179d4:	bf00      	nop
 80179d6:	e7fe      	b.n	80179d6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80179d8:	68bb      	ldr	r3, [r7, #8]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d103      	bne.n	80179e6 <xQueueReceiveFromISR+0x3e>
 80179de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d101      	bne.n	80179ea <xQueueReceiveFromISR+0x42>
 80179e6:	2301      	movs	r3, #1
 80179e8:	e000      	b.n	80179ec <xQueueReceiveFromISR+0x44>
 80179ea:	2300      	movs	r3, #0
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d10c      	bne.n	8017a0a <xQueueReceiveFromISR+0x62>
	__asm volatile
 80179f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179f4:	b672      	cpsid	i
 80179f6:	f383 8811 	msr	BASEPRI, r3
 80179fa:	f3bf 8f6f 	isb	sy
 80179fe:	f3bf 8f4f 	dsb	sy
 8017a02:	b662      	cpsie	i
 8017a04:	61fb      	str	r3, [r7, #28]
}
 8017a06:	bf00      	nop
 8017a08:	e7fe      	b.n	8017a08 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017a0a:	f001 fc97 	bl	801933c <vPortValidateInterruptPriority>
	__asm volatile
 8017a0e:	f3ef 8211 	mrs	r2, BASEPRI
 8017a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a16:	b672      	cpsid	i
 8017a18:	f383 8811 	msr	BASEPRI, r3
 8017a1c:	f3bf 8f6f 	isb	sy
 8017a20:	f3bf 8f4f 	dsb	sy
 8017a24:	b662      	cpsie	i
 8017a26:	61ba      	str	r2, [r7, #24]
 8017a28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017a2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d02f      	beq.n	8017a9a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017a44:	68b9      	ldr	r1, [r7, #8]
 8017a46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a48:	f000 f89e 	bl	8017b88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a4e:	1e5a      	subs	r2, r3, #1
 8017a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017a54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a5c:	d112      	bne.n	8017a84 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a60:	691b      	ldr	r3, [r3, #16]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d016      	beq.n	8017a94 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a68:	3310      	adds	r3, #16
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f000 fda2 	bl	80185b4 <xTaskRemoveFromEventList>
 8017a70:	4603      	mov	r3, r0
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d00e      	beq.n	8017a94 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d00b      	beq.n	8017a94 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2201      	movs	r2, #1
 8017a80:	601a      	str	r2, [r3, #0]
 8017a82:	e007      	b.n	8017a94 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a88:	3301      	adds	r3, #1
 8017a8a:	b2db      	uxtb	r3, r3
 8017a8c:	b25a      	sxtb	r2, r3
 8017a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017a94:	2301      	movs	r3, #1
 8017a96:	637b      	str	r3, [r7, #52]	; 0x34
 8017a98:	e001      	b.n	8017a9e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8017a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aa0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017aa2:	693b      	ldr	r3, [r7, #16]
 8017aa4:	f383 8811 	msr	BASEPRI, r3
}
 8017aa8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017aac:	4618      	mov	r0, r3
 8017aae:	3738      	adds	r7, #56	; 0x38
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	bd80      	pop	{r7, pc}

08017ab4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b086      	sub	sp, #24
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	60f8      	str	r0, [r7, #12]
 8017abc:	60b9      	str	r1, [r7, #8]
 8017abe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ac8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d10d      	bne.n	8017aee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d14d      	bne.n	8017b76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	689b      	ldr	r3, [r3, #8]
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f000 ff4c 	bl	801897c <xTaskPriorityDisinherit>
 8017ae4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	2200      	movs	r2, #0
 8017aea:	609a      	str	r2, [r3, #8]
 8017aec:	e043      	b.n	8017b76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d119      	bne.n	8017b28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	6858      	ldr	r0, [r3, #4]
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017afc:	461a      	mov	r2, r3
 8017afe:	68b9      	ldr	r1, [r7, #8]
 8017b00:	f003 fa6c 	bl	801afdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	685a      	ldr	r2, [r3, #4]
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b0c:	441a      	add	r2, r3
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	685a      	ldr	r2, [r3, #4]
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	689b      	ldr	r3, [r3, #8]
 8017b1a:	429a      	cmp	r2, r3
 8017b1c:	d32b      	bcc.n	8017b76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	681a      	ldr	r2, [r3, #0]
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	605a      	str	r2, [r3, #4]
 8017b26:	e026      	b.n	8017b76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	68d8      	ldr	r0, [r3, #12]
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b30:	461a      	mov	r2, r3
 8017b32:	68b9      	ldr	r1, [r7, #8]
 8017b34:	f003 fa52 	bl	801afdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	68da      	ldr	r2, [r3, #12]
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b40:	425b      	negs	r3, r3
 8017b42:	441a      	add	r2, r3
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	68da      	ldr	r2, [r3, #12]
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	429a      	cmp	r2, r3
 8017b52:	d207      	bcs.n	8017b64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	689a      	ldr	r2, [r3, #8]
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b5c:	425b      	negs	r3, r3
 8017b5e:	441a      	add	r2, r3
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	2b02      	cmp	r3, #2
 8017b68:	d105      	bne.n	8017b76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b6a:	693b      	ldr	r3, [r7, #16]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d002      	beq.n	8017b76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017b70:	693b      	ldr	r3, [r7, #16]
 8017b72:	3b01      	subs	r3, #1
 8017b74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	1c5a      	adds	r2, r3, #1
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017b7e:	697b      	ldr	r3, [r7, #20]
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	3718      	adds	r7, #24
 8017b84:	46bd      	mov	sp, r7
 8017b86:	bd80      	pop	{r7, pc}

08017b88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b082      	sub	sp, #8
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
 8017b90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d018      	beq.n	8017bcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	68da      	ldr	r2, [r3, #12]
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ba2:	441a      	add	r2, r3
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	68da      	ldr	r2, [r3, #12]
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	689b      	ldr	r3, [r3, #8]
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d303      	bcc.n	8017bbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681a      	ldr	r2, [r3, #0]
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	68d9      	ldr	r1, [r3, #12]
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bc4:	461a      	mov	r2, r3
 8017bc6:	6838      	ldr	r0, [r7, #0]
 8017bc8:	f003 fa08 	bl	801afdc <memcpy>
	}
}
 8017bcc:	bf00      	nop
 8017bce:	3708      	adds	r7, #8
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd80      	pop	{r7, pc}

08017bd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b084      	sub	sp, #16
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017bdc:	f001 fac6 	bl	801916c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017be6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017be8:	e011      	b.n	8017c0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d012      	beq.n	8017c18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	3324      	adds	r3, #36	; 0x24
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f000 fcdc 	bl	80185b4 <xTaskRemoveFromEventList>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d001      	beq.n	8017c06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017c02:	f000 fdb7 	bl	8018774 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017c06:	7bfb      	ldrb	r3, [r7, #15]
 8017c08:	3b01      	subs	r3, #1
 8017c0a:	b2db      	uxtb	r3, r3
 8017c0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	dce9      	bgt.n	8017bea <prvUnlockQueue+0x16>
 8017c16:	e000      	b.n	8017c1a <prvUnlockQueue+0x46>
					break;
 8017c18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	22ff      	movs	r2, #255	; 0xff
 8017c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017c22:	f001 fad7 	bl	80191d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017c26:	f001 faa1 	bl	801916c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c32:	e011      	b.n	8017c58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	691b      	ldr	r3, [r3, #16]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d012      	beq.n	8017c62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	3310      	adds	r3, #16
 8017c40:	4618      	mov	r0, r3
 8017c42:	f000 fcb7 	bl	80185b4 <xTaskRemoveFromEventList>
 8017c46:	4603      	mov	r3, r0
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d001      	beq.n	8017c50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017c4c:	f000 fd92 	bl	8018774 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017c50:	7bbb      	ldrb	r3, [r7, #14]
 8017c52:	3b01      	subs	r3, #1
 8017c54:	b2db      	uxtb	r3, r3
 8017c56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	dce9      	bgt.n	8017c34 <prvUnlockQueue+0x60>
 8017c60:	e000      	b.n	8017c64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017c62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	22ff      	movs	r2, #255	; 0xff
 8017c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017c6c:	f001 fab2 	bl	80191d4 <vPortExitCritical>
}
 8017c70:	bf00      	nop
 8017c72:	3710      	adds	r7, #16
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd80      	pop	{r7, pc}

08017c78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b084      	sub	sp, #16
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c80:	f001 fa74 	bl	801916c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d102      	bne.n	8017c92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017c8c:	2301      	movs	r3, #1
 8017c8e:	60fb      	str	r3, [r7, #12]
 8017c90:	e001      	b.n	8017c96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017c92:	2300      	movs	r3, #0
 8017c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c96:	f001 fa9d 	bl	80191d4 <vPortExitCritical>

	return xReturn;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
}
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	3710      	adds	r7, #16
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}

08017ca4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b084      	sub	sp, #16
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017cac:	f001 fa5e 	bl	801916c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cb8:	429a      	cmp	r2, r3
 8017cba:	d102      	bne.n	8017cc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017cbc:	2301      	movs	r3, #1
 8017cbe:	60fb      	str	r3, [r7, #12]
 8017cc0:	e001      	b.n	8017cc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017cc6:	f001 fa85 	bl	80191d4 <vPortExitCritical>

	return xReturn;
 8017cca:	68fb      	ldr	r3, [r7, #12]
}
 8017ccc:	4618      	mov	r0, r3
 8017cce:	3710      	adds	r7, #16
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd80      	pop	{r7, pc}

08017cd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b08e      	sub	sp, #56	; 0x38
 8017cd8:	af04      	add	r7, sp, #16
 8017cda:	60f8      	str	r0, [r7, #12]
 8017cdc:	60b9      	str	r1, [r7, #8]
 8017cde:	607a      	str	r2, [r7, #4]
 8017ce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d10c      	bne.n	8017d02 <xTaskCreateStatic+0x2e>
	__asm volatile
 8017ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cec:	b672      	cpsid	i
 8017cee:	f383 8811 	msr	BASEPRI, r3
 8017cf2:	f3bf 8f6f 	isb	sy
 8017cf6:	f3bf 8f4f 	dsb	sy
 8017cfa:	b662      	cpsie	i
 8017cfc:	623b      	str	r3, [r7, #32]
}
 8017cfe:	bf00      	nop
 8017d00:	e7fe      	b.n	8017d00 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8017d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d10c      	bne.n	8017d22 <xTaskCreateStatic+0x4e>
	__asm volatile
 8017d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d0c:	b672      	cpsid	i
 8017d0e:	f383 8811 	msr	BASEPRI, r3
 8017d12:	f3bf 8f6f 	isb	sy
 8017d16:	f3bf 8f4f 	dsb	sy
 8017d1a:	b662      	cpsie	i
 8017d1c:	61fb      	str	r3, [r7, #28]
}
 8017d1e:	bf00      	nop
 8017d20:	e7fe      	b.n	8017d20 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017d22:	2358      	movs	r3, #88	; 0x58
 8017d24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017d26:	693b      	ldr	r3, [r7, #16]
 8017d28:	2b58      	cmp	r3, #88	; 0x58
 8017d2a:	d00c      	beq.n	8017d46 <xTaskCreateStatic+0x72>
	__asm volatile
 8017d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d30:	b672      	cpsid	i
 8017d32:	f383 8811 	msr	BASEPRI, r3
 8017d36:	f3bf 8f6f 	isb	sy
 8017d3a:	f3bf 8f4f 	dsb	sy
 8017d3e:	b662      	cpsie	i
 8017d40:	61bb      	str	r3, [r7, #24]
}
 8017d42:	bf00      	nop
 8017d44:	e7fe      	b.n	8017d44 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017d46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d01e      	beq.n	8017d8c <xTaskCreateStatic+0xb8>
 8017d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d01b      	beq.n	8017d8c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d60:	2202      	movs	r2, #2
 8017d62:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017d66:	2300      	movs	r3, #0
 8017d68:	9303      	str	r3, [sp, #12]
 8017d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d6c:	9302      	str	r3, [sp, #8]
 8017d6e:	f107 0314 	add.w	r3, r7, #20
 8017d72:	9301      	str	r3, [sp, #4]
 8017d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d76:	9300      	str	r3, [sp, #0]
 8017d78:	683b      	ldr	r3, [r7, #0]
 8017d7a:	687a      	ldr	r2, [r7, #4]
 8017d7c:	68b9      	ldr	r1, [r7, #8]
 8017d7e:	68f8      	ldr	r0, [r7, #12]
 8017d80:	f000 f850 	bl	8017e24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d86:	f000 f8e1 	bl	8017f4c <prvAddNewTaskToReadyList>
 8017d8a:	e001      	b.n	8017d90 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017d90:	697b      	ldr	r3, [r7, #20]
	}
 8017d92:	4618      	mov	r0, r3
 8017d94:	3728      	adds	r7, #40	; 0x28
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}

08017d9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017d9a:	b580      	push	{r7, lr}
 8017d9c:	b08c      	sub	sp, #48	; 0x30
 8017d9e:	af04      	add	r7, sp, #16
 8017da0:	60f8      	str	r0, [r7, #12]
 8017da2:	60b9      	str	r1, [r7, #8]
 8017da4:	603b      	str	r3, [r7, #0]
 8017da6:	4613      	mov	r3, r2
 8017da8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017daa:	88fb      	ldrh	r3, [r7, #6]
 8017dac:	009b      	lsls	r3, r3, #2
 8017dae:	4618      	mov	r0, r3
 8017db0:	f001 fb08 	bl	80193c4 <pvPortMalloc>
 8017db4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d00e      	beq.n	8017dda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017dbc:	2058      	movs	r0, #88	; 0x58
 8017dbe:	f001 fb01 	bl	80193c4 <pvPortMalloc>
 8017dc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017dc4:	69fb      	ldr	r3, [r7, #28]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d003      	beq.n	8017dd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017dca:	69fb      	ldr	r3, [r7, #28]
 8017dcc:	697a      	ldr	r2, [r7, #20]
 8017dce:	631a      	str	r2, [r3, #48]	; 0x30
 8017dd0:	e005      	b.n	8017dde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017dd2:	6978      	ldr	r0, [r7, #20]
 8017dd4:	f001 fbc6 	bl	8019564 <vPortFree>
 8017dd8:	e001      	b.n	8017dde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017dda:	2300      	movs	r3, #0
 8017ddc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017dde:	69fb      	ldr	r3, [r7, #28]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d017      	beq.n	8017e14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017de4:	69fb      	ldr	r3, [r7, #28]
 8017de6:	2200      	movs	r2, #0
 8017de8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017dec:	88fa      	ldrh	r2, [r7, #6]
 8017dee:	2300      	movs	r3, #0
 8017df0:	9303      	str	r3, [sp, #12]
 8017df2:	69fb      	ldr	r3, [r7, #28]
 8017df4:	9302      	str	r3, [sp, #8]
 8017df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df8:	9301      	str	r3, [sp, #4]
 8017dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dfc:	9300      	str	r3, [sp, #0]
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	68b9      	ldr	r1, [r7, #8]
 8017e02:	68f8      	ldr	r0, [r7, #12]
 8017e04:	f000 f80e 	bl	8017e24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e08:	69f8      	ldr	r0, [r7, #28]
 8017e0a:	f000 f89f 	bl	8017f4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017e0e:	2301      	movs	r3, #1
 8017e10:	61bb      	str	r3, [r7, #24]
 8017e12:	e002      	b.n	8017e1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017e14:	f04f 33ff 	mov.w	r3, #4294967295
 8017e18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017e1a:	69bb      	ldr	r3, [r7, #24]
	}
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	3720      	adds	r7, #32
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}

08017e24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b088      	sub	sp, #32
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	60f8      	str	r0, [r7, #12]
 8017e2c:	60b9      	str	r1, [r7, #8]
 8017e2e:	607a      	str	r2, [r7, #4]
 8017e30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	009b      	lsls	r3, r3, #2
 8017e3a:	461a      	mov	r2, r3
 8017e3c:	21a5      	movs	r1, #165	; 0xa5
 8017e3e:	f003 f8db 	bl	801aff8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017e46:	6879      	ldr	r1, [r7, #4]
 8017e48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017e4c:	440b      	add	r3, r1
 8017e4e:	009b      	lsls	r3, r3, #2
 8017e50:	4413      	add	r3, r2
 8017e52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017e54:	69bb      	ldr	r3, [r7, #24]
 8017e56:	f023 0307 	bic.w	r3, r3, #7
 8017e5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017e5c:	69bb      	ldr	r3, [r7, #24]
 8017e5e:	f003 0307 	and.w	r3, r3, #7
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d00c      	beq.n	8017e80 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8017e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e6a:	b672      	cpsid	i
 8017e6c:	f383 8811 	msr	BASEPRI, r3
 8017e70:	f3bf 8f6f 	isb	sy
 8017e74:	f3bf 8f4f 	dsb	sy
 8017e78:	b662      	cpsie	i
 8017e7a:	617b      	str	r3, [r7, #20]
}
 8017e7c:	bf00      	nop
 8017e7e:	e7fe      	b.n	8017e7e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d01f      	beq.n	8017ec6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017e86:	2300      	movs	r3, #0
 8017e88:	61fb      	str	r3, [r7, #28]
 8017e8a:	e012      	b.n	8017eb2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017e8c:	68ba      	ldr	r2, [r7, #8]
 8017e8e:	69fb      	ldr	r3, [r7, #28]
 8017e90:	4413      	add	r3, r2
 8017e92:	7819      	ldrb	r1, [r3, #0]
 8017e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e96:	69fb      	ldr	r3, [r7, #28]
 8017e98:	4413      	add	r3, r2
 8017e9a:	3334      	adds	r3, #52	; 0x34
 8017e9c:	460a      	mov	r2, r1
 8017e9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017ea0:	68ba      	ldr	r2, [r7, #8]
 8017ea2:	69fb      	ldr	r3, [r7, #28]
 8017ea4:	4413      	add	r3, r2
 8017ea6:	781b      	ldrb	r3, [r3, #0]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d006      	beq.n	8017eba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017eac:	69fb      	ldr	r3, [r7, #28]
 8017eae:	3301      	adds	r3, #1
 8017eb0:	61fb      	str	r3, [r7, #28]
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	2b0f      	cmp	r3, #15
 8017eb6:	d9e9      	bls.n	8017e8c <prvInitialiseNewTask+0x68>
 8017eb8:	e000      	b.n	8017ebc <prvInitialiseNewTask+0x98>
			{
				break;
 8017eba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017ec4:	e003      	b.n	8017ece <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ec8:	2200      	movs	r2, #0
 8017eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed0:	2b06      	cmp	r3, #6
 8017ed2:	d901      	bls.n	8017ed8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017ed4:	2306      	movs	r3, #6
 8017ed6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017edc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ee2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8017ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eec:	3304      	adds	r3, #4
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7ff f8ec 	bl	80170cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef6:	3318      	adds	r3, #24
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7ff f8e7 	bl	80170cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f06:	f1c3 0207 	rsb	r2, r3, #7
 8017f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f16:	2200      	movs	r2, #0
 8017f18:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f22:	2200      	movs	r2, #0
 8017f24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017f28:	683a      	ldr	r2, [r7, #0]
 8017f2a:	68f9      	ldr	r1, [r7, #12]
 8017f2c:	69b8      	ldr	r0, [r7, #24]
 8017f2e:	f001 f80d 	bl	8018f4c <pxPortInitialiseStack>
 8017f32:	4602      	mov	r2, r0
 8017f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d002      	beq.n	8017f44 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017f44:	bf00      	nop
 8017f46:	3720      	adds	r7, #32
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	bd80      	pop	{r7, pc}

08017f4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b082      	sub	sp, #8
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017f54:	f001 f90a 	bl	801916c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017f58:	4b2a      	ldr	r3, [pc, #168]	; (8018004 <prvAddNewTaskToReadyList+0xb8>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	3301      	adds	r3, #1
 8017f5e:	4a29      	ldr	r2, [pc, #164]	; (8018004 <prvAddNewTaskToReadyList+0xb8>)
 8017f60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017f62:	4b29      	ldr	r3, [pc, #164]	; (8018008 <prvAddNewTaskToReadyList+0xbc>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d109      	bne.n	8017f7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017f6a:	4a27      	ldr	r2, [pc, #156]	; (8018008 <prvAddNewTaskToReadyList+0xbc>)
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017f70:	4b24      	ldr	r3, [pc, #144]	; (8018004 <prvAddNewTaskToReadyList+0xb8>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	2b01      	cmp	r3, #1
 8017f76:	d110      	bne.n	8017f9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017f78:	f000 fc22 	bl	80187c0 <prvInitialiseTaskLists>
 8017f7c:	e00d      	b.n	8017f9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017f7e:	4b23      	ldr	r3, [pc, #140]	; (801800c <prvAddNewTaskToReadyList+0xc0>)
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d109      	bne.n	8017f9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017f86:	4b20      	ldr	r3, [pc, #128]	; (8018008 <prvAddNewTaskToReadyList+0xbc>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f90:	429a      	cmp	r2, r3
 8017f92:	d802      	bhi.n	8017f9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017f94:	4a1c      	ldr	r2, [pc, #112]	; (8018008 <prvAddNewTaskToReadyList+0xbc>)
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017f9a:	4b1d      	ldr	r3, [pc, #116]	; (8018010 <prvAddNewTaskToReadyList+0xc4>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	3301      	adds	r3, #1
 8017fa0:	4a1b      	ldr	r2, [pc, #108]	; (8018010 <prvAddNewTaskToReadyList+0xc4>)
 8017fa2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fa8:	2201      	movs	r2, #1
 8017faa:	409a      	lsls	r2, r3
 8017fac:	4b19      	ldr	r3, [pc, #100]	; (8018014 <prvAddNewTaskToReadyList+0xc8>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	4313      	orrs	r3, r2
 8017fb2:	4a18      	ldr	r2, [pc, #96]	; (8018014 <prvAddNewTaskToReadyList+0xc8>)
 8017fb4:	6013      	str	r3, [r2, #0]
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fba:	4613      	mov	r3, r2
 8017fbc:	009b      	lsls	r3, r3, #2
 8017fbe:	4413      	add	r3, r2
 8017fc0:	009b      	lsls	r3, r3, #2
 8017fc2:	4a15      	ldr	r2, [pc, #84]	; (8018018 <prvAddNewTaskToReadyList+0xcc>)
 8017fc4:	441a      	add	r2, r3
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	3304      	adds	r3, #4
 8017fca:	4619      	mov	r1, r3
 8017fcc:	4610      	mov	r0, r2
 8017fce:	f7ff f88a 	bl	80170e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017fd2:	f001 f8ff 	bl	80191d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017fd6:	4b0d      	ldr	r3, [pc, #52]	; (801800c <prvAddNewTaskToReadyList+0xc0>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d00e      	beq.n	8017ffc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017fde:	4b0a      	ldr	r3, [pc, #40]	; (8018008 <prvAddNewTaskToReadyList+0xbc>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fe8:	429a      	cmp	r2, r3
 8017fea:	d207      	bcs.n	8017ffc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017fec:	4b0b      	ldr	r3, [pc, #44]	; (801801c <prvAddNewTaskToReadyList+0xd0>)
 8017fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ff2:	601a      	str	r2, [r3, #0]
 8017ff4:	f3bf 8f4f 	dsb	sy
 8017ff8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017ffc:	bf00      	nop
 8017ffe:	3708      	adds	r7, #8
 8018000:	46bd      	mov	sp, r7
 8018002:	bd80      	pop	{r7, pc}
 8018004:	200004e0 	.word	0x200004e0
 8018008:	200003e0 	.word	0x200003e0
 801800c:	200004ec 	.word	0x200004ec
 8018010:	200004fc 	.word	0x200004fc
 8018014:	200004e8 	.word	0x200004e8
 8018018:	200003e4 	.word	0x200003e4
 801801c:	e000ed04 	.word	0xe000ed04

08018020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018020:	b580      	push	{r7, lr}
 8018022:	b084      	sub	sp, #16
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018028:	2300      	movs	r3, #0
 801802a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d019      	beq.n	8018066 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018032:	4b14      	ldr	r3, [pc, #80]	; (8018084 <vTaskDelay+0x64>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d00c      	beq.n	8018054 <vTaskDelay+0x34>
	__asm volatile
 801803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801803e:	b672      	cpsid	i
 8018040:	f383 8811 	msr	BASEPRI, r3
 8018044:	f3bf 8f6f 	isb	sy
 8018048:	f3bf 8f4f 	dsb	sy
 801804c:	b662      	cpsie	i
 801804e:	60bb      	str	r3, [r7, #8]
}
 8018050:	bf00      	nop
 8018052:	e7fe      	b.n	8018052 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8018054:	f000 f87e 	bl	8018154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018058:	2100      	movs	r1, #0
 801805a:	6878      	ldr	r0, [r7, #4]
 801805c:	f000 ff10 	bl	8018e80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018060:	f000 f886 	bl	8018170 <xTaskResumeAll>
 8018064:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d107      	bne.n	801807c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 801806c:	4b06      	ldr	r3, [pc, #24]	; (8018088 <vTaskDelay+0x68>)
 801806e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018072:	601a      	str	r2, [r3, #0]
 8018074:	f3bf 8f4f 	dsb	sy
 8018078:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801807c:	bf00      	nop
 801807e:	3710      	adds	r7, #16
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}
 8018084:	20000508 	.word	0x20000508
 8018088:	e000ed04 	.word	0xe000ed04

0801808c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b08a      	sub	sp, #40	; 0x28
 8018090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018092:	2300      	movs	r3, #0
 8018094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018096:	2300      	movs	r3, #0
 8018098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801809a:	463a      	mov	r2, r7
 801809c:	1d39      	adds	r1, r7, #4
 801809e:	f107 0308 	add.w	r3, r7, #8
 80180a2:	4618      	mov	r0, r3
 80180a4:	f7e9 fd84 	bl	8001bb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80180a8:	6839      	ldr	r1, [r7, #0]
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	68ba      	ldr	r2, [r7, #8]
 80180ae:	9202      	str	r2, [sp, #8]
 80180b0:	9301      	str	r3, [sp, #4]
 80180b2:	2300      	movs	r3, #0
 80180b4:	9300      	str	r3, [sp, #0]
 80180b6:	2300      	movs	r3, #0
 80180b8:	460a      	mov	r2, r1
 80180ba:	4920      	ldr	r1, [pc, #128]	; (801813c <vTaskStartScheduler+0xb0>)
 80180bc:	4820      	ldr	r0, [pc, #128]	; (8018140 <vTaskStartScheduler+0xb4>)
 80180be:	f7ff fe09 	bl	8017cd4 <xTaskCreateStatic>
 80180c2:	4603      	mov	r3, r0
 80180c4:	4a1f      	ldr	r2, [pc, #124]	; (8018144 <vTaskStartScheduler+0xb8>)
 80180c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80180c8:	4b1e      	ldr	r3, [pc, #120]	; (8018144 <vTaskStartScheduler+0xb8>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d002      	beq.n	80180d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80180d0:	2301      	movs	r3, #1
 80180d2:	617b      	str	r3, [r7, #20]
 80180d4:	e001      	b.n	80180da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80180d6:	2300      	movs	r3, #0
 80180d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	2b01      	cmp	r3, #1
 80180de:	d118      	bne.n	8018112 <vTaskStartScheduler+0x86>
	__asm volatile
 80180e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180e4:	b672      	cpsid	i
 80180e6:	f383 8811 	msr	BASEPRI, r3
 80180ea:	f3bf 8f6f 	isb	sy
 80180ee:	f3bf 8f4f 	dsb	sy
 80180f2:	b662      	cpsie	i
 80180f4:	613b      	str	r3, [r7, #16]
}
 80180f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80180f8:	4b13      	ldr	r3, [pc, #76]	; (8018148 <vTaskStartScheduler+0xbc>)
 80180fa:	f04f 32ff 	mov.w	r2, #4294967295
 80180fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018100:	4b12      	ldr	r3, [pc, #72]	; (801814c <vTaskStartScheduler+0xc0>)
 8018102:	2201      	movs	r2, #1
 8018104:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018106:	4b12      	ldr	r3, [pc, #72]	; (8018150 <vTaskStartScheduler+0xc4>)
 8018108:	2200      	movs	r2, #0
 801810a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801810c:	f000 ffb0 	bl	8019070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018110:	e010      	b.n	8018134 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018112:	697b      	ldr	r3, [r7, #20]
 8018114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018118:	d10c      	bne.n	8018134 <vTaskStartScheduler+0xa8>
	__asm volatile
 801811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801811e:	b672      	cpsid	i
 8018120:	f383 8811 	msr	BASEPRI, r3
 8018124:	f3bf 8f6f 	isb	sy
 8018128:	f3bf 8f4f 	dsb	sy
 801812c:	b662      	cpsie	i
 801812e:	60fb      	str	r3, [r7, #12]
}
 8018130:	bf00      	nop
 8018132:	e7fe      	b.n	8018132 <vTaskStartScheduler+0xa6>
}
 8018134:	bf00      	nop
 8018136:	3718      	adds	r7, #24
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}
 801813c:	0801c618 	.word	0x0801c618
 8018140:	0801878d 	.word	0x0801878d
 8018144:	20000504 	.word	0x20000504
 8018148:	20000500 	.word	0x20000500
 801814c:	200004ec 	.word	0x200004ec
 8018150:	200004e4 	.word	0x200004e4

08018154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018154:	b480      	push	{r7}
 8018156:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8018158:	4b04      	ldr	r3, [pc, #16]	; (801816c <vTaskSuspendAll+0x18>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	3301      	adds	r3, #1
 801815e:	4a03      	ldr	r2, [pc, #12]	; (801816c <vTaskSuspendAll+0x18>)
 8018160:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8018162:	bf00      	nop
 8018164:	46bd      	mov	sp, r7
 8018166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801816a:	4770      	bx	lr
 801816c:	20000508 	.word	0x20000508

08018170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b084      	sub	sp, #16
 8018174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018176:	2300      	movs	r3, #0
 8018178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801817a:	2300      	movs	r3, #0
 801817c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801817e:	4b42      	ldr	r3, [pc, #264]	; (8018288 <xTaskResumeAll+0x118>)
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d10c      	bne.n	80181a0 <xTaskResumeAll+0x30>
	__asm volatile
 8018186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801818a:	b672      	cpsid	i
 801818c:	f383 8811 	msr	BASEPRI, r3
 8018190:	f3bf 8f6f 	isb	sy
 8018194:	f3bf 8f4f 	dsb	sy
 8018198:	b662      	cpsie	i
 801819a:	603b      	str	r3, [r7, #0]
}
 801819c:	bf00      	nop
 801819e:	e7fe      	b.n	801819e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80181a0:	f000 ffe4 	bl	801916c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80181a4:	4b38      	ldr	r3, [pc, #224]	; (8018288 <xTaskResumeAll+0x118>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	3b01      	subs	r3, #1
 80181aa:	4a37      	ldr	r2, [pc, #220]	; (8018288 <xTaskResumeAll+0x118>)
 80181ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80181ae:	4b36      	ldr	r3, [pc, #216]	; (8018288 <xTaskResumeAll+0x118>)
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d161      	bne.n	801827a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80181b6:	4b35      	ldr	r3, [pc, #212]	; (801828c <xTaskResumeAll+0x11c>)
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d05d      	beq.n	801827a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80181be:	e02e      	b.n	801821e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181c0:	4b33      	ldr	r3, [pc, #204]	; (8018290 <xTaskResumeAll+0x120>)
 80181c2:	68db      	ldr	r3, [r3, #12]
 80181c4:	68db      	ldr	r3, [r3, #12]
 80181c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	3318      	adds	r3, #24
 80181cc:	4618      	mov	r0, r3
 80181ce:	f7fe ffe7 	bl	80171a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	3304      	adds	r3, #4
 80181d6:	4618      	mov	r0, r3
 80181d8:	f7fe ffe2 	bl	80171a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181e0:	2201      	movs	r2, #1
 80181e2:	409a      	lsls	r2, r3
 80181e4:	4b2b      	ldr	r3, [pc, #172]	; (8018294 <xTaskResumeAll+0x124>)
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	4313      	orrs	r3, r2
 80181ea:	4a2a      	ldr	r2, [pc, #168]	; (8018294 <xTaskResumeAll+0x124>)
 80181ec:	6013      	str	r3, [r2, #0]
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181f2:	4613      	mov	r3, r2
 80181f4:	009b      	lsls	r3, r3, #2
 80181f6:	4413      	add	r3, r2
 80181f8:	009b      	lsls	r3, r3, #2
 80181fa:	4a27      	ldr	r2, [pc, #156]	; (8018298 <xTaskResumeAll+0x128>)
 80181fc:	441a      	add	r2, r3
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	3304      	adds	r3, #4
 8018202:	4619      	mov	r1, r3
 8018204:	4610      	mov	r0, r2
 8018206:	f7fe ff6e 	bl	80170e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801820e:	4b23      	ldr	r3, [pc, #140]	; (801829c <xTaskResumeAll+0x12c>)
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018214:	429a      	cmp	r2, r3
 8018216:	d302      	bcc.n	801821e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8018218:	4b21      	ldr	r3, [pc, #132]	; (80182a0 <xTaskResumeAll+0x130>)
 801821a:	2201      	movs	r2, #1
 801821c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801821e:	4b1c      	ldr	r3, [pc, #112]	; (8018290 <xTaskResumeAll+0x120>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d1cc      	bne.n	80181c0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d001      	beq.n	8018230 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801822c:	f000 fb68 	bl	8018900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8018230:	4b1c      	ldr	r3, [pc, #112]	; (80182a4 <xTaskResumeAll+0x134>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d010      	beq.n	801825e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801823c:	f000 f858 	bl	80182f0 <xTaskIncrementTick>
 8018240:	4603      	mov	r3, r0
 8018242:	2b00      	cmp	r3, #0
 8018244:	d002      	beq.n	801824c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8018246:	4b16      	ldr	r3, [pc, #88]	; (80182a0 <xTaskResumeAll+0x130>)
 8018248:	2201      	movs	r2, #1
 801824a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	3b01      	subs	r3, #1
 8018250:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d1f1      	bne.n	801823c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8018258:	4b12      	ldr	r3, [pc, #72]	; (80182a4 <xTaskResumeAll+0x134>)
 801825a:	2200      	movs	r2, #0
 801825c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801825e:	4b10      	ldr	r3, [pc, #64]	; (80182a0 <xTaskResumeAll+0x130>)
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d009      	beq.n	801827a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018266:	2301      	movs	r3, #1
 8018268:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801826a:	4b0f      	ldr	r3, [pc, #60]	; (80182a8 <xTaskResumeAll+0x138>)
 801826c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018270:	601a      	str	r2, [r3, #0]
 8018272:	f3bf 8f4f 	dsb	sy
 8018276:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801827a:	f000 ffab 	bl	80191d4 <vPortExitCritical>

	return xAlreadyYielded;
 801827e:	68bb      	ldr	r3, [r7, #8]
}
 8018280:	4618      	mov	r0, r3
 8018282:	3710      	adds	r7, #16
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}
 8018288:	20000508 	.word	0x20000508
 801828c:	200004e0 	.word	0x200004e0
 8018290:	200004a0 	.word	0x200004a0
 8018294:	200004e8 	.word	0x200004e8
 8018298:	200003e4 	.word	0x200003e4
 801829c:	200003e0 	.word	0x200003e0
 80182a0:	200004f4 	.word	0x200004f4
 80182a4:	200004f0 	.word	0x200004f0
 80182a8:	e000ed04 	.word	0xe000ed04

080182ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80182ac:	b480      	push	{r7}
 80182ae:	b083      	sub	sp, #12
 80182b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80182b2:	4b05      	ldr	r3, [pc, #20]	; (80182c8 <xTaskGetTickCount+0x1c>)
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80182b8:	687b      	ldr	r3, [r7, #4]
}
 80182ba:	4618      	mov	r0, r3
 80182bc:	370c      	adds	r7, #12
 80182be:	46bd      	mov	sp, r7
 80182c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c4:	4770      	bx	lr
 80182c6:	bf00      	nop
 80182c8:	200004e4 	.word	0x200004e4

080182cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80182cc:	b580      	push	{r7, lr}
 80182ce:	b082      	sub	sp, #8
 80182d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80182d2:	f001 f833 	bl	801933c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80182d6:	2300      	movs	r3, #0
 80182d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80182da:	4b04      	ldr	r3, [pc, #16]	; (80182ec <xTaskGetTickCountFromISR+0x20>)
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80182e0:	683b      	ldr	r3, [r7, #0]
}
 80182e2:	4618      	mov	r0, r3
 80182e4:	3708      	adds	r7, #8
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}
 80182ea:	bf00      	nop
 80182ec:	200004e4 	.word	0x200004e4

080182f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b086      	sub	sp, #24
 80182f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80182f6:	2300      	movs	r3, #0
 80182f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80182fa:	4b4f      	ldr	r3, [pc, #316]	; (8018438 <xTaskIncrementTick+0x148>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	f040 808a 	bne.w	8018418 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018304:	4b4d      	ldr	r3, [pc, #308]	; (801843c <xTaskIncrementTick+0x14c>)
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	3301      	adds	r3, #1
 801830a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801830c:	4a4b      	ldr	r2, [pc, #300]	; (801843c <xTaskIncrementTick+0x14c>)
 801830e:	693b      	ldr	r3, [r7, #16]
 8018310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018312:	693b      	ldr	r3, [r7, #16]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d122      	bne.n	801835e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8018318:	4b49      	ldr	r3, [pc, #292]	; (8018440 <xTaskIncrementTick+0x150>)
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d00c      	beq.n	801833c <xTaskIncrementTick+0x4c>
	__asm volatile
 8018322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018326:	b672      	cpsid	i
 8018328:	f383 8811 	msr	BASEPRI, r3
 801832c:	f3bf 8f6f 	isb	sy
 8018330:	f3bf 8f4f 	dsb	sy
 8018334:	b662      	cpsie	i
 8018336:	603b      	str	r3, [r7, #0]
}
 8018338:	bf00      	nop
 801833a:	e7fe      	b.n	801833a <xTaskIncrementTick+0x4a>
 801833c:	4b40      	ldr	r3, [pc, #256]	; (8018440 <xTaskIncrementTick+0x150>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	60fb      	str	r3, [r7, #12]
 8018342:	4b40      	ldr	r3, [pc, #256]	; (8018444 <xTaskIncrementTick+0x154>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	4a3e      	ldr	r2, [pc, #248]	; (8018440 <xTaskIncrementTick+0x150>)
 8018348:	6013      	str	r3, [r2, #0]
 801834a:	4a3e      	ldr	r2, [pc, #248]	; (8018444 <xTaskIncrementTick+0x154>)
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	6013      	str	r3, [r2, #0]
 8018350:	4b3d      	ldr	r3, [pc, #244]	; (8018448 <xTaskIncrementTick+0x158>)
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	3301      	adds	r3, #1
 8018356:	4a3c      	ldr	r2, [pc, #240]	; (8018448 <xTaskIncrementTick+0x158>)
 8018358:	6013      	str	r3, [r2, #0]
 801835a:	f000 fad1 	bl	8018900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801835e:	4b3b      	ldr	r3, [pc, #236]	; (801844c <xTaskIncrementTick+0x15c>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	693a      	ldr	r2, [r7, #16]
 8018364:	429a      	cmp	r2, r3
 8018366:	d348      	bcc.n	80183fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018368:	4b35      	ldr	r3, [pc, #212]	; (8018440 <xTaskIncrementTick+0x150>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d104      	bne.n	801837c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018372:	4b36      	ldr	r3, [pc, #216]	; (801844c <xTaskIncrementTick+0x15c>)
 8018374:	f04f 32ff 	mov.w	r2, #4294967295
 8018378:	601a      	str	r2, [r3, #0]
					break;
 801837a:	e03e      	b.n	80183fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801837c:	4b30      	ldr	r3, [pc, #192]	; (8018440 <xTaskIncrementTick+0x150>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	68db      	ldr	r3, [r3, #12]
 8018382:	68db      	ldr	r3, [r3, #12]
 8018384:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	685b      	ldr	r3, [r3, #4]
 801838a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801838c:	693a      	ldr	r2, [r7, #16]
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	429a      	cmp	r2, r3
 8018392:	d203      	bcs.n	801839c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018394:	4a2d      	ldr	r2, [pc, #180]	; (801844c <xTaskIncrementTick+0x15c>)
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801839a:	e02e      	b.n	80183fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	3304      	adds	r3, #4
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7fe fefd 	bl	80171a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80183a6:	68bb      	ldr	r3, [r7, #8]
 80183a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d004      	beq.n	80183b8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80183ae:	68bb      	ldr	r3, [r7, #8]
 80183b0:	3318      	adds	r3, #24
 80183b2:	4618      	mov	r0, r3
 80183b4:	f7fe fef4 	bl	80171a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80183b8:	68bb      	ldr	r3, [r7, #8]
 80183ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183bc:	2201      	movs	r2, #1
 80183be:	409a      	lsls	r2, r3
 80183c0:	4b23      	ldr	r3, [pc, #140]	; (8018450 <xTaskIncrementTick+0x160>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	4313      	orrs	r3, r2
 80183c6:	4a22      	ldr	r2, [pc, #136]	; (8018450 <xTaskIncrementTick+0x160>)
 80183c8:	6013      	str	r3, [r2, #0]
 80183ca:	68bb      	ldr	r3, [r7, #8]
 80183cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183ce:	4613      	mov	r3, r2
 80183d0:	009b      	lsls	r3, r3, #2
 80183d2:	4413      	add	r3, r2
 80183d4:	009b      	lsls	r3, r3, #2
 80183d6:	4a1f      	ldr	r2, [pc, #124]	; (8018454 <xTaskIncrementTick+0x164>)
 80183d8:	441a      	add	r2, r3
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	3304      	adds	r3, #4
 80183de:	4619      	mov	r1, r3
 80183e0:	4610      	mov	r0, r2
 80183e2:	f7fe fe80 	bl	80170e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80183e6:	68bb      	ldr	r3, [r7, #8]
 80183e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183ea:	4b1b      	ldr	r3, [pc, #108]	; (8018458 <xTaskIncrementTick+0x168>)
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183f0:	429a      	cmp	r2, r3
 80183f2:	d3b9      	bcc.n	8018368 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80183f4:	2301      	movs	r3, #1
 80183f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80183f8:	e7b6      	b.n	8018368 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80183fa:	4b17      	ldr	r3, [pc, #92]	; (8018458 <xTaskIncrementTick+0x168>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018400:	4914      	ldr	r1, [pc, #80]	; (8018454 <xTaskIncrementTick+0x164>)
 8018402:	4613      	mov	r3, r2
 8018404:	009b      	lsls	r3, r3, #2
 8018406:	4413      	add	r3, r2
 8018408:	009b      	lsls	r3, r3, #2
 801840a:	440b      	add	r3, r1
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	2b01      	cmp	r3, #1
 8018410:	d907      	bls.n	8018422 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8018412:	2301      	movs	r3, #1
 8018414:	617b      	str	r3, [r7, #20]
 8018416:	e004      	b.n	8018422 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018418:	4b10      	ldr	r3, [pc, #64]	; (801845c <xTaskIncrementTick+0x16c>)
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	3301      	adds	r3, #1
 801841e:	4a0f      	ldr	r2, [pc, #60]	; (801845c <xTaskIncrementTick+0x16c>)
 8018420:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8018422:	4b0f      	ldr	r3, [pc, #60]	; (8018460 <xTaskIncrementTick+0x170>)
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d001      	beq.n	801842e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801842a:	2301      	movs	r3, #1
 801842c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801842e:	697b      	ldr	r3, [r7, #20]
}
 8018430:	4618      	mov	r0, r3
 8018432:	3718      	adds	r7, #24
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}
 8018438:	20000508 	.word	0x20000508
 801843c:	200004e4 	.word	0x200004e4
 8018440:	20000498 	.word	0x20000498
 8018444:	2000049c 	.word	0x2000049c
 8018448:	200004f8 	.word	0x200004f8
 801844c:	20000500 	.word	0x20000500
 8018450:	200004e8 	.word	0x200004e8
 8018454:	200003e4 	.word	0x200003e4
 8018458:	200003e0 	.word	0x200003e0
 801845c:	200004f0 	.word	0x200004f0
 8018460:	200004f4 	.word	0x200004f4

08018464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b088      	sub	sp, #32
 8018468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801846a:	4b3a      	ldr	r3, [pc, #232]	; (8018554 <vTaskSwitchContext+0xf0>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d003      	beq.n	801847a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018472:	4b39      	ldr	r3, [pc, #228]	; (8018558 <vTaskSwitchContext+0xf4>)
 8018474:	2201      	movs	r2, #1
 8018476:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018478:	e068      	b.n	801854c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801847a:	4b37      	ldr	r3, [pc, #220]	; (8018558 <vTaskSwitchContext+0xf4>)
 801847c:	2200      	movs	r2, #0
 801847e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018480:	4b36      	ldr	r3, [pc, #216]	; (801855c <vTaskSwitchContext+0xf8>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018486:	61fb      	str	r3, [r7, #28]
 8018488:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801848c:	61bb      	str	r3, [r7, #24]
 801848e:	69fb      	ldr	r3, [r7, #28]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	69ba      	ldr	r2, [r7, #24]
 8018494:	429a      	cmp	r2, r3
 8018496:	d111      	bne.n	80184bc <vTaskSwitchContext+0x58>
 8018498:	69fb      	ldr	r3, [r7, #28]
 801849a:	3304      	adds	r3, #4
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	69ba      	ldr	r2, [r7, #24]
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d10b      	bne.n	80184bc <vTaskSwitchContext+0x58>
 80184a4:	69fb      	ldr	r3, [r7, #28]
 80184a6:	3308      	adds	r3, #8
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	69ba      	ldr	r2, [r7, #24]
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d105      	bne.n	80184bc <vTaskSwitchContext+0x58>
 80184b0:	69fb      	ldr	r3, [r7, #28]
 80184b2:	330c      	adds	r3, #12
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	69ba      	ldr	r2, [r7, #24]
 80184b8:	429a      	cmp	r2, r3
 80184ba:	d008      	beq.n	80184ce <vTaskSwitchContext+0x6a>
 80184bc:	4b27      	ldr	r3, [pc, #156]	; (801855c <vTaskSwitchContext+0xf8>)
 80184be:	681a      	ldr	r2, [r3, #0]
 80184c0:	4b26      	ldr	r3, [pc, #152]	; (801855c <vTaskSwitchContext+0xf8>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	3334      	adds	r3, #52	; 0x34
 80184c6:	4619      	mov	r1, r3
 80184c8:	4610      	mov	r0, r2
 80184ca:	f7e9 fb5e 	bl	8001b8a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184ce:	4b24      	ldr	r3, [pc, #144]	; (8018560 <vTaskSwitchContext+0xfc>)
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	fab3 f383 	clz	r3, r3
 80184da:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80184dc:	7afb      	ldrb	r3, [r7, #11]
 80184de:	f1c3 031f 	rsb	r3, r3, #31
 80184e2:	617b      	str	r3, [r7, #20]
 80184e4:	491f      	ldr	r1, [pc, #124]	; (8018564 <vTaskSwitchContext+0x100>)
 80184e6:	697a      	ldr	r2, [r7, #20]
 80184e8:	4613      	mov	r3, r2
 80184ea:	009b      	lsls	r3, r3, #2
 80184ec:	4413      	add	r3, r2
 80184ee:	009b      	lsls	r3, r3, #2
 80184f0:	440b      	add	r3, r1
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d10c      	bne.n	8018512 <vTaskSwitchContext+0xae>
	__asm volatile
 80184f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184fc:	b672      	cpsid	i
 80184fe:	f383 8811 	msr	BASEPRI, r3
 8018502:	f3bf 8f6f 	isb	sy
 8018506:	f3bf 8f4f 	dsb	sy
 801850a:	b662      	cpsie	i
 801850c:	607b      	str	r3, [r7, #4]
}
 801850e:	bf00      	nop
 8018510:	e7fe      	b.n	8018510 <vTaskSwitchContext+0xac>
 8018512:	697a      	ldr	r2, [r7, #20]
 8018514:	4613      	mov	r3, r2
 8018516:	009b      	lsls	r3, r3, #2
 8018518:	4413      	add	r3, r2
 801851a:	009b      	lsls	r3, r3, #2
 801851c:	4a11      	ldr	r2, [pc, #68]	; (8018564 <vTaskSwitchContext+0x100>)
 801851e:	4413      	add	r3, r2
 8018520:	613b      	str	r3, [r7, #16]
 8018522:	693b      	ldr	r3, [r7, #16]
 8018524:	685b      	ldr	r3, [r3, #4]
 8018526:	685a      	ldr	r2, [r3, #4]
 8018528:	693b      	ldr	r3, [r7, #16]
 801852a:	605a      	str	r2, [r3, #4]
 801852c:	693b      	ldr	r3, [r7, #16]
 801852e:	685a      	ldr	r2, [r3, #4]
 8018530:	693b      	ldr	r3, [r7, #16]
 8018532:	3308      	adds	r3, #8
 8018534:	429a      	cmp	r2, r3
 8018536:	d104      	bne.n	8018542 <vTaskSwitchContext+0xde>
 8018538:	693b      	ldr	r3, [r7, #16]
 801853a:	685b      	ldr	r3, [r3, #4]
 801853c:	685a      	ldr	r2, [r3, #4]
 801853e:	693b      	ldr	r3, [r7, #16]
 8018540:	605a      	str	r2, [r3, #4]
 8018542:	693b      	ldr	r3, [r7, #16]
 8018544:	685b      	ldr	r3, [r3, #4]
 8018546:	68db      	ldr	r3, [r3, #12]
 8018548:	4a04      	ldr	r2, [pc, #16]	; (801855c <vTaskSwitchContext+0xf8>)
 801854a:	6013      	str	r3, [r2, #0]
}
 801854c:	bf00      	nop
 801854e:	3720      	adds	r7, #32
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}
 8018554:	20000508 	.word	0x20000508
 8018558:	200004f4 	.word	0x200004f4
 801855c:	200003e0 	.word	0x200003e0
 8018560:	200004e8 	.word	0x200004e8
 8018564:	200003e4 	.word	0x200003e4

08018568 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b084      	sub	sp, #16
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
 8018570:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d10c      	bne.n	8018592 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8018578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801857c:	b672      	cpsid	i
 801857e:	f383 8811 	msr	BASEPRI, r3
 8018582:	f3bf 8f6f 	isb	sy
 8018586:	f3bf 8f4f 	dsb	sy
 801858a:	b662      	cpsie	i
 801858c:	60fb      	str	r3, [r7, #12]
}
 801858e:	bf00      	nop
 8018590:	e7fe      	b.n	8018590 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018592:	4b07      	ldr	r3, [pc, #28]	; (80185b0 <vTaskPlaceOnEventList+0x48>)
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	3318      	adds	r3, #24
 8018598:	4619      	mov	r1, r3
 801859a:	6878      	ldr	r0, [r7, #4]
 801859c:	f7fe fdc7 	bl	801712e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80185a0:	2101      	movs	r1, #1
 80185a2:	6838      	ldr	r0, [r7, #0]
 80185a4:	f000 fc6c 	bl	8018e80 <prvAddCurrentTaskToDelayedList>
}
 80185a8:	bf00      	nop
 80185aa:	3710      	adds	r7, #16
 80185ac:	46bd      	mov	sp, r7
 80185ae:	bd80      	pop	{r7, pc}
 80185b0:	200003e0 	.word	0x200003e0

080185b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b086      	sub	sp, #24
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	68db      	ldr	r3, [r3, #12]
 80185c0:	68db      	ldr	r3, [r3, #12]
 80185c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80185c4:	693b      	ldr	r3, [r7, #16]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d10c      	bne.n	80185e4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80185ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185ce:	b672      	cpsid	i
 80185d0:	f383 8811 	msr	BASEPRI, r3
 80185d4:	f3bf 8f6f 	isb	sy
 80185d8:	f3bf 8f4f 	dsb	sy
 80185dc:	b662      	cpsie	i
 80185de:	60fb      	str	r3, [r7, #12]
}
 80185e0:	bf00      	nop
 80185e2:	e7fe      	b.n	80185e2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80185e4:	693b      	ldr	r3, [r7, #16]
 80185e6:	3318      	adds	r3, #24
 80185e8:	4618      	mov	r0, r3
 80185ea:	f7fe fdd9 	bl	80171a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80185ee:	4b1d      	ldr	r3, [pc, #116]	; (8018664 <xTaskRemoveFromEventList+0xb0>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d11c      	bne.n	8018630 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80185f6:	693b      	ldr	r3, [r7, #16]
 80185f8:	3304      	adds	r3, #4
 80185fa:	4618      	mov	r0, r3
 80185fc:	f7fe fdd0 	bl	80171a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018600:	693b      	ldr	r3, [r7, #16]
 8018602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018604:	2201      	movs	r2, #1
 8018606:	409a      	lsls	r2, r3
 8018608:	4b17      	ldr	r3, [pc, #92]	; (8018668 <xTaskRemoveFromEventList+0xb4>)
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	4313      	orrs	r3, r2
 801860e:	4a16      	ldr	r2, [pc, #88]	; (8018668 <xTaskRemoveFromEventList+0xb4>)
 8018610:	6013      	str	r3, [r2, #0]
 8018612:	693b      	ldr	r3, [r7, #16]
 8018614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018616:	4613      	mov	r3, r2
 8018618:	009b      	lsls	r3, r3, #2
 801861a:	4413      	add	r3, r2
 801861c:	009b      	lsls	r3, r3, #2
 801861e:	4a13      	ldr	r2, [pc, #76]	; (801866c <xTaskRemoveFromEventList+0xb8>)
 8018620:	441a      	add	r2, r3
 8018622:	693b      	ldr	r3, [r7, #16]
 8018624:	3304      	adds	r3, #4
 8018626:	4619      	mov	r1, r3
 8018628:	4610      	mov	r0, r2
 801862a:	f7fe fd5c 	bl	80170e6 <vListInsertEnd>
 801862e:	e005      	b.n	801863c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018630:	693b      	ldr	r3, [r7, #16]
 8018632:	3318      	adds	r3, #24
 8018634:	4619      	mov	r1, r3
 8018636:	480e      	ldr	r0, [pc, #56]	; (8018670 <xTaskRemoveFromEventList+0xbc>)
 8018638:	f7fe fd55 	bl	80170e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801863c:	693b      	ldr	r3, [r7, #16]
 801863e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018640:	4b0c      	ldr	r3, [pc, #48]	; (8018674 <xTaskRemoveFromEventList+0xc0>)
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018646:	429a      	cmp	r2, r3
 8018648:	d905      	bls.n	8018656 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801864a:	2301      	movs	r3, #1
 801864c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801864e:	4b0a      	ldr	r3, [pc, #40]	; (8018678 <xTaskRemoveFromEventList+0xc4>)
 8018650:	2201      	movs	r2, #1
 8018652:	601a      	str	r2, [r3, #0]
 8018654:	e001      	b.n	801865a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8018656:	2300      	movs	r3, #0
 8018658:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801865a:	697b      	ldr	r3, [r7, #20]
}
 801865c:	4618      	mov	r0, r3
 801865e:	3718      	adds	r7, #24
 8018660:	46bd      	mov	sp, r7
 8018662:	bd80      	pop	{r7, pc}
 8018664:	20000508 	.word	0x20000508
 8018668:	200004e8 	.word	0x200004e8
 801866c:	200003e4 	.word	0x200003e4
 8018670:	200004a0 	.word	0x200004a0
 8018674:	200003e0 	.word	0x200003e0
 8018678:	200004f4 	.word	0x200004f4

0801867c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801867c:	b480      	push	{r7}
 801867e:	b083      	sub	sp, #12
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018684:	4b06      	ldr	r3, [pc, #24]	; (80186a0 <vTaskInternalSetTimeOutState+0x24>)
 8018686:	681a      	ldr	r2, [r3, #0]
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801868c:	4b05      	ldr	r3, [pc, #20]	; (80186a4 <vTaskInternalSetTimeOutState+0x28>)
 801868e:	681a      	ldr	r2, [r3, #0]
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	605a      	str	r2, [r3, #4]
}
 8018694:	bf00      	nop
 8018696:	370c      	adds	r7, #12
 8018698:	46bd      	mov	sp, r7
 801869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869e:	4770      	bx	lr
 80186a0:	200004f8 	.word	0x200004f8
 80186a4:	200004e4 	.word	0x200004e4

080186a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b088      	sub	sp, #32
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
 80186b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d10c      	bne.n	80186d2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80186b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186bc:	b672      	cpsid	i
 80186be:	f383 8811 	msr	BASEPRI, r3
 80186c2:	f3bf 8f6f 	isb	sy
 80186c6:	f3bf 8f4f 	dsb	sy
 80186ca:	b662      	cpsie	i
 80186cc:	613b      	str	r3, [r7, #16]
}
 80186ce:	bf00      	nop
 80186d0:	e7fe      	b.n	80186d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d10c      	bne.n	80186f2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80186d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186dc:	b672      	cpsid	i
 80186de:	f383 8811 	msr	BASEPRI, r3
 80186e2:	f3bf 8f6f 	isb	sy
 80186e6:	f3bf 8f4f 	dsb	sy
 80186ea:	b662      	cpsie	i
 80186ec:	60fb      	str	r3, [r7, #12]
}
 80186ee:	bf00      	nop
 80186f0:	e7fe      	b.n	80186f0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80186f2:	f000 fd3b 	bl	801916c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80186f6:	4b1d      	ldr	r3, [pc, #116]	; (801876c <xTaskCheckForTimeOut+0xc4>)
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	685b      	ldr	r3, [r3, #4]
 8018700:	69ba      	ldr	r2, [r7, #24]
 8018702:	1ad3      	subs	r3, r2, r3
 8018704:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018706:	683b      	ldr	r3, [r7, #0]
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801870e:	d102      	bne.n	8018716 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018710:	2300      	movs	r3, #0
 8018712:	61fb      	str	r3, [r7, #28]
 8018714:	e023      	b.n	801875e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	4b15      	ldr	r3, [pc, #84]	; (8018770 <xTaskCheckForTimeOut+0xc8>)
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	429a      	cmp	r2, r3
 8018720:	d007      	beq.n	8018732 <xTaskCheckForTimeOut+0x8a>
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	685b      	ldr	r3, [r3, #4]
 8018726:	69ba      	ldr	r2, [r7, #24]
 8018728:	429a      	cmp	r2, r3
 801872a:	d302      	bcc.n	8018732 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801872c:	2301      	movs	r3, #1
 801872e:	61fb      	str	r3, [r7, #28]
 8018730:	e015      	b.n	801875e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018732:	683b      	ldr	r3, [r7, #0]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	697a      	ldr	r2, [r7, #20]
 8018738:	429a      	cmp	r2, r3
 801873a:	d20b      	bcs.n	8018754 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801873c:	683b      	ldr	r3, [r7, #0]
 801873e:	681a      	ldr	r2, [r3, #0]
 8018740:	697b      	ldr	r3, [r7, #20]
 8018742:	1ad2      	subs	r2, r2, r3
 8018744:	683b      	ldr	r3, [r7, #0]
 8018746:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018748:	6878      	ldr	r0, [r7, #4]
 801874a:	f7ff ff97 	bl	801867c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801874e:	2300      	movs	r3, #0
 8018750:	61fb      	str	r3, [r7, #28]
 8018752:	e004      	b.n	801875e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8018754:	683b      	ldr	r3, [r7, #0]
 8018756:	2200      	movs	r2, #0
 8018758:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801875a:	2301      	movs	r3, #1
 801875c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801875e:	f000 fd39 	bl	80191d4 <vPortExitCritical>

	return xReturn;
 8018762:	69fb      	ldr	r3, [r7, #28]
}
 8018764:	4618      	mov	r0, r3
 8018766:	3720      	adds	r7, #32
 8018768:	46bd      	mov	sp, r7
 801876a:	bd80      	pop	{r7, pc}
 801876c:	200004e4 	.word	0x200004e4
 8018770:	200004f8 	.word	0x200004f8

08018774 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018774:	b480      	push	{r7}
 8018776:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018778:	4b03      	ldr	r3, [pc, #12]	; (8018788 <vTaskMissedYield+0x14>)
 801877a:	2201      	movs	r2, #1
 801877c:	601a      	str	r2, [r3, #0]
}
 801877e:	bf00      	nop
 8018780:	46bd      	mov	sp, r7
 8018782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018786:	4770      	bx	lr
 8018788:	200004f4 	.word	0x200004f4

0801878c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b082      	sub	sp, #8
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018794:	f000 f854 	bl	8018840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018798:	4b07      	ldr	r3, [pc, #28]	; (80187b8 <prvIdleTask+0x2c>)
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	2b01      	cmp	r3, #1
 801879e:	d907      	bls.n	80187b0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80187a0:	4b06      	ldr	r3, [pc, #24]	; (80187bc <prvIdleTask+0x30>)
 80187a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187a6:	601a      	str	r2, [r3, #0]
 80187a8:	f3bf 8f4f 	dsb	sy
 80187ac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80187b0:	f7e9 f9e4 	bl	8001b7c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80187b4:	e7ee      	b.n	8018794 <prvIdleTask+0x8>
 80187b6:	bf00      	nop
 80187b8:	200003e4 	.word	0x200003e4
 80187bc:	e000ed04 	.word	0xe000ed04

080187c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b082      	sub	sp, #8
 80187c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80187c6:	2300      	movs	r3, #0
 80187c8:	607b      	str	r3, [r7, #4]
 80187ca:	e00c      	b.n	80187e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80187cc:	687a      	ldr	r2, [r7, #4]
 80187ce:	4613      	mov	r3, r2
 80187d0:	009b      	lsls	r3, r3, #2
 80187d2:	4413      	add	r3, r2
 80187d4:	009b      	lsls	r3, r3, #2
 80187d6:	4a12      	ldr	r2, [pc, #72]	; (8018820 <prvInitialiseTaskLists+0x60>)
 80187d8:	4413      	add	r3, r2
 80187da:	4618      	mov	r0, r3
 80187dc:	f7fe fc56 	bl	801708c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	3301      	adds	r3, #1
 80187e4:	607b      	str	r3, [r7, #4]
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2b06      	cmp	r3, #6
 80187ea:	d9ef      	bls.n	80187cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80187ec:	480d      	ldr	r0, [pc, #52]	; (8018824 <prvInitialiseTaskLists+0x64>)
 80187ee:	f7fe fc4d 	bl	801708c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80187f2:	480d      	ldr	r0, [pc, #52]	; (8018828 <prvInitialiseTaskLists+0x68>)
 80187f4:	f7fe fc4a 	bl	801708c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80187f8:	480c      	ldr	r0, [pc, #48]	; (801882c <prvInitialiseTaskLists+0x6c>)
 80187fa:	f7fe fc47 	bl	801708c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80187fe:	480c      	ldr	r0, [pc, #48]	; (8018830 <prvInitialiseTaskLists+0x70>)
 8018800:	f7fe fc44 	bl	801708c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018804:	480b      	ldr	r0, [pc, #44]	; (8018834 <prvInitialiseTaskLists+0x74>)
 8018806:	f7fe fc41 	bl	801708c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801880a:	4b0b      	ldr	r3, [pc, #44]	; (8018838 <prvInitialiseTaskLists+0x78>)
 801880c:	4a05      	ldr	r2, [pc, #20]	; (8018824 <prvInitialiseTaskLists+0x64>)
 801880e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018810:	4b0a      	ldr	r3, [pc, #40]	; (801883c <prvInitialiseTaskLists+0x7c>)
 8018812:	4a05      	ldr	r2, [pc, #20]	; (8018828 <prvInitialiseTaskLists+0x68>)
 8018814:	601a      	str	r2, [r3, #0]
}
 8018816:	bf00      	nop
 8018818:	3708      	adds	r7, #8
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}
 801881e:	bf00      	nop
 8018820:	200003e4 	.word	0x200003e4
 8018824:	20000470 	.word	0x20000470
 8018828:	20000484 	.word	0x20000484
 801882c:	200004a0 	.word	0x200004a0
 8018830:	200004b4 	.word	0x200004b4
 8018834:	200004cc 	.word	0x200004cc
 8018838:	20000498 	.word	0x20000498
 801883c:	2000049c 	.word	0x2000049c

08018840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b082      	sub	sp, #8
 8018844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018846:	e019      	b.n	801887c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018848:	f000 fc90 	bl	801916c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801884c:	4b10      	ldr	r3, [pc, #64]	; (8018890 <prvCheckTasksWaitingTermination+0x50>)
 801884e:	68db      	ldr	r3, [r3, #12]
 8018850:	68db      	ldr	r3, [r3, #12]
 8018852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	3304      	adds	r3, #4
 8018858:	4618      	mov	r0, r3
 801885a:	f7fe fca1 	bl	80171a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801885e:	4b0d      	ldr	r3, [pc, #52]	; (8018894 <prvCheckTasksWaitingTermination+0x54>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	3b01      	subs	r3, #1
 8018864:	4a0b      	ldr	r2, [pc, #44]	; (8018894 <prvCheckTasksWaitingTermination+0x54>)
 8018866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018868:	4b0b      	ldr	r3, [pc, #44]	; (8018898 <prvCheckTasksWaitingTermination+0x58>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	3b01      	subs	r3, #1
 801886e:	4a0a      	ldr	r2, [pc, #40]	; (8018898 <prvCheckTasksWaitingTermination+0x58>)
 8018870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018872:	f000 fcaf 	bl	80191d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f000 f810 	bl	801889c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801887c:	4b06      	ldr	r3, [pc, #24]	; (8018898 <prvCheckTasksWaitingTermination+0x58>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d1e1      	bne.n	8018848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018884:	bf00      	nop
 8018886:	bf00      	nop
 8018888:	3708      	adds	r7, #8
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}
 801888e:	bf00      	nop
 8018890:	200004b4 	.word	0x200004b4
 8018894:	200004e0 	.word	0x200004e0
 8018898:	200004c8 	.word	0x200004c8

0801889c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801889c:	b580      	push	{r7, lr}
 801889e:	b084      	sub	sp, #16
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d108      	bne.n	80188c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188b2:	4618      	mov	r0, r3
 80188b4:	f000 fe56 	bl	8019564 <vPortFree>
				vPortFree( pxTCB );
 80188b8:	6878      	ldr	r0, [r7, #4]
 80188ba:	f000 fe53 	bl	8019564 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80188be:	e01a      	b.n	80188f6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80188c6:	2b01      	cmp	r3, #1
 80188c8:	d103      	bne.n	80188d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80188ca:	6878      	ldr	r0, [r7, #4]
 80188cc:	f000 fe4a 	bl	8019564 <vPortFree>
	}
 80188d0:	e011      	b.n	80188f6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80188d8:	2b02      	cmp	r3, #2
 80188da:	d00c      	beq.n	80188f6 <prvDeleteTCB+0x5a>
	__asm volatile
 80188dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188e0:	b672      	cpsid	i
 80188e2:	f383 8811 	msr	BASEPRI, r3
 80188e6:	f3bf 8f6f 	isb	sy
 80188ea:	f3bf 8f4f 	dsb	sy
 80188ee:	b662      	cpsie	i
 80188f0:	60fb      	str	r3, [r7, #12]
}
 80188f2:	bf00      	nop
 80188f4:	e7fe      	b.n	80188f4 <prvDeleteTCB+0x58>
	}
 80188f6:	bf00      	nop
 80188f8:	3710      	adds	r7, #16
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bd80      	pop	{r7, pc}
	...

08018900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018900:	b480      	push	{r7}
 8018902:	b083      	sub	sp, #12
 8018904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018906:	4b0c      	ldr	r3, [pc, #48]	; (8018938 <prvResetNextTaskUnblockTime+0x38>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d104      	bne.n	801891a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018910:	4b0a      	ldr	r3, [pc, #40]	; (801893c <prvResetNextTaskUnblockTime+0x3c>)
 8018912:	f04f 32ff 	mov.w	r2, #4294967295
 8018916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018918:	e008      	b.n	801892c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801891a:	4b07      	ldr	r3, [pc, #28]	; (8018938 <prvResetNextTaskUnblockTime+0x38>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	68db      	ldr	r3, [r3, #12]
 8018920:	68db      	ldr	r3, [r3, #12]
 8018922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	685b      	ldr	r3, [r3, #4]
 8018928:	4a04      	ldr	r2, [pc, #16]	; (801893c <prvResetNextTaskUnblockTime+0x3c>)
 801892a:	6013      	str	r3, [r2, #0]
}
 801892c:	bf00      	nop
 801892e:	370c      	adds	r7, #12
 8018930:	46bd      	mov	sp, r7
 8018932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018936:	4770      	bx	lr
 8018938:	20000498 	.word	0x20000498
 801893c:	20000500 	.word	0x20000500

08018940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018940:	b480      	push	{r7}
 8018942:	b083      	sub	sp, #12
 8018944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018946:	4b0b      	ldr	r3, [pc, #44]	; (8018974 <xTaskGetSchedulerState+0x34>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d102      	bne.n	8018954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801894e:	2301      	movs	r3, #1
 8018950:	607b      	str	r3, [r7, #4]
 8018952:	e008      	b.n	8018966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018954:	4b08      	ldr	r3, [pc, #32]	; (8018978 <xTaskGetSchedulerState+0x38>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d102      	bne.n	8018962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801895c:	2302      	movs	r3, #2
 801895e:	607b      	str	r3, [r7, #4]
 8018960:	e001      	b.n	8018966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018962:	2300      	movs	r3, #0
 8018964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018966:	687b      	ldr	r3, [r7, #4]
	}
 8018968:	4618      	mov	r0, r3
 801896a:	370c      	adds	r7, #12
 801896c:	46bd      	mov	sp, r7
 801896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018972:	4770      	bx	lr
 8018974:	200004ec 	.word	0x200004ec
 8018978:	20000508 	.word	0x20000508

0801897c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801897c:	b580      	push	{r7, lr}
 801897e:	b086      	sub	sp, #24
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018988:	2300      	movs	r3, #0
 801898a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d072      	beq.n	8018a78 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018992:	4b3c      	ldr	r3, [pc, #240]	; (8018a84 <xTaskPriorityDisinherit+0x108>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	693a      	ldr	r2, [r7, #16]
 8018998:	429a      	cmp	r2, r3
 801899a:	d00c      	beq.n	80189b6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189a0:	b672      	cpsid	i
 80189a2:	f383 8811 	msr	BASEPRI, r3
 80189a6:	f3bf 8f6f 	isb	sy
 80189aa:	f3bf 8f4f 	dsb	sy
 80189ae:	b662      	cpsie	i
 80189b0:	60fb      	str	r3, [r7, #12]
}
 80189b2:	bf00      	nop
 80189b4:	e7fe      	b.n	80189b4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80189b6:	693b      	ldr	r3, [r7, #16]
 80189b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d10c      	bne.n	80189d8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80189be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189c2:	b672      	cpsid	i
 80189c4:	f383 8811 	msr	BASEPRI, r3
 80189c8:	f3bf 8f6f 	isb	sy
 80189cc:	f3bf 8f4f 	dsb	sy
 80189d0:	b662      	cpsie	i
 80189d2:	60bb      	str	r3, [r7, #8]
}
 80189d4:	bf00      	nop
 80189d6:	e7fe      	b.n	80189d6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80189d8:	693b      	ldr	r3, [r7, #16]
 80189da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80189dc:	1e5a      	subs	r2, r3, #1
 80189de:	693b      	ldr	r3, [r7, #16]
 80189e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80189e2:	693b      	ldr	r3, [r7, #16]
 80189e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189e6:	693b      	ldr	r3, [r7, #16]
 80189e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189ea:	429a      	cmp	r2, r3
 80189ec:	d044      	beq.n	8018a78 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80189ee:	693b      	ldr	r3, [r7, #16]
 80189f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d140      	bne.n	8018a78 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	3304      	adds	r3, #4
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7fe fbd0 	bl	80171a0 <uxListRemove>
 8018a00:	4603      	mov	r3, r0
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d115      	bne.n	8018a32 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018a06:	693b      	ldr	r3, [r7, #16]
 8018a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a0a:	491f      	ldr	r1, [pc, #124]	; (8018a88 <xTaskPriorityDisinherit+0x10c>)
 8018a0c:	4613      	mov	r3, r2
 8018a0e:	009b      	lsls	r3, r3, #2
 8018a10:	4413      	add	r3, r2
 8018a12:	009b      	lsls	r3, r3, #2
 8018a14:	440b      	add	r3, r1
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d10a      	bne.n	8018a32 <xTaskPriorityDisinherit+0xb6>
 8018a1c:	693b      	ldr	r3, [r7, #16]
 8018a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a20:	2201      	movs	r2, #1
 8018a22:	fa02 f303 	lsl.w	r3, r2, r3
 8018a26:	43da      	mvns	r2, r3
 8018a28:	4b18      	ldr	r3, [pc, #96]	; (8018a8c <xTaskPriorityDisinherit+0x110>)
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	4013      	ands	r3, r2
 8018a2e:	4a17      	ldr	r2, [pc, #92]	; (8018a8c <xTaskPriorityDisinherit+0x110>)
 8018a30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018a32:	693b      	ldr	r3, [r7, #16]
 8018a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018a36:	693b      	ldr	r3, [r7, #16]
 8018a38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a3a:	693b      	ldr	r3, [r7, #16]
 8018a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a3e:	f1c3 0207 	rsb	r2, r3, #7
 8018a42:	693b      	ldr	r3, [r7, #16]
 8018a44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018a46:	693b      	ldr	r3, [r7, #16]
 8018a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a4a:	2201      	movs	r2, #1
 8018a4c:	409a      	lsls	r2, r3
 8018a4e:	4b0f      	ldr	r3, [pc, #60]	; (8018a8c <xTaskPriorityDisinherit+0x110>)
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	4313      	orrs	r3, r2
 8018a54:	4a0d      	ldr	r2, [pc, #52]	; (8018a8c <xTaskPriorityDisinherit+0x110>)
 8018a56:	6013      	str	r3, [r2, #0]
 8018a58:	693b      	ldr	r3, [r7, #16]
 8018a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a5c:	4613      	mov	r3, r2
 8018a5e:	009b      	lsls	r3, r3, #2
 8018a60:	4413      	add	r3, r2
 8018a62:	009b      	lsls	r3, r3, #2
 8018a64:	4a08      	ldr	r2, [pc, #32]	; (8018a88 <xTaskPriorityDisinherit+0x10c>)
 8018a66:	441a      	add	r2, r3
 8018a68:	693b      	ldr	r3, [r7, #16]
 8018a6a:	3304      	adds	r3, #4
 8018a6c:	4619      	mov	r1, r3
 8018a6e:	4610      	mov	r0, r2
 8018a70:	f7fe fb39 	bl	80170e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018a74:	2301      	movs	r3, #1
 8018a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a78:	697b      	ldr	r3, [r7, #20]
	}
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	3718      	adds	r7, #24
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}
 8018a82:	bf00      	nop
 8018a84:	200003e0 	.word	0x200003e0
 8018a88:	200003e4 	.word	0x200003e4
 8018a8c:	200004e8 	.word	0x200004e8

08018a90 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b086      	sub	sp, #24
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	60f8      	str	r0, [r7, #12]
 8018a98:	60b9      	str	r1, [r7, #8]
 8018a9a:	607a      	str	r2, [r7, #4]
 8018a9c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8018a9e:	f000 fb65 	bl	801916c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8018aa2:	4b26      	ldr	r3, [pc, #152]	; (8018b3c <xTaskNotifyWait+0xac>)
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018aaa:	b2db      	uxtb	r3, r3
 8018aac:	2b02      	cmp	r3, #2
 8018aae:	d01a      	beq.n	8018ae6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8018ab0:	4b22      	ldr	r3, [pc, #136]	; (8018b3c <xTaskNotifyWait+0xac>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8018ab6:	68fa      	ldr	r2, [r7, #12]
 8018ab8:	43d2      	mvns	r2, r2
 8018aba:	400a      	ands	r2, r1
 8018abc:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8018abe:	4b1f      	ldr	r3, [pc, #124]	; (8018b3c <xTaskNotifyWait+0xac>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	2201      	movs	r2, #1
 8018ac4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8018ac8:	683b      	ldr	r3, [r7, #0]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d00b      	beq.n	8018ae6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018ace:	2101      	movs	r1, #1
 8018ad0:	6838      	ldr	r0, [r7, #0]
 8018ad2:	f000 f9d5 	bl	8018e80 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8018ad6:	4b1a      	ldr	r3, [pc, #104]	; (8018b40 <xTaskNotifyWait+0xb0>)
 8018ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018adc:	601a      	str	r2, [r3, #0]
 8018ade:	f3bf 8f4f 	dsb	sy
 8018ae2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8018ae6:	f000 fb75 	bl	80191d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8018aea:	f000 fb3f 	bl	801916c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d004      	beq.n	8018afe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8018af4:	4b11      	ldr	r3, [pc, #68]	; (8018b3c <xTaskNotifyWait+0xac>)
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8018afe:	4b0f      	ldr	r3, [pc, #60]	; (8018b3c <xTaskNotifyWait+0xac>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018b06:	b2db      	uxtb	r3, r3
 8018b08:	2b02      	cmp	r3, #2
 8018b0a:	d002      	beq.n	8018b12 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	617b      	str	r3, [r7, #20]
 8018b10:	e008      	b.n	8018b24 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8018b12:	4b0a      	ldr	r3, [pc, #40]	; (8018b3c <xTaskNotifyWait+0xac>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8018b18:	68ba      	ldr	r2, [r7, #8]
 8018b1a:	43d2      	mvns	r2, r2
 8018b1c:	400a      	ands	r2, r1
 8018b1e:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 8018b20:	2301      	movs	r3, #1
 8018b22:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018b24:	4b05      	ldr	r3, [pc, #20]	; (8018b3c <xTaskNotifyWait+0xac>)
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	2200      	movs	r2, #0
 8018b2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8018b2e:	f000 fb51 	bl	80191d4 <vPortExitCritical>

		return xReturn;
 8018b32:	697b      	ldr	r3, [r7, #20]
	}
 8018b34:	4618      	mov	r0, r3
 8018b36:	3718      	adds	r7, #24
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}
 8018b3c:	200003e0 	.word	0x200003e0
 8018b40:	e000ed04 	.word	0xe000ed04

08018b44 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b08a      	sub	sp, #40	; 0x28
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	60f8      	str	r0, [r7, #12]
 8018b4c:	60b9      	str	r1, [r7, #8]
 8018b4e:	603b      	str	r3, [r7, #0]
 8018b50:	4613      	mov	r3, r2
 8018b52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8018b54:	2301      	movs	r3, #1
 8018b56:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d10c      	bne.n	8018b78 <xTaskGenericNotify+0x34>
	__asm volatile
 8018b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b62:	b672      	cpsid	i
 8018b64:	f383 8811 	msr	BASEPRI, r3
 8018b68:	f3bf 8f6f 	isb	sy
 8018b6c:	f3bf 8f4f 	dsb	sy
 8018b70:	b662      	cpsie	i
 8018b72:	61bb      	str	r3, [r7, #24]
}
 8018b74:	bf00      	nop
 8018b76:	e7fe      	b.n	8018b76 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8018b7c:	f000 faf6 	bl	801916c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8018b80:	683b      	ldr	r3, [r7, #0]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d003      	beq.n	8018b8e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8018b86:	6a3b      	ldr	r3, [r7, #32]
 8018b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b8a:	683b      	ldr	r3, [r7, #0]
 8018b8c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018b8e:	6a3b      	ldr	r3, [r7, #32]
 8018b90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018b94:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018b96:	6a3b      	ldr	r3, [r7, #32]
 8018b98:	2202      	movs	r2, #2
 8018b9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8018b9e:	79fb      	ldrb	r3, [r7, #7]
 8018ba0:	2b04      	cmp	r3, #4
 8018ba2:	d828      	bhi.n	8018bf6 <xTaskGenericNotify+0xb2>
 8018ba4:	a201      	add	r2, pc, #4	; (adr r2, 8018bac <xTaskGenericNotify+0x68>)
 8018ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018baa:	bf00      	nop
 8018bac:	08018c1b 	.word	0x08018c1b
 8018bb0:	08018bc1 	.word	0x08018bc1
 8018bb4:	08018bcf 	.word	0x08018bcf
 8018bb8:	08018bdb 	.word	0x08018bdb
 8018bbc:	08018be3 	.word	0x08018be3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8018bc0:	6a3b      	ldr	r3, [r7, #32]
 8018bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	431a      	orrs	r2, r3
 8018bc8:	6a3b      	ldr	r3, [r7, #32]
 8018bca:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018bcc:	e028      	b.n	8018c20 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8018bce:	6a3b      	ldr	r3, [r7, #32]
 8018bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bd2:	1c5a      	adds	r2, r3, #1
 8018bd4:	6a3b      	ldr	r3, [r7, #32]
 8018bd6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018bd8:	e022      	b.n	8018c20 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8018bda:	6a3b      	ldr	r3, [r7, #32]
 8018bdc:	68ba      	ldr	r2, [r7, #8]
 8018bde:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018be0:	e01e      	b.n	8018c20 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8018be2:	7ffb      	ldrb	r3, [r7, #31]
 8018be4:	2b02      	cmp	r3, #2
 8018be6:	d003      	beq.n	8018bf0 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8018be8:	6a3b      	ldr	r3, [r7, #32]
 8018bea:	68ba      	ldr	r2, [r7, #8]
 8018bec:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8018bee:	e017      	b.n	8018c20 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8018bf4:	e014      	b.n	8018c20 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8018bf6:	6a3b      	ldr	r3, [r7, #32]
 8018bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018bfe:	d00e      	beq.n	8018c1e <xTaskGenericNotify+0xda>
	__asm volatile
 8018c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c04:	b672      	cpsid	i
 8018c06:	f383 8811 	msr	BASEPRI, r3
 8018c0a:	f3bf 8f6f 	isb	sy
 8018c0e:	f3bf 8f4f 	dsb	sy
 8018c12:	b662      	cpsie	i
 8018c14:	617b      	str	r3, [r7, #20]
}
 8018c16:	bf00      	nop
 8018c18:	e7fe      	b.n	8018c18 <xTaskGenericNotify+0xd4>
					break;
 8018c1a:	bf00      	nop
 8018c1c:	e000      	b.n	8018c20 <xTaskGenericNotify+0xdc>

					break;
 8018c1e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018c20:	7ffb      	ldrb	r3, [r7, #31]
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	d13b      	bne.n	8018c9e <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018c26:	6a3b      	ldr	r3, [r7, #32]
 8018c28:	3304      	adds	r3, #4
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f7fe fab8 	bl	80171a0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8018c30:	6a3b      	ldr	r3, [r7, #32]
 8018c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c34:	2201      	movs	r2, #1
 8018c36:	409a      	lsls	r2, r3
 8018c38:	4b1c      	ldr	r3, [pc, #112]	; (8018cac <xTaskGenericNotify+0x168>)
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	4313      	orrs	r3, r2
 8018c3e:	4a1b      	ldr	r2, [pc, #108]	; (8018cac <xTaskGenericNotify+0x168>)
 8018c40:	6013      	str	r3, [r2, #0]
 8018c42:	6a3b      	ldr	r3, [r7, #32]
 8018c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c46:	4613      	mov	r3, r2
 8018c48:	009b      	lsls	r3, r3, #2
 8018c4a:	4413      	add	r3, r2
 8018c4c:	009b      	lsls	r3, r3, #2
 8018c4e:	4a18      	ldr	r2, [pc, #96]	; (8018cb0 <xTaskGenericNotify+0x16c>)
 8018c50:	441a      	add	r2, r3
 8018c52:	6a3b      	ldr	r3, [r7, #32]
 8018c54:	3304      	adds	r3, #4
 8018c56:	4619      	mov	r1, r3
 8018c58:	4610      	mov	r0, r2
 8018c5a:	f7fe fa44 	bl	80170e6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018c5e:	6a3b      	ldr	r3, [r7, #32]
 8018c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d00c      	beq.n	8018c80 <xTaskGenericNotify+0x13c>
	__asm volatile
 8018c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c6a:	b672      	cpsid	i
 8018c6c:	f383 8811 	msr	BASEPRI, r3
 8018c70:	f3bf 8f6f 	isb	sy
 8018c74:	f3bf 8f4f 	dsb	sy
 8018c78:	b662      	cpsie	i
 8018c7a:	613b      	str	r3, [r7, #16]
}
 8018c7c:	bf00      	nop
 8018c7e:	e7fe      	b.n	8018c7e <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018c80:	6a3b      	ldr	r3, [r7, #32]
 8018c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c84:	4b0b      	ldr	r3, [pc, #44]	; (8018cb4 <xTaskGenericNotify+0x170>)
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	d907      	bls.n	8018c9e <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8018c8e:	4b0a      	ldr	r3, [pc, #40]	; (8018cb8 <xTaskGenericNotify+0x174>)
 8018c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c94:	601a      	str	r2, [r3, #0]
 8018c96:	f3bf 8f4f 	dsb	sy
 8018c9a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8018c9e:	f000 fa99 	bl	80191d4 <vPortExitCritical>

		return xReturn;
 8018ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	3728      	adds	r7, #40	; 0x28
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd80      	pop	{r7, pc}
 8018cac:	200004e8 	.word	0x200004e8
 8018cb0:	200003e4 	.word	0x200003e4
 8018cb4:	200003e0 	.word	0x200003e0
 8018cb8:	e000ed04 	.word	0xe000ed04

08018cbc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b08e      	sub	sp, #56	; 0x38
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	60f8      	str	r0, [r7, #12]
 8018cc4:	60b9      	str	r1, [r7, #8]
 8018cc6:	603b      	str	r3, [r7, #0]
 8018cc8:	4613      	mov	r3, r2
 8018cca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8018ccc:	2301      	movs	r3, #1
 8018cce:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d10c      	bne.n	8018cf0 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8018cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cda:	b672      	cpsid	i
 8018cdc:	f383 8811 	msr	BASEPRI, r3
 8018ce0:	f3bf 8f6f 	isb	sy
 8018ce4:	f3bf 8f4f 	dsb	sy
 8018ce8:	b662      	cpsie	i
 8018cea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018cec:	bf00      	nop
 8018cee:	e7fe      	b.n	8018cee <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018cf0:	f000 fb24 	bl	801933c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8018cf8:	f3ef 8211 	mrs	r2, BASEPRI
 8018cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d00:	b672      	cpsid	i
 8018d02:	f383 8811 	msr	BASEPRI, r3
 8018d06:	f3bf 8f6f 	isb	sy
 8018d0a:	f3bf 8f4f 	dsb	sy
 8018d0e:	b662      	cpsie	i
 8018d10:	623a      	str	r2, [r7, #32]
 8018d12:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8018d14:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018d16:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8018d18:	683b      	ldr	r3, [r7, #0]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d003      	beq.n	8018d26 <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8018d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d22:	683b      	ldr	r3, [r7, #0]
 8018d24:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d28:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d32:	2202      	movs	r2, #2
 8018d34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8018d38:	79fb      	ldrb	r3, [r7, #7]
 8018d3a:	2b04      	cmp	r3, #4
 8018d3c:	d828      	bhi.n	8018d90 <xTaskGenericNotifyFromISR+0xd4>
 8018d3e:	a201      	add	r2, pc, #4	; (adr r2, 8018d44 <xTaskGenericNotifyFromISR+0x88>)
 8018d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d44:	08018db5 	.word	0x08018db5
 8018d48:	08018d59 	.word	0x08018d59
 8018d4c:	08018d67 	.word	0x08018d67
 8018d50:	08018d73 	.word	0x08018d73
 8018d54:	08018d7b 	.word	0x08018d7b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8018d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d5c:	68bb      	ldr	r3, [r7, #8]
 8018d5e:	431a      	orrs	r2, r3
 8018d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d62:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018d64:	e029      	b.n	8018dba <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8018d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d6a:	1c5a      	adds	r2, r3, #1
 8018d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d6e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018d70:	e023      	b.n	8018dba <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8018d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d74:	68ba      	ldr	r2, [r7, #8]
 8018d76:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8018d78:	e01f      	b.n	8018dba <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8018d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018d7e:	2b02      	cmp	r3, #2
 8018d80:	d003      	beq.n	8018d8a <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8018d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d84:	68ba      	ldr	r2, [r7, #8]
 8018d86:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8018d88:	e017      	b.n	8018dba <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8018d8e:	e014      	b.n	8018dba <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8018d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d98:	d00e      	beq.n	8018db8 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8018d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d9e:	b672      	cpsid	i
 8018da0:	f383 8811 	msr	BASEPRI, r3
 8018da4:	f3bf 8f6f 	isb	sy
 8018da8:	f3bf 8f4f 	dsb	sy
 8018dac:	b662      	cpsie	i
 8018dae:	61bb      	str	r3, [r7, #24]
}
 8018db0:	bf00      	nop
 8018db2:	e7fe      	b.n	8018db2 <xTaskGenericNotifyFromISR+0xf6>
					break;
 8018db4:	bf00      	nop
 8018db6:	e000      	b.n	8018dba <xTaskGenericNotifyFromISR+0xfe>
					break;
 8018db8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018dba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018dbe:	2b01      	cmp	r3, #1
 8018dc0:	d147      	bne.n	8018e52 <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d00c      	beq.n	8018de4 <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 8018dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dce:	b672      	cpsid	i
 8018dd0:	f383 8811 	msr	BASEPRI, r3
 8018dd4:	f3bf 8f6f 	isb	sy
 8018dd8:	f3bf 8f4f 	dsb	sy
 8018ddc:	b662      	cpsie	i
 8018dde:	617b      	str	r3, [r7, #20]
}
 8018de0:	bf00      	nop
 8018de2:	e7fe      	b.n	8018de2 <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018de4:	4b20      	ldr	r3, [pc, #128]	; (8018e68 <xTaskGenericNotifyFromISR+0x1ac>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d11c      	bne.n	8018e26 <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dee:	3304      	adds	r3, #4
 8018df0:	4618      	mov	r0, r3
 8018df2:	f7fe f9d5 	bl	80171a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dfa:	2201      	movs	r2, #1
 8018dfc:	409a      	lsls	r2, r3
 8018dfe:	4b1b      	ldr	r3, [pc, #108]	; (8018e6c <xTaskGenericNotifyFromISR+0x1b0>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	4313      	orrs	r3, r2
 8018e04:	4a19      	ldr	r2, [pc, #100]	; (8018e6c <xTaskGenericNotifyFromISR+0x1b0>)
 8018e06:	6013      	str	r3, [r2, #0]
 8018e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e0c:	4613      	mov	r3, r2
 8018e0e:	009b      	lsls	r3, r3, #2
 8018e10:	4413      	add	r3, r2
 8018e12:	009b      	lsls	r3, r3, #2
 8018e14:	4a16      	ldr	r2, [pc, #88]	; (8018e70 <xTaskGenericNotifyFromISR+0x1b4>)
 8018e16:	441a      	add	r2, r3
 8018e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e1a:	3304      	adds	r3, #4
 8018e1c:	4619      	mov	r1, r3
 8018e1e:	4610      	mov	r0, r2
 8018e20:	f7fe f961 	bl	80170e6 <vListInsertEnd>
 8018e24:	e005      	b.n	8018e32 <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e28:	3318      	adds	r3, #24
 8018e2a:	4619      	mov	r1, r3
 8018e2c:	4811      	ldr	r0, [pc, #68]	; (8018e74 <xTaskGenericNotifyFromISR+0x1b8>)
 8018e2e:	f7fe f95a 	bl	80170e6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e36:	4b10      	ldr	r3, [pc, #64]	; (8018e78 <xTaskGenericNotifyFromISR+0x1bc>)
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e3c:	429a      	cmp	r2, r3
 8018e3e:	d908      	bls.n	8018e52 <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8018e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d002      	beq.n	8018e4c <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8018e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e48:	2201      	movs	r2, #1
 8018e4a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8018e4c:	4b0b      	ldr	r3, [pc, #44]	; (8018e7c <xTaskGenericNotifyFromISR+0x1c0>)
 8018e4e:	2201      	movs	r2, #1
 8018e50:	601a      	str	r2, [r3, #0]
 8018e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018e56:	693b      	ldr	r3, [r7, #16]
 8018e58:	f383 8811 	msr	BASEPRI, r3
}
 8018e5c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8018e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8018e60:	4618      	mov	r0, r3
 8018e62:	3738      	adds	r7, #56	; 0x38
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}
 8018e68:	20000508 	.word	0x20000508
 8018e6c:	200004e8 	.word	0x200004e8
 8018e70:	200003e4 	.word	0x200003e4
 8018e74:	200004a0 	.word	0x200004a0
 8018e78:	200003e0 	.word	0x200003e0
 8018e7c:	200004f4 	.word	0x200004f4

08018e80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b084      	sub	sp, #16
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
 8018e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018e8a:	4b29      	ldr	r3, [pc, #164]	; (8018f30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e90:	4b28      	ldr	r3, [pc, #160]	; (8018f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	3304      	adds	r3, #4
 8018e96:	4618      	mov	r0, r3
 8018e98:	f7fe f982 	bl	80171a0 <uxListRemove>
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d10b      	bne.n	8018eba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018ea2:	4b24      	ldr	r3, [pc, #144]	; (8018f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ea8:	2201      	movs	r2, #1
 8018eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8018eae:	43da      	mvns	r2, r3
 8018eb0:	4b21      	ldr	r3, [pc, #132]	; (8018f38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	4013      	ands	r3, r2
 8018eb6:	4a20      	ldr	r2, [pc, #128]	; (8018f38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018eb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ec0:	d10a      	bne.n	8018ed8 <prvAddCurrentTaskToDelayedList+0x58>
 8018ec2:	683b      	ldr	r3, [r7, #0]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d007      	beq.n	8018ed8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ec8:	4b1a      	ldr	r3, [pc, #104]	; (8018f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	3304      	adds	r3, #4
 8018ece:	4619      	mov	r1, r3
 8018ed0:	481a      	ldr	r0, [pc, #104]	; (8018f3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8018ed2:	f7fe f908 	bl	80170e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018ed6:	e026      	b.n	8018f26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018ed8:	68fa      	ldr	r2, [r7, #12]
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	4413      	add	r3, r2
 8018ede:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018ee0:	4b14      	ldr	r3, [pc, #80]	; (8018f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	68ba      	ldr	r2, [r7, #8]
 8018ee6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018ee8:	68ba      	ldr	r2, [r7, #8]
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	429a      	cmp	r2, r3
 8018eee:	d209      	bcs.n	8018f04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ef0:	4b13      	ldr	r3, [pc, #76]	; (8018f40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8018ef2:	681a      	ldr	r2, [r3, #0]
 8018ef4:	4b0f      	ldr	r3, [pc, #60]	; (8018f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	3304      	adds	r3, #4
 8018efa:	4619      	mov	r1, r3
 8018efc:	4610      	mov	r0, r2
 8018efe:	f7fe f916 	bl	801712e <vListInsert>
}
 8018f02:	e010      	b.n	8018f26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f04:	4b0f      	ldr	r3, [pc, #60]	; (8018f44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8018f06:	681a      	ldr	r2, [r3, #0]
 8018f08:	4b0a      	ldr	r3, [pc, #40]	; (8018f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	3304      	adds	r3, #4
 8018f0e:	4619      	mov	r1, r3
 8018f10:	4610      	mov	r0, r2
 8018f12:	f7fe f90c 	bl	801712e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018f16:	4b0c      	ldr	r3, [pc, #48]	; (8018f48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	68ba      	ldr	r2, [r7, #8]
 8018f1c:	429a      	cmp	r2, r3
 8018f1e:	d202      	bcs.n	8018f26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018f20:	4a09      	ldr	r2, [pc, #36]	; (8018f48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018f22:	68bb      	ldr	r3, [r7, #8]
 8018f24:	6013      	str	r3, [r2, #0]
}
 8018f26:	bf00      	nop
 8018f28:	3710      	adds	r7, #16
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	bd80      	pop	{r7, pc}
 8018f2e:	bf00      	nop
 8018f30:	200004e4 	.word	0x200004e4
 8018f34:	200003e0 	.word	0x200003e0
 8018f38:	200004e8 	.word	0x200004e8
 8018f3c:	200004cc 	.word	0x200004cc
 8018f40:	2000049c 	.word	0x2000049c
 8018f44:	20000498 	.word	0x20000498
 8018f48:	20000500 	.word	0x20000500

08018f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018f4c:	b480      	push	{r7}
 8018f4e:	b085      	sub	sp, #20
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	60b9      	str	r1, [r7, #8]
 8018f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	3b04      	subs	r3, #4
 8018f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	3b04      	subs	r3, #4
 8018f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018f6c:	68bb      	ldr	r3, [r7, #8]
 8018f6e:	f023 0201 	bic.w	r2, r3, #1
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	3b04      	subs	r3, #4
 8018f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018f7c:	4a0c      	ldr	r2, [pc, #48]	; (8018fb0 <pxPortInitialiseStack+0x64>)
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	3b14      	subs	r3, #20
 8018f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018f88:	687a      	ldr	r2, [r7, #4]
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	3b04      	subs	r3, #4
 8018f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	f06f 0202 	mvn.w	r2, #2
 8018f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	3b20      	subs	r3, #32
 8018fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018fa2:	68fb      	ldr	r3, [r7, #12]
}
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	3714      	adds	r7, #20
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fae:	4770      	bx	lr
 8018fb0:	08018fb5 	.word	0x08018fb5

08018fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018fb4:	b480      	push	{r7}
 8018fb6:	b085      	sub	sp, #20
 8018fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018fba:	2300      	movs	r3, #0
 8018fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018fbe:	4b14      	ldr	r3, [pc, #80]	; (8019010 <prvTaskExitError+0x5c>)
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018fc6:	d00c      	beq.n	8018fe2 <prvTaskExitError+0x2e>
	__asm volatile
 8018fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fcc:	b672      	cpsid	i
 8018fce:	f383 8811 	msr	BASEPRI, r3
 8018fd2:	f3bf 8f6f 	isb	sy
 8018fd6:	f3bf 8f4f 	dsb	sy
 8018fda:	b662      	cpsie	i
 8018fdc:	60fb      	str	r3, [r7, #12]
}
 8018fde:	bf00      	nop
 8018fe0:	e7fe      	b.n	8018fe0 <prvTaskExitError+0x2c>
	__asm volatile
 8018fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fe6:	b672      	cpsid	i
 8018fe8:	f383 8811 	msr	BASEPRI, r3
 8018fec:	f3bf 8f6f 	isb	sy
 8018ff0:	f3bf 8f4f 	dsb	sy
 8018ff4:	b662      	cpsie	i
 8018ff6:	60bb      	str	r3, [r7, #8]
}
 8018ff8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018ffa:	bf00      	nop
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d0fc      	beq.n	8018ffc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019002:	bf00      	nop
 8019004:	bf00      	nop
 8019006:	3714      	adds	r7, #20
 8019008:	46bd      	mov	sp, r7
 801900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900e:	4770      	bx	lr
 8019010:	2000005c 	.word	0x2000005c
	...

08019020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019020:	4b07      	ldr	r3, [pc, #28]	; (8019040 <pxCurrentTCBConst2>)
 8019022:	6819      	ldr	r1, [r3, #0]
 8019024:	6808      	ldr	r0, [r1, #0]
 8019026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801902a:	f380 8809 	msr	PSP, r0
 801902e:	f3bf 8f6f 	isb	sy
 8019032:	f04f 0000 	mov.w	r0, #0
 8019036:	f380 8811 	msr	BASEPRI, r0
 801903a:	4770      	bx	lr
 801903c:	f3af 8000 	nop.w

08019040 <pxCurrentTCBConst2>:
 8019040:	200003e0 	.word	0x200003e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019044:	bf00      	nop
 8019046:	bf00      	nop

08019048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019048:	4808      	ldr	r0, [pc, #32]	; (801906c <prvPortStartFirstTask+0x24>)
 801904a:	6800      	ldr	r0, [r0, #0]
 801904c:	6800      	ldr	r0, [r0, #0]
 801904e:	f380 8808 	msr	MSP, r0
 8019052:	f04f 0000 	mov.w	r0, #0
 8019056:	f380 8814 	msr	CONTROL, r0
 801905a:	b662      	cpsie	i
 801905c:	b661      	cpsie	f
 801905e:	f3bf 8f4f 	dsb	sy
 8019062:	f3bf 8f6f 	isb	sy
 8019066:	df00      	svc	0
 8019068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801906a:	bf00      	nop
 801906c:	e000ed08 	.word	0xe000ed08

08019070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b084      	sub	sp, #16
 8019074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019076:	4b37      	ldr	r3, [pc, #220]	; (8019154 <xPortStartScheduler+0xe4>)
 8019078:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	781b      	ldrb	r3, [r3, #0]
 801907e:	b2db      	uxtb	r3, r3
 8019080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	22ff      	movs	r2, #255	; 0xff
 8019086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	781b      	ldrb	r3, [r3, #0]
 801908c:	b2db      	uxtb	r3, r3
 801908e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019090:	78fb      	ldrb	r3, [r7, #3]
 8019092:	b2db      	uxtb	r3, r3
 8019094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019098:	b2da      	uxtb	r2, r3
 801909a:	4b2f      	ldr	r3, [pc, #188]	; (8019158 <xPortStartScheduler+0xe8>)
 801909c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801909e:	4b2f      	ldr	r3, [pc, #188]	; (801915c <xPortStartScheduler+0xec>)
 80190a0:	2207      	movs	r2, #7
 80190a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80190a4:	e009      	b.n	80190ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80190a6:	4b2d      	ldr	r3, [pc, #180]	; (801915c <xPortStartScheduler+0xec>)
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	3b01      	subs	r3, #1
 80190ac:	4a2b      	ldr	r2, [pc, #172]	; (801915c <xPortStartScheduler+0xec>)
 80190ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80190b0:	78fb      	ldrb	r3, [r7, #3]
 80190b2:	b2db      	uxtb	r3, r3
 80190b4:	005b      	lsls	r3, r3, #1
 80190b6:	b2db      	uxtb	r3, r3
 80190b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80190ba:	78fb      	ldrb	r3, [r7, #3]
 80190bc:	b2db      	uxtb	r3, r3
 80190be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80190c2:	2b80      	cmp	r3, #128	; 0x80
 80190c4:	d0ef      	beq.n	80190a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80190c6:	4b25      	ldr	r3, [pc, #148]	; (801915c <xPortStartScheduler+0xec>)
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	f1c3 0307 	rsb	r3, r3, #7
 80190ce:	2b04      	cmp	r3, #4
 80190d0:	d00c      	beq.n	80190ec <xPortStartScheduler+0x7c>
	__asm volatile
 80190d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190d6:	b672      	cpsid	i
 80190d8:	f383 8811 	msr	BASEPRI, r3
 80190dc:	f3bf 8f6f 	isb	sy
 80190e0:	f3bf 8f4f 	dsb	sy
 80190e4:	b662      	cpsie	i
 80190e6:	60bb      	str	r3, [r7, #8]
}
 80190e8:	bf00      	nop
 80190ea:	e7fe      	b.n	80190ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80190ec:	4b1b      	ldr	r3, [pc, #108]	; (801915c <xPortStartScheduler+0xec>)
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	021b      	lsls	r3, r3, #8
 80190f2:	4a1a      	ldr	r2, [pc, #104]	; (801915c <xPortStartScheduler+0xec>)
 80190f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80190f6:	4b19      	ldr	r3, [pc, #100]	; (801915c <xPortStartScheduler+0xec>)
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80190fe:	4a17      	ldr	r2, [pc, #92]	; (801915c <xPortStartScheduler+0xec>)
 8019100:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	b2da      	uxtb	r2, r3
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801910a:	4b15      	ldr	r3, [pc, #84]	; (8019160 <xPortStartScheduler+0xf0>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	4a14      	ldr	r2, [pc, #80]	; (8019160 <xPortStartScheduler+0xf0>)
 8019110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019114:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019116:	4b12      	ldr	r3, [pc, #72]	; (8019160 <xPortStartScheduler+0xf0>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	4a11      	ldr	r2, [pc, #68]	; (8019160 <xPortStartScheduler+0xf0>)
 801911c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8019120:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019122:	f000 f8dd 	bl	80192e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019126:	4b0f      	ldr	r3, [pc, #60]	; (8019164 <xPortStartScheduler+0xf4>)
 8019128:	2200      	movs	r2, #0
 801912a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801912c:	f000 f8fc 	bl	8019328 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019130:	4b0d      	ldr	r3, [pc, #52]	; (8019168 <xPortStartScheduler+0xf8>)
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	4a0c      	ldr	r2, [pc, #48]	; (8019168 <xPortStartScheduler+0xf8>)
 8019136:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801913a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801913c:	f7ff ff84 	bl	8019048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019140:	f7ff f990 	bl	8018464 <vTaskSwitchContext>
	prvTaskExitError();
 8019144:	f7ff ff36 	bl	8018fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019148:	2300      	movs	r3, #0
}
 801914a:	4618      	mov	r0, r3
 801914c:	3710      	adds	r7, #16
 801914e:	46bd      	mov	sp, r7
 8019150:	bd80      	pop	{r7, pc}
 8019152:	bf00      	nop
 8019154:	e000e400 	.word	0xe000e400
 8019158:	2000050c 	.word	0x2000050c
 801915c:	20000510 	.word	0x20000510
 8019160:	e000ed20 	.word	0xe000ed20
 8019164:	2000005c 	.word	0x2000005c
 8019168:	e000ef34 	.word	0xe000ef34

0801916c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801916c:	b480      	push	{r7}
 801916e:	b083      	sub	sp, #12
 8019170:	af00      	add	r7, sp, #0
	__asm volatile
 8019172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019176:	b672      	cpsid	i
 8019178:	f383 8811 	msr	BASEPRI, r3
 801917c:	f3bf 8f6f 	isb	sy
 8019180:	f3bf 8f4f 	dsb	sy
 8019184:	b662      	cpsie	i
 8019186:	607b      	str	r3, [r7, #4]
}
 8019188:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801918a:	4b10      	ldr	r3, [pc, #64]	; (80191cc <vPortEnterCritical+0x60>)
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	3301      	adds	r3, #1
 8019190:	4a0e      	ldr	r2, [pc, #56]	; (80191cc <vPortEnterCritical+0x60>)
 8019192:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019194:	4b0d      	ldr	r3, [pc, #52]	; (80191cc <vPortEnterCritical+0x60>)
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	2b01      	cmp	r3, #1
 801919a:	d111      	bne.n	80191c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801919c:	4b0c      	ldr	r3, [pc, #48]	; (80191d0 <vPortEnterCritical+0x64>)
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d00c      	beq.n	80191c0 <vPortEnterCritical+0x54>
	__asm volatile
 80191a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191aa:	b672      	cpsid	i
 80191ac:	f383 8811 	msr	BASEPRI, r3
 80191b0:	f3bf 8f6f 	isb	sy
 80191b4:	f3bf 8f4f 	dsb	sy
 80191b8:	b662      	cpsie	i
 80191ba:	603b      	str	r3, [r7, #0]
}
 80191bc:	bf00      	nop
 80191be:	e7fe      	b.n	80191be <vPortEnterCritical+0x52>
	}
}
 80191c0:	bf00      	nop
 80191c2:	370c      	adds	r7, #12
 80191c4:	46bd      	mov	sp, r7
 80191c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ca:	4770      	bx	lr
 80191cc:	2000005c 	.word	0x2000005c
 80191d0:	e000ed04 	.word	0xe000ed04

080191d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80191d4:	b480      	push	{r7}
 80191d6:	b083      	sub	sp, #12
 80191d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80191da:	4b13      	ldr	r3, [pc, #76]	; (8019228 <vPortExitCritical+0x54>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d10c      	bne.n	80191fc <vPortExitCritical+0x28>
	__asm volatile
 80191e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191e6:	b672      	cpsid	i
 80191e8:	f383 8811 	msr	BASEPRI, r3
 80191ec:	f3bf 8f6f 	isb	sy
 80191f0:	f3bf 8f4f 	dsb	sy
 80191f4:	b662      	cpsie	i
 80191f6:	607b      	str	r3, [r7, #4]
}
 80191f8:	bf00      	nop
 80191fa:	e7fe      	b.n	80191fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80191fc:	4b0a      	ldr	r3, [pc, #40]	; (8019228 <vPortExitCritical+0x54>)
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	3b01      	subs	r3, #1
 8019202:	4a09      	ldr	r2, [pc, #36]	; (8019228 <vPortExitCritical+0x54>)
 8019204:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019206:	4b08      	ldr	r3, [pc, #32]	; (8019228 <vPortExitCritical+0x54>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d105      	bne.n	801921a <vPortExitCritical+0x46>
 801920e:	2300      	movs	r3, #0
 8019210:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019212:	683b      	ldr	r3, [r7, #0]
 8019214:	f383 8811 	msr	BASEPRI, r3
}
 8019218:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801921a:	bf00      	nop
 801921c:	370c      	adds	r7, #12
 801921e:	46bd      	mov	sp, r7
 8019220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019224:	4770      	bx	lr
 8019226:	bf00      	nop
 8019228:	2000005c 	.word	0x2000005c
 801922c:	00000000 	.word	0x00000000

08019230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019230:	f3ef 8009 	mrs	r0, PSP
 8019234:	f3bf 8f6f 	isb	sy
 8019238:	4b15      	ldr	r3, [pc, #84]	; (8019290 <pxCurrentTCBConst>)
 801923a:	681a      	ldr	r2, [r3, #0]
 801923c:	f01e 0f10 	tst.w	lr, #16
 8019240:	bf08      	it	eq
 8019242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801924a:	6010      	str	r0, [r2, #0]
 801924c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019254:	b672      	cpsid	i
 8019256:	f380 8811 	msr	BASEPRI, r0
 801925a:	f3bf 8f4f 	dsb	sy
 801925e:	f3bf 8f6f 	isb	sy
 8019262:	b662      	cpsie	i
 8019264:	f7ff f8fe 	bl	8018464 <vTaskSwitchContext>
 8019268:	f04f 0000 	mov.w	r0, #0
 801926c:	f380 8811 	msr	BASEPRI, r0
 8019270:	bc09      	pop	{r0, r3}
 8019272:	6819      	ldr	r1, [r3, #0]
 8019274:	6808      	ldr	r0, [r1, #0]
 8019276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801927a:	f01e 0f10 	tst.w	lr, #16
 801927e:	bf08      	it	eq
 8019280:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019284:	f380 8809 	msr	PSP, r0
 8019288:	f3bf 8f6f 	isb	sy
 801928c:	4770      	bx	lr
 801928e:	bf00      	nop

08019290 <pxCurrentTCBConst>:
 8019290:	200003e0 	.word	0x200003e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019294:	bf00      	nop
 8019296:	bf00      	nop

08019298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b082      	sub	sp, #8
 801929c:	af00      	add	r7, sp, #0
	__asm volatile
 801929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192a2:	b672      	cpsid	i
 80192a4:	f383 8811 	msr	BASEPRI, r3
 80192a8:	f3bf 8f6f 	isb	sy
 80192ac:	f3bf 8f4f 	dsb	sy
 80192b0:	b662      	cpsie	i
 80192b2:	607b      	str	r3, [r7, #4]
}
 80192b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80192b6:	f7ff f81b 	bl	80182f0 <xTaskIncrementTick>
 80192ba:	4603      	mov	r3, r0
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d003      	beq.n	80192c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80192c0:	4b06      	ldr	r3, [pc, #24]	; (80192dc <SysTick_Handler+0x44>)
 80192c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80192c6:	601a      	str	r2, [r3, #0]
 80192c8:	2300      	movs	r3, #0
 80192ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80192cc:	683b      	ldr	r3, [r7, #0]
 80192ce:	f383 8811 	msr	BASEPRI, r3
}
 80192d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80192d4:	bf00      	nop
 80192d6:	3708      	adds	r7, #8
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}
 80192dc:	e000ed04 	.word	0xe000ed04

080192e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80192e0:	b480      	push	{r7}
 80192e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80192e4:	4b0b      	ldr	r3, [pc, #44]	; (8019314 <vPortSetupTimerInterrupt+0x34>)
 80192e6:	2200      	movs	r2, #0
 80192e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80192ea:	4b0b      	ldr	r3, [pc, #44]	; (8019318 <vPortSetupTimerInterrupt+0x38>)
 80192ec:	2200      	movs	r2, #0
 80192ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80192f0:	4b0a      	ldr	r3, [pc, #40]	; (801931c <vPortSetupTimerInterrupt+0x3c>)
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	4a0a      	ldr	r2, [pc, #40]	; (8019320 <vPortSetupTimerInterrupt+0x40>)
 80192f6:	fba2 2303 	umull	r2, r3, r2, r3
 80192fa:	099b      	lsrs	r3, r3, #6
 80192fc:	4a09      	ldr	r2, [pc, #36]	; (8019324 <vPortSetupTimerInterrupt+0x44>)
 80192fe:	3b01      	subs	r3, #1
 8019300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019302:	4b04      	ldr	r3, [pc, #16]	; (8019314 <vPortSetupTimerInterrupt+0x34>)
 8019304:	2207      	movs	r2, #7
 8019306:	601a      	str	r2, [r3, #0]
}
 8019308:	bf00      	nop
 801930a:	46bd      	mov	sp, r7
 801930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019310:	4770      	bx	lr
 8019312:	bf00      	nop
 8019314:	e000e010 	.word	0xe000e010
 8019318:	e000e018 	.word	0xe000e018
 801931c:	20000008 	.word	0x20000008
 8019320:	10624dd3 	.word	0x10624dd3
 8019324:	e000e014 	.word	0xe000e014

08019328 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019328:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019338 <vPortEnableVFP+0x10>
 801932c:	6801      	ldr	r1, [r0, #0]
 801932e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019332:	6001      	str	r1, [r0, #0]
 8019334:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019336:	bf00      	nop
 8019338:	e000ed88 	.word	0xe000ed88

0801933c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801933c:	b480      	push	{r7}
 801933e:	b085      	sub	sp, #20
 8019340:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019342:	f3ef 8305 	mrs	r3, IPSR
 8019346:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	2b0f      	cmp	r3, #15
 801934c:	d916      	bls.n	801937c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801934e:	4a19      	ldr	r2, [pc, #100]	; (80193b4 <vPortValidateInterruptPriority+0x78>)
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	4413      	add	r3, r2
 8019354:	781b      	ldrb	r3, [r3, #0]
 8019356:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019358:	4b17      	ldr	r3, [pc, #92]	; (80193b8 <vPortValidateInterruptPriority+0x7c>)
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	7afa      	ldrb	r2, [r7, #11]
 801935e:	429a      	cmp	r2, r3
 8019360:	d20c      	bcs.n	801937c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8019362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019366:	b672      	cpsid	i
 8019368:	f383 8811 	msr	BASEPRI, r3
 801936c:	f3bf 8f6f 	isb	sy
 8019370:	f3bf 8f4f 	dsb	sy
 8019374:	b662      	cpsie	i
 8019376:	607b      	str	r3, [r7, #4]
}
 8019378:	bf00      	nop
 801937a:	e7fe      	b.n	801937a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801937c:	4b0f      	ldr	r3, [pc, #60]	; (80193bc <vPortValidateInterruptPriority+0x80>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019384:	4b0e      	ldr	r3, [pc, #56]	; (80193c0 <vPortValidateInterruptPriority+0x84>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	429a      	cmp	r2, r3
 801938a:	d90c      	bls.n	80193a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019390:	b672      	cpsid	i
 8019392:	f383 8811 	msr	BASEPRI, r3
 8019396:	f3bf 8f6f 	isb	sy
 801939a:	f3bf 8f4f 	dsb	sy
 801939e:	b662      	cpsie	i
 80193a0:	603b      	str	r3, [r7, #0]
}
 80193a2:	bf00      	nop
 80193a4:	e7fe      	b.n	80193a4 <vPortValidateInterruptPriority+0x68>
	}
 80193a6:	bf00      	nop
 80193a8:	3714      	adds	r7, #20
 80193aa:	46bd      	mov	sp, r7
 80193ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b0:	4770      	bx	lr
 80193b2:	bf00      	nop
 80193b4:	e000e3f0 	.word	0xe000e3f0
 80193b8:	2000050c 	.word	0x2000050c
 80193bc:	e000ed0c 	.word	0xe000ed0c
 80193c0:	20000510 	.word	0x20000510

080193c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b08a      	sub	sp, #40	; 0x28
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80193cc:	2300      	movs	r3, #0
 80193ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80193d0:	f7fe fec0 	bl	8018154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80193d4:	4b5e      	ldr	r3, [pc, #376]	; (8019550 <pvPortMalloc+0x18c>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d101      	bne.n	80193e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80193dc:	f000 f920 	bl	8019620 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80193e0:	4b5c      	ldr	r3, [pc, #368]	; (8019554 <pvPortMalloc+0x190>)
 80193e2:	681a      	ldr	r2, [r3, #0]
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	4013      	ands	r3, r2
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	f040 8092 	bne.w	8019512 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d01f      	beq.n	8019434 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80193f4:	2208      	movs	r2, #8
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	4413      	add	r3, r2
 80193fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	f003 0307 	and.w	r3, r3, #7
 8019402:	2b00      	cmp	r3, #0
 8019404:	d016      	beq.n	8019434 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	f023 0307 	bic.w	r3, r3, #7
 801940c:	3308      	adds	r3, #8
 801940e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	f003 0307 	and.w	r3, r3, #7
 8019416:	2b00      	cmp	r3, #0
 8019418:	d00c      	beq.n	8019434 <pvPortMalloc+0x70>
	__asm volatile
 801941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801941e:	b672      	cpsid	i
 8019420:	f383 8811 	msr	BASEPRI, r3
 8019424:	f3bf 8f6f 	isb	sy
 8019428:	f3bf 8f4f 	dsb	sy
 801942c:	b662      	cpsie	i
 801942e:	617b      	str	r3, [r7, #20]
}
 8019430:	bf00      	nop
 8019432:	e7fe      	b.n	8019432 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d06b      	beq.n	8019512 <pvPortMalloc+0x14e>
 801943a:	4b47      	ldr	r3, [pc, #284]	; (8019558 <pvPortMalloc+0x194>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	687a      	ldr	r2, [r7, #4]
 8019440:	429a      	cmp	r2, r3
 8019442:	d866      	bhi.n	8019512 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019444:	4b45      	ldr	r3, [pc, #276]	; (801955c <pvPortMalloc+0x198>)
 8019446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019448:	4b44      	ldr	r3, [pc, #272]	; (801955c <pvPortMalloc+0x198>)
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801944e:	e004      	b.n	801945a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8019450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801945c:	685b      	ldr	r3, [r3, #4]
 801945e:	687a      	ldr	r2, [r7, #4]
 8019460:	429a      	cmp	r2, r3
 8019462:	d903      	bls.n	801946c <pvPortMalloc+0xa8>
 8019464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d1f1      	bne.n	8019450 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801946c:	4b38      	ldr	r3, [pc, #224]	; (8019550 <pvPortMalloc+0x18c>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019472:	429a      	cmp	r2, r3
 8019474:	d04d      	beq.n	8019512 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019476:	6a3b      	ldr	r3, [r7, #32]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	2208      	movs	r2, #8
 801947c:	4413      	add	r3, r2
 801947e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019482:	681a      	ldr	r2, [r3, #0]
 8019484:	6a3b      	ldr	r3, [r7, #32]
 8019486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801948a:	685a      	ldr	r2, [r3, #4]
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	1ad2      	subs	r2, r2, r3
 8019490:	2308      	movs	r3, #8
 8019492:	005b      	lsls	r3, r3, #1
 8019494:	429a      	cmp	r2, r3
 8019496:	d921      	bls.n	80194dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	4413      	add	r3, r2
 801949e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80194a0:	69bb      	ldr	r3, [r7, #24]
 80194a2:	f003 0307 	and.w	r3, r3, #7
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d00c      	beq.n	80194c4 <pvPortMalloc+0x100>
	__asm volatile
 80194aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194ae:	b672      	cpsid	i
 80194b0:	f383 8811 	msr	BASEPRI, r3
 80194b4:	f3bf 8f6f 	isb	sy
 80194b8:	f3bf 8f4f 	dsb	sy
 80194bc:	b662      	cpsie	i
 80194be:	613b      	str	r3, [r7, #16]
}
 80194c0:	bf00      	nop
 80194c2:	e7fe      	b.n	80194c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80194c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194c6:	685a      	ldr	r2, [r3, #4]
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	1ad2      	subs	r2, r2, r3
 80194cc:	69bb      	ldr	r3, [r7, #24]
 80194ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80194d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194d2:	687a      	ldr	r2, [r7, #4]
 80194d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80194d6:	69b8      	ldr	r0, [r7, #24]
 80194d8:	f000 f904 	bl	80196e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80194dc:	4b1e      	ldr	r3, [pc, #120]	; (8019558 <pvPortMalloc+0x194>)
 80194de:	681a      	ldr	r2, [r3, #0]
 80194e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e2:	685b      	ldr	r3, [r3, #4]
 80194e4:	1ad3      	subs	r3, r2, r3
 80194e6:	4a1c      	ldr	r2, [pc, #112]	; (8019558 <pvPortMalloc+0x194>)
 80194e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80194ea:	4b1b      	ldr	r3, [pc, #108]	; (8019558 <pvPortMalloc+0x194>)
 80194ec:	681a      	ldr	r2, [r3, #0]
 80194ee:	4b1c      	ldr	r3, [pc, #112]	; (8019560 <pvPortMalloc+0x19c>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	429a      	cmp	r2, r3
 80194f4:	d203      	bcs.n	80194fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80194f6:	4b18      	ldr	r3, [pc, #96]	; (8019558 <pvPortMalloc+0x194>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	4a19      	ldr	r2, [pc, #100]	; (8019560 <pvPortMalloc+0x19c>)
 80194fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80194fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019500:	685a      	ldr	r2, [r3, #4]
 8019502:	4b14      	ldr	r3, [pc, #80]	; (8019554 <pvPortMalloc+0x190>)
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	431a      	orrs	r2, r3
 8019508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801950a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801950e:	2200      	movs	r2, #0
 8019510:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019512:	f7fe fe2d 	bl	8018170 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8019516:	69fb      	ldr	r3, [r7, #28]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d101      	bne.n	8019520 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801951c:	f7e8 fb40 	bl	8001ba0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019520:	69fb      	ldr	r3, [r7, #28]
 8019522:	f003 0307 	and.w	r3, r3, #7
 8019526:	2b00      	cmp	r3, #0
 8019528:	d00c      	beq.n	8019544 <pvPortMalloc+0x180>
	__asm volatile
 801952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801952e:	b672      	cpsid	i
 8019530:	f383 8811 	msr	BASEPRI, r3
 8019534:	f3bf 8f6f 	isb	sy
 8019538:	f3bf 8f4f 	dsb	sy
 801953c:	b662      	cpsie	i
 801953e:	60fb      	str	r3, [r7, #12]
}
 8019540:	bf00      	nop
 8019542:	e7fe      	b.n	8019542 <pvPortMalloc+0x17e>
	return pvReturn;
 8019544:	69fb      	ldr	r3, [r7, #28]
}
 8019546:	4618      	mov	r0, r3
 8019548:	3728      	adds	r7, #40	; 0x28
 801954a:	46bd      	mov	sp, r7
 801954c:	bd80      	pop	{r7, pc}
 801954e:	bf00      	nop
 8019550:	2000851c 	.word	0x2000851c
 8019554:	20008528 	.word	0x20008528
 8019558:	20008520 	.word	0x20008520
 801955c:	20008514 	.word	0x20008514
 8019560:	20008524 	.word	0x20008524

08019564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b086      	sub	sp, #24
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d04c      	beq.n	8019610 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019576:	2308      	movs	r3, #8
 8019578:	425b      	negs	r3, r3
 801957a:	697a      	ldr	r2, [r7, #20]
 801957c:	4413      	add	r3, r2
 801957e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019580:	697b      	ldr	r3, [r7, #20]
 8019582:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019584:	693b      	ldr	r3, [r7, #16]
 8019586:	685a      	ldr	r2, [r3, #4]
 8019588:	4b23      	ldr	r3, [pc, #140]	; (8019618 <vPortFree+0xb4>)
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	4013      	ands	r3, r2
 801958e:	2b00      	cmp	r3, #0
 8019590:	d10c      	bne.n	80195ac <vPortFree+0x48>
	__asm volatile
 8019592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019596:	b672      	cpsid	i
 8019598:	f383 8811 	msr	BASEPRI, r3
 801959c:	f3bf 8f6f 	isb	sy
 80195a0:	f3bf 8f4f 	dsb	sy
 80195a4:	b662      	cpsie	i
 80195a6:	60fb      	str	r3, [r7, #12]
}
 80195a8:	bf00      	nop
 80195aa:	e7fe      	b.n	80195aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80195ac:	693b      	ldr	r3, [r7, #16]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d00c      	beq.n	80195ce <vPortFree+0x6a>
	__asm volatile
 80195b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195b8:	b672      	cpsid	i
 80195ba:	f383 8811 	msr	BASEPRI, r3
 80195be:	f3bf 8f6f 	isb	sy
 80195c2:	f3bf 8f4f 	dsb	sy
 80195c6:	b662      	cpsie	i
 80195c8:	60bb      	str	r3, [r7, #8]
}
 80195ca:	bf00      	nop
 80195cc:	e7fe      	b.n	80195cc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	685a      	ldr	r2, [r3, #4]
 80195d2:	4b11      	ldr	r3, [pc, #68]	; (8019618 <vPortFree+0xb4>)
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	4013      	ands	r3, r2
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d019      	beq.n	8019610 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80195dc:	693b      	ldr	r3, [r7, #16]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d115      	bne.n	8019610 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80195e4:	693b      	ldr	r3, [r7, #16]
 80195e6:	685a      	ldr	r2, [r3, #4]
 80195e8:	4b0b      	ldr	r3, [pc, #44]	; (8019618 <vPortFree+0xb4>)
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	43db      	mvns	r3, r3
 80195ee:	401a      	ands	r2, r3
 80195f0:	693b      	ldr	r3, [r7, #16]
 80195f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80195f4:	f7fe fdae 	bl	8018154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80195f8:	693b      	ldr	r3, [r7, #16]
 80195fa:	685a      	ldr	r2, [r3, #4]
 80195fc:	4b07      	ldr	r3, [pc, #28]	; (801961c <vPortFree+0xb8>)
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	4413      	add	r3, r2
 8019602:	4a06      	ldr	r2, [pc, #24]	; (801961c <vPortFree+0xb8>)
 8019604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019606:	6938      	ldr	r0, [r7, #16]
 8019608:	f000 f86c 	bl	80196e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801960c:	f7fe fdb0 	bl	8018170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019610:	bf00      	nop
 8019612:	3718      	adds	r7, #24
 8019614:	46bd      	mov	sp, r7
 8019616:	bd80      	pop	{r7, pc}
 8019618:	20008528 	.word	0x20008528
 801961c:	20008520 	.word	0x20008520

08019620 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019620:	b480      	push	{r7}
 8019622:	b085      	sub	sp, #20
 8019624:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801962a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801962c:	4b27      	ldr	r3, [pc, #156]	; (80196cc <prvHeapInit+0xac>)
 801962e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	f003 0307 	and.w	r3, r3, #7
 8019636:	2b00      	cmp	r3, #0
 8019638:	d00c      	beq.n	8019654 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	3307      	adds	r3, #7
 801963e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	f023 0307 	bic.w	r3, r3, #7
 8019646:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019648:	68ba      	ldr	r2, [r7, #8]
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	1ad3      	subs	r3, r2, r3
 801964e:	4a1f      	ldr	r2, [pc, #124]	; (80196cc <prvHeapInit+0xac>)
 8019650:	4413      	add	r3, r2
 8019652:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019658:	4a1d      	ldr	r2, [pc, #116]	; (80196d0 <prvHeapInit+0xb0>)
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801965e:	4b1c      	ldr	r3, [pc, #112]	; (80196d0 <prvHeapInit+0xb0>)
 8019660:	2200      	movs	r2, #0
 8019662:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	68ba      	ldr	r2, [r7, #8]
 8019668:	4413      	add	r3, r2
 801966a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801966c:	2208      	movs	r2, #8
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	1a9b      	subs	r3, r3, r2
 8019672:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	f023 0307 	bic.w	r3, r3, #7
 801967a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	4a15      	ldr	r2, [pc, #84]	; (80196d4 <prvHeapInit+0xb4>)
 8019680:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019682:	4b14      	ldr	r3, [pc, #80]	; (80196d4 <prvHeapInit+0xb4>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	2200      	movs	r2, #0
 8019688:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801968a:	4b12      	ldr	r3, [pc, #72]	; (80196d4 <prvHeapInit+0xb4>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	2200      	movs	r2, #0
 8019690:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019696:	683b      	ldr	r3, [r7, #0]
 8019698:	68fa      	ldr	r2, [r7, #12]
 801969a:	1ad2      	subs	r2, r2, r3
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80196a0:	4b0c      	ldr	r3, [pc, #48]	; (80196d4 <prvHeapInit+0xb4>)
 80196a2:	681a      	ldr	r2, [r3, #0]
 80196a4:	683b      	ldr	r3, [r7, #0]
 80196a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	685b      	ldr	r3, [r3, #4]
 80196ac:	4a0a      	ldr	r2, [pc, #40]	; (80196d8 <prvHeapInit+0xb8>)
 80196ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	685b      	ldr	r3, [r3, #4]
 80196b4:	4a09      	ldr	r2, [pc, #36]	; (80196dc <prvHeapInit+0xbc>)
 80196b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80196b8:	4b09      	ldr	r3, [pc, #36]	; (80196e0 <prvHeapInit+0xc0>)
 80196ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80196be:	601a      	str	r2, [r3, #0]
}
 80196c0:	bf00      	nop
 80196c2:	3714      	adds	r7, #20
 80196c4:	46bd      	mov	sp, r7
 80196c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ca:	4770      	bx	lr
 80196cc:	20000514 	.word	0x20000514
 80196d0:	20008514 	.word	0x20008514
 80196d4:	2000851c 	.word	0x2000851c
 80196d8:	20008524 	.word	0x20008524
 80196dc:	20008520 	.word	0x20008520
 80196e0:	20008528 	.word	0x20008528

080196e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80196e4:	b480      	push	{r7}
 80196e6:	b085      	sub	sp, #20
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80196ec:	4b28      	ldr	r3, [pc, #160]	; (8019790 <prvInsertBlockIntoFreeList+0xac>)
 80196ee:	60fb      	str	r3, [r7, #12]
 80196f0:	e002      	b.n	80196f8 <prvInsertBlockIntoFreeList+0x14>
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	60fb      	str	r3, [r7, #12]
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	687a      	ldr	r2, [r7, #4]
 80196fe:	429a      	cmp	r2, r3
 8019700:	d8f7      	bhi.n	80196f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	685b      	ldr	r3, [r3, #4]
 801970a:	68ba      	ldr	r2, [r7, #8]
 801970c:	4413      	add	r3, r2
 801970e:	687a      	ldr	r2, [r7, #4]
 8019710:	429a      	cmp	r2, r3
 8019712:	d108      	bne.n	8019726 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	685a      	ldr	r2, [r3, #4]
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	685b      	ldr	r3, [r3, #4]
 801971c:	441a      	add	r2, r3
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	685b      	ldr	r3, [r3, #4]
 801972e:	68ba      	ldr	r2, [r7, #8]
 8019730:	441a      	add	r2, r3
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	429a      	cmp	r2, r3
 8019738:	d118      	bne.n	801976c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	681a      	ldr	r2, [r3, #0]
 801973e:	4b15      	ldr	r3, [pc, #84]	; (8019794 <prvInsertBlockIntoFreeList+0xb0>)
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	429a      	cmp	r2, r3
 8019744:	d00d      	beq.n	8019762 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	685a      	ldr	r2, [r3, #4]
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	685b      	ldr	r3, [r3, #4]
 8019750:	441a      	add	r2, r3
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	681a      	ldr	r2, [r3, #0]
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	601a      	str	r2, [r3, #0]
 8019760:	e008      	b.n	8019774 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019762:	4b0c      	ldr	r3, [pc, #48]	; (8019794 <prvInsertBlockIntoFreeList+0xb0>)
 8019764:	681a      	ldr	r2, [r3, #0]
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	601a      	str	r2, [r3, #0]
 801976a:	e003      	b.n	8019774 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019774:	68fa      	ldr	r2, [r7, #12]
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	429a      	cmp	r2, r3
 801977a:	d002      	beq.n	8019782 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	687a      	ldr	r2, [r7, #4]
 8019780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019782:	bf00      	nop
 8019784:	3714      	adds	r7, #20
 8019786:	46bd      	mov	sp, r7
 8019788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978c:	4770      	bx	lr
 801978e:	bf00      	nop
 8019790:	20008514 	.word	0x20008514
 8019794:	2000851c 	.word	0x2000851c

08019798 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801979c:	2201      	movs	r2, #1
 801979e:	490e      	ldr	r1, [pc, #56]	; (80197d8 <MX_USB_HOST_Init+0x40>)
 80197a0:	480e      	ldr	r0, [pc, #56]	; (80197dc <MX_USB_HOST_Init+0x44>)
 80197a2:	f7fb fc77 	bl	8015094 <USBH_Init>
 80197a6:	4603      	mov	r3, r0
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d001      	beq.n	80197b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80197ac:	f7e9 fe2e 	bl	800340c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80197b0:	490b      	ldr	r1, [pc, #44]	; (80197e0 <MX_USB_HOST_Init+0x48>)
 80197b2:	480a      	ldr	r0, [pc, #40]	; (80197dc <MX_USB_HOST_Init+0x44>)
 80197b4:	f7fb fd24 	bl	8015200 <USBH_RegisterClass>
 80197b8:	4603      	mov	r3, r0
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d001      	beq.n	80197c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80197be:	f7e9 fe25 	bl	800340c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80197c2:	4806      	ldr	r0, [pc, #24]	; (80197dc <MX_USB_HOST_Init+0x44>)
 80197c4:	f7fb fda8 	bl	8015318 <USBH_Start>
 80197c8:	4603      	mov	r3, r0
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d001      	beq.n	80197d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80197ce:	f7e9 fe1d 	bl	800340c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80197d2:	bf00      	nop
 80197d4:	bd80      	pop	{r7, pc}
 80197d6:	bf00      	nop
 80197d8:	080197e5 	.word	0x080197e5
 80197dc:	2004a92c 	.word	0x2004a92c
 80197e0:	2000003c 	.word	0x2000003c

080197e4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80197e4:	b480      	push	{r7}
 80197e6:	b083      	sub	sp, #12
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
 80197ec:	460b      	mov	r3, r1
 80197ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80197f0:	78fb      	ldrb	r3, [r7, #3]
 80197f2:	3b01      	subs	r3, #1
 80197f4:	2b04      	cmp	r3, #4
 80197f6:	d819      	bhi.n	801982c <USBH_UserProcess+0x48>
 80197f8:	a201      	add	r2, pc, #4	; (adr r2, 8019800 <USBH_UserProcess+0x1c>)
 80197fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197fe:	bf00      	nop
 8019800:	0801982d 	.word	0x0801982d
 8019804:	0801981d 	.word	0x0801981d
 8019808:	0801982d 	.word	0x0801982d
 801980c:	08019825 	.word	0x08019825
 8019810:	08019815 	.word	0x08019815
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8019814:	4b09      	ldr	r3, [pc, #36]	; (801983c <USBH_UserProcess+0x58>)
 8019816:	2203      	movs	r2, #3
 8019818:	701a      	strb	r2, [r3, #0]
  break;
 801981a:	e008      	b.n	801982e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801981c:	4b07      	ldr	r3, [pc, #28]	; (801983c <USBH_UserProcess+0x58>)
 801981e:	2202      	movs	r2, #2
 8019820:	701a      	strb	r2, [r3, #0]
  break;
 8019822:	e004      	b.n	801982e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8019824:	4b05      	ldr	r3, [pc, #20]	; (801983c <USBH_UserProcess+0x58>)
 8019826:	2201      	movs	r2, #1
 8019828:	701a      	strb	r2, [r3, #0]
  break;
 801982a:	e000      	b.n	801982e <USBH_UserProcess+0x4a>

  default:
  break;
 801982c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801982e:	bf00      	nop
 8019830:	370c      	adds	r7, #12
 8019832:	46bd      	mov	sp, r7
 8019834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019838:	4770      	bx	lr
 801983a:	bf00      	nop
 801983c:	2000852c 	.word	0x2000852c

08019840 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b08a      	sub	sp, #40	; 0x28
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019848:	f107 0314 	add.w	r3, r7, #20
 801984c:	2200      	movs	r2, #0
 801984e:	601a      	str	r2, [r3, #0]
 8019850:	605a      	str	r2, [r3, #4]
 8019852:	609a      	str	r2, [r3, #8]
 8019854:	60da      	str	r2, [r3, #12]
 8019856:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019860:	d13c      	bne.n	80198dc <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019862:	4b20      	ldr	r3, [pc, #128]	; (80198e4 <HAL_HCD_MspInit+0xa4>)
 8019864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019866:	4a1f      	ldr	r2, [pc, #124]	; (80198e4 <HAL_HCD_MspInit+0xa4>)
 8019868:	f043 0301 	orr.w	r3, r3, #1
 801986c:	6313      	str	r3, [r2, #48]	; 0x30
 801986e:	4b1d      	ldr	r3, [pc, #116]	; (80198e4 <HAL_HCD_MspInit+0xa4>)
 8019870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019872:	f003 0301 	and.w	r3, r3, #1
 8019876:	613b      	str	r3, [r7, #16]
 8019878:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801987a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801987e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019880:	2302      	movs	r3, #2
 8019882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019884:	2300      	movs	r3, #0
 8019886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019888:	2303      	movs	r3, #3
 801988a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801988c:	230a      	movs	r3, #10
 801988e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019890:	f107 0314 	add.w	r3, r7, #20
 8019894:	4619      	mov	r1, r3
 8019896:	4814      	ldr	r0, [pc, #80]	; (80198e8 <HAL_HCD_MspInit+0xa8>)
 8019898:	f7ef fe22 	bl	80094e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801989c:	4b11      	ldr	r3, [pc, #68]	; (80198e4 <HAL_HCD_MspInit+0xa4>)
 801989e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198a0:	4a10      	ldr	r2, [pc, #64]	; (80198e4 <HAL_HCD_MspInit+0xa4>)
 80198a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198a6:	6353      	str	r3, [r2, #52]	; 0x34
 80198a8:	4b0e      	ldr	r3, [pc, #56]	; (80198e4 <HAL_HCD_MspInit+0xa4>)
 80198aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80198b0:	60fb      	str	r3, [r7, #12]
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	4b0b      	ldr	r3, [pc, #44]	; (80198e4 <HAL_HCD_MspInit+0xa4>)
 80198b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198b8:	4a0a      	ldr	r2, [pc, #40]	; (80198e4 <HAL_HCD_MspInit+0xa4>)
 80198ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80198be:	6453      	str	r3, [r2, #68]	; 0x44
 80198c0:	4b08      	ldr	r3, [pc, #32]	; (80198e4 <HAL_HCD_MspInit+0xa4>)
 80198c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80198c8:	60bb      	str	r3, [r7, #8]
 80198ca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80198cc:	2200      	movs	r2, #0
 80198ce:	2105      	movs	r1, #5
 80198d0:	2043      	movs	r0, #67	; 0x43
 80198d2:	f7ee fb6b 	bl	8007fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80198d6:	2043      	movs	r0, #67	; 0x43
 80198d8:	f7ee fb84 	bl	8007fe4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80198dc:	bf00      	nop
 80198de:	3728      	adds	r7, #40	; 0x28
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd80      	pop	{r7, pc}
 80198e4:	40023800 	.word	0x40023800
 80198e8:	40020000 	.word	0x40020000

080198ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b082      	sub	sp, #8
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80198fa:	4618      	mov	r0, r3
 80198fc:	f7fc f9b9 	bl	8015c72 <USBH_LL_IncTimer>
}
 8019900:	bf00      	nop
 8019902:	3708      	adds	r7, #8
 8019904:	46bd      	mov	sp, r7
 8019906:	bd80      	pop	{r7, pc}

08019908 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b082      	sub	sp, #8
 801990c:	af00      	add	r7, sp, #0
 801990e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019916:	4618      	mov	r0, r3
 8019918:	f7fc f9fd 	bl	8015d16 <USBH_LL_Connect>
}
 801991c:	bf00      	nop
 801991e:	3708      	adds	r7, #8
 8019920:	46bd      	mov	sp, r7
 8019922:	bd80      	pop	{r7, pc}

08019924 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b082      	sub	sp, #8
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019932:	4618      	mov	r0, r3
 8019934:	f7fc fa12 	bl	8015d5c <USBH_LL_Disconnect>
}
 8019938:	bf00      	nop
 801993a:	3708      	adds	r7, #8
 801993c:	46bd      	mov	sp, r7
 801993e:	bd80      	pop	{r7, pc}

08019940 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b082      	sub	sp, #8
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
 8019948:	460b      	mov	r3, r1
 801994a:	70fb      	strb	r3, [r7, #3]
 801994c:	4613      	mov	r3, r2
 801994e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019956:	4618      	mov	r0, r3
 8019958:	f7fc fa47 	bl	8015dea <USBH_LL_NotifyURBChange>
#endif
}
 801995c:	bf00      	nop
 801995e:	3708      	adds	r7, #8
 8019960:	46bd      	mov	sp, r7
 8019962:	bd80      	pop	{r7, pc}

08019964 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019964:	b580      	push	{r7, lr}
 8019966:	b082      	sub	sp, #8
 8019968:	af00      	add	r7, sp, #0
 801996a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019972:	4618      	mov	r0, r3
 8019974:	f7fc f9a7 	bl	8015cc6 <USBH_LL_PortEnabled>
}
 8019978:	bf00      	nop
 801997a:	3708      	adds	r7, #8
 801997c:	46bd      	mov	sp, r7
 801997e:	bd80      	pop	{r7, pc}

08019980 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019980:	b580      	push	{r7, lr}
 8019982:	b082      	sub	sp, #8
 8019984:	af00      	add	r7, sp, #0
 8019986:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801998e:	4618      	mov	r0, r3
 8019990:	f7fc f9b3 	bl	8015cfa <USBH_LL_PortDisabled>
}
 8019994:	bf00      	nop
 8019996:	3708      	adds	r7, #8
 8019998:	46bd      	mov	sp, r7
 801999a:	bd80      	pop	{r7, pc}

0801999c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b082      	sub	sp, #8
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80199aa:	2b01      	cmp	r3, #1
 80199ac:	d12a      	bne.n	8019a04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80199ae:	4a18      	ldr	r2, [pc, #96]	; (8019a10 <USBH_LL_Init+0x74>)
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	4a15      	ldr	r2, [pc, #84]	; (8019a10 <USBH_LL_Init+0x74>)
 80199ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80199be:	4b14      	ldr	r3, [pc, #80]	; (8019a10 <USBH_LL_Init+0x74>)
 80199c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80199c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80199c6:	4b12      	ldr	r3, [pc, #72]	; (8019a10 <USBH_LL_Init+0x74>)
 80199c8:	2208      	movs	r2, #8
 80199ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80199cc:	4b10      	ldr	r3, [pc, #64]	; (8019a10 <USBH_LL_Init+0x74>)
 80199ce:	2201      	movs	r2, #1
 80199d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80199d2:	4b0f      	ldr	r3, [pc, #60]	; (8019a10 <USBH_LL_Init+0x74>)
 80199d4:	2200      	movs	r2, #0
 80199d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80199d8:	4b0d      	ldr	r3, [pc, #52]	; (8019a10 <USBH_LL_Init+0x74>)
 80199da:	2202      	movs	r2, #2
 80199dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80199de:	4b0c      	ldr	r3, [pc, #48]	; (8019a10 <USBH_LL_Init+0x74>)
 80199e0:	2200      	movs	r2, #0
 80199e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80199e4:	480a      	ldr	r0, [pc, #40]	; (8019a10 <USBH_LL_Init+0x74>)
 80199e6:	f7f0 f8a2 	bl	8009b2e <HAL_HCD_Init>
 80199ea:	4603      	mov	r3, r0
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d001      	beq.n	80199f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80199f0:	f7e9 fd0c 	bl	800340c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80199f4:	4806      	ldr	r0, [pc, #24]	; (8019a10 <USBH_LL_Init+0x74>)
 80199f6:	f7f0 fc7f 	bl	800a2f8 <HAL_HCD_GetCurrentFrame>
 80199fa:	4603      	mov	r3, r0
 80199fc:	4619      	mov	r1, r3
 80199fe:	6878      	ldr	r0, [r7, #4]
 8019a00:	f7fc f928 	bl	8015c54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019a04:	2300      	movs	r3, #0
}
 8019a06:	4618      	mov	r0, r3
 8019a08:	3708      	adds	r7, #8
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	bd80      	pop	{r7, pc}
 8019a0e:	bf00      	nop
 8019a10:	2004ad10 	.word	0x2004ad10

08019a14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b084      	sub	sp, #16
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019a20:	2300      	movs	r3, #0
 8019a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f7f0 fbee 	bl	800a20c <HAL_HCD_Start>
 8019a30:	4603      	mov	r3, r0
 8019a32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019a34:	7bfb      	ldrb	r3, [r7, #15]
 8019a36:	4618      	mov	r0, r3
 8019a38:	f000 f95c 	bl	8019cf4 <USBH_Get_USB_Status>
 8019a3c:	4603      	mov	r3, r0
 8019a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a42:	4618      	mov	r0, r3
 8019a44:	3710      	adds	r7, #16
 8019a46:	46bd      	mov	sp, r7
 8019a48:	bd80      	pop	{r7, pc}

08019a4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019a4a:	b580      	push	{r7, lr}
 8019a4c:	b084      	sub	sp, #16
 8019a4e:	af00      	add	r7, sp, #0
 8019a50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a52:	2300      	movs	r3, #0
 8019a54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019a56:	2300      	movs	r3, #0
 8019a58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7f0 fbf6 	bl	800a252 <HAL_HCD_Stop>
 8019a66:	4603      	mov	r3, r0
 8019a68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019a6a:	7bfb      	ldrb	r3, [r7, #15]
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	f000 f941 	bl	8019cf4 <USBH_Get_USB_Status>
 8019a72:	4603      	mov	r3, r0
 8019a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a78:	4618      	mov	r0, r3
 8019a7a:	3710      	adds	r7, #16
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bd80      	pop	{r7, pc}

08019a80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b084      	sub	sp, #16
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019a88:	2301      	movs	r3, #1
 8019a8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019a92:	4618      	mov	r0, r3
 8019a94:	f7f0 fc3e 	bl	800a314 <HAL_HCD_GetCurrentSpeed>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	2b02      	cmp	r3, #2
 8019a9c:	d00c      	beq.n	8019ab8 <USBH_LL_GetSpeed+0x38>
 8019a9e:	2b02      	cmp	r3, #2
 8019aa0:	d80d      	bhi.n	8019abe <USBH_LL_GetSpeed+0x3e>
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d002      	beq.n	8019aac <USBH_LL_GetSpeed+0x2c>
 8019aa6:	2b01      	cmp	r3, #1
 8019aa8:	d003      	beq.n	8019ab2 <USBH_LL_GetSpeed+0x32>
 8019aaa:	e008      	b.n	8019abe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019aac:	2300      	movs	r3, #0
 8019aae:	73fb      	strb	r3, [r7, #15]
    break;
 8019ab0:	e008      	b.n	8019ac4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8019ab2:	2301      	movs	r3, #1
 8019ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8019ab6:	e005      	b.n	8019ac4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019ab8:	2302      	movs	r3, #2
 8019aba:	73fb      	strb	r3, [r7, #15]
    break;
 8019abc:	e002      	b.n	8019ac4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8019abe:	2301      	movs	r3, #1
 8019ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8019ac2:	bf00      	nop
  }
  return  speed;
 8019ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	3710      	adds	r7, #16
 8019aca:	46bd      	mov	sp, r7
 8019acc:	bd80      	pop	{r7, pc}

08019ace <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8019ace:	b580      	push	{r7, lr}
 8019ad0:	b084      	sub	sp, #16
 8019ad2:	af00      	add	r7, sp, #0
 8019ad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019ada:	2300      	movs	r3, #0
 8019adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f7f0 fbd1 	bl	800a28c <HAL_HCD_ResetPort>
 8019aea:	4603      	mov	r3, r0
 8019aec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019aee:	7bfb      	ldrb	r3, [r7, #15]
 8019af0:	4618      	mov	r0, r3
 8019af2:	f000 f8ff 	bl	8019cf4 <USBH_Get_USB_Status>
 8019af6:	4603      	mov	r3, r0
 8019af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8019afc:	4618      	mov	r0, r3
 8019afe:	3710      	adds	r7, #16
 8019b00:	46bd      	mov	sp, r7
 8019b02:	bd80      	pop	{r7, pc}

08019b04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b082      	sub	sp, #8
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	6078      	str	r0, [r7, #4]
 8019b0c:	460b      	mov	r3, r1
 8019b0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019b16:	78fa      	ldrb	r2, [r7, #3]
 8019b18:	4611      	mov	r1, r2
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f7f0 fbd8 	bl	800a2d0 <HAL_HCD_HC_GetXferCount>
 8019b20:	4603      	mov	r3, r0
}
 8019b22:	4618      	mov	r0, r3
 8019b24:	3708      	adds	r7, #8
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd80      	pop	{r7, pc}

08019b2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019b2a:	b590      	push	{r4, r7, lr}
 8019b2c:	b089      	sub	sp, #36	; 0x24
 8019b2e:	af04      	add	r7, sp, #16
 8019b30:	6078      	str	r0, [r7, #4]
 8019b32:	4608      	mov	r0, r1
 8019b34:	4611      	mov	r1, r2
 8019b36:	461a      	mov	r2, r3
 8019b38:	4603      	mov	r3, r0
 8019b3a:	70fb      	strb	r3, [r7, #3]
 8019b3c:	460b      	mov	r3, r1
 8019b3e:	70bb      	strb	r3, [r7, #2]
 8019b40:	4613      	mov	r3, r2
 8019b42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b44:	2300      	movs	r3, #0
 8019b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019b48:	2300      	movs	r3, #0
 8019b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019b52:	787c      	ldrb	r4, [r7, #1]
 8019b54:	78ba      	ldrb	r2, [r7, #2]
 8019b56:	78f9      	ldrb	r1, [r7, #3]
 8019b58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019b5a:	9302      	str	r3, [sp, #8]
 8019b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b60:	9301      	str	r3, [sp, #4]
 8019b62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019b66:	9300      	str	r3, [sp, #0]
 8019b68:	4623      	mov	r3, r4
 8019b6a:	f7f0 f842 	bl	8009bf2 <HAL_HCD_HC_Init>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019b72:	7bfb      	ldrb	r3, [r7, #15]
 8019b74:	4618      	mov	r0, r3
 8019b76:	f000 f8bd 	bl	8019cf4 <USBH_Get_USB_Status>
 8019b7a:	4603      	mov	r3, r0
 8019b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3714      	adds	r7, #20
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd90      	pop	{r4, r7, pc}

08019b88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b084      	sub	sp, #16
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
 8019b90:	460b      	mov	r3, r1
 8019b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b94:	2300      	movs	r3, #0
 8019b96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019b98:	2300      	movs	r3, #0
 8019b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019ba2:	78fa      	ldrb	r2, [r7, #3]
 8019ba4:	4611      	mov	r1, r2
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	f7f0 f8b2 	bl	8009d10 <HAL_HCD_HC_Halt>
 8019bac:	4603      	mov	r3, r0
 8019bae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019bb0:	7bfb      	ldrb	r3, [r7, #15]
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f000 f89e 	bl	8019cf4 <USBH_Get_USB_Status>
 8019bb8:	4603      	mov	r3, r0
 8019bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	3710      	adds	r7, #16
 8019bc2:	46bd      	mov	sp, r7
 8019bc4:	bd80      	pop	{r7, pc}

08019bc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019bc6:	b590      	push	{r4, r7, lr}
 8019bc8:	b089      	sub	sp, #36	; 0x24
 8019bca:	af04      	add	r7, sp, #16
 8019bcc:	6078      	str	r0, [r7, #4]
 8019bce:	4608      	mov	r0, r1
 8019bd0:	4611      	mov	r1, r2
 8019bd2:	461a      	mov	r2, r3
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	70fb      	strb	r3, [r7, #3]
 8019bd8:	460b      	mov	r3, r1
 8019bda:	70bb      	strb	r3, [r7, #2]
 8019bdc:	4613      	mov	r3, r2
 8019bde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019be0:	2300      	movs	r3, #0
 8019be2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019be4:	2300      	movs	r3, #0
 8019be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019bee:	787c      	ldrb	r4, [r7, #1]
 8019bf0:	78ba      	ldrb	r2, [r7, #2]
 8019bf2:	78f9      	ldrb	r1, [r7, #3]
 8019bf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019bf8:	9303      	str	r3, [sp, #12]
 8019bfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019bfc:	9302      	str	r3, [sp, #8]
 8019bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c00:	9301      	str	r3, [sp, #4]
 8019c02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019c06:	9300      	str	r3, [sp, #0]
 8019c08:	4623      	mov	r3, r4
 8019c0a:	f7f0 f8a5 	bl	8009d58 <HAL_HCD_HC_SubmitRequest>
 8019c0e:	4603      	mov	r3, r0
 8019c10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8019c12:	7bfb      	ldrb	r3, [r7, #15]
 8019c14:	4618      	mov	r0, r3
 8019c16:	f000 f86d 	bl	8019cf4 <USBH_Get_USB_Status>
 8019c1a:	4603      	mov	r3, r0
 8019c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c20:	4618      	mov	r0, r3
 8019c22:	3714      	adds	r7, #20
 8019c24:	46bd      	mov	sp, r7
 8019c26:	bd90      	pop	{r4, r7, pc}

08019c28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b082      	sub	sp, #8
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
 8019c30:	460b      	mov	r3, r1
 8019c32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019c3a:	78fa      	ldrb	r2, [r7, #3]
 8019c3c:	4611      	mov	r1, r2
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7f0 fb32 	bl	800a2a8 <HAL_HCD_HC_GetURBState>
 8019c44:	4603      	mov	r3, r0
}
 8019c46:	4618      	mov	r0, r3
 8019c48:	3708      	adds	r7, #8
 8019c4a:	46bd      	mov	sp, r7
 8019c4c:	bd80      	pop	{r7, pc}

08019c4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019c4e:	b580      	push	{r7, lr}
 8019c50:	b082      	sub	sp, #8
 8019c52:	af00      	add	r7, sp, #0
 8019c54:	6078      	str	r0, [r7, #4]
 8019c56:	460b      	mov	r3, r1
 8019c58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019c60:	2b01      	cmp	r3, #1
 8019c62:	d103      	bne.n	8019c6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019c64:	78fb      	ldrb	r3, [r7, #3]
 8019c66:	4618      	mov	r0, r3
 8019c68:	f000 f870 	bl	8019d4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019c6c:	20c8      	movs	r0, #200	; 0xc8
 8019c6e:	f7ed fe15 	bl	800789c <HAL_Delay>
  return USBH_OK;
 8019c72:	2300      	movs	r3, #0
}
 8019c74:	4618      	mov	r0, r3
 8019c76:	3708      	adds	r7, #8
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bd80      	pop	{r7, pc}

08019c7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019c7c:	b480      	push	{r7}
 8019c7e:	b085      	sub	sp, #20
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
 8019c84:	460b      	mov	r3, r1
 8019c86:	70fb      	strb	r3, [r7, #3]
 8019c88:	4613      	mov	r3, r2
 8019c8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019c92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019c94:	78fb      	ldrb	r3, [r7, #3]
 8019c96:	68fa      	ldr	r2, [r7, #12]
 8019c98:	212c      	movs	r1, #44	; 0x2c
 8019c9a:	fb01 f303 	mul.w	r3, r1, r3
 8019c9e:	4413      	add	r3, r2
 8019ca0:	333b      	adds	r3, #59	; 0x3b
 8019ca2:	781b      	ldrb	r3, [r3, #0]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d009      	beq.n	8019cbc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019ca8:	78fb      	ldrb	r3, [r7, #3]
 8019caa:	68fa      	ldr	r2, [r7, #12]
 8019cac:	212c      	movs	r1, #44	; 0x2c
 8019cae:	fb01 f303 	mul.w	r3, r1, r3
 8019cb2:	4413      	add	r3, r2
 8019cb4:	3354      	adds	r3, #84	; 0x54
 8019cb6:	78ba      	ldrb	r2, [r7, #2]
 8019cb8:	701a      	strb	r2, [r3, #0]
 8019cba:	e008      	b.n	8019cce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019cbc:	78fb      	ldrb	r3, [r7, #3]
 8019cbe:	68fa      	ldr	r2, [r7, #12]
 8019cc0:	212c      	movs	r1, #44	; 0x2c
 8019cc2:	fb01 f303 	mul.w	r3, r1, r3
 8019cc6:	4413      	add	r3, r2
 8019cc8:	3355      	adds	r3, #85	; 0x55
 8019cca:	78ba      	ldrb	r2, [r7, #2]
 8019ccc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019cce:	2300      	movs	r3, #0
}
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	3714      	adds	r7, #20
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cda:	4770      	bx	lr

08019cdc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	b082      	sub	sp, #8
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8019ce4:	6878      	ldr	r0, [r7, #4]
 8019ce6:	f7ed fdd9 	bl	800789c <HAL_Delay>
}
 8019cea:	bf00      	nop
 8019cec:	3708      	adds	r7, #8
 8019cee:	46bd      	mov	sp, r7
 8019cf0:	bd80      	pop	{r7, pc}
	...

08019cf4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019cf4:	b480      	push	{r7}
 8019cf6:	b085      	sub	sp, #20
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	4603      	mov	r3, r0
 8019cfc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019cfe:	2300      	movs	r3, #0
 8019d00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019d02:	79fb      	ldrb	r3, [r7, #7]
 8019d04:	2b03      	cmp	r3, #3
 8019d06:	d817      	bhi.n	8019d38 <USBH_Get_USB_Status+0x44>
 8019d08:	a201      	add	r2, pc, #4	; (adr r2, 8019d10 <USBH_Get_USB_Status+0x1c>)
 8019d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d0e:	bf00      	nop
 8019d10:	08019d21 	.word	0x08019d21
 8019d14:	08019d27 	.word	0x08019d27
 8019d18:	08019d2d 	.word	0x08019d2d
 8019d1c:	08019d33 	.word	0x08019d33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019d20:	2300      	movs	r3, #0
 8019d22:	73fb      	strb	r3, [r7, #15]
    break;
 8019d24:	e00b      	b.n	8019d3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019d26:	2302      	movs	r3, #2
 8019d28:	73fb      	strb	r3, [r7, #15]
    break;
 8019d2a:	e008      	b.n	8019d3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019d2c:	2301      	movs	r3, #1
 8019d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8019d30:	e005      	b.n	8019d3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019d32:	2302      	movs	r3, #2
 8019d34:	73fb      	strb	r3, [r7, #15]
    break;
 8019d36:	e002      	b.n	8019d3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019d38:	2302      	movs	r3, #2
 8019d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8019d3c:	bf00      	nop
  }
  return usb_status;
 8019d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d40:	4618      	mov	r0, r3
 8019d42:	3714      	adds	r7, #20
 8019d44:	46bd      	mov	sp, r7
 8019d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4a:	4770      	bx	lr

08019d4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b084      	sub	sp, #16
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	4603      	mov	r3, r0
 8019d54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019d56:	79fb      	ldrb	r3, [r7, #7]
 8019d58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8019d5a:	79fb      	ldrb	r3, [r7, #7]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d102      	bne.n	8019d66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8019d60:	2301      	movs	r3, #1
 8019d62:	73fb      	strb	r3, [r7, #15]
 8019d64:	e001      	b.n	8019d6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8019d66:	2300      	movs	r3, #0
 8019d68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8019d6a:	7bfb      	ldrb	r3, [r7, #15]
 8019d6c:	461a      	mov	r2, r3
 8019d6e:	2120      	movs	r1, #32
 8019d70:	4803      	ldr	r0, [pc, #12]	; (8019d80 <MX_DriverVbusFS+0x34>)
 8019d72:	f7ef fe85 	bl	8009a80 <HAL_GPIO_WritePin>
}
 8019d76:	bf00      	nop
 8019d78:	3710      	adds	r7, #16
 8019d7a:	46bd      	mov	sp, r7
 8019d7c:	bd80      	pop	{r7, pc}
 8019d7e:	bf00      	nop
 8019d80:	40020c00 	.word	0x40020c00

08019d84 <arm_rfft_fast_init_f32>:
 8019d84:	084b      	lsrs	r3, r1, #1
 8019d86:	2b80      	cmp	r3, #128	; 0x80
 8019d88:	b430      	push	{r4, r5}
 8019d8a:	8201      	strh	r1, [r0, #16]
 8019d8c:	8003      	strh	r3, [r0, #0]
 8019d8e:	d070      	beq.n	8019e72 <arm_rfft_fast_init_f32+0xee>
 8019d90:	d916      	bls.n	8019dc0 <arm_rfft_fast_init_f32+0x3c>
 8019d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019d96:	d05f      	beq.n	8019e58 <arm_rfft_fast_init_f32+0xd4>
 8019d98:	d936      	bls.n	8019e08 <arm_rfft_fast_init_f32+0x84>
 8019d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019d9e:	d026      	beq.n	8019dee <arm_rfft_fast_init_f32+0x6a>
 8019da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019da4:	d112      	bne.n	8019dcc <arm_rfft_fast_init_f32+0x48>
 8019da6:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8019daa:	4c38      	ldr	r4, [pc, #224]	; (8019e8c <arm_rfft_fast_init_f32+0x108>)
 8019dac:	4938      	ldr	r1, [pc, #224]	; (8019e90 <arm_rfft_fast_init_f32+0x10c>)
 8019dae:	2300      	movs	r3, #0
 8019db0:	4a38      	ldr	r2, [pc, #224]	; (8019e94 <arm_rfft_fast_init_f32+0x110>)
 8019db2:	8185      	strh	r5, [r0, #12]
 8019db4:	6084      	str	r4, [r0, #8]
 8019db6:	6041      	str	r1, [r0, #4]
 8019db8:	6142      	str	r2, [r0, #20]
 8019dba:	4618      	mov	r0, r3
 8019dbc:	bc30      	pop	{r4, r5}
 8019dbe:	4770      	bx	lr
 8019dc0:	2b20      	cmp	r3, #32
 8019dc2:	d031      	beq.n	8019e28 <arm_rfft_fast_init_f32+0xa4>
 8019dc4:	2b40      	cmp	r3, #64	; 0x40
 8019dc6:	d006      	beq.n	8019dd6 <arm_rfft_fast_init_f32+0x52>
 8019dc8:	2b10      	cmp	r3, #16
 8019dca:	d039      	beq.n	8019e40 <arm_rfft_fast_init_f32+0xbc>
 8019dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8019dd0:	bc30      	pop	{r4, r5}
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	4770      	bx	lr
 8019dd6:	2538      	movs	r5, #56	; 0x38
 8019dd8:	4c2f      	ldr	r4, [pc, #188]	; (8019e98 <arm_rfft_fast_init_f32+0x114>)
 8019dda:	4930      	ldr	r1, [pc, #192]	; (8019e9c <arm_rfft_fast_init_f32+0x118>)
 8019ddc:	2300      	movs	r3, #0
 8019dde:	4a30      	ldr	r2, [pc, #192]	; (8019ea0 <arm_rfft_fast_init_f32+0x11c>)
 8019de0:	8185      	strh	r5, [r0, #12]
 8019de2:	6084      	str	r4, [r0, #8]
 8019de4:	6041      	str	r1, [r0, #4]
 8019de6:	6142      	str	r2, [r0, #20]
 8019de8:	4618      	mov	r0, r3
 8019dea:	bc30      	pop	{r4, r5}
 8019dec:	4770      	bx	lr
 8019dee:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8019df2:	4c2c      	ldr	r4, [pc, #176]	; (8019ea4 <arm_rfft_fast_init_f32+0x120>)
 8019df4:	492c      	ldr	r1, [pc, #176]	; (8019ea8 <arm_rfft_fast_init_f32+0x124>)
 8019df6:	2300      	movs	r3, #0
 8019df8:	4a2c      	ldr	r2, [pc, #176]	; (8019eac <arm_rfft_fast_init_f32+0x128>)
 8019dfa:	8185      	strh	r5, [r0, #12]
 8019dfc:	6084      	str	r4, [r0, #8]
 8019dfe:	6041      	str	r1, [r0, #4]
 8019e00:	6142      	str	r2, [r0, #20]
 8019e02:	4618      	mov	r0, r3
 8019e04:	bc30      	pop	{r4, r5}
 8019e06:	4770      	bx	lr
 8019e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019e0c:	d1de      	bne.n	8019dcc <arm_rfft_fast_init_f32+0x48>
 8019e0e:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8019e12:	4c27      	ldr	r4, [pc, #156]	; (8019eb0 <arm_rfft_fast_init_f32+0x12c>)
 8019e14:	4927      	ldr	r1, [pc, #156]	; (8019eb4 <arm_rfft_fast_init_f32+0x130>)
 8019e16:	2300      	movs	r3, #0
 8019e18:	4a27      	ldr	r2, [pc, #156]	; (8019eb8 <arm_rfft_fast_init_f32+0x134>)
 8019e1a:	8185      	strh	r5, [r0, #12]
 8019e1c:	6084      	str	r4, [r0, #8]
 8019e1e:	6041      	str	r1, [r0, #4]
 8019e20:	6142      	str	r2, [r0, #20]
 8019e22:	4618      	mov	r0, r3
 8019e24:	bc30      	pop	{r4, r5}
 8019e26:	4770      	bx	lr
 8019e28:	2530      	movs	r5, #48	; 0x30
 8019e2a:	4c24      	ldr	r4, [pc, #144]	; (8019ebc <arm_rfft_fast_init_f32+0x138>)
 8019e2c:	4924      	ldr	r1, [pc, #144]	; (8019ec0 <arm_rfft_fast_init_f32+0x13c>)
 8019e2e:	2300      	movs	r3, #0
 8019e30:	4a24      	ldr	r2, [pc, #144]	; (8019ec4 <arm_rfft_fast_init_f32+0x140>)
 8019e32:	8185      	strh	r5, [r0, #12]
 8019e34:	6084      	str	r4, [r0, #8]
 8019e36:	6041      	str	r1, [r0, #4]
 8019e38:	6142      	str	r2, [r0, #20]
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	bc30      	pop	{r4, r5}
 8019e3e:	4770      	bx	lr
 8019e40:	2514      	movs	r5, #20
 8019e42:	4c21      	ldr	r4, [pc, #132]	; (8019ec8 <arm_rfft_fast_init_f32+0x144>)
 8019e44:	4921      	ldr	r1, [pc, #132]	; (8019ecc <arm_rfft_fast_init_f32+0x148>)
 8019e46:	2300      	movs	r3, #0
 8019e48:	4a21      	ldr	r2, [pc, #132]	; (8019ed0 <arm_rfft_fast_init_f32+0x14c>)
 8019e4a:	8185      	strh	r5, [r0, #12]
 8019e4c:	6084      	str	r4, [r0, #8]
 8019e4e:	6041      	str	r1, [r0, #4]
 8019e50:	6142      	str	r2, [r0, #20]
 8019e52:	4618      	mov	r0, r3
 8019e54:	bc30      	pop	{r4, r5}
 8019e56:	4770      	bx	lr
 8019e58:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8019e5c:	4c1d      	ldr	r4, [pc, #116]	; (8019ed4 <arm_rfft_fast_init_f32+0x150>)
 8019e5e:	491e      	ldr	r1, [pc, #120]	; (8019ed8 <arm_rfft_fast_init_f32+0x154>)
 8019e60:	2300      	movs	r3, #0
 8019e62:	4a1e      	ldr	r2, [pc, #120]	; (8019edc <arm_rfft_fast_init_f32+0x158>)
 8019e64:	8185      	strh	r5, [r0, #12]
 8019e66:	6084      	str	r4, [r0, #8]
 8019e68:	6041      	str	r1, [r0, #4]
 8019e6a:	6142      	str	r2, [r0, #20]
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	bc30      	pop	{r4, r5}
 8019e70:	4770      	bx	lr
 8019e72:	25d0      	movs	r5, #208	; 0xd0
 8019e74:	4c1a      	ldr	r4, [pc, #104]	; (8019ee0 <arm_rfft_fast_init_f32+0x15c>)
 8019e76:	491b      	ldr	r1, [pc, #108]	; (8019ee4 <arm_rfft_fast_init_f32+0x160>)
 8019e78:	2300      	movs	r3, #0
 8019e7a:	4a1b      	ldr	r2, [pc, #108]	; (8019ee8 <arm_rfft_fast_init_f32+0x164>)
 8019e7c:	8185      	strh	r5, [r0, #12]
 8019e7e:	6084      	str	r4, [r0, #8]
 8019e80:	6041      	str	r1, [r0, #4]
 8019e82:	6142      	str	r2, [r0, #20]
 8019e84:	4618      	mov	r0, r3
 8019e86:	bc30      	pop	{r4, r5}
 8019e88:	4770      	bx	lr
 8019e8a:	bf00      	nop
 8019e8c:	0802df68 	.word	0x0802df68
 8019e90:	0801f160 	.word	0x0801f160
 8019e94:	080252d0 	.word	0x080252d0
 8019e98:	08023260 	.word	0x08023260
 8019e9c:	0802fd28 	.word	0x0802fd28
 8019ea0:	08032218 	.word	0x08032218
 8019ea4:	0802bc50 	.word	0x0802bc50
 8019ea8:	08029b50 	.word	0x08029b50
 8019eac:	080232d0 	.word	0x080232d0
 8019eb0:	08031ea8 	.word	0x08031ea8
 8019eb4:	080292d0 	.word	0x080292d0
 8019eb8:	0802ff28 	.word	0x0802ff28
 8019ebc:	0802cb08 	.word	0x0802cb08
 8019ec0:	0802bb50 	.word	0x0802bb50
 8019ec4:	08023160 	.word	0x08023160
 8019ec8:	0802ca60 	.word	0x0802ca60
 8019ecc:	08029ad0 	.word	0x08029ad0
 8019ed0:	0802ca88 	.word	0x0802ca88
 8019ed4:	08030728 	.word	0x08030728
 8019ed8:	0802cf68 	.word	0x0802cf68
 8019edc:	08030aa8 	.word	0x08030aa8
 8019ee0:	08032418 	.word	0x08032418
 8019ee4:	0802cb68 	.word	0x0802cb68
 8019ee8:	08031aa8 	.word	0x08031aa8

08019eec <arm_rfft_fast_f32>:
 8019eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ef0:	8a05      	ldrh	r5, [r0, #16]
 8019ef2:	4606      	mov	r6, r0
 8019ef4:	4617      	mov	r7, r2
 8019ef6:	460c      	mov	r4, r1
 8019ef8:	086d      	lsrs	r5, r5, #1
 8019efa:	8005      	strh	r5, [r0, #0]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d15e      	bne.n	8019fbe <arm_rfft_fast_f32+0xd2>
 8019f00:	461a      	mov	r2, r3
 8019f02:	2301      	movs	r3, #1
 8019f04:	f000 fbde 	bl	801a6c4 <arm_cfft_f32>
 8019f08:	edd4 7a00 	vldr	s15, [r4]
 8019f0c:	ed94 7a01 	vldr	s14, [r4, #4]
 8019f10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019f14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019f18:	8832      	ldrh	r2, [r6, #0]
 8019f1a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8019f1e:	6975      	ldr	r5, [r6, #20]
 8019f20:	3a01      	subs	r2, #1
 8019f22:	eeb0 3a46 	vmov.f32	s6, s12
 8019f26:	3510      	adds	r5, #16
 8019f28:	f107 0610 	add.w	r6, r7, #16
 8019f2c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019f30:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8019f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f38:	f104 0310 	add.w	r3, r4, #16
 8019f3c:	3808      	subs	r0, #8
 8019f3e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8019f42:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019f46:	ed87 7a00 	vstr	s14, [r7]
 8019f4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8019f4e:	ed90 7a02 	vldr	s14, [r0, #8]
 8019f52:	3a01      	subs	r2, #1
 8019f54:	ed53 6a02 	vldr	s13, [r3, #-8]
 8019f58:	f1a0 0008 	sub.w	r0, r0, #8
 8019f5c:	ed15 6a02 	vldr	s12, [r5, #-8]
 8019f60:	f103 0308 	add.w	r3, r3, #8
 8019f64:	ee77 7a66 	vsub.f32	s15, s14, s13
 8019f68:	edd0 3a05 	vldr	s7, [r0, #20]
 8019f6c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8019f70:	ee77 4a26 	vadd.f32	s9, s14, s13
 8019f74:	ed55 5a01 	vldr	s11, [r5, #-4]
 8019f78:	f106 0608 	add.w	r6, r6, #8
 8019f7c:	ee66 6a27 	vmul.f32	s13, s12, s15
 8019f80:	f105 0508 	add.w	r5, r5, #8
 8019f84:	ee33 4a85 	vadd.f32	s8, s7, s10
 8019f88:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8019f8c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8019f90:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019f94:	ee26 6a04 	vmul.f32	s12, s12, s8
 8019f98:	ee77 7a05 	vadd.f32	s15, s14, s10
 8019f9c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8019fa0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019fa4:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8019fa8:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019fac:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019fb0:	ed46 7a03 	vstr	s15, [r6, #-12]
 8019fb4:	ed06 7a04 	vstr	s14, [r6, #-16]
 8019fb8:	d1c9      	bne.n	8019f4e <arm_rfft_fast_f32+0x62>
 8019fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fbe:	edd1 7a00 	vldr	s15, [r1]
 8019fc2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8019fc6:	edd1 6a01 	vldr	s13, [r1, #4]
 8019fca:	1e68      	subs	r0, r5, #1
 8019fcc:	6975      	ldr	r5, [r6, #20]
 8019fce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019fd2:	00c1      	lsls	r1, r0, #3
 8019fd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019fd8:	ee27 7a23 	vmul.f32	s14, s14, s7
 8019fdc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8019fe0:	ed82 7a00 	vstr	s14, [r2]
 8019fe4:	edc2 7a01 	vstr	s15, [r2, #4]
 8019fe8:	b3e0      	cbz	r0, 801a064 <arm_rfft_fast_f32+0x178>
 8019fea:	3908      	subs	r1, #8
 8019fec:	f104 0210 	add.w	r2, r4, #16
 8019ff0:	3510      	adds	r5, #16
 8019ff2:	440c      	add	r4, r1
 8019ff4:	f107 0110 	add.w	r1, r7, #16
 8019ff8:	ed94 7a02 	vldr	s14, [r4, #8]
 8019ffc:	3801      	subs	r0, #1
 8019ffe:	ed52 6a02 	vldr	s13, [r2, #-8]
 801a002:	f1a4 0408 	sub.w	r4, r4, #8
 801a006:	ed15 6a02 	vldr	s12, [r5, #-8]
 801a00a:	f102 0208 	add.w	r2, r2, #8
 801a00e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801a012:	ed94 4a05 	vldr	s8, [r4, #20]
 801a016:	ed12 5a03 	vldr	s10, [r2, #-12]
 801a01a:	ee77 6a26 	vadd.f32	s13, s14, s13
 801a01e:	ed55 5a01 	vldr	s11, [r5, #-4]
 801a022:	f101 0108 	add.w	r1, r1, #8
 801a026:	ee26 3a27 	vmul.f32	s6, s12, s15
 801a02a:	f105 0508 	add.w	r5, r5, #8
 801a02e:	ee74 4a05 	vadd.f32	s9, s8, s10
 801a032:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801a036:	ee35 5a44 	vsub.f32	s10, s10, s8
 801a03a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801a03e:	ee26 6a24 	vmul.f32	s12, s12, s9
 801a042:	ee77 7a05 	vadd.f32	s15, s14, s10
 801a046:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801a04a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a04e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 801a052:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801a056:	ee27 7a23 	vmul.f32	s14, s14, s7
 801a05a:	ed41 7a03 	vstr	s15, [r1, #-12]
 801a05e:	ed01 7a04 	vstr	s14, [r1, #-16]
 801a062:	d1c9      	bne.n	8019ff8 <arm_rfft_fast_f32+0x10c>
 801a064:	461a      	mov	r2, r3
 801a066:	4639      	mov	r1, r7
 801a068:	4630      	mov	r0, r6
 801a06a:	2301      	movs	r3, #1
 801a06c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a070:	f000 bb28 	b.w	801a6c4 <arm_cfft_f32>

0801a074 <arm_cfft_radix8by2_f32>:
 801a074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a078:	4607      	mov	r7, r0
 801a07a:	4608      	mov	r0, r1
 801a07c:	ed2d 8b06 	vpush	{d8-d10}
 801a080:	f8b7 e000 	ldrh.w	lr, [r7]
 801a084:	687a      	ldr	r2, [r7, #4]
 801a086:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801a08a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 801a08e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 801a092:	f000 80b0 	beq.w	801a1f6 <arm_cfft_radix8by2_f32+0x182>
 801a096:	008b      	lsls	r3, r1, #2
 801a098:	3210      	adds	r2, #16
 801a09a:	f100 0610 	add.w	r6, r0, #16
 801a09e:	f108 0510 	add.w	r5, r8, #16
 801a0a2:	3310      	adds	r3, #16
 801a0a4:	18c4      	adds	r4, r0, r3
 801a0a6:	4443      	add	r3, r8
 801a0a8:	ed55 6a04 	vldr	s13, [r5, #-16]
 801a0ac:	f1be 0e01 	subs.w	lr, lr, #1
 801a0b0:	ed56 4a04 	vldr	s9, [r6, #-16]
 801a0b4:	f104 0410 	add.w	r4, r4, #16
 801a0b8:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a0bc:	f106 0610 	add.w	r6, r6, #16
 801a0c0:	ee74 9aa6 	vadd.f32	s19, s9, s13
 801a0c4:	ed55 7a02 	vldr	s15, [r5, #-8]
 801a0c8:	ed55 2a01 	vldr	s5, [r5, #-4]
 801a0cc:	ee74 4ae6 	vsub.f32	s9, s9, s13
 801a0d0:	ed53 0a04 	vldr	s1, [r3, #-16]
 801a0d4:	f102 0210 	add.w	r2, r2, #16
 801a0d8:	ed13 5a03 	vldr	s10, [r3, #-12]
 801a0dc:	f105 0510 	add.w	r5, r5, #16
 801a0e0:	ed13 3a02 	vldr	s6, [r3, #-8]
 801a0e4:	f103 0310 	add.w	r3, r3, #16
 801a0e8:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 801a0ec:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 801a0f0:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 801a0f4:	ee33 8a83 	vadd.f32	s16, s7, s6
 801a0f8:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 801a0fc:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 801a100:	ee34 0a06 	vadd.f32	s0, s8, s12
 801a104:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 801a108:	ee76 aa87 	vadd.f32	s21, s13, s14
 801a10c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 801a110:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801a114:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 801a118:	ee35 9aa0 	vadd.f32	s18, s11, s1
 801a11c:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 801a120:	ee71 8a05 	vadd.f32	s17, s2, s10
 801a124:	ee31 aaa7 	vadd.f32	s20, s3, s15
 801a128:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 801a12c:	ee72 9a22 	vadd.f32	s19, s4, s5
 801a130:	ee70 5ae5 	vsub.f32	s11, s1, s11
 801a134:	ee35 5a41 	vsub.f32	s10, s10, s2
 801a138:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 801a13c:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 801a140:	ee36 6a44 	vsub.f32	s12, s12, s8
 801a144:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 801a148:	ee71 1ae7 	vsub.f32	s3, s3, s15
 801a14c:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 801a150:	ee72 7a62 	vsub.f32	s15, s4, s5
 801a154:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 801a158:	ee73 2a63 	vsub.f32	s5, s6, s7
 801a15c:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 801a160:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 801a164:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 801a168:	ee24 3a84 	vmul.f32	s6, s9, s8
 801a16c:	ee27 2a26 	vmul.f32	s4, s14, s13
 801a170:	ee64 4aa6 	vmul.f32	s9, s9, s13
 801a174:	ee65 3aa6 	vmul.f32	s7, s11, s13
 801a178:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a17c:	ee65 5a84 	vmul.f32	s11, s11, s8
 801a180:	ee65 6a26 	vmul.f32	s13, s10, s13
 801a184:	ee25 5a04 	vmul.f32	s10, s10, s8
 801a188:	ee37 7a64 	vsub.f32	s14, s14, s9
 801a18c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a190:	ee33 4a02 	vadd.f32	s8, s6, s4
 801a194:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801a198:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 801a19c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 801a1a0:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 801a1a4:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 801a1a8:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 801a1ac:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 801a1b0:	ee61 4aa6 	vmul.f32	s9, s3, s13
 801a1b4:	ee27 4a87 	vmul.f32	s8, s15, s14
 801a1b8:	ee61 5a87 	vmul.f32	s11, s3, s14
 801a1bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a1c0:	ee22 5a87 	vmul.f32	s10, s5, s14
 801a1c4:	ee26 7a07 	vmul.f32	s14, s12, s14
 801a1c8:	ee26 6a26 	vmul.f32	s12, s12, s13
 801a1cc:	ee62 6aa6 	vmul.f32	s13, s5, s13
 801a1d0:	ee74 4a84 	vadd.f32	s9, s9, s8
 801a1d4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801a1d8:	ee35 6a46 	vsub.f32	s12, s10, s12
 801a1dc:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a1e0:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 801a1e4:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 801a1e8:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 801a1ec:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 801a1f0:	f47f af5a 	bne.w	801a0a8 <arm_cfft_radix8by2_f32+0x34>
 801a1f4:	687a      	ldr	r2, [r7, #4]
 801a1f6:	b28c      	uxth	r4, r1
 801a1f8:	2302      	movs	r3, #2
 801a1fa:	4621      	mov	r1, r4
 801a1fc:	f000 fbc2 	bl	801a984 <arm_radix8_butterfly_f32>
 801a200:	4621      	mov	r1, r4
 801a202:	687a      	ldr	r2, [r7, #4]
 801a204:	4640      	mov	r0, r8
 801a206:	2302      	movs	r3, #2
 801a208:	ecbd 8b06 	vpop	{d8-d10}
 801a20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a210:	f000 bbb8 	b.w	801a984 <arm_radix8_butterfly_f32>

0801a214 <arm_cfft_radix8by4_f32>:
 801a214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a218:	ed2d 8b06 	vpush	{d8-d10}
 801a21c:	8804      	ldrh	r4, [r0, #0]
 801a21e:	b08f      	sub	sp, #60	; 0x3c
 801a220:	ed91 6a00 	vldr	s12, [r1]
 801a224:	460a      	mov	r2, r1
 801a226:	0864      	lsrs	r4, r4, #1
 801a228:	ed91 7a01 	vldr	s14, [r1, #4]
 801a22c:	9101      	str	r1, [sp, #4]
 801a22e:	00a3      	lsls	r3, r4, #2
 801a230:	6841      	ldr	r1, [r0, #4]
 801a232:	0864      	lsrs	r4, r4, #1
 801a234:	900c      	str	r0, [sp, #48]	; 0x30
 801a236:	9205      	str	r2, [sp, #20]
 801a238:	f101 0610 	add.w	r6, r1, #16
 801a23c:	4625      	mov	r5, r4
 801a23e:	940b      	str	r4, [sp, #44]	; 0x2c
 801a240:	f101 0408 	add.w	r4, r1, #8
 801a244:	9602      	str	r6, [sp, #8]
 801a246:	9407      	str	r4, [sp, #28]
 801a248:	18d4      	adds	r4, r2, r3
 801a24a:	1eaa      	subs	r2, r5, #2
 801a24c:	f101 0518 	add.w	r5, r1, #24
 801a250:	18e0      	adds	r0, r4, r3
 801a252:	edd4 4a00 	vldr	s9, [r4]
 801a256:	ed94 4a01 	vldr	s8, [r4, #4]
 801a25a:	46a6      	mov	lr, r4
 801a25c:	edd0 6a00 	vldr	s13, [r0]
 801a260:	18c7      	adds	r7, r0, r3
 801a262:	edd0 7a01 	vldr	s15, [r0, #4]
 801a266:	46a0      	mov	r8, r4
 801a268:	ee76 5a26 	vadd.f32	s11, s12, s13
 801a26c:	ed97 5a00 	vldr	s10, [r7]
 801a270:	ee76 6a66 	vsub.f32	s13, s12, s13
 801a274:	4604      	mov	r4, r0
 801a276:	9506      	str	r5, [sp, #24]
 801a278:	4605      	mov	r5, r0
 801a27a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 801a27e:	900a      	str	r0, [sp, #40]	; 0x28
 801a280:	9801      	ldr	r0, [sp, #4]
 801a282:	ee37 6a27 	vadd.f32	s12, s14, s15
 801a286:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a28a:	ed97 3a01 	vldr	s6, [r7, #4]
 801a28e:	ee72 2a85 	vadd.f32	s5, s5, s10
 801a292:	46bc      	mov	ip, r7
 801a294:	ee76 3a84 	vadd.f32	s7, s13, s8
 801a298:	9704      	str	r7, [sp, #16]
 801a29a:	ee36 7a44 	vsub.f32	s14, s12, s8
 801a29e:	f8cd e00c 	str.w	lr, [sp, #12]
 801a2a2:	ee12 9a90 	vmov	r9, s5
 801a2a6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801a2aa:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801a2ae:	1f3e      	subs	r6, r7, #4
 801a2b0:	f840 9b08 	str.w	r9, [r0], #8
 801a2b4:	ee37 4ae4 	vsub.f32	s8, s15, s9
 801a2b8:	edde 2a01 	vldr	s5, [lr, #4]
 801a2bc:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801a2c0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801a2c4:	eddc 4a01 	vldr	s9, [ip, #4]
 801a2c8:	ee36 6a22 	vadd.f32	s12, s12, s5
 801a2cc:	9001      	str	r0, [sp, #4]
 801a2ce:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a2d2:	9805      	ldr	r0, [sp, #20]
 801a2d4:	ee13 9a90 	vmov	r9, s7
 801a2d8:	ee37 7a43 	vsub.f32	s14, s14, s6
 801a2dc:	ee36 6a24 	vadd.f32	s12, s12, s9
 801a2e0:	f1ae 0704 	sub.w	r7, lr, #4
 801a2e4:	ee74 4a05 	vadd.f32	s9, s8, s10
 801a2e8:	ee76 6a83 	vadd.f32	s13, s13, s6
 801a2ec:	ed80 6a01 	vstr	s12, [r0, #4]
 801a2f0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801a2f4:	f848 9b08 	str.w	r9, [r8], #8
 801a2f8:	edce 4a01 	vstr	s9, [lr, #4]
 801a2fc:	ee15 ea90 	vmov	lr, s11
 801a300:	f844 eb08 	str.w	lr, [r4], #8
 801a304:	ee16 ea90 	vmov	lr, s13
 801a308:	9408      	str	r4, [sp, #32]
 801a30a:	462c      	mov	r4, r5
 801a30c:	ed85 7a01 	vstr	s14, [r5, #4]
 801a310:	9d04      	ldr	r5, [sp, #16]
 801a312:	f84c eb08 	str.w	lr, [ip], #8
 801a316:	edc5 7a01 	vstr	s15, [r5, #4]
 801a31a:	0855      	lsrs	r5, r2, #1
 801a31c:	9509      	str	r5, [sp, #36]	; 0x24
 801a31e:	f000 8130 	beq.w	801a582 <arm_cfft_radix8by4_f32+0x36e>
 801a322:	9805      	ldr	r0, [sp, #20]
 801a324:	3b08      	subs	r3, #8
 801a326:	46ab      	mov	fp, r5
 801a328:	f1a4 020c 	sub.w	r2, r4, #12
 801a32c:	f100 0510 	add.w	r5, r0, #16
 801a330:	f101 0920 	add.w	r9, r1, #32
 801a334:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 801a338:	f8dd a008 	ldr.w	sl, [sp, #8]
 801a33c:	4433      	add	r3, r6
 801a33e:	3410      	adds	r4, #16
 801a340:	4660      	mov	r0, ip
 801a342:	4641      	mov	r1, r8
 801a344:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 801a348:	ed54 6a02 	vldr	s13, [r4, #-8]
 801a34c:	f1bb 0b01 	subs.w	fp, fp, #1
 801a350:	ed55 5a02 	vldr	s11, [r5, #-8]
 801a354:	f10a 0a08 	add.w	sl, sl, #8
 801a358:	edd1 7a00 	vldr	s15, [r1]
 801a35c:	f105 0508 	add.w	r5, r5, #8
 801a360:	ee75 3aa6 	vadd.f32	s7, s11, s13
 801a364:	edd0 2a00 	vldr	s5, [r0]
 801a368:	ed14 7a01 	vldr	s14, [r4, #-4]
 801a36c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 801a370:	ed55 6a03 	vldr	s13, [r5, #-12]
 801a374:	f1a2 0208 	sub.w	r2, r2, #8
 801a378:	ee73 4aa7 	vadd.f32	s9, s7, s15
 801a37c:	ed90 2a01 	vldr	s4, [r0, #4]
 801a380:	ee36 5a87 	vadd.f32	s10, s13, s14
 801a384:	ed91 6a01 	vldr	s12, [r1, #4]
 801a388:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801a38c:	f109 0910 	add.w	r9, r9, #16
 801a390:	ee74 6aa2 	vadd.f32	s13, s9, s5
 801a394:	f104 0408 	add.w	r4, r4, #8
 801a398:	ee73 3ae7 	vsub.f32	s7, s7, s15
 801a39c:	f10e 0e18 	add.w	lr, lr, #24
 801a3a0:	ee37 3a67 	vsub.f32	s6, s14, s15
 801a3a4:	f1a3 0308 	sub.w	r3, r3, #8
 801a3a8:	ed45 6a04 	vstr	s13, [r5, #-16]
 801a3ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a3b0:	edd1 6a01 	vldr	s13, [r1, #4]
 801a3b4:	ee75 1a86 	vadd.f32	s3, s11, s12
 801a3b8:	edd0 4a01 	vldr	s9, [r0, #4]
 801a3bc:	ee33 3a22 	vadd.f32	s6, s6, s5
 801a3c0:	ee75 6a26 	vadd.f32	s13, s10, s13
 801a3c4:	ee35 5a46 	vsub.f32	s10, s10, s12
 801a3c8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801a3cc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a3d0:	ee71 1ac2 	vsub.f32	s3, s3, s4
 801a3d4:	ee35 5a42 	vsub.f32	s10, s10, s4
 801a3d8:	ed45 6a03 	vstr	s13, [r5, #-12]
 801a3dc:	ee36 2a02 	vadd.f32	s4, s12, s4
 801a3e0:	edd6 7a00 	vldr	s15, [r6]
 801a3e4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 801a3e8:	ed97 1a00 	vldr	s2, [r7]
 801a3ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a3f0:	ed92 8a04 	vldr	s16, [r2, #16]
 801a3f4:	ee71 8a27 	vadd.f32	s17, s2, s15
 801a3f8:	ed93 aa04 	vldr	s20, [r3, #16]
 801a3fc:	ed16 7a01 	vldr	s14, [r6, #-4]
 801a400:	ee71 7a67 	vsub.f32	s15, s2, s15
 801a404:	ed57 0a01 	vldr	s1, [r7, #-4]
 801a408:	ee38 1a4a 	vsub.f32	s2, s16, s20
 801a40c:	ee38 6a88 	vadd.f32	s12, s17, s16
 801a410:	edd3 9a03 	vldr	s19, [r3, #12]
 801a414:	ee30 0a87 	vadd.f32	s0, s1, s14
 801a418:	ed92 9a03 	vldr	s18, [r2, #12]
 801a41c:	ee78 5ac8 	vsub.f32	s11, s17, s16
 801a420:	ee36 6a0a 	vadd.f32	s12, s12, s20
 801a424:	ee30 7ac7 	vsub.f32	s14, s1, s14
 801a428:	ee37 4ac9 	vsub.f32	s8, s15, s18
 801a42c:	ee16 ca10 	vmov	ip, s12
 801a430:	ee30 6a49 	vsub.f32	s12, s0, s18
 801a434:	ee77 4a01 	vadd.f32	s9, s14, s2
 801a438:	f847 c908 	str.w	ip, [r7], #-8
 801a43c:	ee34 4a29 	vadd.f32	s8, s8, s19
 801a440:	edd2 8a03 	vldr	s17, [r2, #12]
 801a444:	ee39 9ac9 	vsub.f32	s18, s19, s18
 801a448:	ed93 8a03 	vldr	s16, [r3, #12]
 801a44c:	ee71 0a47 	vsub.f32	s1, s2, s14
 801a450:	ee30 0a28 	vadd.f32	s0, s0, s17
 801a454:	ee39 1a67 	vsub.f32	s2, s18, s15
 801a458:	ee36 6a69 	vsub.f32	s12, s12, s19
 801a45c:	ee30 0a08 	vadd.f32	s0, s0, s16
 801a460:	ee75 5aca 	vsub.f32	s11, s11, s20
 801a464:	ed87 0a01 	vstr	s0, [r7, #4]
 801a468:	ed1a 0a04 	vldr	s0, [sl, #-16]
 801a46c:	ed5a 6a03 	vldr	s13, [sl, #-12]
 801a470:	ee21 8a80 	vmul.f32	s16, s3, s0
 801a474:	ee23 7a26 	vmul.f32	s14, s6, s13
 801a478:	ee64 7a26 	vmul.f32	s15, s8, s13
 801a47c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 801a480:	ee24 4a00 	vmul.f32	s8, s8, s0
 801a484:	ee23 3a00 	vmul.f32	s6, s6, s0
 801a488:	ee64 6aa6 	vmul.f32	s13, s9, s13
 801a48c:	ee24 0a80 	vmul.f32	s0, s9, s0
 801a490:	ee38 7a07 	vadd.f32	s14, s16, s14
 801a494:	ee76 6a84 	vadd.f32	s13, s13, s8
 801a498:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a49c:	ee33 3a61 	vsub.f32	s6, s6, s3
 801a4a0:	ee17 ca10 	vmov	ip, s14
 801a4a4:	f841 cb08 	str.w	ip, [r1], #8
 801a4a8:	ed01 3a01 	vstr	s6, [r1, #-4]
 801a4ac:	ed82 0a04 	vstr	s0, [r2, #16]
 801a4b0:	edc2 6a03 	vstr	s13, [r2, #12]
 801a4b4:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 801a4b8:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 801a4bc:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 801a4c0:	ee23 4aa6 	vmul.f32	s8, s7, s13
 801a4c4:	ee65 4a27 	vmul.f32	s9, s10, s15
 801a4c8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801a4cc:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801a4d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 801a4d4:	ee25 5a26 	vmul.f32	s10, s10, s13
 801a4d8:	ee66 6a26 	vmul.f32	s13, s12, s13
 801a4dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a4e0:	ee34 6a24 	vadd.f32	s12, s8, s9
 801a4e4:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801a4e8:	ee35 5a63 	vsub.f32	s10, s10, s7
 801a4ec:	ee17 ca90 	vmov	ip, s15
 801a4f0:	ed04 6a04 	vstr	s12, [r4, #-16]
 801a4f4:	ed04 5a03 	vstr	s10, [r4, #-12]
 801a4f8:	f846 c908 	str.w	ip, [r6], #-8
 801a4fc:	edc6 6a01 	vstr	s13, [r6, #4]
 801a500:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 801a504:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 801a508:	ee62 5a27 	vmul.f32	s11, s4, s15
 801a50c:	ee22 6a87 	vmul.f32	s12, s5, s14
 801a510:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a514:	ee62 2aa7 	vmul.f32	s5, s5, s15
 801a518:	ee61 6a07 	vmul.f32	s13, s2, s14
 801a51c:	ee20 7a87 	vmul.f32	s14, s1, s14
 801a520:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801a524:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a528:	ee35 6a86 	vadd.f32	s12, s11, s12
 801a52c:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801a530:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801a534:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a538:	ee16 ca10 	vmov	ip, s12
 801a53c:	f840 cb08 	str.w	ip, [r0], #8
 801a540:	ed40 2a01 	vstr	s5, [r0, #-4]
 801a544:	edc3 0a04 	vstr	s1, [r3, #16]
 801a548:	edc3 7a03 	vstr	s15, [r3, #12]
 801a54c:	f47f aefc 	bne.w	801a348 <arm_cfft_radix8by4_f32+0x134>
 801a550:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a552:	9802      	ldr	r0, [sp, #8]
 801a554:	00cb      	lsls	r3, r1, #3
 801a556:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 801a55a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801a55e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 801a562:	4498      	add	r8, r3
 801a564:	449c      	add	ip, r3
 801a566:	9102      	str	r1, [sp, #8]
 801a568:	9901      	ldr	r1, [sp, #4]
 801a56a:	4419      	add	r1, r3
 801a56c:	9101      	str	r1, [sp, #4]
 801a56e:	9907      	ldr	r1, [sp, #28]
 801a570:	4419      	add	r1, r3
 801a572:	9107      	str	r1, [sp, #28]
 801a574:	9908      	ldr	r1, [sp, #32]
 801a576:	4419      	add	r1, r3
 801a578:	9b06      	ldr	r3, [sp, #24]
 801a57a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a57e:	9108      	str	r1, [sp, #32]
 801a580:	9306      	str	r3, [sp, #24]
 801a582:	9a01      	ldr	r2, [sp, #4]
 801a584:	2304      	movs	r3, #4
 801a586:	9e08      	ldr	r6, [sp, #32]
 801a588:	edd2 7a00 	vldr	s15, [r2]
 801a58c:	ed96 7a00 	vldr	s14, [r6]
 801a590:	edd8 2a00 	vldr	s5, [r8]
 801a594:	ee77 5a87 	vadd.f32	s11, s15, s14
 801a598:	ed9c 3a00 	vldr	s6, [ip]
 801a59c:	ed92 6a01 	vldr	s12, [r2, #4]
 801a5a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801a5a4:	edd6 6a01 	vldr	s13, [r6, #4]
 801a5a8:	ee75 4aa2 	vadd.f32	s9, s11, s5
 801a5ac:	ed9c 2a01 	vldr	s4, [ip, #4]
 801a5b0:	ee36 5a26 	vadd.f32	s10, s12, s13
 801a5b4:	edd8 7a01 	vldr	s15, [r8, #4]
 801a5b8:	ee76 6a66 	vsub.f32	s13, s12, s13
 801a5bc:	9d02      	ldr	r5, [sp, #8]
 801a5be:	ee34 6a83 	vadd.f32	s12, s9, s6
 801a5c2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801a5c6:	ee37 4a27 	vadd.f32	s8, s14, s15
 801a5ca:	9805      	ldr	r0, [sp, #20]
 801a5cc:	ee76 4ae2 	vsub.f32	s9, s13, s5
 801a5d0:	4621      	mov	r1, r4
 801a5d2:	ed82 6a00 	vstr	s12, [r2]
 801a5d6:	ee35 6ae2 	vsub.f32	s12, s11, s5
 801a5da:	edd8 3a01 	vldr	s7, [r8, #4]
 801a5de:	ee75 5a67 	vsub.f32	s11, s10, s15
 801a5e2:	eddc 1a01 	vldr	s3, [ip, #4]
 801a5e6:	ee34 4a42 	vsub.f32	s8, s8, s4
 801a5ea:	ee75 3a23 	vadd.f32	s7, s10, s7
 801a5ee:	ee74 4a83 	vadd.f32	s9, s9, s6
 801a5f2:	ee76 6aa2 	vadd.f32	s13, s13, s5
 801a5f6:	ee33 5aa1 	vadd.f32	s10, s7, s3
 801a5fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a5fe:	ee36 6a43 	vsub.f32	s12, s12, s6
 801a602:	ed82 5a01 	vstr	s10, [r2, #4]
 801a606:	ee75 5ac2 	vsub.f32	s11, s11, s4
 801a60a:	9a07      	ldr	r2, [sp, #28]
 801a60c:	ee77 7a02 	vadd.f32	s15, s14, s4
 801a610:	ee36 7ac3 	vsub.f32	s14, s13, s6
 801a614:	edd2 2a00 	vldr	s5, [r2]
 801a618:	ed92 5a01 	vldr	s10, [r2, #4]
 801a61c:	ee64 3a22 	vmul.f32	s7, s8, s5
 801a620:	ee24 4a05 	vmul.f32	s8, s8, s10
 801a624:	ee24 5a85 	vmul.f32	s10, s9, s10
 801a628:	ee64 4aa2 	vmul.f32	s9, s9, s5
 801a62c:	ee33 5a85 	vadd.f32	s10, s7, s10
 801a630:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801a634:	ed88 5a00 	vstr	s10, [r8]
 801a638:	edc8 4a01 	vstr	s9, [r8, #4]
 801a63c:	edd5 4a01 	vldr	s9, [r5, #4]
 801a640:	edd5 6a00 	vldr	s13, [r5]
 801a644:	9d06      	ldr	r5, [sp, #24]
 801a646:	ee26 5a26 	vmul.f32	s10, s12, s13
 801a64a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801a64e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801a652:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801a656:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801a65a:	ee75 5a25 	vadd.f32	s11, s10, s11
 801a65e:	ed86 6a01 	vstr	s12, [r6, #4]
 801a662:	edc6 5a00 	vstr	s11, [r6]
 801a666:	edd5 5a01 	vldr	s11, [r5, #4]
 801a66a:	edd5 6a00 	vldr	s13, [r5]
 801a66e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a670:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801a674:	ee67 6a26 	vmul.f32	s13, s14, s13
 801a678:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a67c:	ee27 7a25 	vmul.f32	s14, s14, s11
 801a680:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801a684:	ee36 7a07 	vadd.f32	s14, s12, s14
 801a688:	edcc 7a01 	vstr	s15, [ip, #4]
 801a68c:	ed8c 7a00 	vstr	s14, [ip]
 801a690:	6872      	ldr	r2, [r6, #4]
 801a692:	f000 f977 	bl	801a984 <arm_radix8_butterfly_f32>
 801a696:	9803      	ldr	r0, [sp, #12]
 801a698:	4621      	mov	r1, r4
 801a69a:	6872      	ldr	r2, [r6, #4]
 801a69c:	2304      	movs	r3, #4
 801a69e:	f000 f971 	bl	801a984 <arm_radix8_butterfly_f32>
 801a6a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a6a4:	4621      	mov	r1, r4
 801a6a6:	6872      	ldr	r2, [r6, #4]
 801a6a8:	2304      	movs	r3, #4
 801a6aa:	f000 f96b 	bl	801a984 <arm_radix8_butterfly_f32>
 801a6ae:	4621      	mov	r1, r4
 801a6b0:	6872      	ldr	r2, [r6, #4]
 801a6b2:	2304      	movs	r3, #4
 801a6b4:	9804      	ldr	r0, [sp, #16]
 801a6b6:	b00f      	add	sp, #60	; 0x3c
 801a6b8:	ecbd 8b06 	vpop	{d8-d10}
 801a6bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c0:	f000 b960 	b.w	801a984 <arm_radix8_butterfly_f32>

0801a6c4 <arm_cfft_f32>:
 801a6c4:	2a01      	cmp	r2, #1
 801a6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6ca:	4606      	mov	r6, r0
 801a6cc:	4617      	mov	r7, r2
 801a6ce:	460c      	mov	r4, r1
 801a6d0:	4698      	mov	r8, r3
 801a6d2:	8805      	ldrh	r5, [r0, #0]
 801a6d4:	d053      	beq.n	801a77e <arm_cfft_f32+0xba>
 801a6d6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801a6da:	d04b      	beq.n	801a774 <arm_cfft_f32+0xb0>
 801a6dc:	d916      	bls.n	801a70c <arm_cfft_f32+0x48>
 801a6de:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801a6e2:	d01a      	beq.n	801a71a <arm_cfft_f32+0x56>
 801a6e4:	d95a      	bls.n	801a79c <arm_cfft_f32+0xd8>
 801a6e6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801a6ea:	d043      	beq.n	801a774 <arm_cfft_f32+0xb0>
 801a6ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 801a6f0:	d105      	bne.n	801a6fe <arm_cfft_f32+0x3a>
 801a6f2:	2301      	movs	r3, #1
 801a6f4:	6872      	ldr	r2, [r6, #4]
 801a6f6:	4629      	mov	r1, r5
 801a6f8:	4620      	mov	r0, r4
 801a6fa:	f000 f943 	bl	801a984 <arm_radix8_butterfly_f32>
 801a6fe:	f1b8 0f00 	cmp.w	r8, #0
 801a702:	d111      	bne.n	801a728 <arm_cfft_f32+0x64>
 801a704:	2f01      	cmp	r7, #1
 801a706:	d016      	beq.n	801a736 <arm_cfft_f32+0x72>
 801a708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a70c:	2d20      	cmp	r5, #32
 801a70e:	d031      	beq.n	801a774 <arm_cfft_f32+0xb0>
 801a710:	d948      	bls.n	801a7a4 <arm_cfft_f32+0xe0>
 801a712:	2d40      	cmp	r5, #64	; 0x40
 801a714:	d0ed      	beq.n	801a6f2 <arm_cfft_f32+0x2e>
 801a716:	2d80      	cmp	r5, #128	; 0x80
 801a718:	d1f1      	bne.n	801a6fe <arm_cfft_f32+0x3a>
 801a71a:	4621      	mov	r1, r4
 801a71c:	4630      	mov	r0, r6
 801a71e:	f7ff fca9 	bl	801a074 <arm_cfft_radix8by2_f32>
 801a722:	f1b8 0f00 	cmp.w	r8, #0
 801a726:	d0ed      	beq.n	801a704 <arm_cfft_f32+0x40>
 801a728:	68b2      	ldr	r2, [r6, #8]
 801a72a:	4620      	mov	r0, r4
 801a72c:	89b1      	ldrh	r1, [r6, #12]
 801a72e:	f7e5 fd6f 	bl	8000210 <arm_bitreversal_32>
 801a732:	2f01      	cmp	r7, #1
 801a734:	d1e8      	bne.n	801a708 <arm_cfft_f32+0x44>
 801a736:	ee07 5a90 	vmov	s15, r5
 801a73a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a742:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a746:	2d00      	cmp	r5, #0
 801a748:	d0de      	beq.n	801a708 <arm_cfft_f32+0x44>
 801a74a:	f104 0108 	add.w	r1, r4, #8
 801a74e:	2300      	movs	r3, #0
 801a750:	ed11 7a02 	vldr	s14, [r1, #-8]
 801a754:	3301      	adds	r3, #1
 801a756:	ed51 7a01 	vldr	s15, [r1, #-4]
 801a75a:	3108      	adds	r1, #8
 801a75c:	429d      	cmp	r5, r3
 801a75e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a762:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a766:	ed01 7a04 	vstr	s14, [r1, #-16]
 801a76a:	ed41 7a03 	vstr	s15, [r1, #-12]
 801a76e:	d1ef      	bne.n	801a750 <arm_cfft_f32+0x8c>
 801a770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a774:	4621      	mov	r1, r4
 801a776:	4630      	mov	r0, r6
 801a778:	f7ff fd4c 	bl	801a214 <arm_cfft_radix8by4_f32>
 801a77c:	e7bf      	b.n	801a6fe <arm_cfft_f32+0x3a>
 801a77e:	b1a5      	cbz	r5, 801a7aa <arm_cfft_f32+0xe6>
 801a780:	f101 030c 	add.w	r3, r1, #12
 801a784:	2200      	movs	r2, #0
 801a786:	ed53 7a02 	vldr	s15, [r3, #-8]
 801a78a:	3201      	adds	r2, #1
 801a78c:	3308      	adds	r3, #8
 801a78e:	eef1 7a67 	vneg.f32	s15, s15
 801a792:	4295      	cmp	r5, r2
 801a794:	ed43 7a04 	vstr	s15, [r3, #-16]
 801a798:	d1f5      	bne.n	801a786 <arm_cfft_f32+0xc2>
 801a79a:	e79c      	b.n	801a6d6 <arm_cfft_f32+0x12>
 801a79c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 801a7a0:	d0a7      	beq.n	801a6f2 <arm_cfft_f32+0x2e>
 801a7a2:	e7ac      	b.n	801a6fe <arm_cfft_f32+0x3a>
 801a7a4:	2d10      	cmp	r5, #16
 801a7a6:	d0b8      	beq.n	801a71a <arm_cfft_f32+0x56>
 801a7a8:	e7a9      	b.n	801a6fe <arm_cfft_f32+0x3a>
 801a7aa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801a7ae:	d896      	bhi.n	801a6de <arm_cfft_f32+0x1a>
 801a7b0:	e7ac      	b.n	801a70c <arm_cfft_f32+0x48>
 801a7b2:	bf00      	nop

0801a7b4 <arm_cmplx_mag_f32>:
 801a7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7b8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 801a7bc:	b084      	sub	sp, #16
 801a7be:	d07f      	beq.n	801a8c0 <arm_cmplx_mag_f32+0x10c>
 801a7c0:	f100 0420 	add.w	r4, r0, #32
 801a7c4:	f101 0510 	add.w	r5, r1, #16
 801a7c8:	4646      	mov	r6, r8
 801a7ca:	2700      	movs	r7, #0
 801a7cc:	e05a      	b.n	801a884 <arm_cmplx_mag_f32+0xd0>
 801a7ce:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801a7d2:	eeb4 0a40 	vcmp.f32	s0, s0
 801a7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7da:	f040 80a4 	bne.w	801a926 <arm_cmplx_mag_f32+0x172>
 801a7de:	ed05 0a04 	vstr	s0, [r5, #-16]
 801a7e2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801a7e6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 801a7ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a7ee:	ee20 0a00 	vmul.f32	s0, s0, s0
 801a7f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a7f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7fe:	f2c0 808f 	blt.w	801a920 <arm_cmplx_mag_f32+0x16c>
 801a802:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801a806:	eeb4 0a40 	vcmp.f32	s0, s0
 801a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a80e:	f040 80af 	bne.w	801a970 <arm_cmplx_mag_f32+0x1bc>
 801a812:	ed05 0a03 	vstr	s0, [r5, #-12]
 801a816:	ed54 7a04 	vldr	s15, [r4, #-16]
 801a81a:	ed14 0a03 	vldr	s0, [r4, #-12]
 801a81e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a822:	ee20 0a00 	vmul.f32	s0, s0, s0
 801a826:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a82a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a832:	db72      	blt.n	801a91a <arm_cmplx_mag_f32+0x166>
 801a834:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801a838:	eeb4 0a40 	vcmp.f32	s0, s0
 801a83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a840:	f040 808c 	bne.w	801a95c <arm_cmplx_mag_f32+0x1a8>
 801a844:	ed05 0a02 	vstr	s0, [r5, #-8]
 801a848:	ed54 7a02 	vldr	s15, [r4, #-8]
 801a84c:	ed14 0a01 	vldr	s0, [r4, #-4]
 801a850:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a854:	ee20 0a00 	vmul.f32	s0, s0, s0
 801a858:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a85c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a864:	db20      	blt.n	801a8a8 <arm_cmplx_mag_f32+0xf4>
 801a866:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801a86a:	eeb4 0a40 	vcmp.f32	s0, s0
 801a86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a872:	d169      	bne.n	801a948 <arm_cmplx_mag_f32+0x194>
 801a874:	3e01      	subs	r6, #1
 801a876:	ed05 0a01 	vstr	s0, [r5, #-4]
 801a87a:	f104 0420 	add.w	r4, r4, #32
 801a87e:	f105 0510 	add.w	r5, r5, #16
 801a882:	d019      	beq.n	801a8b8 <arm_cmplx_mag_f32+0x104>
 801a884:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 801a888:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 801a88c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a890:	ee20 0a00 	vmul.f32	s0, s0, s0
 801a894:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a0:	da95      	bge.n	801a7ce <arm_cmplx_mag_f32+0x1a>
 801a8a2:	f845 7c10 	str.w	r7, [r5, #-16]
 801a8a6:	e79c      	b.n	801a7e2 <arm_cmplx_mag_f32+0x2e>
 801a8a8:	3e01      	subs	r6, #1
 801a8aa:	f845 7c04 	str.w	r7, [r5, #-4]
 801a8ae:	f104 0420 	add.w	r4, r4, #32
 801a8b2:	f105 0510 	add.w	r5, r5, #16
 801a8b6:	d1e5      	bne.n	801a884 <arm_cmplx_mag_f32+0xd0>
 801a8b8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 801a8bc:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 801a8c0:	f012 0503 	ands.w	r5, r2, #3
 801a8c4:	d026      	beq.n	801a914 <arm_cmplx_mag_f32+0x160>
 801a8c6:	f100 0408 	add.w	r4, r0, #8
 801a8ca:	2600      	movs	r6, #0
 801a8cc:	e00c      	b.n	801a8e8 <arm_cmplx_mag_f32+0x134>
 801a8ce:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801a8d2:	eeb4 0a40 	vcmp.f32	s0, s0
 801a8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8da:	d12e      	bne.n	801a93a <arm_cmplx_mag_f32+0x186>
 801a8dc:	3d01      	subs	r5, #1
 801a8de:	ed01 0a01 	vstr	s0, [r1, #-4]
 801a8e2:	f104 0408 	add.w	r4, r4, #8
 801a8e6:	d015      	beq.n	801a914 <arm_cmplx_mag_f32+0x160>
 801a8e8:	ed54 7a02 	vldr	s15, [r4, #-8]
 801a8ec:	3104      	adds	r1, #4
 801a8ee:	ed14 0a01 	vldr	s0, [r4, #-4]
 801a8f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a8f6:	ee20 0a00 	vmul.f32	s0, s0, s0
 801a8fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a8fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a906:	dae2      	bge.n	801a8ce <arm_cmplx_mag_f32+0x11a>
 801a908:	3d01      	subs	r5, #1
 801a90a:	f841 6c04 	str.w	r6, [r1, #-4]
 801a90e:	f104 0408 	add.w	r4, r4, #8
 801a912:	d1e9      	bne.n	801a8e8 <arm_cmplx_mag_f32+0x134>
 801a914:	b004      	add	sp, #16
 801a916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a91a:	f845 7c08 	str.w	r7, [r5, #-8]
 801a91e:	e793      	b.n	801a848 <arm_cmplx_mag_f32+0x94>
 801a920:	f845 7c0c 	str.w	r7, [r5, #-12]
 801a924:	e777      	b.n	801a816 <arm_cmplx_mag_f32+0x62>
 801a926:	eeb0 0a67 	vmov.f32	s0, s15
 801a92a:	9203      	str	r2, [sp, #12]
 801a92c:	9102      	str	r1, [sp, #8]
 801a92e:	9001      	str	r0, [sp, #4]
 801a930:	f001 fd58 	bl	801c3e4 <sqrtf>
 801a934:	a801      	add	r0, sp, #4
 801a936:	c807      	ldmia	r0, {r0, r1, r2}
 801a938:	e751      	b.n	801a7de <arm_cmplx_mag_f32+0x2a>
 801a93a:	eeb0 0a67 	vmov.f32	s0, s15
 801a93e:	9101      	str	r1, [sp, #4]
 801a940:	f001 fd50 	bl	801c3e4 <sqrtf>
 801a944:	9901      	ldr	r1, [sp, #4]
 801a946:	e7c9      	b.n	801a8dc <arm_cmplx_mag_f32+0x128>
 801a948:	eeb0 0a67 	vmov.f32	s0, s15
 801a94c:	9203      	str	r2, [sp, #12]
 801a94e:	9102      	str	r1, [sp, #8]
 801a950:	9001      	str	r0, [sp, #4]
 801a952:	f001 fd47 	bl	801c3e4 <sqrtf>
 801a956:	a801      	add	r0, sp, #4
 801a958:	c807      	ldmia	r0, {r0, r1, r2}
 801a95a:	e78b      	b.n	801a874 <arm_cmplx_mag_f32+0xc0>
 801a95c:	eeb0 0a67 	vmov.f32	s0, s15
 801a960:	9203      	str	r2, [sp, #12]
 801a962:	9102      	str	r1, [sp, #8]
 801a964:	9001      	str	r0, [sp, #4]
 801a966:	f001 fd3d 	bl	801c3e4 <sqrtf>
 801a96a:	a801      	add	r0, sp, #4
 801a96c:	c807      	ldmia	r0, {r0, r1, r2}
 801a96e:	e769      	b.n	801a844 <arm_cmplx_mag_f32+0x90>
 801a970:	eeb0 0a67 	vmov.f32	s0, s15
 801a974:	9203      	str	r2, [sp, #12]
 801a976:	9102      	str	r1, [sp, #8]
 801a978:	9001      	str	r0, [sp, #4]
 801a97a:	f001 fd33 	bl	801c3e4 <sqrtf>
 801a97e:	a801      	add	r0, sp, #4
 801a980:	c807      	ldmia	r0, {r0, r1, r2}
 801a982:	e746      	b.n	801a812 <arm_cmplx_mag_f32+0x5e>

0801a984 <arm_radix8_butterfly_f32>:
 801a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a988:	469e      	mov	lr, r3
 801a98a:	4603      	mov	r3, r0
 801a98c:	468a      	mov	sl, r1
 801a98e:	468b      	mov	fp, r1
 801a990:	3304      	adds	r3, #4
 801a992:	ed2d 8b10 	vpush	{d8-d15}
 801a996:	469c      	mov	ip, r3
 801a998:	b09d      	sub	sp, #116	; 0x74
 801a99a:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 801aca8 <arm_radix8_butterfly_f32+0x324>
 801a99e:	9019      	str	r0, [sp, #100]	; 0x64
 801a9a0:	921a      	str	r2, [sp, #104]	; 0x68
 801a9a2:	931b      	str	r3, [sp, #108]	; 0x6c
 801a9a4:	ea4f 03db 	mov.w	r3, fp, lsr #3
 801a9a8:	f04f 0800 	mov.w	r8, #0
 801a9ac:	461a      	mov	r2, r3
 801a9ae:	9311      	str	r3, [sp, #68]	; 0x44
 801a9b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801a9b4:	4611      	mov	r1, r2
 801a9b6:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801a9ba:	9300      	str	r3, [sp, #0]
 801a9bc:	0053      	lsls	r3, r2, #1
 801a9be:	18d5      	adds	r5, r2, r3
 801a9c0:	9301      	str	r3, [sp, #4]
 801a9c2:	0113      	lsls	r3, r2, #4
 801a9c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a9c6:	194c      	adds	r4, r1, r5
 801a9c8:	eb02 0609 	add.w	r6, r2, r9
 801a9cc:	9302      	str	r3, [sp, #8]
 801a9ce:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801a9d2:	4613      	mov	r3, r2
 801a9d4:	190a      	adds	r2, r1, r4
 801a9d6:	eb06 0709 	add.w	r7, r6, r9
 801a9da:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a9de:	1888      	adds	r0, r1, r2
 801a9e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801a9e4:	4401      	add	r1, r0
 801a9e6:	3204      	adds	r2, #4
 801a9e8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801a9ec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801a9f0:	9b00      	ldr	r3, [sp, #0]
 801a9f2:	3104      	adds	r1, #4
 801a9f4:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801a9f8:	44d8      	add	r8, fp
 801a9fa:	ed90 7a00 	vldr	s14, [r0]
 801a9fe:	ed94 5a00 	vldr	s10, [r4]
 801aa02:	45c2      	cmp	sl, r8
 801aa04:	edd7 3a00 	vldr	s7, [r7]
 801aa08:	ed96 6a00 	vldr	s12, [r6]
 801aa0c:	ee37 1a85 	vadd.f32	s2, s15, s10
 801aa10:	ed52 6a01 	vldr	s13, [r2, #-4]
 801aa14:	ee73 4a87 	vadd.f32	s9, s7, s14
 801aa18:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801aa1c:	edd5 7a00 	vldr	s15, [r5]
 801aa20:	ee73 3ac7 	vsub.f32	s7, s7, s14
 801aa24:	ed11 7a01 	vldr	s14, [r1, #-4]
 801aa28:	ee36 2a26 	vadd.f32	s4, s12, s13
 801aa2c:	ee37 4a87 	vadd.f32	s8, s15, s14
 801aa30:	ee76 6a66 	vsub.f32	s13, s12, s13
 801aa34:	ee71 5a24 	vadd.f32	s11, s2, s9
 801aa38:	ee32 6a04 	vadd.f32	s12, s4, s8
 801aa3c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801aa40:	ee31 1a64 	vsub.f32	s2, s2, s9
 801aa44:	ee75 4a86 	vadd.f32	s9, s11, s12
 801aa48:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801aa4c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 801aa50:	ed4c 4a01 	vstr	s9, [ip, #-4]
 801aa54:	ee32 2a44 	vsub.f32	s4, s4, s8
 801aa58:	ee67 7a89 	vmul.f32	s15, s15, s18
 801aa5c:	ed94 0a01 	vldr	s0, [r4, #4]
 801aa60:	edc4 5a00 	vstr	s11, [r4]
 801aa64:	ee36 7a87 	vadd.f32	s14, s13, s14
 801aa68:	edd6 5a01 	vldr	s11, [r6, #4]
 801aa6c:	edd5 2a01 	vldr	s5, [r5, #4]
 801aa70:	ee75 1a27 	vadd.f32	s3, s10, s15
 801aa74:	ed92 4a00 	vldr	s8, [r2]
 801aa78:	ee75 7a67 	vsub.f32	s15, s10, s15
 801aa7c:	edd1 4a00 	vldr	s9, [r1]
 801aa80:	ee27 7a09 	vmul.f32	s14, s14, s18
 801aa84:	ee35 3ac4 	vsub.f32	s6, s11, s8
 801aa88:	ed9c 6a00 	vldr	s12, [ip]
 801aa8c:	ee72 6ae4 	vsub.f32	s13, s5, s9
 801aa90:	edd0 0a01 	vldr	s1, [r0, #4]
 801aa94:	ed97 5a01 	vldr	s10, [r7, #4]
 801aa98:	ee35 4a84 	vadd.f32	s8, s11, s8
 801aa9c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 801aaa0:	ee73 5a26 	vadd.f32	s11, s6, s13
 801aaa4:	ee76 2a00 	vadd.f32	s5, s12, s0
 801aaa8:	ee73 6a66 	vsub.f32	s13, s6, s13
 801aaac:	ee36 6a40 	vsub.f32	s12, s12, s0
 801aab0:	ee35 0a20 	vadd.f32	s0, s10, s1
 801aab4:	ee65 5a89 	vmul.f32	s11, s11, s18
 801aab8:	ee35 5a60 	vsub.f32	s10, s10, s1
 801aabc:	ee32 3a80 	vadd.f32	s6, s5, s0
 801aac0:	ee74 0a24 	vadd.f32	s1, s8, s9
 801aac4:	ee66 6a89 	vmul.f32	s13, s13, s18
 801aac8:	ee74 4a64 	vsub.f32	s9, s8, s9
 801aacc:	ee32 4ac0 	vsub.f32	s8, s5, s0
 801aad0:	ee75 2a25 	vadd.f32	s5, s10, s11
 801aad4:	ee33 0a20 	vadd.f32	s0, s6, s1
 801aad8:	ee75 5a65 	vsub.f32	s11, s10, s11
 801aadc:	ee33 3a60 	vsub.f32	s6, s6, s1
 801aae0:	ee36 5a26 	vadd.f32	s10, s12, s13
 801aae4:	ed8c 0a00 	vstr	s0, [ip]
 801aae8:	ee76 6a66 	vsub.f32	s13, s12, s13
 801aaec:	449c      	add	ip, r3
 801aaee:	ee33 6a87 	vadd.f32	s12, s7, s14
 801aaf2:	ed84 3a01 	vstr	s6, [r4, #4]
 801aaf6:	ee33 7ac7 	vsub.f32	s14, s7, s14
 801aafa:	441c      	add	r4, r3
 801aafc:	ee71 3a24 	vadd.f32	s7, s2, s9
 801ab00:	ee71 4a64 	vsub.f32	s9, s2, s9
 801ab04:	ee31 3aa2 	vadd.f32	s6, s3, s5
 801ab08:	edc7 3a00 	vstr	s7, [r7]
 801ab0c:	ee34 1a42 	vsub.f32	s2, s8, s4
 801ab10:	edc0 4a00 	vstr	s9, [r0]
 801ab14:	ee77 3aa5 	vadd.f32	s7, s15, s11
 801ab18:	ee75 4a46 	vsub.f32	s9, s10, s12
 801ab1c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801ab20:	ed87 1a01 	vstr	s2, [r7, #4]
 801ab24:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801ab28:	441f      	add	r7, r3
 801ab2a:	ee32 4a04 	vadd.f32	s8, s4, s8
 801ab2e:	ee71 1ae2 	vsub.f32	s3, s3, s5
 801ab32:	ee36 6a05 	vadd.f32	s12, s12, s10
 801ab36:	ee37 7a26 	vadd.f32	s14, s14, s13
 801ab3a:	ed80 4a01 	vstr	s8, [r0, #4]
 801ab3e:	ed86 3a00 	vstr	s6, [r6]
 801ab42:	4418      	add	r0, r3
 801ab44:	ed41 1a01 	vstr	s3, [r1, #-4]
 801ab48:	ed42 3a01 	vstr	s7, [r2, #-4]
 801ab4c:	edc5 7a00 	vstr	s15, [r5]
 801ab50:	edc6 4a01 	vstr	s9, [r6, #4]
 801ab54:	441e      	add	r6, r3
 801ab56:	ed81 6a00 	vstr	s12, [r1]
 801ab5a:	4419      	add	r1, r3
 801ab5c:	edc2 5a00 	vstr	s11, [r2]
 801ab60:	441a      	add	r2, r3
 801ab62:	ed85 7a01 	vstr	s14, [r5, #4]
 801ab66:	441d      	add	r5, r3
 801ab68:	f63f af44 	bhi.w	801a9f4 <arm_radix8_butterfly_f32+0x70>
 801ab6c:	9300      	str	r3, [sp, #0]
 801ab6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ab70:	2b07      	cmp	r3, #7
 801ab72:	f240 81f4 	bls.w	801af5e <arm_radix8_butterfly_f32+0x5da>
 801ab76:	9901      	ldr	r1, [sp, #4]
 801ab78:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801ab7c:	9d02      	ldr	r5, [sp, #8]
 801ab7e:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 801ab82:	3101      	adds	r1, #1
 801ab84:	eb04 000e 	add.w	r0, r4, lr
 801ab88:	00e4      	lsls	r4, r4, #3
 801ab8a:	3508      	adds	r5, #8
 801ab8c:	4419      	add	r1, r3
 801ab8e:	eb00 0c0e 	add.w	ip, r0, lr
 801ab92:	9413      	str	r4, [sp, #76]	; 0x4c
 801ab94:	00c0      	lsls	r0, r0, #3
 801ab96:	185e      	adds	r6, r3, r1
 801ab98:	4617      	mov	r7, r2
 801ab9a:	9218      	str	r2, [sp, #96]	; 0x60
 801ab9c:	f109 0908 	add.w	r9, r9, #8
 801aba0:	199c      	adds	r4, r3, r6
 801aba2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aba4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801aba6:	9012      	str	r0, [sp, #72]	; 0x48
 801aba8:	195d      	adds	r5, r3, r5
 801abaa:	9811      	ldr	r0, [sp, #68]	; 0x44
 801abac:	443a      	add	r2, r7
 801abae:	950c      	str	r5, [sp, #48]	; 0x30
 801abb0:	4698      	mov	r8, r3
 801abb2:	4420      	add	r0, r4
 801abb4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801abb6:	19d7      	adds	r7, r2, r7
 801abb8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801abbc:	4405      	add	r5, r0
 801abbe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801abc2:	9710      	str	r7, [sp, #64]	; 0x40
 801abc4:	eb0c 070e 	add.w	r7, ip, lr
 801abc8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801abcc:	3404      	adds	r4, #4
 801abce:	3004      	adds	r0, #4
 801abd0:	44c8      	add	r8, r9
 801abd2:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 801abd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801abd8:	940a      	str	r4, [sp, #40]	; 0x28
 801abda:	9009      	str	r0, [sp, #36]	; 0x24
 801abdc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801abe0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801abe2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801abe6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801abe8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801abec:	eb07 080e 	add.w	r8, r7, lr
 801abf0:	eb04 0900 	add.w	r9, r4, r0
 801abf4:	00f8      	lsls	r0, r7, #3
 801abf6:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 801abfa:	3504      	adds	r5, #4
 801abfc:	4607      	mov	r7, r0
 801abfe:	9017      	str	r0, [sp, #92]	; 0x5c
 801ac00:	910b      	str	r1, [sp, #44]	; 0x2c
 801ac02:	4618      	mov	r0, r3
 801ac04:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 801ac08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ac0a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801ac0e:	18e3      	adds	r3, r4, r3
 801ac10:	9508      	str	r5, [sp, #32]
 801ac12:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ac14:	910e      	str	r1, [sp, #56]	; 0x38
 801ac16:	4621      	mov	r1, r4
 801ac18:	eb04 0805 	add.w	r8, r4, r5
 801ac1c:	9304      	str	r3, [sp, #16]
 801ac1e:	19e5      	adds	r5, r4, r7
 801ac20:	ea4f 130e 	mov.w	r3, lr, lsl #4
 801ac24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac26:	9316      	str	r3, [sp, #88]	; 0x58
 801ac28:	190b      	adds	r3, r1, r4
 801ac2a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ac2c:	9505      	str	r5, [sp, #20]
 801ac2e:	9303      	str	r3, [sp, #12]
 801ac30:	f100 0308 	add.w	r3, r0, #8
 801ac34:	9707      	str	r7, [sp, #28]
 801ac36:	4638      	mov	r0, r7
 801ac38:	930f      	str	r3, [sp, #60]	; 0x3c
 801ac3a:	2301      	movs	r3, #1
 801ac3c:	9306      	str	r3, [sp, #24]
 801ac3e:	9b00      	ldr	r3, [sp, #0]
 801ac40:	ed90 fa00 	vldr	s30, [r0]
 801ac44:	edd0 ba01 	vldr	s23, [r0, #4]
 801ac48:	9803      	ldr	r0, [sp, #12]
 801ac4a:	9903      	ldr	r1, [sp, #12]
 801ac4c:	ed90 ba01 	vldr	s22, [r0, #4]
 801ac50:	9804      	ldr	r0, [sp, #16]
 801ac52:	edd1 ea00 	vldr	s29, [r1]
 801ac56:	edd0 aa01 	vldr	s21, [r0, #4]
 801ac5a:	9805      	ldr	r0, [sp, #20]
 801ac5c:	9905      	ldr	r1, [sp, #20]
 801ac5e:	edd0 7a01 	vldr	s15, [r0, #4]
 801ac62:	ed91 da00 	vldr	s26, [r1]
 801ac66:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ac68:	9c04      	ldr	r4, [sp, #16]
 801ac6a:	edcd 7a01 	vstr	s15, [sp, #4]
 801ac6e:	edd8 7a01 	vldr	s15, [r8, #4]
 801ac72:	9100      	str	r1, [sp, #0]
 801ac74:	edd2 fa00 	vldr	s31, [r2]
 801ac78:	ed94 ea00 	vldr	s28, [r4]
 801ac7c:	ed92 ca01 	vldr	s24, [r2, #4]
 801ac80:	f8dd e020 	ldr.w	lr, [sp, #32]
 801ac84:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ac86:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801ac88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ac8a:	edd9 da00 	vldr	s27, [r9]
 801ac8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ac90:	edd8 ca00 	vldr	s25, [r8]
 801ac94:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ac96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac98:	f8dd c018 	ldr.w	ip, [sp, #24]
 801ac9c:	ed99 aa01 	vldr	s20, [r9, #4]
 801aca0:	edcd 7a02 	vstr	s15, [sp, #8]
 801aca4:	9800      	ldr	r0, [sp, #0]
 801aca6:	e001      	b.n	801acac <arm_radix8_butterfly_f32+0x328>
 801aca8:	3f3504f3 	.word	0x3f3504f3
 801acac:	edd5 3a00 	vldr	s7, [r5]
 801acb0:	44dc      	add	ip, fp
 801acb2:	ed91 7a00 	vldr	s14, [r1]
 801acb6:	edd4 8a00 	vldr	s17, [r4]
 801acba:	45e2      	cmp	sl, ip
 801acbc:	ed57 7a01 	vldr	s15, [r7, #-4]
 801acc0:	ed90 5a00 	vldr	s10, [r0]
 801acc4:	ed56 5a01 	vldr	s11, [r6, #-4]
 801acc8:	ee38 6aa7 	vadd.f32	s12, s17, s15
 801accc:	ed92 1a00 	vldr	s2, [r2]
 801acd0:	ee78 4ae7 	vsub.f32	s9, s17, s15
 801acd4:	ed1e 4a01 	vldr	s8, [lr, #-4]
 801acd8:	ee75 9a25 	vadd.f32	s19, s10, s11
 801acdc:	ee31 3a07 	vadd.f32	s6, s2, s14
 801ace0:	ed92 8a01 	vldr	s16, [r2, #4]
 801ace4:	ee73 6a84 	vadd.f32	s13, s7, s8
 801ace8:	ee75 5a65 	vsub.f32	s11, s10, s11
 801acec:	ee33 4ac4 	vsub.f32	s8, s7, s8
 801acf0:	ee73 1a06 	vadd.f32	s3, s6, s12
 801acf4:	ee39 5aa6 	vadd.f32	s10, s19, s13
 801acf8:	ee75 7a84 	vadd.f32	s15, s11, s8
 801acfc:	ee31 1a47 	vsub.f32	s2, s2, s14
 801ad00:	ee31 7a85 	vadd.f32	s14, s3, s10
 801ad04:	ee67 7a89 	vmul.f32	s15, s15, s18
 801ad08:	ee33 3a46 	vsub.f32	s6, s6, s12
 801ad0c:	ed82 7a00 	vstr	s14, [r2]
 801ad10:	ee79 9ae6 	vsub.f32	s19, s19, s13
 801ad14:	ed96 6a00 	vldr	s12, [r6]
 801ad18:	ee34 2aa7 	vadd.f32	s4, s9, s15
 801ad1c:	edd5 3a01 	vldr	s7, [r5, #4]
 801ad20:	ee74 8ae7 	vsub.f32	s17, s9, s15
 801ad24:	ed90 7a01 	vldr	s14, [r0, #4]
 801ad28:	ee35 4ac4 	vsub.f32	s8, s11, s8
 801ad2c:	edde 4a00 	vldr	s9, [lr]
 801ad30:	ee31 5ac5 	vsub.f32	s10, s3, s10
 801ad34:	ee77 2a46 	vsub.f32	s5, s14, s12
 801ad38:	edd1 6a01 	vldr	s13, [r1, #4]
 801ad3c:	ee73 7ae4 	vsub.f32	s15, s7, s9
 801ad40:	edd7 0a00 	vldr	s1, [r7]
 801ad44:	ee77 5a06 	vadd.f32	s11, s14, s12
 801ad48:	ed94 7a01 	vldr	s14, [r4, #4]
 801ad4c:	ee33 6aa4 	vadd.f32	s12, s7, s9
 801ad50:	ee32 0ae7 	vsub.f32	s0, s5, s15
 801ad54:	ee78 4a66 	vsub.f32	s9, s16, s13
 801ad58:	ee78 3a26 	vadd.f32	s7, s16, s13
 801ad5c:	ee72 2aa7 	vadd.f32	s5, s5, s15
 801ad60:	ee77 6a20 	vadd.f32	s13, s14, s1
 801ad64:	ee24 4a09 	vmul.f32	s8, s8, s18
 801ad68:	ee37 7a60 	vsub.f32	s14, s14, s1
 801ad6c:	ee20 8a09 	vmul.f32	s16, s0, s18
 801ad70:	ee75 0a86 	vadd.f32	s1, s11, s12
 801ad74:	ee33 0aa6 	vadd.f32	s0, s7, s13
 801ad78:	ee62 2a89 	vmul.f32	s5, s5, s18
 801ad7c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801ad80:	ee73 3ae6 	vsub.f32	s7, s7, s13
 801ad84:	ee77 7a62 	vsub.f32	s15, s14, s5
 801ad88:	ee74 5a88 	vadd.f32	s11, s9, s16
 801ad8c:	ee34 8ac8 	vsub.f32	s16, s9, s16
 801ad90:	ee77 4a22 	vadd.f32	s9, s14, s5
 801ad94:	ee71 2a04 	vadd.f32	s5, s2, s8
 801ad98:	ee31 7a44 	vsub.f32	s14, s2, s8
 801ad9c:	ee30 1a60 	vsub.f32	s2, s0, s1
 801ada0:	ee73 1a06 	vadd.f32	s3, s6, s12
 801ada4:	ee33 6a46 	vsub.f32	s12, s6, s12
 801ada8:	ee33 3ae9 	vsub.f32	s6, s7, s19
 801adac:	ee79 6aa3 	vadd.f32	s13, s19, s7
 801adb0:	ee38 4a68 	vsub.f32	s8, s16, s17
 801adb4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 801adb8:	ee72 5a25 	vadd.f32	s11, s4, s11
 801adbc:	ee32 2aa4 	vadd.f32	s4, s5, s9
 801adc0:	ee72 4ae4 	vsub.f32	s9, s5, s9
 801adc4:	ee77 2a27 	vadd.f32	s5, s14, s15
 801adc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801adcc:	ee78 7a88 	vadd.f32	s15, s17, s16
 801add0:	ee6e 8a05 	vmul.f32	s17, s28, s10
 801add4:	ee2a 8a81 	vmul.f32	s16, s21, s2
 801add8:	ee2a 5a85 	vmul.f32	s10, s21, s10
 801addc:	ee2e 1a01 	vmul.f32	s2, s28, s2
 801ade0:	ee6f 9a21 	vmul.f32	s19, s30, s3
 801ade4:	ee70 0a20 	vadd.f32	s1, s0, s1
 801ade8:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 801adec:	ee2b 0a83 	vmul.f32	s0, s23, s6
 801adf0:	ee2f 3a03 	vmul.f32	s6, s30, s6
 801adf4:	edc2 0a01 	vstr	s1, [r2, #4]
 801adf8:	ee38 8a88 	vadd.f32	s16, s17, s16
 801adfc:	441a      	add	r2, r3
 801adfe:	ee6c 8a23 	vmul.f32	s17, s24, s7
 801ae02:	ee31 5a45 	vsub.f32	s10, s2, s10
 801ae06:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 801ae0a:	ed81 8a00 	vstr	s16, [r1]
 801ae0e:	ee39 0a80 	vadd.f32	s0, s19, s0
 801ae12:	ee33 3a61 	vsub.f32	s6, s6, s3
 801ae16:	ed81 5a01 	vstr	s10, [r1, #4]
 801ae1a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 801ae1e:	edcd 3a00 	vstr	s7, [sp]
 801ae22:	ed9d 5a02 	vldr	s10, [sp, #8]
 801ae26:	ee2d 8a06 	vmul.f32	s16, s26, s12
 801ae2a:	eddd 3a01 	vldr	s7, [sp, #4]
 801ae2e:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 801ae32:	ed84 0a00 	vstr	s0, [r4]
 801ae36:	ee65 4a24 	vmul.f32	s9, s10, s9
 801ae3a:	ed84 3a01 	vstr	s6, [r4, #4]
 801ae3e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 801ae42:	ee23 6a86 	vmul.f32	s12, s7, s12
 801ae46:	eddd 3a00 	vldr	s7, [sp]
 801ae4a:	ee25 5a25 	vmul.f32	s10, s10, s11
 801ae4e:	4419      	add	r1, r3
 801ae50:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 801ae54:	441c      	add	r4, r3
 801ae56:	ee6a 1a04 	vmul.f32	s3, s20, s8
 801ae5a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801ae5e:	ee2e 3a87 	vmul.f32	s6, s29, s14
 801ae62:	ee6b 8a27 	vmul.f32	s17, s22, s15
 801ae66:	ee2c 2a02 	vmul.f32	s4, s24, s4
 801ae6a:	ee6d 6a26 	vmul.f32	s13, s26, s13
 801ae6e:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 801ae72:	ee6a 2a22 	vmul.f32	s5, s20, s5
 801ae76:	ee2d 4a84 	vmul.f32	s8, s27, s8
 801ae7a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 801ae7e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 801ae82:	ee73 3ac2 	vsub.f32	s7, s7, s4
 801ae86:	ee38 8a01 	vadd.f32	s16, s16, s2
 801ae8a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801ae8e:	ee39 5a85 	vadd.f32	s10, s19, s10
 801ae92:	ee75 4ae4 	vsub.f32	s9, s11, s9
 801ae96:	ed07 8a01 	vstr	s16, [r7, #-4]
 801ae9a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801ae9e:	ed87 6a00 	vstr	s12, [r7]
 801aea2:	ee74 2a62 	vsub.f32	s5, s8, s5
 801aea6:	edc0 0a00 	vstr	s1, [r0]
 801aeaa:	ee33 3a28 	vadd.f32	s6, s6, s17
 801aeae:	edc0 3a01 	vstr	s7, [r0, #4]
 801aeb2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801aeb6:	ed0e 5a01 	vstr	s10, [lr, #-4]
 801aeba:	edce 4a00 	vstr	s9, [lr]
 801aebe:	4418      	add	r0, r3
 801aec0:	ed06 0a01 	vstr	s0, [r6, #-4]
 801aec4:	441f      	add	r7, r3
 801aec6:	edc6 2a00 	vstr	s5, [r6]
 801aeca:	449e      	add	lr, r3
 801aecc:	ed85 3a00 	vstr	s6, [r5]
 801aed0:	441e      	add	r6, r3
 801aed2:	ed85 7a01 	vstr	s14, [r5, #4]
 801aed6:	441d      	add	r5, r3
 801aed8:	f63f aee8 	bhi.w	801acac <arm_radix8_butterfly_f32+0x328>
 801aedc:	9a06      	ldr	r2, [sp, #24]
 801aede:	9816      	ldr	r0, [sp, #88]	; 0x58
 801aee0:	3201      	adds	r2, #1
 801aee2:	4611      	mov	r1, r2
 801aee4:	9206      	str	r2, [sp, #24]
 801aee6:	9a07      	ldr	r2, [sp, #28]
 801aee8:	4402      	add	r2, r0
 801aeea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801aeec:	9207      	str	r2, [sp, #28]
 801aeee:	9a03      	ldr	r2, [sp, #12]
 801aef0:	4402      	add	r2, r0
 801aef2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801aef4:	9203      	str	r2, [sp, #12]
 801aef6:	9a04      	ldr	r2, [sp, #16]
 801aef8:	4402      	add	r2, r0
 801aefa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801aefc:	9204      	str	r2, [sp, #16]
 801aefe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801af00:	4491      	add	r9, r2
 801af02:	9a05      	ldr	r2, [sp, #20]
 801af04:	4402      	add	r2, r0
 801af06:	9205      	str	r2, [sp, #20]
 801af08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af0a:	4490      	add	r8, r2
 801af0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af0e:	3208      	adds	r2, #8
 801af10:	920f      	str	r2, [sp, #60]	; 0x3c
 801af12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801af14:	3208      	adds	r2, #8
 801af16:	920e      	str	r2, [sp, #56]	; 0x38
 801af18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801af1a:	3208      	adds	r2, #8
 801af1c:	920d      	str	r2, [sp, #52]	; 0x34
 801af1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801af20:	3208      	adds	r2, #8
 801af22:	920c      	str	r2, [sp, #48]	; 0x30
 801af24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af26:	3208      	adds	r2, #8
 801af28:	920b      	str	r2, [sp, #44]	; 0x2c
 801af2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af2c:	3208      	adds	r2, #8
 801af2e:	920a      	str	r2, [sp, #40]	; 0x28
 801af30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af32:	3208      	adds	r2, #8
 801af34:	9209      	str	r2, [sp, #36]	; 0x24
 801af36:	9a08      	ldr	r2, [sp, #32]
 801af38:	3208      	adds	r2, #8
 801af3a:	9208      	str	r2, [sp, #32]
 801af3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801af3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801af40:	4622      	mov	r2, r4
 801af42:	4288      	cmp	r0, r1
 801af44:	d005      	beq.n	801af52 <arm_radix8_butterfly_f32+0x5ce>
 801af46:	9818      	ldr	r0, [sp, #96]	; 0x60
 801af48:	4621      	mov	r1, r4
 801af4a:	4401      	add	r1, r0
 801af4c:	9807      	ldr	r0, [sp, #28]
 801af4e:	9110      	str	r1, [sp, #64]	; 0x40
 801af50:	e676      	b.n	801ac40 <arm_radix8_butterfly_f32+0x2bc>
 801af52:	4683      	mov	fp, r0
 801af54:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 801af58:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801af5c:	e522      	b.n	801a9a4 <arm_radix8_butterfly_f32+0x20>
 801af5e:	b01d      	add	sp, #116	; 0x74
 801af60:	ecbd 8b10 	vpop	{d8-d15}
 801af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af68 <__errno>:
 801af68:	4b01      	ldr	r3, [pc, #4]	; (801af70 <__errno+0x8>)
 801af6a:	6818      	ldr	r0, [r3, #0]
 801af6c:	4770      	bx	lr
 801af6e:	bf00      	nop
 801af70:	20000060 	.word	0x20000060

0801af74 <__libc_init_array>:
 801af74:	b570      	push	{r4, r5, r6, lr}
 801af76:	4d0d      	ldr	r5, [pc, #52]	; (801afac <__libc_init_array+0x38>)
 801af78:	4c0d      	ldr	r4, [pc, #52]	; (801afb0 <__libc_init_array+0x3c>)
 801af7a:	1b64      	subs	r4, r4, r5
 801af7c:	10a4      	asrs	r4, r4, #2
 801af7e:	2600      	movs	r6, #0
 801af80:	42a6      	cmp	r6, r4
 801af82:	d109      	bne.n	801af98 <__libc_init_array+0x24>
 801af84:	4d0b      	ldr	r5, [pc, #44]	; (801afb4 <__libc_init_array+0x40>)
 801af86:	4c0c      	ldr	r4, [pc, #48]	; (801afb8 <__libc_init_array+0x44>)
 801af88:	f001 fa56 	bl	801c438 <_init>
 801af8c:	1b64      	subs	r4, r4, r5
 801af8e:	10a4      	asrs	r4, r4, #2
 801af90:	2600      	movs	r6, #0
 801af92:	42a6      	cmp	r6, r4
 801af94:	d105      	bne.n	801afa2 <__libc_init_array+0x2e>
 801af96:	bd70      	pop	{r4, r5, r6, pc}
 801af98:	f855 3b04 	ldr.w	r3, [r5], #4
 801af9c:	4798      	blx	r3
 801af9e:	3601      	adds	r6, #1
 801afa0:	e7ee      	b.n	801af80 <__libc_init_array+0xc>
 801afa2:	f855 3b04 	ldr.w	r3, [r5], #4
 801afa6:	4798      	blx	r3
 801afa8:	3601      	adds	r6, #1
 801afaa:	e7f2      	b.n	801af92 <__libc_init_array+0x1e>
 801afac:	08032658 	.word	0x08032658
 801afb0:	08032658 	.word	0x08032658
 801afb4:	08032658 	.word	0x08032658
 801afb8:	0803265c 	.word	0x0803265c

0801afbc <malloc>:
 801afbc:	4b02      	ldr	r3, [pc, #8]	; (801afc8 <malloc+0xc>)
 801afbe:	4601      	mov	r1, r0
 801afc0:	6818      	ldr	r0, [r3, #0]
 801afc2:	f000 b871 	b.w	801b0a8 <_malloc_r>
 801afc6:	bf00      	nop
 801afc8:	20000060 	.word	0x20000060

0801afcc <free>:
 801afcc:	4b02      	ldr	r3, [pc, #8]	; (801afd8 <free+0xc>)
 801afce:	4601      	mov	r1, r0
 801afd0:	6818      	ldr	r0, [r3, #0]
 801afd2:	f000 b819 	b.w	801b008 <_free_r>
 801afd6:	bf00      	nop
 801afd8:	20000060 	.word	0x20000060

0801afdc <memcpy>:
 801afdc:	440a      	add	r2, r1
 801afde:	4291      	cmp	r1, r2
 801afe0:	f100 33ff 	add.w	r3, r0, #4294967295
 801afe4:	d100      	bne.n	801afe8 <memcpy+0xc>
 801afe6:	4770      	bx	lr
 801afe8:	b510      	push	{r4, lr}
 801afea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801afee:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aff2:	4291      	cmp	r1, r2
 801aff4:	d1f9      	bne.n	801afea <memcpy+0xe>
 801aff6:	bd10      	pop	{r4, pc}

0801aff8 <memset>:
 801aff8:	4402      	add	r2, r0
 801affa:	4603      	mov	r3, r0
 801affc:	4293      	cmp	r3, r2
 801affe:	d100      	bne.n	801b002 <memset+0xa>
 801b000:	4770      	bx	lr
 801b002:	f803 1b01 	strb.w	r1, [r3], #1
 801b006:	e7f9      	b.n	801affc <memset+0x4>

0801b008 <_free_r>:
 801b008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b00a:	2900      	cmp	r1, #0
 801b00c:	d048      	beq.n	801b0a0 <_free_r+0x98>
 801b00e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b012:	9001      	str	r0, [sp, #4]
 801b014:	2b00      	cmp	r3, #0
 801b016:	f1a1 0404 	sub.w	r4, r1, #4
 801b01a:	bfb8      	it	lt
 801b01c:	18e4      	addlt	r4, r4, r3
 801b01e:	f000 fc4f 	bl	801b8c0 <__malloc_lock>
 801b022:	4a20      	ldr	r2, [pc, #128]	; (801b0a4 <_free_r+0x9c>)
 801b024:	9801      	ldr	r0, [sp, #4]
 801b026:	6813      	ldr	r3, [r2, #0]
 801b028:	4615      	mov	r5, r2
 801b02a:	b933      	cbnz	r3, 801b03a <_free_r+0x32>
 801b02c:	6063      	str	r3, [r4, #4]
 801b02e:	6014      	str	r4, [r2, #0]
 801b030:	b003      	add	sp, #12
 801b032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b036:	f000 bc49 	b.w	801b8cc <__malloc_unlock>
 801b03a:	42a3      	cmp	r3, r4
 801b03c:	d90b      	bls.n	801b056 <_free_r+0x4e>
 801b03e:	6821      	ldr	r1, [r4, #0]
 801b040:	1862      	adds	r2, r4, r1
 801b042:	4293      	cmp	r3, r2
 801b044:	bf04      	itt	eq
 801b046:	681a      	ldreq	r2, [r3, #0]
 801b048:	685b      	ldreq	r3, [r3, #4]
 801b04a:	6063      	str	r3, [r4, #4]
 801b04c:	bf04      	itt	eq
 801b04e:	1852      	addeq	r2, r2, r1
 801b050:	6022      	streq	r2, [r4, #0]
 801b052:	602c      	str	r4, [r5, #0]
 801b054:	e7ec      	b.n	801b030 <_free_r+0x28>
 801b056:	461a      	mov	r2, r3
 801b058:	685b      	ldr	r3, [r3, #4]
 801b05a:	b10b      	cbz	r3, 801b060 <_free_r+0x58>
 801b05c:	42a3      	cmp	r3, r4
 801b05e:	d9fa      	bls.n	801b056 <_free_r+0x4e>
 801b060:	6811      	ldr	r1, [r2, #0]
 801b062:	1855      	adds	r5, r2, r1
 801b064:	42a5      	cmp	r5, r4
 801b066:	d10b      	bne.n	801b080 <_free_r+0x78>
 801b068:	6824      	ldr	r4, [r4, #0]
 801b06a:	4421      	add	r1, r4
 801b06c:	1854      	adds	r4, r2, r1
 801b06e:	42a3      	cmp	r3, r4
 801b070:	6011      	str	r1, [r2, #0]
 801b072:	d1dd      	bne.n	801b030 <_free_r+0x28>
 801b074:	681c      	ldr	r4, [r3, #0]
 801b076:	685b      	ldr	r3, [r3, #4]
 801b078:	6053      	str	r3, [r2, #4]
 801b07a:	4421      	add	r1, r4
 801b07c:	6011      	str	r1, [r2, #0]
 801b07e:	e7d7      	b.n	801b030 <_free_r+0x28>
 801b080:	d902      	bls.n	801b088 <_free_r+0x80>
 801b082:	230c      	movs	r3, #12
 801b084:	6003      	str	r3, [r0, #0]
 801b086:	e7d3      	b.n	801b030 <_free_r+0x28>
 801b088:	6825      	ldr	r5, [r4, #0]
 801b08a:	1961      	adds	r1, r4, r5
 801b08c:	428b      	cmp	r3, r1
 801b08e:	bf04      	itt	eq
 801b090:	6819      	ldreq	r1, [r3, #0]
 801b092:	685b      	ldreq	r3, [r3, #4]
 801b094:	6063      	str	r3, [r4, #4]
 801b096:	bf04      	itt	eq
 801b098:	1949      	addeq	r1, r1, r5
 801b09a:	6021      	streq	r1, [r4, #0]
 801b09c:	6054      	str	r4, [r2, #4]
 801b09e:	e7c7      	b.n	801b030 <_free_r+0x28>
 801b0a0:	b003      	add	sp, #12
 801b0a2:	bd30      	pop	{r4, r5, pc}
 801b0a4:	20008530 	.word	0x20008530

0801b0a8 <_malloc_r>:
 801b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0aa:	1ccd      	adds	r5, r1, #3
 801b0ac:	f025 0503 	bic.w	r5, r5, #3
 801b0b0:	3508      	adds	r5, #8
 801b0b2:	2d0c      	cmp	r5, #12
 801b0b4:	bf38      	it	cc
 801b0b6:	250c      	movcc	r5, #12
 801b0b8:	2d00      	cmp	r5, #0
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	db01      	blt.n	801b0c2 <_malloc_r+0x1a>
 801b0be:	42a9      	cmp	r1, r5
 801b0c0:	d903      	bls.n	801b0ca <_malloc_r+0x22>
 801b0c2:	230c      	movs	r3, #12
 801b0c4:	6033      	str	r3, [r6, #0]
 801b0c6:	2000      	movs	r0, #0
 801b0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0ca:	f000 fbf9 	bl	801b8c0 <__malloc_lock>
 801b0ce:	4921      	ldr	r1, [pc, #132]	; (801b154 <_malloc_r+0xac>)
 801b0d0:	680a      	ldr	r2, [r1, #0]
 801b0d2:	4614      	mov	r4, r2
 801b0d4:	b99c      	cbnz	r4, 801b0fe <_malloc_r+0x56>
 801b0d6:	4f20      	ldr	r7, [pc, #128]	; (801b158 <_malloc_r+0xb0>)
 801b0d8:	683b      	ldr	r3, [r7, #0]
 801b0da:	b923      	cbnz	r3, 801b0e6 <_malloc_r+0x3e>
 801b0dc:	4621      	mov	r1, r4
 801b0de:	4630      	mov	r0, r6
 801b0e0:	f000 f8e0 	bl	801b2a4 <_sbrk_r>
 801b0e4:	6038      	str	r0, [r7, #0]
 801b0e6:	4629      	mov	r1, r5
 801b0e8:	4630      	mov	r0, r6
 801b0ea:	f000 f8db 	bl	801b2a4 <_sbrk_r>
 801b0ee:	1c43      	adds	r3, r0, #1
 801b0f0:	d123      	bne.n	801b13a <_malloc_r+0x92>
 801b0f2:	230c      	movs	r3, #12
 801b0f4:	6033      	str	r3, [r6, #0]
 801b0f6:	4630      	mov	r0, r6
 801b0f8:	f000 fbe8 	bl	801b8cc <__malloc_unlock>
 801b0fc:	e7e3      	b.n	801b0c6 <_malloc_r+0x1e>
 801b0fe:	6823      	ldr	r3, [r4, #0]
 801b100:	1b5b      	subs	r3, r3, r5
 801b102:	d417      	bmi.n	801b134 <_malloc_r+0x8c>
 801b104:	2b0b      	cmp	r3, #11
 801b106:	d903      	bls.n	801b110 <_malloc_r+0x68>
 801b108:	6023      	str	r3, [r4, #0]
 801b10a:	441c      	add	r4, r3
 801b10c:	6025      	str	r5, [r4, #0]
 801b10e:	e004      	b.n	801b11a <_malloc_r+0x72>
 801b110:	6863      	ldr	r3, [r4, #4]
 801b112:	42a2      	cmp	r2, r4
 801b114:	bf0c      	ite	eq
 801b116:	600b      	streq	r3, [r1, #0]
 801b118:	6053      	strne	r3, [r2, #4]
 801b11a:	4630      	mov	r0, r6
 801b11c:	f000 fbd6 	bl	801b8cc <__malloc_unlock>
 801b120:	f104 000b 	add.w	r0, r4, #11
 801b124:	1d23      	adds	r3, r4, #4
 801b126:	f020 0007 	bic.w	r0, r0, #7
 801b12a:	1ac2      	subs	r2, r0, r3
 801b12c:	d0cc      	beq.n	801b0c8 <_malloc_r+0x20>
 801b12e:	1a1b      	subs	r3, r3, r0
 801b130:	50a3      	str	r3, [r4, r2]
 801b132:	e7c9      	b.n	801b0c8 <_malloc_r+0x20>
 801b134:	4622      	mov	r2, r4
 801b136:	6864      	ldr	r4, [r4, #4]
 801b138:	e7cc      	b.n	801b0d4 <_malloc_r+0x2c>
 801b13a:	1cc4      	adds	r4, r0, #3
 801b13c:	f024 0403 	bic.w	r4, r4, #3
 801b140:	42a0      	cmp	r0, r4
 801b142:	d0e3      	beq.n	801b10c <_malloc_r+0x64>
 801b144:	1a21      	subs	r1, r4, r0
 801b146:	4630      	mov	r0, r6
 801b148:	f000 f8ac 	bl	801b2a4 <_sbrk_r>
 801b14c:	3001      	adds	r0, #1
 801b14e:	d1dd      	bne.n	801b10c <_malloc_r+0x64>
 801b150:	e7cf      	b.n	801b0f2 <_malloc_r+0x4a>
 801b152:	bf00      	nop
 801b154:	20008530 	.word	0x20008530
 801b158:	20008534 	.word	0x20008534

0801b15c <iprintf>:
 801b15c:	b40f      	push	{r0, r1, r2, r3}
 801b15e:	4b0a      	ldr	r3, [pc, #40]	; (801b188 <iprintf+0x2c>)
 801b160:	b513      	push	{r0, r1, r4, lr}
 801b162:	681c      	ldr	r4, [r3, #0]
 801b164:	b124      	cbz	r4, 801b170 <iprintf+0x14>
 801b166:	69a3      	ldr	r3, [r4, #24]
 801b168:	b913      	cbnz	r3, 801b170 <iprintf+0x14>
 801b16a:	4620      	mov	r0, r4
 801b16c:	f000 faa4 	bl	801b6b8 <__sinit>
 801b170:	ab05      	add	r3, sp, #20
 801b172:	9a04      	ldr	r2, [sp, #16]
 801b174:	68a1      	ldr	r1, [r4, #8]
 801b176:	9301      	str	r3, [sp, #4]
 801b178:	4620      	mov	r0, r4
 801b17a:	f000 fd33 	bl	801bbe4 <_vfiprintf_r>
 801b17e:	b002      	add	sp, #8
 801b180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b184:	b004      	add	sp, #16
 801b186:	4770      	bx	lr
 801b188:	20000060 	.word	0x20000060

0801b18c <putchar>:
 801b18c:	4b09      	ldr	r3, [pc, #36]	; (801b1b4 <putchar+0x28>)
 801b18e:	b513      	push	{r0, r1, r4, lr}
 801b190:	681c      	ldr	r4, [r3, #0]
 801b192:	4601      	mov	r1, r0
 801b194:	b134      	cbz	r4, 801b1a4 <putchar+0x18>
 801b196:	69a3      	ldr	r3, [r4, #24]
 801b198:	b923      	cbnz	r3, 801b1a4 <putchar+0x18>
 801b19a:	9001      	str	r0, [sp, #4]
 801b19c:	4620      	mov	r0, r4
 801b19e:	f000 fa8b 	bl	801b6b8 <__sinit>
 801b1a2:	9901      	ldr	r1, [sp, #4]
 801b1a4:	68a2      	ldr	r2, [r4, #8]
 801b1a6:	4620      	mov	r0, r4
 801b1a8:	b002      	add	sp, #8
 801b1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1ae:	f000 bfdd 	b.w	801c16c <_putc_r>
 801b1b2:	bf00      	nop
 801b1b4:	20000060 	.word	0x20000060

0801b1b8 <_puts_r>:
 801b1b8:	b570      	push	{r4, r5, r6, lr}
 801b1ba:	460e      	mov	r6, r1
 801b1bc:	4605      	mov	r5, r0
 801b1be:	b118      	cbz	r0, 801b1c8 <_puts_r+0x10>
 801b1c0:	6983      	ldr	r3, [r0, #24]
 801b1c2:	b90b      	cbnz	r3, 801b1c8 <_puts_r+0x10>
 801b1c4:	f000 fa78 	bl	801b6b8 <__sinit>
 801b1c8:	69ab      	ldr	r3, [r5, #24]
 801b1ca:	68ac      	ldr	r4, [r5, #8]
 801b1cc:	b913      	cbnz	r3, 801b1d4 <_puts_r+0x1c>
 801b1ce:	4628      	mov	r0, r5
 801b1d0:	f000 fa72 	bl	801b6b8 <__sinit>
 801b1d4:	4b2c      	ldr	r3, [pc, #176]	; (801b288 <_puts_r+0xd0>)
 801b1d6:	429c      	cmp	r4, r3
 801b1d8:	d120      	bne.n	801b21c <_puts_r+0x64>
 801b1da:	686c      	ldr	r4, [r5, #4]
 801b1dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1de:	07db      	lsls	r3, r3, #31
 801b1e0:	d405      	bmi.n	801b1ee <_puts_r+0x36>
 801b1e2:	89a3      	ldrh	r3, [r4, #12]
 801b1e4:	0598      	lsls	r0, r3, #22
 801b1e6:	d402      	bmi.n	801b1ee <_puts_r+0x36>
 801b1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1ea:	f000 fb03 	bl	801b7f4 <__retarget_lock_acquire_recursive>
 801b1ee:	89a3      	ldrh	r3, [r4, #12]
 801b1f0:	0719      	lsls	r1, r3, #28
 801b1f2:	d51d      	bpl.n	801b230 <_puts_r+0x78>
 801b1f4:	6923      	ldr	r3, [r4, #16]
 801b1f6:	b1db      	cbz	r3, 801b230 <_puts_r+0x78>
 801b1f8:	3e01      	subs	r6, #1
 801b1fa:	68a3      	ldr	r3, [r4, #8]
 801b1fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b200:	3b01      	subs	r3, #1
 801b202:	60a3      	str	r3, [r4, #8]
 801b204:	bb39      	cbnz	r1, 801b256 <_puts_r+0x9e>
 801b206:	2b00      	cmp	r3, #0
 801b208:	da38      	bge.n	801b27c <_puts_r+0xc4>
 801b20a:	4622      	mov	r2, r4
 801b20c:	210a      	movs	r1, #10
 801b20e:	4628      	mov	r0, r5
 801b210:	f000 f878 	bl	801b304 <__swbuf_r>
 801b214:	3001      	adds	r0, #1
 801b216:	d011      	beq.n	801b23c <_puts_r+0x84>
 801b218:	250a      	movs	r5, #10
 801b21a:	e011      	b.n	801b240 <_puts_r+0x88>
 801b21c:	4b1b      	ldr	r3, [pc, #108]	; (801b28c <_puts_r+0xd4>)
 801b21e:	429c      	cmp	r4, r3
 801b220:	d101      	bne.n	801b226 <_puts_r+0x6e>
 801b222:	68ac      	ldr	r4, [r5, #8]
 801b224:	e7da      	b.n	801b1dc <_puts_r+0x24>
 801b226:	4b1a      	ldr	r3, [pc, #104]	; (801b290 <_puts_r+0xd8>)
 801b228:	429c      	cmp	r4, r3
 801b22a:	bf08      	it	eq
 801b22c:	68ec      	ldreq	r4, [r5, #12]
 801b22e:	e7d5      	b.n	801b1dc <_puts_r+0x24>
 801b230:	4621      	mov	r1, r4
 801b232:	4628      	mov	r0, r5
 801b234:	f000 f8b8 	bl	801b3a8 <__swsetup_r>
 801b238:	2800      	cmp	r0, #0
 801b23a:	d0dd      	beq.n	801b1f8 <_puts_r+0x40>
 801b23c:	f04f 35ff 	mov.w	r5, #4294967295
 801b240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b242:	07da      	lsls	r2, r3, #31
 801b244:	d405      	bmi.n	801b252 <_puts_r+0x9a>
 801b246:	89a3      	ldrh	r3, [r4, #12]
 801b248:	059b      	lsls	r3, r3, #22
 801b24a:	d402      	bmi.n	801b252 <_puts_r+0x9a>
 801b24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b24e:	f000 fad2 	bl	801b7f6 <__retarget_lock_release_recursive>
 801b252:	4628      	mov	r0, r5
 801b254:	bd70      	pop	{r4, r5, r6, pc}
 801b256:	2b00      	cmp	r3, #0
 801b258:	da04      	bge.n	801b264 <_puts_r+0xac>
 801b25a:	69a2      	ldr	r2, [r4, #24]
 801b25c:	429a      	cmp	r2, r3
 801b25e:	dc06      	bgt.n	801b26e <_puts_r+0xb6>
 801b260:	290a      	cmp	r1, #10
 801b262:	d004      	beq.n	801b26e <_puts_r+0xb6>
 801b264:	6823      	ldr	r3, [r4, #0]
 801b266:	1c5a      	adds	r2, r3, #1
 801b268:	6022      	str	r2, [r4, #0]
 801b26a:	7019      	strb	r1, [r3, #0]
 801b26c:	e7c5      	b.n	801b1fa <_puts_r+0x42>
 801b26e:	4622      	mov	r2, r4
 801b270:	4628      	mov	r0, r5
 801b272:	f000 f847 	bl	801b304 <__swbuf_r>
 801b276:	3001      	adds	r0, #1
 801b278:	d1bf      	bne.n	801b1fa <_puts_r+0x42>
 801b27a:	e7df      	b.n	801b23c <_puts_r+0x84>
 801b27c:	6823      	ldr	r3, [r4, #0]
 801b27e:	250a      	movs	r5, #10
 801b280:	1c5a      	adds	r2, r3, #1
 801b282:	6022      	str	r2, [r4, #0]
 801b284:	701d      	strb	r5, [r3, #0]
 801b286:	e7db      	b.n	801b240 <_puts_r+0x88>
 801b288:	080325dc 	.word	0x080325dc
 801b28c:	080325fc 	.word	0x080325fc
 801b290:	080325bc 	.word	0x080325bc

0801b294 <puts>:
 801b294:	4b02      	ldr	r3, [pc, #8]	; (801b2a0 <puts+0xc>)
 801b296:	4601      	mov	r1, r0
 801b298:	6818      	ldr	r0, [r3, #0]
 801b29a:	f7ff bf8d 	b.w	801b1b8 <_puts_r>
 801b29e:	bf00      	nop
 801b2a0:	20000060 	.word	0x20000060

0801b2a4 <_sbrk_r>:
 801b2a4:	b538      	push	{r3, r4, r5, lr}
 801b2a6:	4d06      	ldr	r5, [pc, #24]	; (801b2c0 <_sbrk_r+0x1c>)
 801b2a8:	2300      	movs	r3, #0
 801b2aa:	4604      	mov	r4, r0
 801b2ac:	4608      	mov	r0, r1
 801b2ae:	602b      	str	r3, [r5, #0]
 801b2b0:	f7e9 fa0c 	bl	80046cc <_sbrk>
 801b2b4:	1c43      	adds	r3, r0, #1
 801b2b6:	d102      	bne.n	801b2be <_sbrk_r+0x1a>
 801b2b8:	682b      	ldr	r3, [r5, #0]
 801b2ba:	b103      	cbz	r3, 801b2be <_sbrk_r+0x1a>
 801b2bc:	6023      	str	r3, [r4, #0]
 801b2be:	bd38      	pop	{r3, r4, r5, pc}
 801b2c0:	2004b020 	.word	0x2004b020

0801b2c4 <siprintf>:
 801b2c4:	b40e      	push	{r1, r2, r3}
 801b2c6:	b500      	push	{lr}
 801b2c8:	b09c      	sub	sp, #112	; 0x70
 801b2ca:	ab1d      	add	r3, sp, #116	; 0x74
 801b2cc:	9002      	str	r0, [sp, #8]
 801b2ce:	9006      	str	r0, [sp, #24]
 801b2d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b2d4:	4809      	ldr	r0, [pc, #36]	; (801b2fc <siprintf+0x38>)
 801b2d6:	9107      	str	r1, [sp, #28]
 801b2d8:	9104      	str	r1, [sp, #16]
 801b2da:	4909      	ldr	r1, [pc, #36]	; (801b300 <siprintf+0x3c>)
 801b2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2e0:	9105      	str	r1, [sp, #20]
 801b2e2:	6800      	ldr	r0, [r0, #0]
 801b2e4:	9301      	str	r3, [sp, #4]
 801b2e6:	a902      	add	r1, sp, #8
 801b2e8:	f000 fb52 	bl	801b990 <_svfiprintf_r>
 801b2ec:	9b02      	ldr	r3, [sp, #8]
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	701a      	strb	r2, [r3, #0]
 801b2f2:	b01c      	add	sp, #112	; 0x70
 801b2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2f8:	b003      	add	sp, #12
 801b2fa:	4770      	bx	lr
 801b2fc:	20000060 	.word	0x20000060
 801b300:	ffff0208 	.word	0xffff0208

0801b304 <__swbuf_r>:
 801b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b306:	460e      	mov	r6, r1
 801b308:	4614      	mov	r4, r2
 801b30a:	4605      	mov	r5, r0
 801b30c:	b118      	cbz	r0, 801b316 <__swbuf_r+0x12>
 801b30e:	6983      	ldr	r3, [r0, #24]
 801b310:	b90b      	cbnz	r3, 801b316 <__swbuf_r+0x12>
 801b312:	f000 f9d1 	bl	801b6b8 <__sinit>
 801b316:	4b21      	ldr	r3, [pc, #132]	; (801b39c <__swbuf_r+0x98>)
 801b318:	429c      	cmp	r4, r3
 801b31a:	d12b      	bne.n	801b374 <__swbuf_r+0x70>
 801b31c:	686c      	ldr	r4, [r5, #4]
 801b31e:	69a3      	ldr	r3, [r4, #24]
 801b320:	60a3      	str	r3, [r4, #8]
 801b322:	89a3      	ldrh	r3, [r4, #12]
 801b324:	071a      	lsls	r2, r3, #28
 801b326:	d52f      	bpl.n	801b388 <__swbuf_r+0x84>
 801b328:	6923      	ldr	r3, [r4, #16]
 801b32a:	b36b      	cbz	r3, 801b388 <__swbuf_r+0x84>
 801b32c:	6923      	ldr	r3, [r4, #16]
 801b32e:	6820      	ldr	r0, [r4, #0]
 801b330:	1ac0      	subs	r0, r0, r3
 801b332:	6963      	ldr	r3, [r4, #20]
 801b334:	b2f6      	uxtb	r6, r6
 801b336:	4283      	cmp	r3, r0
 801b338:	4637      	mov	r7, r6
 801b33a:	dc04      	bgt.n	801b346 <__swbuf_r+0x42>
 801b33c:	4621      	mov	r1, r4
 801b33e:	4628      	mov	r0, r5
 801b340:	f000 f926 	bl	801b590 <_fflush_r>
 801b344:	bb30      	cbnz	r0, 801b394 <__swbuf_r+0x90>
 801b346:	68a3      	ldr	r3, [r4, #8]
 801b348:	3b01      	subs	r3, #1
 801b34a:	60a3      	str	r3, [r4, #8]
 801b34c:	6823      	ldr	r3, [r4, #0]
 801b34e:	1c5a      	adds	r2, r3, #1
 801b350:	6022      	str	r2, [r4, #0]
 801b352:	701e      	strb	r6, [r3, #0]
 801b354:	6963      	ldr	r3, [r4, #20]
 801b356:	3001      	adds	r0, #1
 801b358:	4283      	cmp	r3, r0
 801b35a:	d004      	beq.n	801b366 <__swbuf_r+0x62>
 801b35c:	89a3      	ldrh	r3, [r4, #12]
 801b35e:	07db      	lsls	r3, r3, #31
 801b360:	d506      	bpl.n	801b370 <__swbuf_r+0x6c>
 801b362:	2e0a      	cmp	r6, #10
 801b364:	d104      	bne.n	801b370 <__swbuf_r+0x6c>
 801b366:	4621      	mov	r1, r4
 801b368:	4628      	mov	r0, r5
 801b36a:	f000 f911 	bl	801b590 <_fflush_r>
 801b36e:	b988      	cbnz	r0, 801b394 <__swbuf_r+0x90>
 801b370:	4638      	mov	r0, r7
 801b372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b374:	4b0a      	ldr	r3, [pc, #40]	; (801b3a0 <__swbuf_r+0x9c>)
 801b376:	429c      	cmp	r4, r3
 801b378:	d101      	bne.n	801b37e <__swbuf_r+0x7a>
 801b37a:	68ac      	ldr	r4, [r5, #8]
 801b37c:	e7cf      	b.n	801b31e <__swbuf_r+0x1a>
 801b37e:	4b09      	ldr	r3, [pc, #36]	; (801b3a4 <__swbuf_r+0xa0>)
 801b380:	429c      	cmp	r4, r3
 801b382:	bf08      	it	eq
 801b384:	68ec      	ldreq	r4, [r5, #12]
 801b386:	e7ca      	b.n	801b31e <__swbuf_r+0x1a>
 801b388:	4621      	mov	r1, r4
 801b38a:	4628      	mov	r0, r5
 801b38c:	f000 f80c 	bl	801b3a8 <__swsetup_r>
 801b390:	2800      	cmp	r0, #0
 801b392:	d0cb      	beq.n	801b32c <__swbuf_r+0x28>
 801b394:	f04f 37ff 	mov.w	r7, #4294967295
 801b398:	e7ea      	b.n	801b370 <__swbuf_r+0x6c>
 801b39a:	bf00      	nop
 801b39c:	080325dc 	.word	0x080325dc
 801b3a0:	080325fc 	.word	0x080325fc
 801b3a4:	080325bc 	.word	0x080325bc

0801b3a8 <__swsetup_r>:
 801b3a8:	4b32      	ldr	r3, [pc, #200]	; (801b474 <__swsetup_r+0xcc>)
 801b3aa:	b570      	push	{r4, r5, r6, lr}
 801b3ac:	681d      	ldr	r5, [r3, #0]
 801b3ae:	4606      	mov	r6, r0
 801b3b0:	460c      	mov	r4, r1
 801b3b2:	b125      	cbz	r5, 801b3be <__swsetup_r+0x16>
 801b3b4:	69ab      	ldr	r3, [r5, #24]
 801b3b6:	b913      	cbnz	r3, 801b3be <__swsetup_r+0x16>
 801b3b8:	4628      	mov	r0, r5
 801b3ba:	f000 f97d 	bl	801b6b8 <__sinit>
 801b3be:	4b2e      	ldr	r3, [pc, #184]	; (801b478 <__swsetup_r+0xd0>)
 801b3c0:	429c      	cmp	r4, r3
 801b3c2:	d10f      	bne.n	801b3e4 <__swsetup_r+0x3c>
 801b3c4:	686c      	ldr	r4, [r5, #4]
 801b3c6:	89a3      	ldrh	r3, [r4, #12]
 801b3c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b3cc:	0719      	lsls	r1, r3, #28
 801b3ce:	d42c      	bmi.n	801b42a <__swsetup_r+0x82>
 801b3d0:	06dd      	lsls	r5, r3, #27
 801b3d2:	d411      	bmi.n	801b3f8 <__swsetup_r+0x50>
 801b3d4:	2309      	movs	r3, #9
 801b3d6:	6033      	str	r3, [r6, #0]
 801b3d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b3dc:	81a3      	strh	r3, [r4, #12]
 801b3de:	f04f 30ff 	mov.w	r0, #4294967295
 801b3e2:	e03e      	b.n	801b462 <__swsetup_r+0xba>
 801b3e4:	4b25      	ldr	r3, [pc, #148]	; (801b47c <__swsetup_r+0xd4>)
 801b3e6:	429c      	cmp	r4, r3
 801b3e8:	d101      	bne.n	801b3ee <__swsetup_r+0x46>
 801b3ea:	68ac      	ldr	r4, [r5, #8]
 801b3ec:	e7eb      	b.n	801b3c6 <__swsetup_r+0x1e>
 801b3ee:	4b24      	ldr	r3, [pc, #144]	; (801b480 <__swsetup_r+0xd8>)
 801b3f0:	429c      	cmp	r4, r3
 801b3f2:	bf08      	it	eq
 801b3f4:	68ec      	ldreq	r4, [r5, #12]
 801b3f6:	e7e6      	b.n	801b3c6 <__swsetup_r+0x1e>
 801b3f8:	0758      	lsls	r0, r3, #29
 801b3fa:	d512      	bpl.n	801b422 <__swsetup_r+0x7a>
 801b3fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b3fe:	b141      	cbz	r1, 801b412 <__swsetup_r+0x6a>
 801b400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b404:	4299      	cmp	r1, r3
 801b406:	d002      	beq.n	801b40e <__swsetup_r+0x66>
 801b408:	4630      	mov	r0, r6
 801b40a:	f7ff fdfd 	bl	801b008 <_free_r>
 801b40e:	2300      	movs	r3, #0
 801b410:	6363      	str	r3, [r4, #52]	; 0x34
 801b412:	89a3      	ldrh	r3, [r4, #12]
 801b414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b418:	81a3      	strh	r3, [r4, #12]
 801b41a:	2300      	movs	r3, #0
 801b41c:	6063      	str	r3, [r4, #4]
 801b41e:	6923      	ldr	r3, [r4, #16]
 801b420:	6023      	str	r3, [r4, #0]
 801b422:	89a3      	ldrh	r3, [r4, #12]
 801b424:	f043 0308 	orr.w	r3, r3, #8
 801b428:	81a3      	strh	r3, [r4, #12]
 801b42a:	6923      	ldr	r3, [r4, #16]
 801b42c:	b94b      	cbnz	r3, 801b442 <__swsetup_r+0x9a>
 801b42e:	89a3      	ldrh	r3, [r4, #12]
 801b430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b438:	d003      	beq.n	801b442 <__swsetup_r+0x9a>
 801b43a:	4621      	mov	r1, r4
 801b43c:	4630      	mov	r0, r6
 801b43e:	f000 f9ff 	bl	801b840 <__smakebuf_r>
 801b442:	89a0      	ldrh	r0, [r4, #12]
 801b444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b448:	f010 0301 	ands.w	r3, r0, #1
 801b44c:	d00a      	beq.n	801b464 <__swsetup_r+0xbc>
 801b44e:	2300      	movs	r3, #0
 801b450:	60a3      	str	r3, [r4, #8]
 801b452:	6963      	ldr	r3, [r4, #20]
 801b454:	425b      	negs	r3, r3
 801b456:	61a3      	str	r3, [r4, #24]
 801b458:	6923      	ldr	r3, [r4, #16]
 801b45a:	b943      	cbnz	r3, 801b46e <__swsetup_r+0xc6>
 801b45c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b460:	d1ba      	bne.n	801b3d8 <__swsetup_r+0x30>
 801b462:	bd70      	pop	{r4, r5, r6, pc}
 801b464:	0781      	lsls	r1, r0, #30
 801b466:	bf58      	it	pl
 801b468:	6963      	ldrpl	r3, [r4, #20]
 801b46a:	60a3      	str	r3, [r4, #8]
 801b46c:	e7f4      	b.n	801b458 <__swsetup_r+0xb0>
 801b46e:	2000      	movs	r0, #0
 801b470:	e7f7      	b.n	801b462 <__swsetup_r+0xba>
 801b472:	bf00      	nop
 801b474:	20000060 	.word	0x20000060
 801b478:	080325dc 	.word	0x080325dc
 801b47c:	080325fc 	.word	0x080325fc
 801b480:	080325bc 	.word	0x080325bc

0801b484 <__sflush_r>:
 801b484:	898a      	ldrh	r2, [r1, #12]
 801b486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b48a:	4605      	mov	r5, r0
 801b48c:	0710      	lsls	r0, r2, #28
 801b48e:	460c      	mov	r4, r1
 801b490:	d458      	bmi.n	801b544 <__sflush_r+0xc0>
 801b492:	684b      	ldr	r3, [r1, #4]
 801b494:	2b00      	cmp	r3, #0
 801b496:	dc05      	bgt.n	801b4a4 <__sflush_r+0x20>
 801b498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	dc02      	bgt.n	801b4a4 <__sflush_r+0x20>
 801b49e:	2000      	movs	r0, #0
 801b4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b4a6:	2e00      	cmp	r6, #0
 801b4a8:	d0f9      	beq.n	801b49e <__sflush_r+0x1a>
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b4b0:	682f      	ldr	r7, [r5, #0]
 801b4b2:	602b      	str	r3, [r5, #0]
 801b4b4:	d032      	beq.n	801b51c <__sflush_r+0x98>
 801b4b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b4b8:	89a3      	ldrh	r3, [r4, #12]
 801b4ba:	075a      	lsls	r2, r3, #29
 801b4bc:	d505      	bpl.n	801b4ca <__sflush_r+0x46>
 801b4be:	6863      	ldr	r3, [r4, #4]
 801b4c0:	1ac0      	subs	r0, r0, r3
 801b4c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b4c4:	b10b      	cbz	r3, 801b4ca <__sflush_r+0x46>
 801b4c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b4c8:	1ac0      	subs	r0, r0, r3
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	4602      	mov	r2, r0
 801b4ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b4d0:	6a21      	ldr	r1, [r4, #32]
 801b4d2:	4628      	mov	r0, r5
 801b4d4:	47b0      	blx	r6
 801b4d6:	1c43      	adds	r3, r0, #1
 801b4d8:	89a3      	ldrh	r3, [r4, #12]
 801b4da:	d106      	bne.n	801b4ea <__sflush_r+0x66>
 801b4dc:	6829      	ldr	r1, [r5, #0]
 801b4de:	291d      	cmp	r1, #29
 801b4e0:	d82c      	bhi.n	801b53c <__sflush_r+0xb8>
 801b4e2:	4a2a      	ldr	r2, [pc, #168]	; (801b58c <__sflush_r+0x108>)
 801b4e4:	40ca      	lsrs	r2, r1
 801b4e6:	07d6      	lsls	r6, r2, #31
 801b4e8:	d528      	bpl.n	801b53c <__sflush_r+0xb8>
 801b4ea:	2200      	movs	r2, #0
 801b4ec:	6062      	str	r2, [r4, #4]
 801b4ee:	04d9      	lsls	r1, r3, #19
 801b4f0:	6922      	ldr	r2, [r4, #16]
 801b4f2:	6022      	str	r2, [r4, #0]
 801b4f4:	d504      	bpl.n	801b500 <__sflush_r+0x7c>
 801b4f6:	1c42      	adds	r2, r0, #1
 801b4f8:	d101      	bne.n	801b4fe <__sflush_r+0x7a>
 801b4fa:	682b      	ldr	r3, [r5, #0]
 801b4fc:	b903      	cbnz	r3, 801b500 <__sflush_r+0x7c>
 801b4fe:	6560      	str	r0, [r4, #84]	; 0x54
 801b500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b502:	602f      	str	r7, [r5, #0]
 801b504:	2900      	cmp	r1, #0
 801b506:	d0ca      	beq.n	801b49e <__sflush_r+0x1a>
 801b508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b50c:	4299      	cmp	r1, r3
 801b50e:	d002      	beq.n	801b516 <__sflush_r+0x92>
 801b510:	4628      	mov	r0, r5
 801b512:	f7ff fd79 	bl	801b008 <_free_r>
 801b516:	2000      	movs	r0, #0
 801b518:	6360      	str	r0, [r4, #52]	; 0x34
 801b51a:	e7c1      	b.n	801b4a0 <__sflush_r+0x1c>
 801b51c:	6a21      	ldr	r1, [r4, #32]
 801b51e:	2301      	movs	r3, #1
 801b520:	4628      	mov	r0, r5
 801b522:	47b0      	blx	r6
 801b524:	1c41      	adds	r1, r0, #1
 801b526:	d1c7      	bne.n	801b4b8 <__sflush_r+0x34>
 801b528:	682b      	ldr	r3, [r5, #0]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d0c4      	beq.n	801b4b8 <__sflush_r+0x34>
 801b52e:	2b1d      	cmp	r3, #29
 801b530:	d001      	beq.n	801b536 <__sflush_r+0xb2>
 801b532:	2b16      	cmp	r3, #22
 801b534:	d101      	bne.n	801b53a <__sflush_r+0xb6>
 801b536:	602f      	str	r7, [r5, #0]
 801b538:	e7b1      	b.n	801b49e <__sflush_r+0x1a>
 801b53a:	89a3      	ldrh	r3, [r4, #12]
 801b53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b540:	81a3      	strh	r3, [r4, #12]
 801b542:	e7ad      	b.n	801b4a0 <__sflush_r+0x1c>
 801b544:	690f      	ldr	r7, [r1, #16]
 801b546:	2f00      	cmp	r7, #0
 801b548:	d0a9      	beq.n	801b49e <__sflush_r+0x1a>
 801b54a:	0793      	lsls	r3, r2, #30
 801b54c:	680e      	ldr	r6, [r1, #0]
 801b54e:	bf08      	it	eq
 801b550:	694b      	ldreq	r3, [r1, #20]
 801b552:	600f      	str	r7, [r1, #0]
 801b554:	bf18      	it	ne
 801b556:	2300      	movne	r3, #0
 801b558:	eba6 0807 	sub.w	r8, r6, r7
 801b55c:	608b      	str	r3, [r1, #8]
 801b55e:	f1b8 0f00 	cmp.w	r8, #0
 801b562:	dd9c      	ble.n	801b49e <__sflush_r+0x1a>
 801b564:	6a21      	ldr	r1, [r4, #32]
 801b566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b568:	4643      	mov	r3, r8
 801b56a:	463a      	mov	r2, r7
 801b56c:	4628      	mov	r0, r5
 801b56e:	47b0      	blx	r6
 801b570:	2800      	cmp	r0, #0
 801b572:	dc06      	bgt.n	801b582 <__sflush_r+0xfe>
 801b574:	89a3      	ldrh	r3, [r4, #12]
 801b576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b57a:	81a3      	strh	r3, [r4, #12]
 801b57c:	f04f 30ff 	mov.w	r0, #4294967295
 801b580:	e78e      	b.n	801b4a0 <__sflush_r+0x1c>
 801b582:	4407      	add	r7, r0
 801b584:	eba8 0800 	sub.w	r8, r8, r0
 801b588:	e7e9      	b.n	801b55e <__sflush_r+0xda>
 801b58a:	bf00      	nop
 801b58c:	20400001 	.word	0x20400001

0801b590 <_fflush_r>:
 801b590:	b538      	push	{r3, r4, r5, lr}
 801b592:	690b      	ldr	r3, [r1, #16]
 801b594:	4605      	mov	r5, r0
 801b596:	460c      	mov	r4, r1
 801b598:	b913      	cbnz	r3, 801b5a0 <_fflush_r+0x10>
 801b59a:	2500      	movs	r5, #0
 801b59c:	4628      	mov	r0, r5
 801b59e:	bd38      	pop	{r3, r4, r5, pc}
 801b5a0:	b118      	cbz	r0, 801b5aa <_fflush_r+0x1a>
 801b5a2:	6983      	ldr	r3, [r0, #24]
 801b5a4:	b90b      	cbnz	r3, 801b5aa <_fflush_r+0x1a>
 801b5a6:	f000 f887 	bl	801b6b8 <__sinit>
 801b5aa:	4b14      	ldr	r3, [pc, #80]	; (801b5fc <_fflush_r+0x6c>)
 801b5ac:	429c      	cmp	r4, r3
 801b5ae:	d11b      	bne.n	801b5e8 <_fflush_r+0x58>
 801b5b0:	686c      	ldr	r4, [r5, #4]
 801b5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d0ef      	beq.n	801b59a <_fflush_r+0xa>
 801b5ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b5bc:	07d0      	lsls	r0, r2, #31
 801b5be:	d404      	bmi.n	801b5ca <_fflush_r+0x3a>
 801b5c0:	0599      	lsls	r1, r3, #22
 801b5c2:	d402      	bmi.n	801b5ca <_fflush_r+0x3a>
 801b5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5c6:	f000 f915 	bl	801b7f4 <__retarget_lock_acquire_recursive>
 801b5ca:	4628      	mov	r0, r5
 801b5cc:	4621      	mov	r1, r4
 801b5ce:	f7ff ff59 	bl	801b484 <__sflush_r>
 801b5d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5d4:	07da      	lsls	r2, r3, #31
 801b5d6:	4605      	mov	r5, r0
 801b5d8:	d4e0      	bmi.n	801b59c <_fflush_r+0xc>
 801b5da:	89a3      	ldrh	r3, [r4, #12]
 801b5dc:	059b      	lsls	r3, r3, #22
 801b5de:	d4dd      	bmi.n	801b59c <_fflush_r+0xc>
 801b5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5e2:	f000 f908 	bl	801b7f6 <__retarget_lock_release_recursive>
 801b5e6:	e7d9      	b.n	801b59c <_fflush_r+0xc>
 801b5e8:	4b05      	ldr	r3, [pc, #20]	; (801b600 <_fflush_r+0x70>)
 801b5ea:	429c      	cmp	r4, r3
 801b5ec:	d101      	bne.n	801b5f2 <_fflush_r+0x62>
 801b5ee:	68ac      	ldr	r4, [r5, #8]
 801b5f0:	e7df      	b.n	801b5b2 <_fflush_r+0x22>
 801b5f2:	4b04      	ldr	r3, [pc, #16]	; (801b604 <_fflush_r+0x74>)
 801b5f4:	429c      	cmp	r4, r3
 801b5f6:	bf08      	it	eq
 801b5f8:	68ec      	ldreq	r4, [r5, #12]
 801b5fa:	e7da      	b.n	801b5b2 <_fflush_r+0x22>
 801b5fc:	080325dc 	.word	0x080325dc
 801b600:	080325fc 	.word	0x080325fc
 801b604:	080325bc 	.word	0x080325bc

0801b608 <std>:
 801b608:	2300      	movs	r3, #0
 801b60a:	b510      	push	{r4, lr}
 801b60c:	4604      	mov	r4, r0
 801b60e:	e9c0 3300 	strd	r3, r3, [r0]
 801b612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b616:	6083      	str	r3, [r0, #8]
 801b618:	8181      	strh	r1, [r0, #12]
 801b61a:	6643      	str	r3, [r0, #100]	; 0x64
 801b61c:	81c2      	strh	r2, [r0, #14]
 801b61e:	6183      	str	r3, [r0, #24]
 801b620:	4619      	mov	r1, r3
 801b622:	2208      	movs	r2, #8
 801b624:	305c      	adds	r0, #92	; 0x5c
 801b626:	f7ff fce7 	bl	801aff8 <memset>
 801b62a:	4b05      	ldr	r3, [pc, #20]	; (801b640 <std+0x38>)
 801b62c:	6263      	str	r3, [r4, #36]	; 0x24
 801b62e:	4b05      	ldr	r3, [pc, #20]	; (801b644 <std+0x3c>)
 801b630:	62a3      	str	r3, [r4, #40]	; 0x28
 801b632:	4b05      	ldr	r3, [pc, #20]	; (801b648 <std+0x40>)
 801b634:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b636:	4b05      	ldr	r3, [pc, #20]	; (801b64c <std+0x44>)
 801b638:	6224      	str	r4, [r4, #32]
 801b63a:	6323      	str	r3, [r4, #48]	; 0x30
 801b63c:	bd10      	pop	{r4, pc}
 801b63e:	bf00      	nop
 801b640:	0801c1fd 	.word	0x0801c1fd
 801b644:	0801c21f 	.word	0x0801c21f
 801b648:	0801c257 	.word	0x0801c257
 801b64c:	0801c27b 	.word	0x0801c27b

0801b650 <_cleanup_r>:
 801b650:	4901      	ldr	r1, [pc, #4]	; (801b658 <_cleanup_r+0x8>)
 801b652:	f000 b8af 	b.w	801b7b4 <_fwalk_reent>
 801b656:	bf00      	nop
 801b658:	0801b591 	.word	0x0801b591

0801b65c <__sfmoreglue>:
 801b65c:	b570      	push	{r4, r5, r6, lr}
 801b65e:	1e4a      	subs	r2, r1, #1
 801b660:	2568      	movs	r5, #104	; 0x68
 801b662:	4355      	muls	r5, r2
 801b664:	460e      	mov	r6, r1
 801b666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b66a:	f7ff fd1d 	bl	801b0a8 <_malloc_r>
 801b66e:	4604      	mov	r4, r0
 801b670:	b140      	cbz	r0, 801b684 <__sfmoreglue+0x28>
 801b672:	2100      	movs	r1, #0
 801b674:	e9c0 1600 	strd	r1, r6, [r0]
 801b678:	300c      	adds	r0, #12
 801b67a:	60a0      	str	r0, [r4, #8]
 801b67c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b680:	f7ff fcba 	bl	801aff8 <memset>
 801b684:	4620      	mov	r0, r4
 801b686:	bd70      	pop	{r4, r5, r6, pc}

0801b688 <__sfp_lock_acquire>:
 801b688:	4801      	ldr	r0, [pc, #4]	; (801b690 <__sfp_lock_acquire+0x8>)
 801b68a:	f000 b8b3 	b.w	801b7f4 <__retarget_lock_acquire_recursive>
 801b68e:	bf00      	nop
 801b690:	2004b01c 	.word	0x2004b01c

0801b694 <__sfp_lock_release>:
 801b694:	4801      	ldr	r0, [pc, #4]	; (801b69c <__sfp_lock_release+0x8>)
 801b696:	f000 b8ae 	b.w	801b7f6 <__retarget_lock_release_recursive>
 801b69a:	bf00      	nop
 801b69c:	2004b01c 	.word	0x2004b01c

0801b6a0 <__sinit_lock_acquire>:
 801b6a0:	4801      	ldr	r0, [pc, #4]	; (801b6a8 <__sinit_lock_acquire+0x8>)
 801b6a2:	f000 b8a7 	b.w	801b7f4 <__retarget_lock_acquire_recursive>
 801b6a6:	bf00      	nop
 801b6a8:	2004b017 	.word	0x2004b017

0801b6ac <__sinit_lock_release>:
 801b6ac:	4801      	ldr	r0, [pc, #4]	; (801b6b4 <__sinit_lock_release+0x8>)
 801b6ae:	f000 b8a2 	b.w	801b7f6 <__retarget_lock_release_recursive>
 801b6b2:	bf00      	nop
 801b6b4:	2004b017 	.word	0x2004b017

0801b6b8 <__sinit>:
 801b6b8:	b510      	push	{r4, lr}
 801b6ba:	4604      	mov	r4, r0
 801b6bc:	f7ff fff0 	bl	801b6a0 <__sinit_lock_acquire>
 801b6c0:	69a3      	ldr	r3, [r4, #24]
 801b6c2:	b11b      	cbz	r3, 801b6cc <__sinit+0x14>
 801b6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b6c8:	f7ff bff0 	b.w	801b6ac <__sinit_lock_release>
 801b6cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b6d0:	6523      	str	r3, [r4, #80]	; 0x50
 801b6d2:	4b13      	ldr	r3, [pc, #76]	; (801b720 <__sinit+0x68>)
 801b6d4:	4a13      	ldr	r2, [pc, #76]	; (801b724 <__sinit+0x6c>)
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	62a2      	str	r2, [r4, #40]	; 0x28
 801b6da:	42a3      	cmp	r3, r4
 801b6dc:	bf04      	itt	eq
 801b6de:	2301      	moveq	r3, #1
 801b6e0:	61a3      	streq	r3, [r4, #24]
 801b6e2:	4620      	mov	r0, r4
 801b6e4:	f000 f820 	bl	801b728 <__sfp>
 801b6e8:	6060      	str	r0, [r4, #4]
 801b6ea:	4620      	mov	r0, r4
 801b6ec:	f000 f81c 	bl	801b728 <__sfp>
 801b6f0:	60a0      	str	r0, [r4, #8]
 801b6f2:	4620      	mov	r0, r4
 801b6f4:	f000 f818 	bl	801b728 <__sfp>
 801b6f8:	2200      	movs	r2, #0
 801b6fa:	60e0      	str	r0, [r4, #12]
 801b6fc:	2104      	movs	r1, #4
 801b6fe:	6860      	ldr	r0, [r4, #4]
 801b700:	f7ff ff82 	bl	801b608 <std>
 801b704:	68a0      	ldr	r0, [r4, #8]
 801b706:	2201      	movs	r2, #1
 801b708:	2109      	movs	r1, #9
 801b70a:	f7ff ff7d 	bl	801b608 <std>
 801b70e:	68e0      	ldr	r0, [r4, #12]
 801b710:	2202      	movs	r2, #2
 801b712:	2112      	movs	r1, #18
 801b714:	f7ff ff78 	bl	801b608 <std>
 801b718:	2301      	movs	r3, #1
 801b71a:	61a3      	str	r3, [r4, #24]
 801b71c:	e7d2      	b.n	801b6c4 <__sinit+0xc>
 801b71e:	bf00      	nop
 801b720:	080325b8 	.word	0x080325b8
 801b724:	0801b651 	.word	0x0801b651

0801b728 <__sfp>:
 801b728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b72a:	4607      	mov	r7, r0
 801b72c:	f7ff ffac 	bl	801b688 <__sfp_lock_acquire>
 801b730:	4b1e      	ldr	r3, [pc, #120]	; (801b7ac <__sfp+0x84>)
 801b732:	681e      	ldr	r6, [r3, #0]
 801b734:	69b3      	ldr	r3, [r6, #24]
 801b736:	b913      	cbnz	r3, 801b73e <__sfp+0x16>
 801b738:	4630      	mov	r0, r6
 801b73a:	f7ff ffbd 	bl	801b6b8 <__sinit>
 801b73e:	3648      	adds	r6, #72	; 0x48
 801b740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b744:	3b01      	subs	r3, #1
 801b746:	d503      	bpl.n	801b750 <__sfp+0x28>
 801b748:	6833      	ldr	r3, [r6, #0]
 801b74a:	b30b      	cbz	r3, 801b790 <__sfp+0x68>
 801b74c:	6836      	ldr	r6, [r6, #0]
 801b74e:	e7f7      	b.n	801b740 <__sfp+0x18>
 801b750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b754:	b9d5      	cbnz	r5, 801b78c <__sfp+0x64>
 801b756:	4b16      	ldr	r3, [pc, #88]	; (801b7b0 <__sfp+0x88>)
 801b758:	60e3      	str	r3, [r4, #12]
 801b75a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b75e:	6665      	str	r5, [r4, #100]	; 0x64
 801b760:	f000 f847 	bl	801b7f2 <__retarget_lock_init_recursive>
 801b764:	f7ff ff96 	bl	801b694 <__sfp_lock_release>
 801b768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b76c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b770:	6025      	str	r5, [r4, #0]
 801b772:	61a5      	str	r5, [r4, #24]
 801b774:	2208      	movs	r2, #8
 801b776:	4629      	mov	r1, r5
 801b778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b77c:	f7ff fc3c 	bl	801aff8 <memset>
 801b780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b788:	4620      	mov	r0, r4
 801b78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b78c:	3468      	adds	r4, #104	; 0x68
 801b78e:	e7d9      	b.n	801b744 <__sfp+0x1c>
 801b790:	2104      	movs	r1, #4
 801b792:	4638      	mov	r0, r7
 801b794:	f7ff ff62 	bl	801b65c <__sfmoreglue>
 801b798:	4604      	mov	r4, r0
 801b79a:	6030      	str	r0, [r6, #0]
 801b79c:	2800      	cmp	r0, #0
 801b79e:	d1d5      	bne.n	801b74c <__sfp+0x24>
 801b7a0:	f7ff ff78 	bl	801b694 <__sfp_lock_release>
 801b7a4:	230c      	movs	r3, #12
 801b7a6:	603b      	str	r3, [r7, #0]
 801b7a8:	e7ee      	b.n	801b788 <__sfp+0x60>
 801b7aa:	bf00      	nop
 801b7ac:	080325b8 	.word	0x080325b8
 801b7b0:	ffff0001 	.word	0xffff0001

0801b7b4 <_fwalk_reent>:
 801b7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b7b8:	4606      	mov	r6, r0
 801b7ba:	4688      	mov	r8, r1
 801b7bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b7c0:	2700      	movs	r7, #0
 801b7c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b7c6:	f1b9 0901 	subs.w	r9, r9, #1
 801b7ca:	d505      	bpl.n	801b7d8 <_fwalk_reent+0x24>
 801b7cc:	6824      	ldr	r4, [r4, #0]
 801b7ce:	2c00      	cmp	r4, #0
 801b7d0:	d1f7      	bne.n	801b7c2 <_fwalk_reent+0xe>
 801b7d2:	4638      	mov	r0, r7
 801b7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b7d8:	89ab      	ldrh	r3, [r5, #12]
 801b7da:	2b01      	cmp	r3, #1
 801b7dc:	d907      	bls.n	801b7ee <_fwalk_reent+0x3a>
 801b7de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b7e2:	3301      	adds	r3, #1
 801b7e4:	d003      	beq.n	801b7ee <_fwalk_reent+0x3a>
 801b7e6:	4629      	mov	r1, r5
 801b7e8:	4630      	mov	r0, r6
 801b7ea:	47c0      	blx	r8
 801b7ec:	4307      	orrs	r7, r0
 801b7ee:	3568      	adds	r5, #104	; 0x68
 801b7f0:	e7e9      	b.n	801b7c6 <_fwalk_reent+0x12>

0801b7f2 <__retarget_lock_init_recursive>:
 801b7f2:	4770      	bx	lr

0801b7f4 <__retarget_lock_acquire_recursive>:
 801b7f4:	4770      	bx	lr

0801b7f6 <__retarget_lock_release_recursive>:
 801b7f6:	4770      	bx	lr

0801b7f8 <__swhatbuf_r>:
 801b7f8:	b570      	push	{r4, r5, r6, lr}
 801b7fa:	460e      	mov	r6, r1
 801b7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b800:	2900      	cmp	r1, #0
 801b802:	b096      	sub	sp, #88	; 0x58
 801b804:	4614      	mov	r4, r2
 801b806:	461d      	mov	r5, r3
 801b808:	da07      	bge.n	801b81a <__swhatbuf_r+0x22>
 801b80a:	2300      	movs	r3, #0
 801b80c:	602b      	str	r3, [r5, #0]
 801b80e:	89b3      	ldrh	r3, [r6, #12]
 801b810:	061a      	lsls	r2, r3, #24
 801b812:	d410      	bmi.n	801b836 <__swhatbuf_r+0x3e>
 801b814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b818:	e00e      	b.n	801b838 <__swhatbuf_r+0x40>
 801b81a:	466a      	mov	r2, sp
 801b81c:	f000 fd54 	bl	801c2c8 <_fstat_r>
 801b820:	2800      	cmp	r0, #0
 801b822:	dbf2      	blt.n	801b80a <__swhatbuf_r+0x12>
 801b824:	9a01      	ldr	r2, [sp, #4]
 801b826:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b82a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b82e:	425a      	negs	r2, r3
 801b830:	415a      	adcs	r2, r3
 801b832:	602a      	str	r2, [r5, #0]
 801b834:	e7ee      	b.n	801b814 <__swhatbuf_r+0x1c>
 801b836:	2340      	movs	r3, #64	; 0x40
 801b838:	2000      	movs	r0, #0
 801b83a:	6023      	str	r3, [r4, #0]
 801b83c:	b016      	add	sp, #88	; 0x58
 801b83e:	bd70      	pop	{r4, r5, r6, pc}

0801b840 <__smakebuf_r>:
 801b840:	898b      	ldrh	r3, [r1, #12]
 801b842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b844:	079d      	lsls	r5, r3, #30
 801b846:	4606      	mov	r6, r0
 801b848:	460c      	mov	r4, r1
 801b84a:	d507      	bpl.n	801b85c <__smakebuf_r+0x1c>
 801b84c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b850:	6023      	str	r3, [r4, #0]
 801b852:	6123      	str	r3, [r4, #16]
 801b854:	2301      	movs	r3, #1
 801b856:	6163      	str	r3, [r4, #20]
 801b858:	b002      	add	sp, #8
 801b85a:	bd70      	pop	{r4, r5, r6, pc}
 801b85c:	ab01      	add	r3, sp, #4
 801b85e:	466a      	mov	r2, sp
 801b860:	f7ff ffca 	bl	801b7f8 <__swhatbuf_r>
 801b864:	9900      	ldr	r1, [sp, #0]
 801b866:	4605      	mov	r5, r0
 801b868:	4630      	mov	r0, r6
 801b86a:	f7ff fc1d 	bl	801b0a8 <_malloc_r>
 801b86e:	b948      	cbnz	r0, 801b884 <__smakebuf_r+0x44>
 801b870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b874:	059a      	lsls	r2, r3, #22
 801b876:	d4ef      	bmi.n	801b858 <__smakebuf_r+0x18>
 801b878:	f023 0303 	bic.w	r3, r3, #3
 801b87c:	f043 0302 	orr.w	r3, r3, #2
 801b880:	81a3      	strh	r3, [r4, #12]
 801b882:	e7e3      	b.n	801b84c <__smakebuf_r+0xc>
 801b884:	4b0d      	ldr	r3, [pc, #52]	; (801b8bc <__smakebuf_r+0x7c>)
 801b886:	62b3      	str	r3, [r6, #40]	; 0x28
 801b888:	89a3      	ldrh	r3, [r4, #12]
 801b88a:	6020      	str	r0, [r4, #0]
 801b88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b890:	81a3      	strh	r3, [r4, #12]
 801b892:	9b00      	ldr	r3, [sp, #0]
 801b894:	6163      	str	r3, [r4, #20]
 801b896:	9b01      	ldr	r3, [sp, #4]
 801b898:	6120      	str	r0, [r4, #16]
 801b89a:	b15b      	cbz	r3, 801b8b4 <__smakebuf_r+0x74>
 801b89c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b8a0:	4630      	mov	r0, r6
 801b8a2:	f000 fd23 	bl	801c2ec <_isatty_r>
 801b8a6:	b128      	cbz	r0, 801b8b4 <__smakebuf_r+0x74>
 801b8a8:	89a3      	ldrh	r3, [r4, #12]
 801b8aa:	f023 0303 	bic.w	r3, r3, #3
 801b8ae:	f043 0301 	orr.w	r3, r3, #1
 801b8b2:	81a3      	strh	r3, [r4, #12]
 801b8b4:	89a0      	ldrh	r0, [r4, #12]
 801b8b6:	4305      	orrs	r5, r0
 801b8b8:	81a5      	strh	r5, [r4, #12]
 801b8ba:	e7cd      	b.n	801b858 <__smakebuf_r+0x18>
 801b8bc:	0801b651 	.word	0x0801b651

0801b8c0 <__malloc_lock>:
 801b8c0:	4801      	ldr	r0, [pc, #4]	; (801b8c8 <__malloc_lock+0x8>)
 801b8c2:	f7ff bf97 	b.w	801b7f4 <__retarget_lock_acquire_recursive>
 801b8c6:	bf00      	nop
 801b8c8:	2004b018 	.word	0x2004b018

0801b8cc <__malloc_unlock>:
 801b8cc:	4801      	ldr	r0, [pc, #4]	; (801b8d4 <__malloc_unlock+0x8>)
 801b8ce:	f7ff bf92 	b.w	801b7f6 <__retarget_lock_release_recursive>
 801b8d2:	bf00      	nop
 801b8d4:	2004b018 	.word	0x2004b018

0801b8d8 <__ssputs_r>:
 801b8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8dc:	688e      	ldr	r6, [r1, #8]
 801b8de:	429e      	cmp	r6, r3
 801b8e0:	4682      	mov	sl, r0
 801b8e2:	460c      	mov	r4, r1
 801b8e4:	4690      	mov	r8, r2
 801b8e6:	461f      	mov	r7, r3
 801b8e8:	d838      	bhi.n	801b95c <__ssputs_r+0x84>
 801b8ea:	898a      	ldrh	r2, [r1, #12]
 801b8ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b8f0:	d032      	beq.n	801b958 <__ssputs_r+0x80>
 801b8f2:	6825      	ldr	r5, [r4, #0]
 801b8f4:	6909      	ldr	r1, [r1, #16]
 801b8f6:	eba5 0901 	sub.w	r9, r5, r1
 801b8fa:	6965      	ldr	r5, [r4, #20]
 801b8fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b904:	3301      	adds	r3, #1
 801b906:	444b      	add	r3, r9
 801b908:	106d      	asrs	r5, r5, #1
 801b90a:	429d      	cmp	r5, r3
 801b90c:	bf38      	it	cc
 801b90e:	461d      	movcc	r5, r3
 801b910:	0553      	lsls	r3, r2, #21
 801b912:	d531      	bpl.n	801b978 <__ssputs_r+0xa0>
 801b914:	4629      	mov	r1, r5
 801b916:	f7ff fbc7 	bl	801b0a8 <_malloc_r>
 801b91a:	4606      	mov	r6, r0
 801b91c:	b950      	cbnz	r0, 801b934 <__ssputs_r+0x5c>
 801b91e:	230c      	movs	r3, #12
 801b920:	f8ca 3000 	str.w	r3, [sl]
 801b924:	89a3      	ldrh	r3, [r4, #12]
 801b926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b92a:	81a3      	strh	r3, [r4, #12]
 801b92c:	f04f 30ff 	mov.w	r0, #4294967295
 801b930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b934:	6921      	ldr	r1, [r4, #16]
 801b936:	464a      	mov	r2, r9
 801b938:	f7ff fb50 	bl	801afdc <memcpy>
 801b93c:	89a3      	ldrh	r3, [r4, #12]
 801b93e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b946:	81a3      	strh	r3, [r4, #12]
 801b948:	6126      	str	r6, [r4, #16]
 801b94a:	6165      	str	r5, [r4, #20]
 801b94c:	444e      	add	r6, r9
 801b94e:	eba5 0509 	sub.w	r5, r5, r9
 801b952:	6026      	str	r6, [r4, #0]
 801b954:	60a5      	str	r5, [r4, #8]
 801b956:	463e      	mov	r6, r7
 801b958:	42be      	cmp	r6, r7
 801b95a:	d900      	bls.n	801b95e <__ssputs_r+0x86>
 801b95c:	463e      	mov	r6, r7
 801b95e:	4632      	mov	r2, r6
 801b960:	6820      	ldr	r0, [r4, #0]
 801b962:	4641      	mov	r1, r8
 801b964:	f000 fce4 	bl	801c330 <memmove>
 801b968:	68a3      	ldr	r3, [r4, #8]
 801b96a:	6822      	ldr	r2, [r4, #0]
 801b96c:	1b9b      	subs	r3, r3, r6
 801b96e:	4432      	add	r2, r6
 801b970:	60a3      	str	r3, [r4, #8]
 801b972:	6022      	str	r2, [r4, #0]
 801b974:	2000      	movs	r0, #0
 801b976:	e7db      	b.n	801b930 <__ssputs_r+0x58>
 801b978:	462a      	mov	r2, r5
 801b97a:	f000 fcf3 	bl	801c364 <_realloc_r>
 801b97e:	4606      	mov	r6, r0
 801b980:	2800      	cmp	r0, #0
 801b982:	d1e1      	bne.n	801b948 <__ssputs_r+0x70>
 801b984:	6921      	ldr	r1, [r4, #16]
 801b986:	4650      	mov	r0, sl
 801b988:	f7ff fb3e 	bl	801b008 <_free_r>
 801b98c:	e7c7      	b.n	801b91e <__ssputs_r+0x46>
	...

0801b990 <_svfiprintf_r>:
 801b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b994:	4698      	mov	r8, r3
 801b996:	898b      	ldrh	r3, [r1, #12]
 801b998:	061b      	lsls	r3, r3, #24
 801b99a:	b09d      	sub	sp, #116	; 0x74
 801b99c:	4607      	mov	r7, r0
 801b99e:	460d      	mov	r5, r1
 801b9a0:	4614      	mov	r4, r2
 801b9a2:	d50e      	bpl.n	801b9c2 <_svfiprintf_r+0x32>
 801b9a4:	690b      	ldr	r3, [r1, #16]
 801b9a6:	b963      	cbnz	r3, 801b9c2 <_svfiprintf_r+0x32>
 801b9a8:	2140      	movs	r1, #64	; 0x40
 801b9aa:	f7ff fb7d 	bl	801b0a8 <_malloc_r>
 801b9ae:	6028      	str	r0, [r5, #0]
 801b9b0:	6128      	str	r0, [r5, #16]
 801b9b2:	b920      	cbnz	r0, 801b9be <_svfiprintf_r+0x2e>
 801b9b4:	230c      	movs	r3, #12
 801b9b6:	603b      	str	r3, [r7, #0]
 801b9b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b9bc:	e0d1      	b.n	801bb62 <_svfiprintf_r+0x1d2>
 801b9be:	2340      	movs	r3, #64	; 0x40
 801b9c0:	616b      	str	r3, [r5, #20]
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	9309      	str	r3, [sp, #36]	; 0x24
 801b9c6:	2320      	movs	r3, #32
 801b9c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b9cc:	f8cd 800c 	str.w	r8, [sp, #12]
 801b9d0:	2330      	movs	r3, #48	; 0x30
 801b9d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bb7c <_svfiprintf_r+0x1ec>
 801b9d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b9da:	f04f 0901 	mov.w	r9, #1
 801b9de:	4623      	mov	r3, r4
 801b9e0:	469a      	mov	sl, r3
 801b9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9e6:	b10a      	cbz	r2, 801b9ec <_svfiprintf_r+0x5c>
 801b9e8:	2a25      	cmp	r2, #37	; 0x25
 801b9ea:	d1f9      	bne.n	801b9e0 <_svfiprintf_r+0x50>
 801b9ec:	ebba 0b04 	subs.w	fp, sl, r4
 801b9f0:	d00b      	beq.n	801ba0a <_svfiprintf_r+0x7a>
 801b9f2:	465b      	mov	r3, fp
 801b9f4:	4622      	mov	r2, r4
 801b9f6:	4629      	mov	r1, r5
 801b9f8:	4638      	mov	r0, r7
 801b9fa:	f7ff ff6d 	bl	801b8d8 <__ssputs_r>
 801b9fe:	3001      	adds	r0, #1
 801ba00:	f000 80aa 	beq.w	801bb58 <_svfiprintf_r+0x1c8>
 801ba04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba06:	445a      	add	r2, fp
 801ba08:	9209      	str	r2, [sp, #36]	; 0x24
 801ba0a:	f89a 3000 	ldrb.w	r3, [sl]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	f000 80a2 	beq.w	801bb58 <_svfiprintf_r+0x1c8>
 801ba14:	2300      	movs	r3, #0
 801ba16:	f04f 32ff 	mov.w	r2, #4294967295
 801ba1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ba1e:	f10a 0a01 	add.w	sl, sl, #1
 801ba22:	9304      	str	r3, [sp, #16]
 801ba24:	9307      	str	r3, [sp, #28]
 801ba26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ba2a:	931a      	str	r3, [sp, #104]	; 0x68
 801ba2c:	4654      	mov	r4, sl
 801ba2e:	2205      	movs	r2, #5
 801ba30:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba34:	4851      	ldr	r0, [pc, #324]	; (801bb7c <_svfiprintf_r+0x1ec>)
 801ba36:	f7e4 fc4b 	bl	80002d0 <memchr>
 801ba3a:	9a04      	ldr	r2, [sp, #16]
 801ba3c:	b9d8      	cbnz	r0, 801ba76 <_svfiprintf_r+0xe6>
 801ba3e:	06d0      	lsls	r0, r2, #27
 801ba40:	bf44      	itt	mi
 801ba42:	2320      	movmi	r3, #32
 801ba44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba48:	0711      	lsls	r1, r2, #28
 801ba4a:	bf44      	itt	mi
 801ba4c:	232b      	movmi	r3, #43	; 0x2b
 801ba4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba52:	f89a 3000 	ldrb.w	r3, [sl]
 801ba56:	2b2a      	cmp	r3, #42	; 0x2a
 801ba58:	d015      	beq.n	801ba86 <_svfiprintf_r+0xf6>
 801ba5a:	9a07      	ldr	r2, [sp, #28]
 801ba5c:	4654      	mov	r4, sl
 801ba5e:	2000      	movs	r0, #0
 801ba60:	f04f 0c0a 	mov.w	ip, #10
 801ba64:	4621      	mov	r1, r4
 801ba66:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba6a:	3b30      	subs	r3, #48	; 0x30
 801ba6c:	2b09      	cmp	r3, #9
 801ba6e:	d94e      	bls.n	801bb0e <_svfiprintf_r+0x17e>
 801ba70:	b1b0      	cbz	r0, 801baa0 <_svfiprintf_r+0x110>
 801ba72:	9207      	str	r2, [sp, #28]
 801ba74:	e014      	b.n	801baa0 <_svfiprintf_r+0x110>
 801ba76:	eba0 0308 	sub.w	r3, r0, r8
 801ba7a:	fa09 f303 	lsl.w	r3, r9, r3
 801ba7e:	4313      	orrs	r3, r2
 801ba80:	9304      	str	r3, [sp, #16]
 801ba82:	46a2      	mov	sl, r4
 801ba84:	e7d2      	b.n	801ba2c <_svfiprintf_r+0x9c>
 801ba86:	9b03      	ldr	r3, [sp, #12]
 801ba88:	1d19      	adds	r1, r3, #4
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	9103      	str	r1, [sp, #12]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	bfbb      	ittet	lt
 801ba92:	425b      	neglt	r3, r3
 801ba94:	f042 0202 	orrlt.w	r2, r2, #2
 801ba98:	9307      	strge	r3, [sp, #28]
 801ba9a:	9307      	strlt	r3, [sp, #28]
 801ba9c:	bfb8      	it	lt
 801ba9e:	9204      	strlt	r2, [sp, #16]
 801baa0:	7823      	ldrb	r3, [r4, #0]
 801baa2:	2b2e      	cmp	r3, #46	; 0x2e
 801baa4:	d10c      	bne.n	801bac0 <_svfiprintf_r+0x130>
 801baa6:	7863      	ldrb	r3, [r4, #1]
 801baa8:	2b2a      	cmp	r3, #42	; 0x2a
 801baaa:	d135      	bne.n	801bb18 <_svfiprintf_r+0x188>
 801baac:	9b03      	ldr	r3, [sp, #12]
 801baae:	1d1a      	adds	r2, r3, #4
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	9203      	str	r2, [sp, #12]
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	bfb8      	it	lt
 801bab8:	f04f 33ff 	movlt.w	r3, #4294967295
 801babc:	3402      	adds	r4, #2
 801babe:	9305      	str	r3, [sp, #20]
 801bac0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bb8c <_svfiprintf_r+0x1fc>
 801bac4:	7821      	ldrb	r1, [r4, #0]
 801bac6:	2203      	movs	r2, #3
 801bac8:	4650      	mov	r0, sl
 801baca:	f7e4 fc01 	bl	80002d0 <memchr>
 801bace:	b140      	cbz	r0, 801bae2 <_svfiprintf_r+0x152>
 801bad0:	2340      	movs	r3, #64	; 0x40
 801bad2:	eba0 000a 	sub.w	r0, r0, sl
 801bad6:	fa03 f000 	lsl.w	r0, r3, r0
 801bada:	9b04      	ldr	r3, [sp, #16]
 801badc:	4303      	orrs	r3, r0
 801bade:	3401      	adds	r4, #1
 801bae0:	9304      	str	r3, [sp, #16]
 801bae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bae6:	4826      	ldr	r0, [pc, #152]	; (801bb80 <_svfiprintf_r+0x1f0>)
 801bae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801baec:	2206      	movs	r2, #6
 801baee:	f7e4 fbef 	bl	80002d0 <memchr>
 801baf2:	2800      	cmp	r0, #0
 801baf4:	d038      	beq.n	801bb68 <_svfiprintf_r+0x1d8>
 801baf6:	4b23      	ldr	r3, [pc, #140]	; (801bb84 <_svfiprintf_r+0x1f4>)
 801baf8:	bb1b      	cbnz	r3, 801bb42 <_svfiprintf_r+0x1b2>
 801bafa:	9b03      	ldr	r3, [sp, #12]
 801bafc:	3307      	adds	r3, #7
 801bafe:	f023 0307 	bic.w	r3, r3, #7
 801bb02:	3308      	adds	r3, #8
 801bb04:	9303      	str	r3, [sp, #12]
 801bb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb08:	4433      	add	r3, r6
 801bb0a:	9309      	str	r3, [sp, #36]	; 0x24
 801bb0c:	e767      	b.n	801b9de <_svfiprintf_r+0x4e>
 801bb0e:	fb0c 3202 	mla	r2, ip, r2, r3
 801bb12:	460c      	mov	r4, r1
 801bb14:	2001      	movs	r0, #1
 801bb16:	e7a5      	b.n	801ba64 <_svfiprintf_r+0xd4>
 801bb18:	2300      	movs	r3, #0
 801bb1a:	3401      	adds	r4, #1
 801bb1c:	9305      	str	r3, [sp, #20]
 801bb1e:	4619      	mov	r1, r3
 801bb20:	f04f 0c0a 	mov.w	ip, #10
 801bb24:	4620      	mov	r0, r4
 801bb26:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bb2a:	3a30      	subs	r2, #48	; 0x30
 801bb2c:	2a09      	cmp	r2, #9
 801bb2e:	d903      	bls.n	801bb38 <_svfiprintf_r+0x1a8>
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d0c5      	beq.n	801bac0 <_svfiprintf_r+0x130>
 801bb34:	9105      	str	r1, [sp, #20]
 801bb36:	e7c3      	b.n	801bac0 <_svfiprintf_r+0x130>
 801bb38:	fb0c 2101 	mla	r1, ip, r1, r2
 801bb3c:	4604      	mov	r4, r0
 801bb3e:	2301      	movs	r3, #1
 801bb40:	e7f0      	b.n	801bb24 <_svfiprintf_r+0x194>
 801bb42:	ab03      	add	r3, sp, #12
 801bb44:	9300      	str	r3, [sp, #0]
 801bb46:	462a      	mov	r2, r5
 801bb48:	4b0f      	ldr	r3, [pc, #60]	; (801bb88 <_svfiprintf_r+0x1f8>)
 801bb4a:	a904      	add	r1, sp, #16
 801bb4c:	4638      	mov	r0, r7
 801bb4e:	f3af 8000 	nop.w
 801bb52:	1c42      	adds	r2, r0, #1
 801bb54:	4606      	mov	r6, r0
 801bb56:	d1d6      	bne.n	801bb06 <_svfiprintf_r+0x176>
 801bb58:	89ab      	ldrh	r3, [r5, #12]
 801bb5a:	065b      	lsls	r3, r3, #25
 801bb5c:	f53f af2c 	bmi.w	801b9b8 <_svfiprintf_r+0x28>
 801bb60:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bb62:	b01d      	add	sp, #116	; 0x74
 801bb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb68:	ab03      	add	r3, sp, #12
 801bb6a:	9300      	str	r3, [sp, #0]
 801bb6c:	462a      	mov	r2, r5
 801bb6e:	4b06      	ldr	r3, [pc, #24]	; (801bb88 <_svfiprintf_r+0x1f8>)
 801bb70:	a904      	add	r1, sp, #16
 801bb72:	4638      	mov	r0, r7
 801bb74:	f000 f9d4 	bl	801bf20 <_printf_i>
 801bb78:	e7eb      	b.n	801bb52 <_svfiprintf_r+0x1c2>
 801bb7a:	bf00      	nop
 801bb7c:	0803261c 	.word	0x0803261c
 801bb80:	08032626 	.word	0x08032626
 801bb84:	00000000 	.word	0x00000000
 801bb88:	0801b8d9 	.word	0x0801b8d9
 801bb8c:	08032622 	.word	0x08032622

0801bb90 <__sfputc_r>:
 801bb90:	6893      	ldr	r3, [r2, #8]
 801bb92:	3b01      	subs	r3, #1
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	b410      	push	{r4}
 801bb98:	6093      	str	r3, [r2, #8]
 801bb9a:	da08      	bge.n	801bbae <__sfputc_r+0x1e>
 801bb9c:	6994      	ldr	r4, [r2, #24]
 801bb9e:	42a3      	cmp	r3, r4
 801bba0:	db01      	blt.n	801bba6 <__sfputc_r+0x16>
 801bba2:	290a      	cmp	r1, #10
 801bba4:	d103      	bne.n	801bbae <__sfputc_r+0x1e>
 801bba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bbaa:	f7ff bbab 	b.w	801b304 <__swbuf_r>
 801bbae:	6813      	ldr	r3, [r2, #0]
 801bbb0:	1c58      	adds	r0, r3, #1
 801bbb2:	6010      	str	r0, [r2, #0]
 801bbb4:	7019      	strb	r1, [r3, #0]
 801bbb6:	4608      	mov	r0, r1
 801bbb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bbbc:	4770      	bx	lr

0801bbbe <__sfputs_r>:
 801bbbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbc0:	4606      	mov	r6, r0
 801bbc2:	460f      	mov	r7, r1
 801bbc4:	4614      	mov	r4, r2
 801bbc6:	18d5      	adds	r5, r2, r3
 801bbc8:	42ac      	cmp	r4, r5
 801bbca:	d101      	bne.n	801bbd0 <__sfputs_r+0x12>
 801bbcc:	2000      	movs	r0, #0
 801bbce:	e007      	b.n	801bbe0 <__sfputs_r+0x22>
 801bbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbd4:	463a      	mov	r2, r7
 801bbd6:	4630      	mov	r0, r6
 801bbd8:	f7ff ffda 	bl	801bb90 <__sfputc_r>
 801bbdc:	1c43      	adds	r3, r0, #1
 801bbde:	d1f3      	bne.n	801bbc8 <__sfputs_r+0xa>
 801bbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bbe4 <_vfiprintf_r>:
 801bbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbe8:	460d      	mov	r5, r1
 801bbea:	b09d      	sub	sp, #116	; 0x74
 801bbec:	4614      	mov	r4, r2
 801bbee:	4698      	mov	r8, r3
 801bbf0:	4606      	mov	r6, r0
 801bbf2:	b118      	cbz	r0, 801bbfc <_vfiprintf_r+0x18>
 801bbf4:	6983      	ldr	r3, [r0, #24]
 801bbf6:	b90b      	cbnz	r3, 801bbfc <_vfiprintf_r+0x18>
 801bbf8:	f7ff fd5e 	bl	801b6b8 <__sinit>
 801bbfc:	4b89      	ldr	r3, [pc, #548]	; (801be24 <_vfiprintf_r+0x240>)
 801bbfe:	429d      	cmp	r5, r3
 801bc00:	d11b      	bne.n	801bc3a <_vfiprintf_r+0x56>
 801bc02:	6875      	ldr	r5, [r6, #4]
 801bc04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc06:	07d9      	lsls	r1, r3, #31
 801bc08:	d405      	bmi.n	801bc16 <_vfiprintf_r+0x32>
 801bc0a:	89ab      	ldrh	r3, [r5, #12]
 801bc0c:	059a      	lsls	r2, r3, #22
 801bc0e:	d402      	bmi.n	801bc16 <_vfiprintf_r+0x32>
 801bc10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bc12:	f7ff fdef 	bl	801b7f4 <__retarget_lock_acquire_recursive>
 801bc16:	89ab      	ldrh	r3, [r5, #12]
 801bc18:	071b      	lsls	r3, r3, #28
 801bc1a:	d501      	bpl.n	801bc20 <_vfiprintf_r+0x3c>
 801bc1c:	692b      	ldr	r3, [r5, #16]
 801bc1e:	b9eb      	cbnz	r3, 801bc5c <_vfiprintf_r+0x78>
 801bc20:	4629      	mov	r1, r5
 801bc22:	4630      	mov	r0, r6
 801bc24:	f7ff fbc0 	bl	801b3a8 <__swsetup_r>
 801bc28:	b1c0      	cbz	r0, 801bc5c <_vfiprintf_r+0x78>
 801bc2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc2c:	07dc      	lsls	r4, r3, #31
 801bc2e:	d50e      	bpl.n	801bc4e <_vfiprintf_r+0x6a>
 801bc30:	f04f 30ff 	mov.w	r0, #4294967295
 801bc34:	b01d      	add	sp, #116	; 0x74
 801bc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc3a:	4b7b      	ldr	r3, [pc, #492]	; (801be28 <_vfiprintf_r+0x244>)
 801bc3c:	429d      	cmp	r5, r3
 801bc3e:	d101      	bne.n	801bc44 <_vfiprintf_r+0x60>
 801bc40:	68b5      	ldr	r5, [r6, #8]
 801bc42:	e7df      	b.n	801bc04 <_vfiprintf_r+0x20>
 801bc44:	4b79      	ldr	r3, [pc, #484]	; (801be2c <_vfiprintf_r+0x248>)
 801bc46:	429d      	cmp	r5, r3
 801bc48:	bf08      	it	eq
 801bc4a:	68f5      	ldreq	r5, [r6, #12]
 801bc4c:	e7da      	b.n	801bc04 <_vfiprintf_r+0x20>
 801bc4e:	89ab      	ldrh	r3, [r5, #12]
 801bc50:	0598      	lsls	r0, r3, #22
 801bc52:	d4ed      	bmi.n	801bc30 <_vfiprintf_r+0x4c>
 801bc54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bc56:	f7ff fdce 	bl	801b7f6 <__retarget_lock_release_recursive>
 801bc5a:	e7e9      	b.n	801bc30 <_vfiprintf_r+0x4c>
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	9309      	str	r3, [sp, #36]	; 0x24
 801bc60:	2320      	movs	r3, #32
 801bc62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bc66:	f8cd 800c 	str.w	r8, [sp, #12]
 801bc6a:	2330      	movs	r3, #48	; 0x30
 801bc6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801be30 <_vfiprintf_r+0x24c>
 801bc70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bc74:	f04f 0901 	mov.w	r9, #1
 801bc78:	4623      	mov	r3, r4
 801bc7a:	469a      	mov	sl, r3
 801bc7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc80:	b10a      	cbz	r2, 801bc86 <_vfiprintf_r+0xa2>
 801bc82:	2a25      	cmp	r2, #37	; 0x25
 801bc84:	d1f9      	bne.n	801bc7a <_vfiprintf_r+0x96>
 801bc86:	ebba 0b04 	subs.w	fp, sl, r4
 801bc8a:	d00b      	beq.n	801bca4 <_vfiprintf_r+0xc0>
 801bc8c:	465b      	mov	r3, fp
 801bc8e:	4622      	mov	r2, r4
 801bc90:	4629      	mov	r1, r5
 801bc92:	4630      	mov	r0, r6
 801bc94:	f7ff ff93 	bl	801bbbe <__sfputs_r>
 801bc98:	3001      	adds	r0, #1
 801bc9a:	f000 80aa 	beq.w	801bdf2 <_vfiprintf_r+0x20e>
 801bc9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bca0:	445a      	add	r2, fp
 801bca2:	9209      	str	r2, [sp, #36]	; 0x24
 801bca4:	f89a 3000 	ldrb.w	r3, [sl]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	f000 80a2 	beq.w	801bdf2 <_vfiprintf_r+0x20e>
 801bcae:	2300      	movs	r3, #0
 801bcb0:	f04f 32ff 	mov.w	r2, #4294967295
 801bcb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bcb8:	f10a 0a01 	add.w	sl, sl, #1
 801bcbc:	9304      	str	r3, [sp, #16]
 801bcbe:	9307      	str	r3, [sp, #28]
 801bcc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bcc4:	931a      	str	r3, [sp, #104]	; 0x68
 801bcc6:	4654      	mov	r4, sl
 801bcc8:	2205      	movs	r2, #5
 801bcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcce:	4858      	ldr	r0, [pc, #352]	; (801be30 <_vfiprintf_r+0x24c>)
 801bcd0:	f7e4 fafe 	bl	80002d0 <memchr>
 801bcd4:	9a04      	ldr	r2, [sp, #16]
 801bcd6:	b9d8      	cbnz	r0, 801bd10 <_vfiprintf_r+0x12c>
 801bcd8:	06d1      	lsls	r1, r2, #27
 801bcda:	bf44      	itt	mi
 801bcdc:	2320      	movmi	r3, #32
 801bcde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bce2:	0713      	lsls	r3, r2, #28
 801bce4:	bf44      	itt	mi
 801bce6:	232b      	movmi	r3, #43	; 0x2b
 801bce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bcec:	f89a 3000 	ldrb.w	r3, [sl]
 801bcf0:	2b2a      	cmp	r3, #42	; 0x2a
 801bcf2:	d015      	beq.n	801bd20 <_vfiprintf_r+0x13c>
 801bcf4:	9a07      	ldr	r2, [sp, #28]
 801bcf6:	4654      	mov	r4, sl
 801bcf8:	2000      	movs	r0, #0
 801bcfa:	f04f 0c0a 	mov.w	ip, #10
 801bcfe:	4621      	mov	r1, r4
 801bd00:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd04:	3b30      	subs	r3, #48	; 0x30
 801bd06:	2b09      	cmp	r3, #9
 801bd08:	d94e      	bls.n	801bda8 <_vfiprintf_r+0x1c4>
 801bd0a:	b1b0      	cbz	r0, 801bd3a <_vfiprintf_r+0x156>
 801bd0c:	9207      	str	r2, [sp, #28]
 801bd0e:	e014      	b.n	801bd3a <_vfiprintf_r+0x156>
 801bd10:	eba0 0308 	sub.w	r3, r0, r8
 801bd14:	fa09 f303 	lsl.w	r3, r9, r3
 801bd18:	4313      	orrs	r3, r2
 801bd1a:	9304      	str	r3, [sp, #16]
 801bd1c:	46a2      	mov	sl, r4
 801bd1e:	e7d2      	b.n	801bcc6 <_vfiprintf_r+0xe2>
 801bd20:	9b03      	ldr	r3, [sp, #12]
 801bd22:	1d19      	adds	r1, r3, #4
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	9103      	str	r1, [sp, #12]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	bfbb      	ittet	lt
 801bd2c:	425b      	neglt	r3, r3
 801bd2e:	f042 0202 	orrlt.w	r2, r2, #2
 801bd32:	9307      	strge	r3, [sp, #28]
 801bd34:	9307      	strlt	r3, [sp, #28]
 801bd36:	bfb8      	it	lt
 801bd38:	9204      	strlt	r2, [sp, #16]
 801bd3a:	7823      	ldrb	r3, [r4, #0]
 801bd3c:	2b2e      	cmp	r3, #46	; 0x2e
 801bd3e:	d10c      	bne.n	801bd5a <_vfiprintf_r+0x176>
 801bd40:	7863      	ldrb	r3, [r4, #1]
 801bd42:	2b2a      	cmp	r3, #42	; 0x2a
 801bd44:	d135      	bne.n	801bdb2 <_vfiprintf_r+0x1ce>
 801bd46:	9b03      	ldr	r3, [sp, #12]
 801bd48:	1d1a      	adds	r2, r3, #4
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	9203      	str	r2, [sp, #12]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	bfb8      	it	lt
 801bd52:	f04f 33ff 	movlt.w	r3, #4294967295
 801bd56:	3402      	adds	r4, #2
 801bd58:	9305      	str	r3, [sp, #20]
 801bd5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801be40 <_vfiprintf_r+0x25c>
 801bd5e:	7821      	ldrb	r1, [r4, #0]
 801bd60:	2203      	movs	r2, #3
 801bd62:	4650      	mov	r0, sl
 801bd64:	f7e4 fab4 	bl	80002d0 <memchr>
 801bd68:	b140      	cbz	r0, 801bd7c <_vfiprintf_r+0x198>
 801bd6a:	2340      	movs	r3, #64	; 0x40
 801bd6c:	eba0 000a 	sub.w	r0, r0, sl
 801bd70:	fa03 f000 	lsl.w	r0, r3, r0
 801bd74:	9b04      	ldr	r3, [sp, #16]
 801bd76:	4303      	orrs	r3, r0
 801bd78:	3401      	adds	r4, #1
 801bd7a:	9304      	str	r3, [sp, #16]
 801bd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd80:	482c      	ldr	r0, [pc, #176]	; (801be34 <_vfiprintf_r+0x250>)
 801bd82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bd86:	2206      	movs	r2, #6
 801bd88:	f7e4 faa2 	bl	80002d0 <memchr>
 801bd8c:	2800      	cmp	r0, #0
 801bd8e:	d03f      	beq.n	801be10 <_vfiprintf_r+0x22c>
 801bd90:	4b29      	ldr	r3, [pc, #164]	; (801be38 <_vfiprintf_r+0x254>)
 801bd92:	bb1b      	cbnz	r3, 801bddc <_vfiprintf_r+0x1f8>
 801bd94:	9b03      	ldr	r3, [sp, #12]
 801bd96:	3307      	adds	r3, #7
 801bd98:	f023 0307 	bic.w	r3, r3, #7
 801bd9c:	3308      	adds	r3, #8
 801bd9e:	9303      	str	r3, [sp, #12]
 801bda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bda2:	443b      	add	r3, r7
 801bda4:	9309      	str	r3, [sp, #36]	; 0x24
 801bda6:	e767      	b.n	801bc78 <_vfiprintf_r+0x94>
 801bda8:	fb0c 3202 	mla	r2, ip, r2, r3
 801bdac:	460c      	mov	r4, r1
 801bdae:	2001      	movs	r0, #1
 801bdb0:	e7a5      	b.n	801bcfe <_vfiprintf_r+0x11a>
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	3401      	adds	r4, #1
 801bdb6:	9305      	str	r3, [sp, #20]
 801bdb8:	4619      	mov	r1, r3
 801bdba:	f04f 0c0a 	mov.w	ip, #10
 801bdbe:	4620      	mov	r0, r4
 801bdc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bdc4:	3a30      	subs	r2, #48	; 0x30
 801bdc6:	2a09      	cmp	r2, #9
 801bdc8:	d903      	bls.n	801bdd2 <_vfiprintf_r+0x1ee>
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d0c5      	beq.n	801bd5a <_vfiprintf_r+0x176>
 801bdce:	9105      	str	r1, [sp, #20]
 801bdd0:	e7c3      	b.n	801bd5a <_vfiprintf_r+0x176>
 801bdd2:	fb0c 2101 	mla	r1, ip, r1, r2
 801bdd6:	4604      	mov	r4, r0
 801bdd8:	2301      	movs	r3, #1
 801bdda:	e7f0      	b.n	801bdbe <_vfiprintf_r+0x1da>
 801bddc:	ab03      	add	r3, sp, #12
 801bdde:	9300      	str	r3, [sp, #0]
 801bde0:	462a      	mov	r2, r5
 801bde2:	4b16      	ldr	r3, [pc, #88]	; (801be3c <_vfiprintf_r+0x258>)
 801bde4:	a904      	add	r1, sp, #16
 801bde6:	4630      	mov	r0, r6
 801bde8:	f3af 8000 	nop.w
 801bdec:	4607      	mov	r7, r0
 801bdee:	1c78      	adds	r0, r7, #1
 801bdf0:	d1d6      	bne.n	801bda0 <_vfiprintf_r+0x1bc>
 801bdf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bdf4:	07d9      	lsls	r1, r3, #31
 801bdf6:	d405      	bmi.n	801be04 <_vfiprintf_r+0x220>
 801bdf8:	89ab      	ldrh	r3, [r5, #12]
 801bdfa:	059a      	lsls	r2, r3, #22
 801bdfc:	d402      	bmi.n	801be04 <_vfiprintf_r+0x220>
 801bdfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be00:	f7ff fcf9 	bl	801b7f6 <__retarget_lock_release_recursive>
 801be04:	89ab      	ldrh	r3, [r5, #12]
 801be06:	065b      	lsls	r3, r3, #25
 801be08:	f53f af12 	bmi.w	801bc30 <_vfiprintf_r+0x4c>
 801be0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be0e:	e711      	b.n	801bc34 <_vfiprintf_r+0x50>
 801be10:	ab03      	add	r3, sp, #12
 801be12:	9300      	str	r3, [sp, #0]
 801be14:	462a      	mov	r2, r5
 801be16:	4b09      	ldr	r3, [pc, #36]	; (801be3c <_vfiprintf_r+0x258>)
 801be18:	a904      	add	r1, sp, #16
 801be1a:	4630      	mov	r0, r6
 801be1c:	f000 f880 	bl	801bf20 <_printf_i>
 801be20:	e7e4      	b.n	801bdec <_vfiprintf_r+0x208>
 801be22:	bf00      	nop
 801be24:	080325dc 	.word	0x080325dc
 801be28:	080325fc 	.word	0x080325fc
 801be2c:	080325bc 	.word	0x080325bc
 801be30:	0803261c 	.word	0x0803261c
 801be34:	08032626 	.word	0x08032626
 801be38:	00000000 	.word	0x00000000
 801be3c:	0801bbbf 	.word	0x0801bbbf
 801be40:	08032622 	.word	0x08032622

0801be44 <_printf_common>:
 801be44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be48:	4616      	mov	r6, r2
 801be4a:	4699      	mov	r9, r3
 801be4c:	688a      	ldr	r2, [r1, #8]
 801be4e:	690b      	ldr	r3, [r1, #16]
 801be50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801be54:	4293      	cmp	r3, r2
 801be56:	bfb8      	it	lt
 801be58:	4613      	movlt	r3, r2
 801be5a:	6033      	str	r3, [r6, #0]
 801be5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801be60:	4607      	mov	r7, r0
 801be62:	460c      	mov	r4, r1
 801be64:	b10a      	cbz	r2, 801be6a <_printf_common+0x26>
 801be66:	3301      	adds	r3, #1
 801be68:	6033      	str	r3, [r6, #0]
 801be6a:	6823      	ldr	r3, [r4, #0]
 801be6c:	0699      	lsls	r1, r3, #26
 801be6e:	bf42      	ittt	mi
 801be70:	6833      	ldrmi	r3, [r6, #0]
 801be72:	3302      	addmi	r3, #2
 801be74:	6033      	strmi	r3, [r6, #0]
 801be76:	6825      	ldr	r5, [r4, #0]
 801be78:	f015 0506 	ands.w	r5, r5, #6
 801be7c:	d106      	bne.n	801be8c <_printf_common+0x48>
 801be7e:	f104 0a19 	add.w	sl, r4, #25
 801be82:	68e3      	ldr	r3, [r4, #12]
 801be84:	6832      	ldr	r2, [r6, #0]
 801be86:	1a9b      	subs	r3, r3, r2
 801be88:	42ab      	cmp	r3, r5
 801be8a:	dc26      	bgt.n	801beda <_printf_common+0x96>
 801be8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801be90:	1e13      	subs	r3, r2, #0
 801be92:	6822      	ldr	r2, [r4, #0]
 801be94:	bf18      	it	ne
 801be96:	2301      	movne	r3, #1
 801be98:	0692      	lsls	r2, r2, #26
 801be9a:	d42b      	bmi.n	801bef4 <_printf_common+0xb0>
 801be9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bea0:	4649      	mov	r1, r9
 801bea2:	4638      	mov	r0, r7
 801bea4:	47c0      	blx	r8
 801bea6:	3001      	adds	r0, #1
 801bea8:	d01e      	beq.n	801bee8 <_printf_common+0xa4>
 801beaa:	6823      	ldr	r3, [r4, #0]
 801beac:	68e5      	ldr	r5, [r4, #12]
 801beae:	6832      	ldr	r2, [r6, #0]
 801beb0:	f003 0306 	and.w	r3, r3, #6
 801beb4:	2b04      	cmp	r3, #4
 801beb6:	bf08      	it	eq
 801beb8:	1aad      	subeq	r5, r5, r2
 801beba:	68a3      	ldr	r3, [r4, #8]
 801bebc:	6922      	ldr	r2, [r4, #16]
 801bebe:	bf0c      	ite	eq
 801bec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bec4:	2500      	movne	r5, #0
 801bec6:	4293      	cmp	r3, r2
 801bec8:	bfc4      	itt	gt
 801beca:	1a9b      	subgt	r3, r3, r2
 801becc:	18ed      	addgt	r5, r5, r3
 801bece:	2600      	movs	r6, #0
 801bed0:	341a      	adds	r4, #26
 801bed2:	42b5      	cmp	r5, r6
 801bed4:	d11a      	bne.n	801bf0c <_printf_common+0xc8>
 801bed6:	2000      	movs	r0, #0
 801bed8:	e008      	b.n	801beec <_printf_common+0xa8>
 801beda:	2301      	movs	r3, #1
 801bedc:	4652      	mov	r2, sl
 801bede:	4649      	mov	r1, r9
 801bee0:	4638      	mov	r0, r7
 801bee2:	47c0      	blx	r8
 801bee4:	3001      	adds	r0, #1
 801bee6:	d103      	bne.n	801bef0 <_printf_common+0xac>
 801bee8:	f04f 30ff 	mov.w	r0, #4294967295
 801beec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bef0:	3501      	adds	r5, #1
 801bef2:	e7c6      	b.n	801be82 <_printf_common+0x3e>
 801bef4:	18e1      	adds	r1, r4, r3
 801bef6:	1c5a      	adds	r2, r3, #1
 801bef8:	2030      	movs	r0, #48	; 0x30
 801befa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801befe:	4422      	add	r2, r4
 801bf00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bf04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bf08:	3302      	adds	r3, #2
 801bf0a:	e7c7      	b.n	801be9c <_printf_common+0x58>
 801bf0c:	2301      	movs	r3, #1
 801bf0e:	4622      	mov	r2, r4
 801bf10:	4649      	mov	r1, r9
 801bf12:	4638      	mov	r0, r7
 801bf14:	47c0      	blx	r8
 801bf16:	3001      	adds	r0, #1
 801bf18:	d0e6      	beq.n	801bee8 <_printf_common+0xa4>
 801bf1a:	3601      	adds	r6, #1
 801bf1c:	e7d9      	b.n	801bed2 <_printf_common+0x8e>
	...

0801bf20 <_printf_i>:
 801bf20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bf24:	460c      	mov	r4, r1
 801bf26:	4691      	mov	r9, r2
 801bf28:	7e27      	ldrb	r7, [r4, #24]
 801bf2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bf2c:	2f78      	cmp	r7, #120	; 0x78
 801bf2e:	4680      	mov	r8, r0
 801bf30:	469a      	mov	sl, r3
 801bf32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bf36:	d807      	bhi.n	801bf48 <_printf_i+0x28>
 801bf38:	2f62      	cmp	r7, #98	; 0x62
 801bf3a:	d80a      	bhi.n	801bf52 <_printf_i+0x32>
 801bf3c:	2f00      	cmp	r7, #0
 801bf3e:	f000 80d8 	beq.w	801c0f2 <_printf_i+0x1d2>
 801bf42:	2f58      	cmp	r7, #88	; 0x58
 801bf44:	f000 80a3 	beq.w	801c08e <_printf_i+0x16e>
 801bf48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bf4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bf50:	e03a      	b.n	801bfc8 <_printf_i+0xa8>
 801bf52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bf56:	2b15      	cmp	r3, #21
 801bf58:	d8f6      	bhi.n	801bf48 <_printf_i+0x28>
 801bf5a:	a001      	add	r0, pc, #4	; (adr r0, 801bf60 <_printf_i+0x40>)
 801bf5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801bf60:	0801bfb9 	.word	0x0801bfb9
 801bf64:	0801bfcd 	.word	0x0801bfcd
 801bf68:	0801bf49 	.word	0x0801bf49
 801bf6c:	0801bf49 	.word	0x0801bf49
 801bf70:	0801bf49 	.word	0x0801bf49
 801bf74:	0801bf49 	.word	0x0801bf49
 801bf78:	0801bfcd 	.word	0x0801bfcd
 801bf7c:	0801bf49 	.word	0x0801bf49
 801bf80:	0801bf49 	.word	0x0801bf49
 801bf84:	0801bf49 	.word	0x0801bf49
 801bf88:	0801bf49 	.word	0x0801bf49
 801bf8c:	0801c0d9 	.word	0x0801c0d9
 801bf90:	0801bffd 	.word	0x0801bffd
 801bf94:	0801c0bb 	.word	0x0801c0bb
 801bf98:	0801bf49 	.word	0x0801bf49
 801bf9c:	0801bf49 	.word	0x0801bf49
 801bfa0:	0801c0fb 	.word	0x0801c0fb
 801bfa4:	0801bf49 	.word	0x0801bf49
 801bfa8:	0801bffd 	.word	0x0801bffd
 801bfac:	0801bf49 	.word	0x0801bf49
 801bfb0:	0801bf49 	.word	0x0801bf49
 801bfb4:	0801c0c3 	.word	0x0801c0c3
 801bfb8:	680b      	ldr	r3, [r1, #0]
 801bfba:	1d1a      	adds	r2, r3, #4
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	600a      	str	r2, [r1, #0]
 801bfc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bfc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bfc8:	2301      	movs	r3, #1
 801bfca:	e0a3      	b.n	801c114 <_printf_i+0x1f4>
 801bfcc:	6825      	ldr	r5, [r4, #0]
 801bfce:	6808      	ldr	r0, [r1, #0]
 801bfd0:	062e      	lsls	r6, r5, #24
 801bfd2:	f100 0304 	add.w	r3, r0, #4
 801bfd6:	d50a      	bpl.n	801bfee <_printf_i+0xce>
 801bfd8:	6805      	ldr	r5, [r0, #0]
 801bfda:	600b      	str	r3, [r1, #0]
 801bfdc:	2d00      	cmp	r5, #0
 801bfde:	da03      	bge.n	801bfe8 <_printf_i+0xc8>
 801bfe0:	232d      	movs	r3, #45	; 0x2d
 801bfe2:	426d      	negs	r5, r5
 801bfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bfe8:	485e      	ldr	r0, [pc, #376]	; (801c164 <_printf_i+0x244>)
 801bfea:	230a      	movs	r3, #10
 801bfec:	e019      	b.n	801c022 <_printf_i+0x102>
 801bfee:	f015 0f40 	tst.w	r5, #64	; 0x40
 801bff2:	6805      	ldr	r5, [r0, #0]
 801bff4:	600b      	str	r3, [r1, #0]
 801bff6:	bf18      	it	ne
 801bff8:	b22d      	sxthne	r5, r5
 801bffa:	e7ef      	b.n	801bfdc <_printf_i+0xbc>
 801bffc:	680b      	ldr	r3, [r1, #0]
 801bffe:	6825      	ldr	r5, [r4, #0]
 801c000:	1d18      	adds	r0, r3, #4
 801c002:	6008      	str	r0, [r1, #0]
 801c004:	0628      	lsls	r0, r5, #24
 801c006:	d501      	bpl.n	801c00c <_printf_i+0xec>
 801c008:	681d      	ldr	r5, [r3, #0]
 801c00a:	e002      	b.n	801c012 <_printf_i+0xf2>
 801c00c:	0669      	lsls	r1, r5, #25
 801c00e:	d5fb      	bpl.n	801c008 <_printf_i+0xe8>
 801c010:	881d      	ldrh	r5, [r3, #0]
 801c012:	4854      	ldr	r0, [pc, #336]	; (801c164 <_printf_i+0x244>)
 801c014:	2f6f      	cmp	r7, #111	; 0x6f
 801c016:	bf0c      	ite	eq
 801c018:	2308      	moveq	r3, #8
 801c01a:	230a      	movne	r3, #10
 801c01c:	2100      	movs	r1, #0
 801c01e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c022:	6866      	ldr	r6, [r4, #4]
 801c024:	60a6      	str	r6, [r4, #8]
 801c026:	2e00      	cmp	r6, #0
 801c028:	bfa2      	ittt	ge
 801c02a:	6821      	ldrge	r1, [r4, #0]
 801c02c:	f021 0104 	bicge.w	r1, r1, #4
 801c030:	6021      	strge	r1, [r4, #0]
 801c032:	b90d      	cbnz	r5, 801c038 <_printf_i+0x118>
 801c034:	2e00      	cmp	r6, #0
 801c036:	d04d      	beq.n	801c0d4 <_printf_i+0x1b4>
 801c038:	4616      	mov	r6, r2
 801c03a:	fbb5 f1f3 	udiv	r1, r5, r3
 801c03e:	fb03 5711 	mls	r7, r3, r1, r5
 801c042:	5dc7      	ldrb	r7, [r0, r7]
 801c044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c048:	462f      	mov	r7, r5
 801c04a:	42bb      	cmp	r3, r7
 801c04c:	460d      	mov	r5, r1
 801c04e:	d9f4      	bls.n	801c03a <_printf_i+0x11a>
 801c050:	2b08      	cmp	r3, #8
 801c052:	d10b      	bne.n	801c06c <_printf_i+0x14c>
 801c054:	6823      	ldr	r3, [r4, #0]
 801c056:	07df      	lsls	r7, r3, #31
 801c058:	d508      	bpl.n	801c06c <_printf_i+0x14c>
 801c05a:	6923      	ldr	r3, [r4, #16]
 801c05c:	6861      	ldr	r1, [r4, #4]
 801c05e:	4299      	cmp	r1, r3
 801c060:	bfde      	ittt	le
 801c062:	2330      	movle	r3, #48	; 0x30
 801c064:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c068:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c06c:	1b92      	subs	r2, r2, r6
 801c06e:	6122      	str	r2, [r4, #16]
 801c070:	f8cd a000 	str.w	sl, [sp]
 801c074:	464b      	mov	r3, r9
 801c076:	aa03      	add	r2, sp, #12
 801c078:	4621      	mov	r1, r4
 801c07a:	4640      	mov	r0, r8
 801c07c:	f7ff fee2 	bl	801be44 <_printf_common>
 801c080:	3001      	adds	r0, #1
 801c082:	d14c      	bne.n	801c11e <_printf_i+0x1fe>
 801c084:	f04f 30ff 	mov.w	r0, #4294967295
 801c088:	b004      	add	sp, #16
 801c08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c08e:	4835      	ldr	r0, [pc, #212]	; (801c164 <_printf_i+0x244>)
 801c090:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c094:	6823      	ldr	r3, [r4, #0]
 801c096:	680e      	ldr	r6, [r1, #0]
 801c098:	061f      	lsls	r7, r3, #24
 801c09a:	f856 5b04 	ldr.w	r5, [r6], #4
 801c09e:	600e      	str	r6, [r1, #0]
 801c0a0:	d514      	bpl.n	801c0cc <_printf_i+0x1ac>
 801c0a2:	07d9      	lsls	r1, r3, #31
 801c0a4:	bf44      	itt	mi
 801c0a6:	f043 0320 	orrmi.w	r3, r3, #32
 801c0aa:	6023      	strmi	r3, [r4, #0]
 801c0ac:	b91d      	cbnz	r5, 801c0b6 <_printf_i+0x196>
 801c0ae:	6823      	ldr	r3, [r4, #0]
 801c0b0:	f023 0320 	bic.w	r3, r3, #32
 801c0b4:	6023      	str	r3, [r4, #0]
 801c0b6:	2310      	movs	r3, #16
 801c0b8:	e7b0      	b.n	801c01c <_printf_i+0xfc>
 801c0ba:	6823      	ldr	r3, [r4, #0]
 801c0bc:	f043 0320 	orr.w	r3, r3, #32
 801c0c0:	6023      	str	r3, [r4, #0]
 801c0c2:	2378      	movs	r3, #120	; 0x78
 801c0c4:	4828      	ldr	r0, [pc, #160]	; (801c168 <_printf_i+0x248>)
 801c0c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c0ca:	e7e3      	b.n	801c094 <_printf_i+0x174>
 801c0cc:	065e      	lsls	r6, r3, #25
 801c0ce:	bf48      	it	mi
 801c0d0:	b2ad      	uxthmi	r5, r5
 801c0d2:	e7e6      	b.n	801c0a2 <_printf_i+0x182>
 801c0d4:	4616      	mov	r6, r2
 801c0d6:	e7bb      	b.n	801c050 <_printf_i+0x130>
 801c0d8:	680b      	ldr	r3, [r1, #0]
 801c0da:	6826      	ldr	r6, [r4, #0]
 801c0dc:	6960      	ldr	r0, [r4, #20]
 801c0de:	1d1d      	adds	r5, r3, #4
 801c0e0:	600d      	str	r5, [r1, #0]
 801c0e2:	0635      	lsls	r5, r6, #24
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	d501      	bpl.n	801c0ec <_printf_i+0x1cc>
 801c0e8:	6018      	str	r0, [r3, #0]
 801c0ea:	e002      	b.n	801c0f2 <_printf_i+0x1d2>
 801c0ec:	0671      	lsls	r1, r6, #25
 801c0ee:	d5fb      	bpl.n	801c0e8 <_printf_i+0x1c8>
 801c0f0:	8018      	strh	r0, [r3, #0]
 801c0f2:	2300      	movs	r3, #0
 801c0f4:	6123      	str	r3, [r4, #16]
 801c0f6:	4616      	mov	r6, r2
 801c0f8:	e7ba      	b.n	801c070 <_printf_i+0x150>
 801c0fa:	680b      	ldr	r3, [r1, #0]
 801c0fc:	1d1a      	adds	r2, r3, #4
 801c0fe:	600a      	str	r2, [r1, #0]
 801c100:	681e      	ldr	r6, [r3, #0]
 801c102:	6862      	ldr	r2, [r4, #4]
 801c104:	2100      	movs	r1, #0
 801c106:	4630      	mov	r0, r6
 801c108:	f7e4 f8e2 	bl	80002d0 <memchr>
 801c10c:	b108      	cbz	r0, 801c112 <_printf_i+0x1f2>
 801c10e:	1b80      	subs	r0, r0, r6
 801c110:	6060      	str	r0, [r4, #4]
 801c112:	6863      	ldr	r3, [r4, #4]
 801c114:	6123      	str	r3, [r4, #16]
 801c116:	2300      	movs	r3, #0
 801c118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c11c:	e7a8      	b.n	801c070 <_printf_i+0x150>
 801c11e:	6923      	ldr	r3, [r4, #16]
 801c120:	4632      	mov	r2, r6
 801c122:	4649      	mov	r1, r9
 801c124:	4640      	mov	r0, r8
 801c126:	47d0      	blx	sl
 801c128:	3001      	adds	r0, #1
 801c12a:	d0ab      	beq.n	801c084 <_printf_i+0x164>
 801c12c:	6823      	ldr	r3, [r4, #0]
 801c12e:	079b      	lsls	r3, r3, #30
 801c130:	d413      	bmi.n	801c15a <_printf_i+0x23a>
 801c132:	68e0      	ldr	r0, [r4, #12]
 801c134:	9b03      	ldr	r3, [sp, #12]
 801c136:	4298      	cmp	r0, r3
 801c138:	bfb8      	it	lt
 801c13a:	4618      	movlt	r0, r3
 801c13c:	e7a4      	b.n	801c088 <_printf_i+0x168>
 801c13e:	2301      	movs	r3, #1
 801c140:	4632      	mov	r2, r6
 801c142:	4649      	mov	r1, r9
 801c144:	4640      	mov	r0, r8
 801c146:	47d0      	blx	sl
 801c148:	3001      	adds	r0, #1
 801c14a:	d09b      	beq.n	801c084 <_printf_i+0x164>
 801c14c:	3501      	adds	r5, #1
 801c14e:	68e3      	ldr	r3, [r4, #12]
 801c150:	9903      	ldr	r1, [sp, #12]
 801c152:	1a5b      	subs	r3, r3, r1
 801c154:	42ab      	cmp	r3, r5
 801c156:	dcf2      	bgt.n	801c13e <_printf_i+0x21e>
 801c158:	e7eb      	b.n	801c132 <_printf_i+0x212>
 801c15a:	2500      	movs	r5, #0
 801c15c:	f104 0619 	add.w	r6, r4, #25
 801c160:	e7f5      	b.n	801c14e <_printf_i+0x22e>
 801c162:	bf00      	nop
 801c164:	0803262d 	.word	0x0803262d
 801c168:	0803263e 	.word	0x0803263e

0801c16c <_putc_r>:
 801c16c:	b570      	push	{r4, r5, r6, lr}
 801c16e:	460d      	mov	r5, r1
 801c170:	4614      	mov	r4, r2
 801c172:	4606      	mov	r6, r0
 801c174:	b118      	cbz	r0, 801c17e <_putc_r+0x12>
 801c176:	6983      	ldr	r3, [r0, #24]
 801c178:	b90b      	cbnz	r3, 801c17e <_putc_r+0x12>
 801c17a:	f7ff fa9d 	bl	801b6b8 <__sinit>
 801c17e:	4b1c      	ldr	r3, [pc, #112]	; (801c1f0 <_putc_r+0x84>)
 801c180:	429c      	cmp	r4, r3
 801c182:	d124      	bne.n	801c1ce <_putc_r+0x62>
 801c184:	6874      	ldr	r4, [r6, #4]
 801c186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c188:	07d8      	lsls	r0, r3, #31
 801c18a:	d405      	bmi.n	801c198 <_putc_r+0x2c>
 801c18c:	89a3      	ldrh	r3, [r4, #12]
 801c18e:	0599      	lsls	r1, r3, #22
 801c190:	d402      	bmi.n	801c198 <_putc_r+0x2c>
 801c192:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c194:	f7ff fb2e 	bl	801b7f4 <__retarget_lock_acquire_recursive>
 801c198:	68a3      	ldr	r3, [r4, #8]
 801c19a:	3b01      	subs	r3, #1
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	60a3      	str	r3, [r4, #8]
 801c1a0:	da05      	bge.n	801c1ae <_putc_r+0x42>
 801c1a2:	69a2      	ldr	r2, [r4, #24]
 801c1a4:	4293      	cmp	r3, r2
 801c1a6:	db1c      	blt.n	801c1e2 <_putc_r+0x76>
 801c1a8:	b2eb      	uxtb	r3, r5
 801c1aa:	2b0a      	cmp	r3, #10
 801c1ac:	d019      	beq.n	801c1e2 <_putc_r+0x76>
 801c1ae:	6823      	ldr	r3, [r4, #0]
 801c1b0:	1c5a      	adds	r2, r3, #1
 801c1b2:	6022      	str	r2, [r4, #0]
 801c1b4:	701d      	strb	r5, [r3, #0]
 801c1b6:	b2ed      	uxtb	r5, r5
 801c1b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c1ba:	07da      	lsls	r2, r3, #31
 801c1bc:	d405      	bmi.n	801c1ca <_putc_r+0x5e>
 801c1be:	89a3      	ldrh	r3, [r4, #12]
 801c1c0:	059b      	lsls	r3, r3, #22
 801c1c2:	d402      	bmi.n	801c1ca <_putc_r+0x5e>
 801c1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c1c6:	f7ff fb16 	bl	801b7f6 <__retarget_lock_release_recursive>
 801c1ca:	4628      	mov	r0, r5
 801c1cc:	bd70      	pop	{r4, r5, r6, pc}
 801c1ce:	4b09      	ldr	r3, [pc, #36]	; (801c1f4 <_putc_r+0x88>)
 801c1d0:	429c      	cmp	r4, r3
 801c1d2:	d101      	bne.n	801c1d8 <_putc_r+0x6c>
 801c1d4:	68b4      	ldr	r4, [r6, #8]
 801c1d6:	e7d6      	b.n	801c186 <_putc_r+0x1a>
 801c1d8:	4b07      	ldr	r3, [pc, #28]	; (801c1f8 <_putc_r+0x8c>)
 801c1da:	429c      	cmp	r4, r3
 801c1dc:	bf08      	it	eq
 801c1de:	68f4      	ldreq	r4, [r6, #12]
 801c1e0:	e7d1      	b.n	801c186 <_putc_r+0x1a>
 801c1e2:	4629      	mov	r1, r5
 801c1e4:	4622      	mov	r2, r4
 801c1e6:	4630      	mov	r0, r6
 801c1e8:	f7ff f88c 	bl	801b304 <__swbuf_r>
 801c1ec:	4605      	mov	r5, r0
 801c1ee:	e7e3      	b.n	801c1b8 <_putc_r+0x4c>
 801c1f0:	080325dc 	.word	0x080325dc
 801c1f4:	080325fc 	.word	0x080325fc
 801c1f8:	080325bc 	.word	0x080325bc

0801c1fc <__sread>:
 801c1fc:	b510      	push	{r4, lr}
 801c1fe:	460c      	mov	r4, r1
 801c200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c204:	f000 f8d4 	bl	801c3b0 <_read_r>
 801c208:	2800      	cmp	r0, #0
 801c20a:	bfab      	itete	ge
 801c20c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c20e:	89a3      	ldrhlt	r3, [r4, #12]
 801c210:	181b      	addge	r3, r3, r0
 801c212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c216:	bfac      	ite	ge
 801c218:	6563      	strge	r3, [r4, #84]	; 0x54
 801c21a:	81a3      	strhlt	r3, [r4, #12]
 801c21c:	bd10      	pop	{r4, pc}

0801c21e <__swrite>:
 801c21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c222:	461f      	mov	r7, r3
 801c224:	898b      	ldrh	r3, [r1, #12]
 801c226:	05db      	lsls	r3, r3, #23
 801c228:	4605      	mov	r5, r0
 801c22a:	460c      	mov	r4, r1
 801c22c:	4616      	mov	r6, r2
 801c22e:	d505      	bpl.n	801c23c <__swrite+0x1e>
 801c230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c234:	2302      	movs	r3, #2
 801c236:	2200      	movs	r2, #0
 801c238:	f000 f868 	bl	801c30c <_lseek_r>
 801c23c:	89a3      	ldrh	r3, [r4, #12]
 801c23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c246:	81a3      	strh	r3, [r4, #12]
 801c248:	4632      	mov	r2, r6
 801c24a:	463b      	mov	r3, r7
 801c24c:	4628      	mov	r0, r5
 801c24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c252:	f000 b817 	b.w	801c284 <_write_r>

0801c256 <__sseek>:
 801c256:	b510      	push	{r4, lr}
 801c258:	460c      	mov	r4, r1
 801c25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c25e:	f000 f855 	bl	801c30c <_lseek_r>
 801c262:	1c43      	adds	r3, r0, #1
 801c264:	89a3      	ldrh	r3, [r4, #12]
 801c266:	bf15      	itete	ne
 801c268:	6560      	strne	r0, [r4, #84]	; 0x54
 801c26a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c26e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c272:	81a3      	strheq	r3, [r4, #12]
 801c274:	bf18      	it	ne
 801c276:	81a3      	strhne	r3, [r4, #12]
 801c278:	bd10      	pop	{r4, pc}

0801c27a <__sclose>:
 801c27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c27e:	f000 b813 	b.w	801c2a8 <_close_r>
	...

0801c284 <_write_r>:
 801c284:	b538      	push	{r3, r4, r5, lr}
 801c286:	4d07      	ldr	r5, [pc, #28]	; (801c2a4 <_write_r+0x20>)
 801c288:	4604      	mov	r4, r0
 801c28a:	4608      	mov	r0, r1
 801c28c:	4611      	mov	r1, r2
 801c28e:	2200      	movs	r2, #0
 801c290:	602a      	str	r2, [r5, #0]
 801c292:	461a      	mov	r2, r3
 801c294:	f7e8 f9c9 	bl	800462a <_write>
 801c298:	1c43      	adds	r3, r0, #1
 801c29a:	d102      	bne.n	801c2a2 <_write_r+0x1e>
 801c29c:	682b      	ldr	r3, [r5, #0]
 801c29e:	b103      	cbz	r3, 801c2a2 <_write_r+0x1e>
 801c2a0:	6023      	str	r3, [r4, #0]
 801c2a2:	bd38      	pop	{r3, r4, r5, pc}
 801c2a4:	2004b020 	.word	0x2004b020

0801c2a8 <_close_r>:
 801c2a8:	b538      	push	{r3, r4, r5, lr}
 801c2aa:	4d06      	ldr	r5, [pc, #24]	; (801c2c4 <_close_r+0x1c>)
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	4604      	mov	r4, r0
 801c2b0:	4608      	mov	r0, r1
 801c2b2:	602b      	str	r3, [r5, #0]
 801c2b4:	f7e8 f9d5 	bl	8004662 <_close>
 801c2b8:	1c43      	adds	r3, r0, #1
 801c2ba:	d102      	bne.n	801c2c2 <_close_r+0x1a>
 801c2bc:	682b      	ldr	r3, [r5, #0]
 801c2be:	b103      	cbz	r3, 801c2c2 <_close_r+0x1a>
 801c2c0:	6023      	str	r3, [r4, #0]
 801c2c2:	bd38      	pop	{r3, r4, r5, pc}
 801c2c4:	2004b020 	.word	0x2004b020

0801c2c8 <_fstat_r>:
 801c2c8:	b538      	push	{r3, r4, r5, lr}
 801c2ca:	4d07      	ldr	r5, [pc, #28]	; (801c2e8 <_fstat_r+0x20>)
 801c2cc:	2300      	movs	r3, #0
 801c2ce:	4604      	mov	r4, r0
 801c2d0:	4608      	mov	r0, r1
 801c2d2:	4611      	mov	r1, r2
 801c2d4:	602b      	str	r3, [r5, #0]
 801c2d6:	f7e8 f9d0 	bl	800467a <_fstat>
 801c2da:	1c43      	adds	r3, r0, #1
 801c2dc:	d102      	bne.n	801c2e4 <_fstat_r+0x1c>
 801c2de:	682b      	ldr	r3, [r5, #0]
 801c2e0:	b103      	cbz	r3, 801c2e4 <_fstat_r+0x1c>
 801c2e2:	6023      	str	r3, [r4, #0]
 801c2e4:	bd38      	pop	{r3, r4, r5, pc}
 801c2e6:	bf00      	nop
 801c2e8:	2004b020 	.word	0x2004b020

0801c2ec <_isatty_r>:
 801c2ec:	b538      	push	{r3, r4, r5, lr}
 801c2ee:	4d06      	ldr	r5, [pc, #24]	; (801c308 <_isatty_r+0x1c>)
 801c2f0:	2300      	movs	r3, #0
 801c2f2:	4604      	mov	r4, r0
 801c2f4:	4608      	mov	r0, r1
 801c2f6:	602b      	str	r3, [r5, #0]
 801c2f8:	f7e8 f9cf 	bl	800469a <_isatty>
 801c2fc:	1c43      	adds	r3, r0, #1
 801c2fe:	d102      	bne.n	801c306 <_isatty_r+0x1a>
 801c300:	682b      	ldr	r3, [r5, #0]
 801c302:	b103      	cbz	r3, 801c306 <_isatty_r+0x1a>
 801c304:	6023      	str	r3, [r4, #0]
 801c306:	bd38      	pop	{r3, r4, r5, pc}
 801c308:	2004b020 	.word	0x2004b020

0801c30c <_lseek_r>:
 801c30c:	b538      	push	{r3, r4, r5, lr}
 801c30e:	4d07      	ldr	r5, [pc, #28]	; (801c32c <_lseek_r+0x20>)
 801c310:	4604      	mov	r4, r0
 801c312:	4608      	mov	r0, r1
 801c314:	4611      	mov	r1, r2
 801c316:	2200      	movs	r2, #0
 801c318:	602a      	str	r2, [r5, #0]
 801c31a:	461a      	mov	r2, r3
 801c31c:	f7e8 f9c8 	bl	80046b0 <_lseek>
 801c320:	1c43      	adds	r3, r0, #1
 801c322:	d102      	bne.n	801c32a <_lseek_r+0x1e>
 801c324:	682b      	ldr	r3, [r5, #0]
 801c326:	b103      	cbz	r3, 801c32a <_lseek_r+0x1e>
 801c328:	6023      	str	r3, [r4, #0]
 801c32a:	bd38      	pop	{r3, r4, r5, pc}
 801c32c:	2004b020 	.word	0x2004b020

0801c330 <memmove>:
 801c330:	4288      	cmp	r0, r1
 801c332:	b510      	push	{r4, lr}
 801c334:	eb01 0402 	add.w	r4, r1, r2
 801c338:	d902      	bls.n	801c340 <memmove+0x10>
 801c33a:	4284      	cmp	r4, r0
 801c33c:	4623      	mov	r3, r4
 801c33e:	d807      	bhi.n	801c350 <memmove+0x20>
 801c340:	1e43      	subs	r3, r0, #1
 801c342:	42a1      	cmp	r1, r4
 801c344:	d008      	beq.n	801c358 <memmove+0x28>
 801c346:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c34a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c34e:	e7f8      	b.n	801c342 <memmove+0x12>
 801c350:	4402      	add	r2, r0
 801c352:	4601      	mov	r1, r0
 801c354:	428a      	cmp	r2, r1
 801c356:	d100      	bne.n	801c35a <memmove+0x2a>
 801c358:	bd10      	pop	{r4, pc}
 801c35a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c35e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c362:	e7f7      	b.n	801c354 <memmove+0x24>

0801c364 <_realloc_r>:
 801c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c366:	4607      	mov	r7, r0
 801c368:	4614      	mov	r4, r2
 801c36a:	460e      	mov	r6, r1
 801c36c:	b921      	cbnz	r1, 801c378 <_realloc_r+0x14>
 801c36e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c372:	4611      	mov	r1, r2
 801c374:	f7fe be98 	b.w	801b0a8 <_malloc_r>
 801c378:	b922      	cbnz	r2, 801c384 <_realloc_r+0x20>
 801c37a:	f7fe fe45 	bl	801b008 <_free_r>
 801c37e:	4625      	mov	r5, r4
 801c380:	4628      	mov	r0, r5
 801c382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c384:	f000 f826 	bl	801c3d4 <_malloc_usable_size_r>
 801c388:	42a0      	cmp	r0, r4
 801c38a:	d20f      	bcs.n	801c3ac <_realloc_r+0x48>
 801c38c:	4621      	mov	r1, r4
 801c38e:	4638      	mov	r0, r7
 801c390:	f7fe fe8a 	bl	801b0a8 <_malloc_r>
 801c394:	4605      	mov	r5, r0
 801c396:	2800      	cmp	r0, #0
 801c398:	d0f2      	beq.n	801c380 <_realloc_r+0x1c>
 801c39a:	4631      	mov	r1, r6
 801c39c:	4622      	mov	r2, r4
 801c39e:	f7fe fe1d 	bl	801afdc <memcpy>
 801c3a2:	4631      	mov	r1, r6
 801c3a4:	4638      	mov	r0, r7
 801c3a6:	f7fe fe2f 	bl	801b008 <_free_r>
 801c3aa:	e7e9      	b.n	801c380 <_realloc_r+0x1c>
 801c3ac:	4635      	mov	r5, r6
 801c3ae:	e7e7      	b.n	801c380 <_realloc_r+0x1c>

0801c3b0 <_read_r>:
 801c3b0:	b538      	push	{r3, r4, r5, lr}
 801c3b2:	4d07      	ldr	r5, [pc, #28]	; (801c3d0 <_read_r+0x20>)
 801c3b4:	4604      	mov	r4, r0
 801c3b6:	4608      	mov	r0, r1
 801c3b8:	4611      	mov	r1, r2
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	602a      	str	r2, [r5, #0]
 801c3be:	461a      	mov	r2, r3
 801c3c0:	f7e8 f916 	bl	80045f0 <_read>
 801c3c4:	1c43      	adds	r3, r0, #1
 801c3c6:	d102      	bne.n	801c3ce <_read_r+0x1e>
 801c3c8:	682b      	ldr	r3, [r5, #0]
 801c3ca:	b103      	cbz	r3, 801c3ce <_read_r+0x1e>
 801c3cc:	6023      	str	r3, [r4, #0]
 801c3ce:	bd38      	pop	{r3, r4, r5, pc}
 801c3d0:	2004b020 	.word	0x2004b020

0801c3d4 <_malloc_usable_size_r>:
 801c3d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c3d8:	1f18      	subs	r0, r3, #4
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	bfbc      	itt	lt
 801c3de:	580b      	ldrlt	r3, [r1, r0]
 801c3e0:	18c0      	addlt	r0, r0, r3
 801c3e2:	4770      	bx	lr

0801c3e4 <sqrtf>:
 801c3e4:	b508      	push	{r3, lr}
 801c3e6:	ed2d 8b02 	vpush	{d8}
 801c3ea:	eeb0 8a40 	vmov.f32	s16, s0
 801c3ee:	f000 f81f 	bl	801c430 <__ieee754_sqrtf>
 801c3f2:	4b0d      	ldr	r3, [pc, #52]	; (801c428 <sqrtf+0x44>)
 801c3f4:	f993 3000 	ldrsb.w	r3, [r3]
 801c3f8:	3301      	adds	r3, #1
 801c3fa:	d011      	beq.n	801c420 <sqrtf+0x3c>
 801c3fc:	eeb4 8a48 	vcmp.f32	s16, s16
 801c400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c404:	d60c      	bvs.n	801c420 <sqrtf+0x3c>
 801c406:	eddf 8a09 	vldr	s17, [pc, #36]	; 801c42c <sqrtf+0x48>
 801c40a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801c40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c412:	d505      	bpl.n	801c420 <sqrtf+0x3c>
 801c414:	f7fe fda8 	bl	801af68 <__errno>
 801c418:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801c41c:	2321      	movs	r3, #33	; 0x21
 801c41e:	6003      	str	r3, [r0, #0]
 801c420:	ecbd 8b02 	vpop	{d8}
 801c424:	bd08      	pop	{r3, pc}
 801c426:	bf00      	nop
 801c428:	200000c4 	.word	0x200000c4
 801c42c:	00000000 	.word	0x00000000

0801c430 <__ieee754_sqrtf>:
 801c430:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c434:	4770      	bx	lr
	...

0801c438 <_init>:
 801c438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c43a:	bf00      	nop
 801c43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c43e:	bc08      	pop	{r3}
 801c440:	469e      	mov	lr, r3
 801c442:	4770      	bx	lr

0801c444 <_fini>:
 801c444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c446:	bf00      	nop
 801c448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c44a:	bc08      	pop	{r3}
 801c44c:	469e      	mov	lr, r3
 801c44e:	4770      	bx	lr
